
Projeto6_FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007e88  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c8  08008058  08008058  00018058  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008220  08008220  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08008220  08008220  00018220  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008228  08008228  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008228  08008228  00018228  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800822c  0800822c  0001822c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08008230  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004b08  20000014  08008244  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004b1c  08008244  00024b1c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002314e  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003f05  00000000  00000000  00043192  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001810  00000000  00000000  00047098  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000016d0  00000000  00000000  000488a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025081  00000000  00000000  00049f78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c624  00000000  00000000  0006eff9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000deb2b  00000000  00000000  0008b61d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0016a148  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006764  00000000  00000000  0016a19c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000014 	.word	0x20000014
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08008040 	.word	0x08008040

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000018 	.word	0x20000018
 800020c:	08008040 	.word	0x08008040

08000210 <__aeabi_drsub>:
 8000210:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000214:	e002      	b.n	800021c <__adddf3>
 8000216:	bf00      	nop

08000218 <__aeabi_dsub>:
 8000218:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800021c <__adddf3>:
 800021c:	b530      	push	{r4, r5, lr}
 800021e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000222:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000226:	ea94 0f05 	teq	r4, r5
 800022a:	bf08      	it	eq
 800022c:	ea90 0f02 	teqeq	r0, r2
 8000230:	bf1f      	itttt	ne
 8000232:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000236:	ea55 0c02 	orrsne.w	ip, r5, r2
 800023a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800023e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000242:	f000 80e2 	beq.w	800040a <__adddf3+0x1ee>
 8000246:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800024a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800024e:	bfb8      	it	lt
 8000250:	426d      	neglt	r5, r5
 8000252:	dd0c      	ble.n	800026e <__adddf3+0x52>
 8000254:	442c      	add	r4, r5
 8000256:	ea80 0202 	eor.w	r2, r0, r2
 800025a:	ea81 0303 	eor.w	r3, r1, r3
 800025e:	ea82 0000 	eor.w	r0, r2, r0
 8000262:	ea83 0101 	eor.w	r1, r3, r1
 8000266:	ea80 0202 	eor.w	r2, r0, r2
 800026a:	ea81 0303 	eor.w	r3, r1, r3
 800026e:	2d36      	cmp	r5, #54	; 0x36
 8000270:	bf88      	it	hi
 8000272:	bd30      	pophi	{r4, r5, pc}
 8000274:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000278:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800027c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000280:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000284:	d002      	beq.n	800028c <__adddf3+0x70>
 8000286:	4240      	negs	r0, r0
 8000288:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800028c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000290:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000294:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000298:	d002      	beq.n	80002a0 <__adddf3+0x84>
 800029a:	4252      	negs	r2, r2
 800029c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a0:	ea94 0f05 	teq	r4, r5
 80002a4:	f000 80a7 	beq.w	80003f6 <__adddf3+0x1da>
 80002a8:	f1a4 0401 	sub.w	r4, r4, #1
 80002ac:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b0:	db0d      	blt.n	80002ce <__adddf3+0xb2>
 80002b2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002b6:	fa22 f205 	lsr.w	r2, r2, r5
 80002ba:	1880      	adds	r0, r0, r2
 80002bc:	f141 0100 	adc.w	r1, r1, #0
 80002c0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002c4:	1880      	adds	r0, r0, r2
 80002c6:	fa43 f305 	asr.w	r3, r3, r5
 80002ca:	4159      	adcs	r1, r3
 80002cc:	e00e      	b.n	80002ec <__adddf3+0xd0>
 80002ce:	f1a5 0520 	sub.w	r5, r5, #32
 80002d2:	f10e 0e20 	add.w	lr, lr, #32
 80002d6:	2a01      	cmp	r2, #1
 80002d8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002dc:	bf28      	it	cs
 80002de:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002e2:	fa43 f305 	asr.w	r3, r3, r5
 80002e6:	18c0      	adds	r0, r0, r3
 80002e8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f0:	d507      	bpl.n	8000302 <__adddf3+0xe6>
 80002f2:	f04f 0e00 	mov.w	lr, #0
 80002f6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002fa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002fe:	eb6e 0101 	sbc.w	r1, lr, r1
 8000302:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000306:	d31b      	bcc.n	8000340 <__adddf3+0x124>
 8000308:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800030c:	d30c      	bcc.n	8000328 <__adddf3+0x10c>
 800030e:	0849      	lsrs	r1, r1, #1
 8000310:	ea5f 0030 	movs.w	r0, r0, rrx
 8000314:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000318:	f104 0401 	add.w	r4, r4, #1
 800031c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000320:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000324:	f080 809a 	bcs.w	800045c <__adddf3+0x240>
 8000328:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800032c:	bf08      	it	eq
 800032e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000332:	f150 0000 	adcs.w	r0, r0, #0
 8000336:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800033a:	ea41 0105 	orr.w	r1, r1, r5
 800033e:	bd30      	pop	{r4, r5, pc}
 8000340:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000344:	4140      	adcs	r0, r0
 8000346:	eb41 0101 	adc.w	r1, r1, r1
 800034a:	3c01      	subs	r4, #1
 800034c:	bf28      	it	cs
 800034e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000352:	d2e9      	bcs.n	8000328 <__adddf3+0x10c>
 8000354:	f091 0f00 	teq	r1, #0
 8000358:	bf04      	itt	eq
 800035a:	4601      	moveq	r1, r0
 800035c:	2000      	moveq	r0, #0
 800035e:	fab1 f381 	clz	r3, r1
 8000362:	bf08      	it	eq
 8000364:	3320      	addeq	r3, #32
 8000366:	f1a3 030b 	sub.w	r3, r3, #11
 800036a:	f1b3 0220 	subs.w	r2, r3, #32
 800036e:	da0c      	bge.n	800038a <__adddf3+0x16e>
 8000370:	320c      	adds	r2, #12
 8000372:	dd08      	ble.n	8000386 <__adddf3+0x16a>
 8000374:	f102 0c14 	add.w	ip, r2, #20
 8000378:	f1c2 020c 	rsb	r2, r2, #12
 800037c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000380:	fa21 f102 	lsr.w	r1, r1, r2
 8000384:	e00c      	b.n	80003a0 <__adddf3+0x184>
 8000386:	f102 0214 	add.w	r2, r2, #20
 800038a:	bfd8      	it	le
 800038c:	f1c2 0c20 	rsble	ip, r2, #32
 8000390:	fa01 f102 	lsl.w	r1, r1, r2
 8000394:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000398:	bfdc      	itt	le
 800039a:	ea41 010c 	orrle.w	r1, r1, ip
 800039e:	4090      	lslle	r0, r2
 80003a0:	1ae4      	subs	r4, r4, r3
 80003a2:	bfa2      	ittt	ge
 80003a4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a8:	4329      	orrge	r1, r5
 80003aa:	bd30      	popge	{r4, r5, pc}
 80003ac:	ea6f 0404 	mvn.w	r4, r4
 80003b0:	3c1f      	subs	r4, #31
 80003b2:	da1c      	bge.n	80003ee <__adddf3+0x1d2>
 80003b4:	340c      	adds	r4, #12
 80003b6:	dc0e      	bgt.n	80003d6 <__adddf3+0x1ba>
 80003b8:	f104 0414 	add.w	r4, r4, #20
 80003bc:	f1c4 0220 	rsb	r2, r4, #32
 80003c0:	fa20 f004 	lsr.w	r0, r0, r4
 80003c4:	fa01 f302 	lsl.w	r3, r1, r2
 80003c8:	ea40 0003 	orr.w	r0, r0, r3
 80003cc:	fa21 f304 	lsr.w	r3, r1, r4
 80003d0:	ea45 0103 	orr.w	r1, r5, r3
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f1c4 040c 	rsb	r4, r4, #12
 80003da:	f1c4 0220 	rsb	r2, r4, #32
 80003de:	fa20 f002 	lsr.w	r0, r0, r2
 80003e2:	fa01 f304 	lsl.w	r3, r1, r4
 80003e6:	ea40 0003 	orr.w	r0, r0, r3
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	fa21 f004 	lsr.w	r0, r1, r4
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f094 0f00 	teq	r4, #0
 80003fa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003fe:	bf06      	itte	eq
 8000400:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000404:	3401      	addeq	r4, #1
 8000406:	3d01      	subne	r5, #1
 8000408:	e74e      	b.n	80002a8 <__adddf3+0x8c>
 800040a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800040e:	bf18      	it	ne
 8000410:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000414:	d029      	beq.n	800046a <__adddf3+0x24e>
 8000416:	ea94 0f05 	teq	r4, r5
 800041a:	bf08      	it	eq
 800041c:	ea90 0f02 	teqeq	r0, r2
 8000420:	d005      	beq.n	800042e <__adddf3+0x212>
 8000422:	ea54 0c00 	orrs.w	ip, r4, r0
 8000426:	bf04      	itt	eq
 8000428:	4619      	moveq	r1, r3
 800042a:	4610      	moveq	r0, r2
 800042c:	bd30      	pop	{r4, r5, pc}
 800042e:	ea91 0f03 	teq	r1, r3
 8000432:	bf1e      	ittt	ne
 8000434:	2100      	movne	r1, #0
 8000436:	2000      	movne	r0, #0
 8000438:	bd30      	popne	{r4, r5, pc}
 800043a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800043e:	d105      	bne.n	800044c <__adddf3+0x230>
 8000440:	0040      	lsls	r0, r0, #1
 8000442:	4149      	adcs	r1, r1
 8000444:	bf28      	it	cs
 8000446:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800044a:	bd30      	pop	{r4, r5, pc}
 800044c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000450:	bf3c      	itt	cc
 8000452:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000456:	bd30      	popcc	{r4, r5, pc}
 8000458:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800045c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000460:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000464:	f04f 0000 	mov.w	r0, #0
 8000468:	bd30      	pop	{r4, r5, pc}
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf1a      	itte	ne
 8000470:	4619      	movne	r1, r3
 8000472:	4610      	movne	r0, r2
 8000474:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000478:	bf1c      	itt	ne
 800047a:	460b      	movne	r3, r1
 800047c:	4602      	movne	r2, r0
 800047e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000482:	bf06      	itte	eq
 8000484:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000488:	ea91 0f03 	teqeq	r1, r3
 800048c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	bf00      	nop

08000494 <__aeabi_ui2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a8:	f04f 0500 	mov.w	r5, #0
 80004ac:	f04f 0100 	mov.w	r1, #0
 80004b0:	e750      	b.n	8000354 <__adddf3+0x138>
 80004b2:	bf00      	nop

080004b4 <__aeabi_i2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004cc:	bf48      	it	mi
 80004ce:	4240      	negmi	r0, r0
 80004d0:	f04f 0100 	mov.w	r1, #0
 80004d4:	e73e      	b.n	8000354 <__adddf3+0x138>
 80004d6:	bf00      	nop

080004d8 <__aeabi_f2d>:
 80004d8:	0042      	lsls	r2, r0, #1
 80004da:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004de:	ea4f 0131 	mov.w	r1, r1, rrx
 80004e2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004e6:	bf1f      	itttt	ne
 80004e8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ec:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004f4:	4770      	bxne	lr
 80004f6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004fa:	bf08      	it	eq
 80004fc:	4770      	bxeq	lr
 80004fe:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000502:	bf04      	itt	eq
 8000504:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000508:	4770      	bxeq	lr
 800050a:	b530      	push	{r4, r5, lr}
 800050c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000510:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000514:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000518:	e71c      	b.n	8000354 <__adddf3+0x138>
 800051a:	bf00      	nop

0800051c <__aeabi_ul2d>:
 800051c:	ea50 0201 	orrs.w	r2, r0, r1
 8000520:	bf08      	it	eq
 8000522:	4770      	bxeq	lr
 8000524:	b530      	push	{r4, r5, lr}
 8000526:	f04f 0500 	mov.w	r5, #0
 800052a:	e00a      	b.n	8000542 <__aeabi_l2d+0x16>

0800052c <__aeabi_l2d>:
 800052c:	ea50 0201 	orrs.w	r2, r0, r1
 8000530:	bf08      	it	eq
 8000532:	4770      	bxeq	lr
 8000534:	b530      	push	{r4, r5, lr}
 8000536:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800053a:	d502      	bpl.n	8000542 <__aeabi_l2d+0x16>
 800053c:	4240      	negs	r0, r0
 800053e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000542:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000546:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800054a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800054e:	f43f aed8 	beq.w	8000302 <__adddf3+0xe6>
 8000552:	f04f 0203 	mov.w	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800056a:	f1c2 0320 	rsb	r3, r2, #32
 800056e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000572:	fa20 f002 	lsr.w	r0, r0, r2
 8000576:	fa01 fe03 	lsl.w	lr, r1, r3
 800057a:	ea40 000e 	orr.w	r0, r0, lr
 800057e:	fa21 f102 	lsr.w	r1, r1, r2
 8000582:	4414      	add	r4, r2
 8000584:	e6bd      	b.n	8000302 <__adddf3+0xe6>
 8000586:	bf00      	nop

08000588 <__aeabi_dmul>:
 8000588:	b570      	push	{r4, r5, r6, lr}
 800058a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800058e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000592:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000596:	bf1d      	ittte	ne
 8000598:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800059c:	ea94 0f0c 	teqne	r4, ip
 80005a0:	ea95 0f0c 	teqne	r5, ip
 80005a4:	f000 f8de 	bleq	8000764 <__aeabi_dmul+0x1dc>
 80005a8:	442c      	add	r4, r5
 80005aa:	ea81 0603 	eor.w	r6, r1, r3
 80005ae:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005b2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005b6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ba:	bf18      	it	ne
 80005bc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005c8:	d038      	beq.n	800063c <__aeabi_dmul+0xb4>
 80005ca:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ce:	f04f 0500 	mov.w	r5, #0
 80005d2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005d6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005da:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005de:	f04f 0600 	mov.w	r6, #0
 80005e2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005e6:	f09c 0f00 	teq	ip, #0
 80005ea:	bf18      	it	ne
 80005ec:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005f4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005f8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005fc:	d204      	bcs.n	8000608 <__aeabi_dmul+0x80>
 80005fe:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000602:	416d      	adcs	r5, r5
 8000604:	eb46 0606 	adc.w	r6, r6, r6
 8000608:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800060c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000610:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000614:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000618:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800061c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000620:	bf88      	it	hi
 8000622:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000626:	d81e      	bhi.n	8000666 <__aeabi_dmul+0xde>
 8000628:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800062c:	bf08      	it	eq
 800062e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000632:	f150 0000 	adcs.w	r0, r0, #0
 8000636:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000640:	ea46 0101 	orr.w	r1, r6, r1
 8000644:	ea40 0002 	orr.w	r0, r0, r2
 8000648:	ea81 0103 	eor.w	r1, r1, r3
 800064c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000650:	bfc2      	ittt	gt
 8000652:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000656:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800065a:	bd70      	popgt	{r4, r5, r6, pc}
 800065c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000660:	f04f 0e00 	mov.w	lr, #0
 8000664:	3c01      	subs	r4, #1
 8000666:	f300 80ab 	bgt.w	80007c0 <__aeabi_dmul+0x238>
 800066a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800066e:	bfde      	ittt	le
 8000670:	2000      	movle	r0, #0
 8000672:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000676:	bd70      	pople	{r4, r5, r6, pc}
 8000678:	f1c4 0400 	rsb	r4, r4, #0
 800067c:	3c20      	subs	r4, #32
 800067e:	da35      	bge.n	80006ec <__aeabi_dmul+0x164>
 8000680:	340c      	adds	r4, #12
 8000682:	dc1b      	bgt.n	80006bc <__aeabi_dmul+0x134>
 8000684:	f104 0414 	add.w	r4, r4, #20
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f305 	lsl.w	r3, r0, r5
 8000690:	fa20 f004 	lsr.w	r0, r0, r4
 8000694:	fa01 f205 	lsl.w	r2, r1, r5
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006a4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a8:	fa21 f604 	lsr.w	r6, r1, r4
 80006ac:	eb42 0106 	adc.w	r1, r2, r6
 80006b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b4:	bf08      	it	eq
 80006b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f1c4 040c 	rsb	r4, r4, #12
 80006c0:	f1c4 0520 	rsb	r5, r4, #32
 80006c4:	fa00 f304 	lsl.w	r3, r0, r4
 80006c8:	fa20 f005 	lsr.w	r0, r0, r5
 80006cc:	fa01 f204 	lsl.w	r2, r1, r4
 80006d0:	ea40 0002 	orr.w	r0, r0, r2
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006dc:	f141 0100 	adc.w	r1, r1, #0
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f1c4 0520 	rsb	r5, r4, #32
 80006f0:	fa00 f205 	lsl.w	r2, r0, r5
 80006f4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f8:	fa20 f304 	lsr.w	r3, r0, r4
 80006fc:	fa01 f205 	lsl.w	r2, r1, r5
 8000700:	ea43 0302 	orr.w	r3, r3, r2
 8000704:	fa21 f004 	lsr.w	r0, r1, r4
 8000708:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800070c:	fa21 f204 	lsr.w	r2, r1, r4
 8000710:	ea20 0002 	bic.w	r0, r0, r2
 8000714:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000718:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800071c:	bf08      	it	eq
 800071e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000722:	bd70      	pop	{r4, r5, r6, pc}
 8000724:	f094 0f00 	teq	r4, #0
 8000728:	d10f      	bne.n	800074a <__aeabi_dmul+0x1c2>
 800072a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800072e:	0040      	lsls	r0, r0, #1
 8000730:	eb41 0101 	adc.w	r1, r1, r1
 8000734:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000738:	bf08      	it	eq
 800073a:	3c01      	subeq	r4, #1
 800073c:	d0f7      	beq.n	800072e <__aeabi_dmul+0x1a6>
 800073e:	ea41 0106 	orr.w	r1, r1, r6
 8000742:	f095 0f00 	teq	r5, #0
 8000746:	bf18      	it	ne
 8000748:	4770      	bxne	lr
 800074a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800074e:	0052      	lsls	r2, r2, #1
 8000750:	eb43 0303 	adc.w	r3, r3, r3
 8000754:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000758:	bf08      	it	eq
 800075a:	3d01      	subeq	r5, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1c6>
 800075e:	ea43 0306 	orr.w	r3, r3, r6
 8000762:	4770      	bx	lr
 8000764:	ea94 0f0c 	teq	r4, ip
 8000768:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800076c:	bf18      	it	ne
 800076e:	ea95 0f0c 	teqne	r5, ip
 8000772:	d00c      	beq.n	800078e <__aeabi_dmul+0x206>
 8000774:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000778:	bf18      	it	ne
 800077a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800077e:	d1d1      	bne.n	8000724 <__aeabi_dmul+0x19c>
 8000780:	ea81 0103 	eor.w	r1, r1, r3
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	f04f 0000 	mov.w	r0, #0
 800078c:	bd70      	pop	{r4, r5, r6, pc}
 800078e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000792:	bf06      	itte	eq
 8000794:	4610      	moveq	r0, r2
 8000796:	4619      	moveq	r1, r3
 8000798:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079c:	d019      	beq.n	80007d2 <__aeabi_dmul+0x24a>
 800079e:	ea94 0f0c 	teq	r4, ip
 80007a2:	d102      	bne.n	80007aa <__aeabi_dmul+0x222>
 80007a4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a8:	d113      	bne.n	80007d2 <__aeabi_dmul+0x24a>
 80007aa:	ea95 0f0c 	teq	r5, ip
 80007ae:	d105      	bne.n	80007bc <__aeabi_dmul+0x234>
 80007b0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007b4:	bf1c      	itt	ne
 80007b6:	4610      	movne	r0, r2
 80007b8:	4619      	movne	r1, r3
 80007ba:	d10a      	bne.n	80007d2 <__aeabi_dmul+0x24a>
 80007bc:	ea81 0103 	eor.w	r1, r1, r3
 80007c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007c4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007cc:	f04f 0000 	mov.w	r0, #0
 80007d0:	bd70      	pop	{r4, r5, r6, pc}
 80007d2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007da:	bd70      	pop	{r4, r5, r6, pc}

080007dc <__aeabi_ddiv>:
 80007dc:	b570      	push	{r4, r5, r6, lr}
 80007de:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007e2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007e6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ea:	bf1d      	ittte	ne
 80007ec:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f0:	ea94 0f0c 	teqne	r4, ip
 80007f4:	ea95 0f0c 	teqne	r5, ip
 80007f8:	f000 f8a7 	bleq	800094a <__aeabi_ddiv+0x16e>
 80007fc:	eba4 0405 	sub.w	r4, r4, r5
 8000800:	ea81 0e03 	eor.w	lr, r1, r3
 8000804:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000808:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800080c:	f000 8088 	beq.w	8000920 <__aeabi_ddiv+0x144>
 8000810:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000814:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000818:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800081c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000820:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000824:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000828:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800082c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000830:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000834:	429d      	cmp	r5, r3
 8000836:	bf08      	it	eq
 8000838:	4296      	cmpeq	r6, r2
 800083a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800083e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000842:	d202      	bcs.n	800084a <__aeabi_ddiv+0x6e>
 8000844:	085b      	lsrs	r3, r3, #1
 8000846:	ea4f 0232 	mov.w	r2, r2, rrx
 800084a:	1ab6      	subs	r6, r6, r2
 800084c:	eb65 0503 	sbc.w	r5, r5, r3
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800085a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000888:	085b      	lsrs	r3, r3, #1
 800088a:	ea4f 0232 	mov.w	r2, r2, rrx
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008bc:	d018      	beq.n	80008f0 <__aeabi_ddiv+0x114>
 80008be:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008c2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008c6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ca:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ce:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008d2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008d6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008da:	d1c0      	bne.n	800085e <__aeabi_ddiv+0x82>
 80008dc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e0:	d10b      	bne.n	80008fa <__aeabi_ddiv+0x11e>
 80008e2:	ea41 0100 	orr.w	r1, r1, r0
 80008e6:	f04f 0000 	mov.w	r0, #0
 80008ea:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ee:	e7b6      	b.n	800085e <__aeabi_ddiv+0x82>
 80008f0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008f4:	bf04      	itt	eq
 80008f6:	4301      	orreq	r1, r0
 80008f8:	2000      	moveq	r0, #0
 80008fa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008fe:	bf88      	it	hi
 8000900:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000904:	f63f aeaf 	bhi.w	8000666 <__aeabi_dmul+0xde>
 8000908:	ebb5 0c03 	subs.w	ip, r5, r3
 800090c:	bf04      	itt	eq
 800090e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000912:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000916:	f150 0000 	adcs.w	r0, r0, #0
 800091a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800091e:	bd70      	pop	{r4, r5, r6, pc}
 8000920:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000924:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000928:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800092c:	bfc2      	ittt	gt
 800092e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000932:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000936:	bd70      	popgt	{r4, r5, r6, pc}
 8000938:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800093c:	f04f 0e00 	mov.w	lr, #0
 8000940:	3c01      	subs	r4, #1
 8000942:	e690      	b.n	8000666 <__aeabi_dmul+0xde>
 8000944:	ea45 0e06 	orr.w	lr, r5, r6
 8000948:	e68d      	b.n	8000666 <__aeabi_dmul+0xde>
 800094a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800094e:	ea94 0f0c 	teq	r4, ip
 8000952:	bf08      	it	eq
 8000954:	ea95 0f0c 	teqeq	r5, ip
 8000958:	f43f af3b 	beq.w	80007d2 <__aeabi_dmul+0x24a>
 800095c:	ea94 0f0c 	teq	r4, ip
 8000960:	d10a      	bne.n	8000978 <__aeabi_ddiv+0x19c>
 8000962:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000966:	f47f af34 	bne.w	80007d2 <__aeabi_dmul+0x24a>
 800096a:	ea95 0f0c 	teq	r5, ip
 800096e:	f47f af25 	bne.w	80007bc <__aeabi_dmul+0x234>
 8000972:	4610      	mov	r0, r2
 8000974:	4619      	mov	r1, r3
 8000976:	e72c      	b.n	80007d2 <__aeabi_dmul+0x24a>
 8000978:	ea95 0f0c 	teq	r5, ip
 800097c:	d106      	bne.n	800098c <__aeabi_ddiv+0x1b0>
 800097e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000982:	f43f aefd 	beq.w	8000780 <__aeabi_dmul+0x1f8>
 8000986:	4610      	mov	r0, r2
 8000988:	4619      	mov	r1, r3
 800098a:	e722      	b.n	80007d2 <__aeabi_dmul+0x24a>
 800098c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000990:	bf18      	it	ne
 8000992:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000996:	f47f aec5 	bne.w	8000724 <__aeabi_dmul+0x19c>
 800099a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800099e:	f47f af0d 	bne.w	80007bc <__aeabi_dmul+0x234>
 80009a2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009a6:	f47f aeeb 	bne.w	8000780 <__aeabi_dmul+0x1f8>
 80009aa:	e712      	b.n	80007d2 <__aeabi_dmul+0x24a>

080009ac <__aeabi_d2uiz>:
 80009ac:	004a      	lsls	r2, r1, #1
 80009ae:	d211      	bcs.n	80009d4 <__aeabi_d2uiz+0x28>
 80009b0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009b4:	d211      	bcs.n	80009da <__aeabi_d2uiz+0x2e>
 80009b6:	d50d      	bpl.n	80009d4 <__aeabi_d2uiz+0x28>
 80009b8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009bc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009c0:	d40e      	bmi.n	80009e0 <__aeabi_d2uiz+0x34>
 80009c2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009c6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009ca:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009ce:	fa23 f002 	lsr.w	r0, r3, r2
 80009d2:	4770      	bx	lr
 80009d4:	f04f 0000 	mov.w	r0, #0
 80009d8:	4770      	bx	lr
 80009da:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009de:	d102      	bne.n	80009e6 <__aeabi_d2uiz+0x3a>
 80009e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80009e4:	4770      	bx	lr
 80009e6:	f04f 0000 	mov.w	r0, #0
 80009ea:	4770      	bx	lr

080009ec <__aeabi_uldivmod>:
 80009ec:	b953      	cbnz	r3, 8000a04 <__aeabi_uldivmod+0x18>
 80009ee:	b94a      	cbnz	r2, 8000a04 <__aeabi_uldivmod+0x18>
 80009f0:	2900      	cmp	r1, #0
 80009f2:	bf08      	it	eq
 80009f4:	2800      	cmpeq	r0, #0
 80009f6:	bf1c      	itt	ne
 80009f8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80009fc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000a00:	f000 b96e 	b.w	8000ce0 <__aeabi_idiv0>
 8000a04:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a08:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a0c:	f000 f806 	bl	8000a1c <__udivmoddi4>
 8000a10:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a18:	b004      	add	sp, #16
 8000a1a:	4770      	bx	lr

08000a1c <__udivmoddi4>:
 8000a1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a20:	9d08      	ldr	r5, [sp, #32]
 8000a22:	4604      	mov	r4, r0
 8000a24:	468c      	mov	ip, r1
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	f040 8083 	bne.w	8000b32 <__udivmoddi4+0x116>
 8000a2c:	428a      	cmp	r2, r1
 8000a2e:	4617      	mov	r7, r2
 8000a30:	d947      	bls.n	8000ac2 <__udivmoddi4+0xa6>
 8000a32:	fab2 f282 	clz	r2, r2
 8000a36:	b142      	cbz	r2, 8000a4a <__udivmoddi4+0x2e>
 8000a38:	f1c2 0020 	rsb	r0, r2, #32
 8000a3c:	fa24 f000 	lsr.w	r0, r4, r0
 8000a40:	4091      	lsls	r1, r2
 8000a42:	4097      	lsls	r7, r2
 8000a44:	ea40 0c01 	orr.w	ip, r0, r1
 8000a48:	4094      	lsls	r4, r2
 8000a4a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000a4e:	0c23      	lsrs	r3, r4, #16
 8000a50:	fbbc f6f8 	udiv	r6, ip, r8
 8000a54:	fa1f fe87 	uxth.w	lr, r7
 8000a58:	fb08 c116 	mls	r1, r8, r6, ip
 8000a5c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a60:	fb06 f10e 	mul.w	r1, r6, lr
 8000a64:	4299      	cmp	r1, r3
 8000a66:	d909      	bls.n	8000a7c <__udivmoddi4+0x60>
 8000a68:	18fb      	adds	r3, r7, r3
 8000a6a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000a6e:	f080 8119 	bcs.w	8000ca4 <__udivmoddi4+0x288>
 8000a72:	4299      	cmp	r1, r3
 8000a74:	f240 8116 	bls.w	8000ca4 <__udivmoddi4+0x288>
 8000a78:	3e02      	subs	r6, #2
 8000a7a:	443b      	add	r3, r7
 8000a7c:	1a5b      	subs	r3, r3, r1
 8000a7e:	b2a4      	uxth	r4, r4
 8000a80:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a84:	fb08 3310 	mls	r3, r8, r0, r3
 8000a88:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a8c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000a90:	45a6      	cmp	lr, r4
 8000a92:	d909      	bls.n	8000aa8 <__udivmoddi4+0x8c>
 8000a94:	193c      	adds	r4, r7, r4
 8000a96:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000a9a:	f080 8105 	bcs.w	8000ca8 <__udivmoddi4+0x28c>
 8000a9e:	45a6      	cmp	lr, r4
 8000aa0:	f240 8102 	bls.w	8000ca8 <__udivmoddi4+0x28c>
 8000aa4:	3802      	subs	r0, #2
 8000aa6:	443c      	add	r4, r7
 8000aa8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000aac:	eba4 040e 	sub.w	r4, r4, lr
 8000ab0:	2600      	movs	r6, #0
 8000ab2:	b11d      	cbz	r5, 8000abc <__udivmoddi4+0xa0>
 8000ab4:	40d4      	lsrs	r4, r2
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	e9c5 4300 	strd	r4, r3, [r5]
 8000abc:	4631      	mov	r1, r6
 8000abe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ac2:	b902      	cbnz	r2, 8000ac6 <__udivmoddi4+0xaa>
 8000ac4:	deff      	udf	#255	; 0xff
 8000ac6:	fab2 f282 	clz	r2, r2
 8000aca:	2a00      	cmp	r2, #0
 8000acc:	d150      	bne.n	8000b70 <__udivmoddi4+0x154>
 8000ace:	1bcb      	subs	r3, r1, r7
 8000ad0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ad4:	fa1f f887 	uxth.w	r8, r7
 8000ad8:	2601      	movs	r6, #1
 8000ada:	fbb3 fcfe 	udiv	ip, r3, lr
 8000ade:	0c21      	lsrs	r1, r4, #16
 8000ae0:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ae4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ae8:	fb08 f30c 	mul.w	r3, r8, ip
 8000aec:	428b      	cmp	r3, r1
 8000aee:	d907      	bls.n	8000b00 <__udivmoddi4+0xe4>
 8000af0:	1879      	adds	r1, r7, r1
 8000af2:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000af6:	d202      	bcs.n	8000afe <__udivmoddi4+0xe2>
 8000af8:	428b      	cmp	r3, r1
 8000afa:	f200 80e9 	bhi.w	8000cd0 <__udivmoddi4+0x2b4>
 8000afe:	4684      	mov	ip, r0
 8000b00:	1ac9      	subs	r1, r1, r3
 8000b02:	b2a3      	uxth	r3, r4
 8000b04:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b08:	fb0e 1110 	mls	r1, lr, r0, r1
 8000b0c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000b10:	fb08 f800 	mul.w	r8, r8, r0
 8000b14:	45a0      	cmp	r8, r4
 8000b16:	d907      	bls.n	8000b28 <__udivmoddi4+0x10c>
 8000b18:	193c      	adds	r4, r7, r4
 8000b1a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000b1e:	d202      	bcs.n	8000b26 <__udivmoddi4+0x10a>
 8000b20:	45a0      	cmp	r8, r4
 8000b22:	f200 80d9 	bhi.w	8000cd8 <__udivmoddi4+0x2bc>
 8000b26:	4618      	mov	r0, r3
 8000b28:	eba4 0408 	sub.w	r4, r4, r8
 8000b2c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000b30:	e7bf      	b.n	8000ab2 <__udivmoddi4+0x96>
 8000b32:	428b      	cmp	r3, r1
 8000b34:	d909      	bls.n	8000b4a <__udivmoddi4+0x12e>
 8000b36:	2d00      	cmp	r5, #0
 8000b38:	f000 80b1 	beq.w	8000c9e <__udivmoddi4+0x282>
 8000b3c:	2600      	movs	r6, #0
 8000b3e:	e9c5 0100 	strd	r0, r1, [r5]
 8000b42:	4630      	mov	r0, r6
 8000b44:	4631      	mov	r1, r6
 8000b46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b4a:	fab3 f683 	clz	r6, r3
 8000b4e:	2e00      	cmp	r6, #0
 8000b50:	d14a      	bne.n	8000be8 <__udivmoddi4+0x1cc>
 8000b52:	428b      	cmp	r3, r1
 8000b54:	d302      	bcc.n	8000b5c <__udivmoddi4+0x140>
 8000b56:	4282      	cmp	r2, r0
 8000b58:	f200 80b8 	bhi.w	8000ccc <__udivmoddi4+0x2b0>
 8000b5c:	1a84      	subs	r4, r0, r2
 8000b5e:	eb61 0103 	sbc.w	r1, r1, r3
 8000b62:	2001      	movs	r0, #1
 8000b64:	468c      	mov	ip, r1
 8000b66:	2d00      	cmp	r5, #0
 8000b68:	d0a8      	beq.n	8000abc <__udivmoddi4+0xa0>
 8000b6a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000b6e:	e7a5      	b.n	8000abc <__udivmoddi4+0xa0>
 8000b70:	f1c2 0320 	rsb	r3, r2, #32
 8000b74:	fa20 f603 	lsr.w	r6, r0, r3
 8000b78:	4097      	lsls	r7, r2
 8000b7a:	fa01 f002 	lsl.w	r0, r1, r2
 8000b7e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b82:	40d9      	lsrs	r1, r3
 8000b84:	4330      	orrs	r0, r6
 8000b86:	0c03      	lsrs	r3, r0, #16
 8000b88:	fbb1 f6fe 	udiv	r6, r1, lr
 8000b8c:	fa1f f887 	uxth.w	r8, r7
 8000b90:	fb0e 1116 	mls	r1, lr, r6, r1
 8000b94:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b98:	fb06 f108 	mul.w	r1, r6, r8
 8000b9c:	4299      	cmp	r1, r3
 8000b9e:	fa04 f402 	lsl.w	r4, r4, r2
 8000ba2:	d909      	bls.n	8000bb8 <__udivmoddi4+0x19c>
 8000ba4:	18fb      	adds	r3, r7, r3
 8000ba6:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000baa:	f080 808d 	bcs.w	8000cc8 <__udivmoddi4+0x2ac>
 8000bae:	4299      	cmp	r1, r3
 8000bb0:	f240 808a 	bls.w	8000cc8 <__udivmoddi4+0x2ac>
 8000bb4:	3e02      	subs	r6, #2
 8000bb6:	443b      	add	r3, r7
 8000bb8:	1a5b      	subs	r3, r3, r1
 8000bba:	b281      	uxth	r1, r0
 8000bbc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000bc0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000bc4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000bc8:	fb00 f308 	mul.w	r3, r0, r8
 8000bcc:	428b      	cmp	r3, r1
 8000bce:	d907      	bls.n	8000be0 <__udivmoddi4+0x1c4>
 8000bd0:	1879      	adds	r1, r7, r1
 8000bd2:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000bd6:	d273      	bcs.n	8000cc0 <__udivmoddi4+0x2a4>
 8000bd8:	428b      	cmp	r3, r1
 8000bda:	d971      	bls.n	8000cc0 <__udivmoddi4+0x2a4>
 8000bdc:	3802      	subs	r0, #2
 8000bde:	4439      	add	r1, r7
 8000be0:	1acb      	subs	r3, r1, r3
 8000be2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000be6:	e778      	b.n	8000ada <__udivmoddi4+0xbe>
 8000be8:	f1c6 0c20 	rsb	ip, r6, #32
 8000bec:	fa03 f406 	lsl.w	r4, r3, r6
 8000bf0:	fa22 f30c 	lsr.w	r3, r2, ip
 8000bf4:	431c      	orrs	r4, r3
 8000bf6:	fa20 f70c 	lsr.w	r7, r0, ip
 8000bfa:	fa01 f306 	lsl.w	r3, r1, r6
 8000bfe:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000c02:	fa21 f10c 	lsr.w	r1, r1, ip
 8000c06:	431f      	orrs	r7, r3
 8000c08:	0c3b      	lsrs	r3, r7, #16
 8000c0a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000c0e:	fa1f f884 	uxth.w	r8, r4
 8000c12:	fb0e 1119 	mls	r1, lr, r9, r1
 8000c16:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000c1a:	fb09 fa08 	mul.w	sl, r9, r8
 8000c1e:	458a      	cmp	sl, r1
 8000c20:	fa02 f206 	lsl.w	r2, r2, r6
 8000c24:	fa00 f306 	lsl.w	r3, r0, r6
 8000c28:	d908      	bls.n	8000c3c <__udivmoddi4+0x220>
 8000c2a:	1861      	adds	r1, r4, r1
 8000c2c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000c30:	d248      	bcs.n	8000cc4 <__udivmoddi4+0x2a8>
 8000c32:	458a      	cmp	sl, r1
 8000c34:	d946      	bls.n	8000cc4 <__udivmoddi4+0x2a8>
 8000c36:	f1a9 0902 	sub.w	r9, r9, #2
 8000c3a:	4421      	add	r1, r4
 8000c3c:	eba1 010a 	sub.w	r1, r1, sl
 8000c40:	b2bf      	uxth	r7, r7
 8000c42:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c46:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c4a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000c4e:	fb00 f808 	mul.w	r8, r0, r8
 8000c52:	45b8      	cmp	r8, r7
 8000c54:	d907      	bls.n	8000c66 <__udivmoddi4+0x24a>
 8000c56:	19e7      	adds	r7, r4, r7
 8000c58:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000c5c:	d22e      	bcs.n	8000cbc <__udivmoddi4+0x2a0>
 8000c5e:	45b8      	cmp	r8, r7
 8000c60:	d92c      	bls.n	8000cbc <__udivmoddi4+0x2a0>
 8000c62:	3802      	subs	r0, #2
 8000c64:	4427      	add	r7, r4
 8000c66:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c6a:	eba7 0708 	sub.w	r7, r7, r8
 8000c6e:	fba0 8902 	umull	r8, r9, r0, r2
 8000c72:	454f      	cmp	r7, r9
 8000c74:	46c6      	mov	lr, r8
 8000c76:	4649      	mov	r1, r9
 8000c78:	d31a      	bcc.n	8000cb0 <__udivmoddi4+0x294>
 8000c7a:	d017      	beq.n	8000cac <__udivmoddi4+0x290>
 8000c7c:	b15d      	cbz	r5, 8000c96 <__udivmoddi4+0x27a>
 8000c7e:	ebb3 020e 	subs.w	r2, r3, lr
 8000c82:	eb67 0701 	sbc.w	r7, r7, r1
 8000c86:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000c8a:	40f2      	lsrs	r2, r6
 8000c8c:	ea4c 0202 	orr.w	r2, ip, r2
 8000c90:	40f7      	lsrs	r7, r6
 8000c92:	e9c5 2700 	strd	r2, r7, [r5]
 8000c96:	2600      	movs	r6, #0
 8000c98:	4631      	mov	r1, r6
 8000c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9e:	462e      	mov	r6, r5
 8000ca0:	4628      	mov	r0, r5
 8000ca2:	e70b      	b.n	8000abc <__udivmoddi4+0xa0>
 8000ca4:	4606      	mov	r6, r0
 8000ca6:	e6e9      	b.n	8000a7c <__udivmoddi4+0x60>
 8000ca8:	4618      	mov	r0, r3
 8000caa:	e6fd      	b.n	8000aa8 <__udivmoddi4+0x8c>
 8000cac:	4543      	cmp	r3, r8
 8000cae:	d2e5      	bcs.n	8000c7c <__udivmoddi4+0x260>
 8000cb0:	ebb8 0e02 	subs.w	lr, r8, r2
 8000cb4:	eb69 0104 	sbc.w	r1, r9, r4
 8000cb8:	3801      	subs	r0, #1
 8000cba:	e7df      	b.n	8000c7c <__udivmoddi4+0x260>
 8000cbc:	4608      	mov	r0, r1
 8000cbe:	e7d2      	b.n	8000c66 <__udivmoddi4+0x24a>
 8000cc0:	4660      	mov	r0, ip
 8000cc2:	e78d      	b.n	8000be0 <__udivmoddi4+0x1c4>
 8000cc4:	4681      	mov	r9, r0
 8000cc6:	e7b9      	b.n	8000c3c <__udivmoddi4+0x220>
 8000cc8:	4666      	mov	r6, ip
 8000cca:	e775      	b.n	8000bb8 <__udivmoddi4+0x19c>
 8000ccc:	4630      	mov	r0, r6
 8000cce:	e74a      	b.n	8000b66 <__udivmoddi4+0x14a>
 8000cd0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000cd4:	4439      	add	r1, r7
 8000cd6:	e713      	b.n	8000b00 <__udivmoddi4+0xe4>
 8000cd8:	3802      	subs	r0, #2
 8000cda:	443c      	add	r4, r7
 8000cdc:	e724      	b.n	8000b28 <__udivmoddi4+0x10c>
 8000cde:	bf00      	nop

08000ce0 <__aeabi_idiv0>:
 8000ce0:	4770      	bx	lr
 8000ce2:	bf00      	nop

08000ce4 <configMotor>:

#include <L293D.h>


void configMotor(motor_dc* motor, TIM_HandleTypeDef timer, uint32_t timerChannel)
{
 8000ce4:	b084      	sub	sp, #16
 8000ce6:	b580      	push	{r7, lr}
 8000ce8:	b082      	sub	sp, #8
 8000cea:	af00      	add	r7, sp, #0
 8000cec:	6078      	str	r0, [r7, #4]
 8000cee:	f107 0014 	add.w	r0, r7, #20
 8000cf2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	motor->timer = timer;
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	3304      	adds	r3, #4
 8000cfa:	f107 0114 	add.w	r1, r7, #20
 8000cfe:	2248      	movs	r2, #72	; 0x48
 8000d00:	4618      	mov	r0, r3
 8000d02:	f007 f987 	bl	8008014 <memcpy>
	motor->timerChannel = timerChannel;
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8000d0a:	64da      	str	r2, [r3, #76]	; 0x4c
	motor->configured = 1;
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	2201      	movs	r2, #1
 8000d10:	701a      	strb	r2, [r3, #0]
}
 8000d12:	bf00      	nop
 8000d14:	3708      	adds	r7, #8
 8000d16:	46bd      	mov	sp, r7
 8000d18:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000d1c:	b004      	add	sp, #16
 8000d1e:	4770      	bx	lr

08000d20 <configHC595>:

void configHC595(HC595* hc595, GPIO_TypeDef* SRCLK_port, uint16_t SRCLK_pin, GPIO_TypeDef* RCLK_port, uint16_t RCLK_pin, GPIO_TypeDef* SER_DATA_port, uint16_t SER_DATA_pin)
{
 8000d20:	b480      	push	{r7}
 8000d22:	b085      	sub	sp, #20
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	60f8      	str	r0, [r7, #12]
 8000d28:	60b9      	str	r1, [r7, #8]
 8000d2a:	603b      	str	r3, [r7, #0]
 8000d2c:	4613      	mov	r3, r2
 8000d2e:	80fb      	strh	r3, [r7, #6]
	hc595->SRCLK.port = SRCLK_port;
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	68ba      	ldr	r2, [r7, #8]
 8000d34:	605a      	str	r2, [r3, #4]
	hc595->SRCLK.pin = SRCLK_pin;
 8000d36:	88fa      	ldrh	r2, [r7, #6]
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	601a      	str	r2, [r3, #0]
	hc595->RCLK.port = RCLK_port;
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	683a      	ldr	r2, [r7, #0]
 8000d40:	60da      	str	r2, [r3, #12]
	hc595->RCLK.pin = RCLK_pin;
 8000d42:	8b3a      	ldrh	r2, [r7, #24]
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	609a      	str	r2, [r3, #8]
	hc595->SER_DATA.port = SER_DATA_port;
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	69fa      	ldr	r2, [r7, #28]
 8000d4c:	615a      	str	r2, [r3, #20]
	hc595->SER_DATA.pin = SER_DATA_pin;
 8000d4e:	8c3a      	ldrh	r2, [r7, #32]
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	611a      	str	r2, [r3, #16]
	hc595->currentConfiguration = 0;
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	2200      	movs	r2, #0
 8000d58:	761a      	strb	r2, [r3, #24]
	hc595->configured = 1;
 8000d5a:	68fb      	ldr	r3, [r7, #12]
 8000d5c:	2201      	movs	r2, #1
 8000d5e:	765a      	strb	r2, [r3, #25]
}
 8000d60:	bf00      	nop
 8000d62:	3714      	adds	r7, #20
 8000d64:	46bd      	mov	sp, r7
 8000d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6a:	4770      	bx	lr

08000d6c <configuraMagnetometro>:
/*
 * Configura os registradores de taxa de aquisição, ganho e modo de operação.
 *
*/
void configuraMagnetometro(I2C_HandleTypeDef i2c, uint8_t taxaAquisicao, uint8_t ganho, uint8_t modoOperacao)
{
 8000d6c:	b084      	sub	sp, #16
 8000d6e:	b580      	push	{r7, lr}
 8000d70:	b084      	sub	sp, #16
 8000d72:	af04      	add	r7, sp, #16
 8000d74:	f107 0c08 	add.w	ip, r7, #8
 8000d78:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	  // Configuração do ganho, taxa de aquisição e modo de operação do magnetômetro
	  HAL_I2C_Mem_Write(&i2c, HMC5883l_ADDRESS, CONFIG_A_REGISTER , 1, &taxaAquisicao , 1, 100);
 8000d7c:	2364      	movs	r3, #100	; 0x64
 8000d7e:	9302      	str	r3, [sp, #8]
 8000d80:	2301      	movs	r3, #1
 8000d82:	9301      	str	r3, [sp, #4]
 8000d84:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000d88:	9300      	str	r3, [sp, #0]
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	213c      	movs	r1, #60	; 0x3c
 8000d90:	f107 0008 	add.w	r0, r7, #8
 8000d94:	f001 faca 	bl	800232c <HAL_I2C_Mem_Write>
	  HAL_I2C_Mem_Write(&i2c, HMC5883l_ADDRESS, CONFIG_B_REGISTER , 1, &ganho, 1, 100);
 8000d98:	2364      	movs	r3, #100	; 0x64
 8000d9a:	9302      	str	r3, [sp, #8]
 8000d9c:	2301      	movs	r3, #1
 8000d9e:	9301      	str	r3, [sp, #4]
 8000da0:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000da4:	9300      	str	r3, [sp, #0]
 8000da6:	2301      	movs	r3, #1
 8000da8:	2201      	movs	r2, #1
 8000daa:	213c      	movs	r1, #60	; 0x3c
 8000dac:	f107 0008 	add.w	r0, r7, #8
 8000db0:	f001 fabc 	bl	800232c <HAL_I2C_Mem_Write>
	  HAL_I2C_Mem_Write(&i2c, HMC5883l_ADDRESS, MODE_REGISTER, 1, &modoOperacao, 1, 100);
 8000db4:	2364      	movs	r3, #100	; 0x64
 8000db6:	9302      	str	r3, [sp, #8]
 8000db8:	2301      	movs	r3, #1
 8000dba:	9301      	str	r3, [sp, #4]
 8000dbc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000dc0:	9300      	str	r3, [sp, #0]
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	2202      	movs	r2, #2
 8000dc6:	213c      	movs	r1, #60	; 0x3c
 8000dc8:	f107 0008 	add.w	r0, r7, #8
 8000dcc:	f001 faae 	bl	800232c <HAL_I2C_Mem_Write>
}
 8000dd0:	bf00      	nop
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000dd8:	b004      	add	sp, #16
 8000dda:	4770      	bx	lr
 8000ddc:	0000      	movs	r0, r0
	...

08000de0 <setPWMAngulo>:
 * Quando o pulso é 94, temos a posição neutra e quando o pulso é
 * 144 temos a posição máxima.
*/


void setPWMAngulo(TIM_HandleTypeDef timer, uint32_t channel, uint16_t period, uint16_t angulo){
 8000de0:	b084      	sub	sp, #16
 8000de2:	b5b0      	push	{r4, r5, r7, lr}
 8000de4:	b090      	sub	sp, #64	; 0x40
 8000de6:	af00      	add	r7, sp, #0
 8000de8:	f107 0450 	add.w	r4, r7, #80	; 0x50
 8000dec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	// Função para determinar o pulso
	uint16_t tempo = 20, pulsOK, T;
 8000df0:	2314      	movs	r3, #20
 8000df2:	87fb      	strh	r3, [r7, #62]	; 0x3e
	double pulso;
	double intervalo = ((2.3-1.5)/180); // aproximadamente 0,0044
 8000df4:	a338      	add	r3, pc, #224	; (adr r3, 8000ed8 <setPWMAngulo+0xf8>)
 8000df6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dfa:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	T = period/10;
 8000dfe:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8000e02:	4a33      	ldr	r2, [pc, #204]	; (8000ed0 <setPWMAngulo+0xf0>)
 8000e04:	fba2 2303 	umull	r2, r3, r2, r3
 8000e08:	08db      	lsrs	r3, r3, #3
 8000e0a:	85fb      	strh	r3, [r7, #46]	; 0x2e

	pulso = ((((angulo*intervalo)+1.5)/tempo)*T); // Função para determinar o pulso
 8000e0c:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 8000e10:	4618      	mov	r0, r3
 8000e12:	f7ff fb4f 	bl	80004b4 <__aeabi_i2d>
 8000e16:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8000e1a:	f7ff fbb5 	bl	8000588 <__aeabi_dmul>
 8000e1e:	4602      	mov	r2, r0
 8000e20:	460b      	mov	r3, r1
 8000e22:	4610      	mov	r0, r2
 8000e24:	4619      	mov	r1, r3
 8000e26:	f04f 0200 	mov.w	r2, #0
 8000e2a:	4b2a      	ldr	r3, [pc, #168]	; (8000ed4 <setPWMAngulo+0xf4>)
 8000e2c:	f7ff f9f6 	bl	800021c <__adddf3>
 8000e30:	4602      	mov	r2, r0
 8000e32:	460b      	mov	r3, r1
 8000e34:	4614      	mov	r4, r2
 8000e36:	461d      	mov	r5, r3
 8000e38:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f7ff fb3a 	bl	80004b4 <__aeabi_i2d>
 8000e40:	4602      	mov	r2, r0
 8000e42:	460b      	mov	r3, r1
 8000e44:	4620      	mov	r0, r4
 8000e46:	4629      	mov	r1, r5
 8000e48:	f7ff fcc8 	bl	80007dc <__aeabi_ddiv>
 8000e4c:	4602      	mov	r2, r0
 8000e4e:	460b      	mov	r3, r1
 8000e50:	4614      	mov	r4, r2
 8000e52:	461d      	mov	r5, r3
 8000e54:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000e56:	4618      	mov	r0, r3
 8000e58:	f7ff fb2c 	bl	80004b4 <__aeabi_i2d>
 8000e5c:	4602      	mov	r2, r0
 8000e5e:	460b      	mov	r3, r1
 8000e60:	4620      	mov	r0, r4
 8000e62:	4629      	mov	r1, r5
 8000e64:	f7ff fb90 	bl	8000588 <__aeabi_dmul>
 8000e68:	4602      	mov	r2, r0
 8000e6a:	460b      	mov	r3, r1
 8000e6c:	e9c7 2308 	strd	r2, r3, [r7, #32]
	pulsOK = (uint16_t)pulso;
 8000e70:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8000e74:	f7ff fd9a 	bl	80009ac <__aeabi_d2uiz>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	83fb      	strh	r3, [r7, #30]

	HAL_TIM_PWM_Stop(&timer, channel); // para de gerar PWM
 8000e7c:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8000e80:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8000e84:	f002 fce8 	bl	8003858 <HAL_TIM_PWM_Stop>
	TIM_OC_InitTypeDef sConfigOC;
	timer.Init.Period = period; // configura a duração do período
 8000e88:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8000e8c:	65fb      	str	r3, [r7, #92]	; 0x5c
	HAL_TIM_PWM_Init(&timer); // reinicia com novos valores de período
 8000e8e:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8000e92:	f002 fbbf 	bl	8003614 <HAL_TIM_PWM_Init>
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e96:	2360      	movs	r3, #96	; 0x60
 8000e98:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = pulsOK;
 8000e9a:	8bfb      	ldrh	r3, [r7, #30]
 8000e9c:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	613b      	str	r3, [r7, #16]
	HAL_TIM_PWM_ConfigChannel(&timer, &sConfigOC, channel);
 8000ea6:	463b      	mov	r3, r7
 8000ea8:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8000eac:	4619      	mov	r1, r3
 8000eae:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8000eb2:	f002 fe49 	bl	8003b48 <HAL_TIM_PWM_ConfigChannel>
	HAL_TIM_PWM_Start(&timer, channel); // começa a geração de PWM
 8000eb6:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8000eba:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8000ebe:	f002 fc03 	bl	80036c8 <HAL_TIM_PWM_Start>
}
 8000ec2:	bf00      	nop
 8000ec4:	3740      	adds	r7, #64	; 0x40
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8000ecc:	b004      	add	sp, #16
 8000ece:	4770      	bx	lr
 8000ed0:	cccccccd 	.word	0xcccccccd
 8000ed4:	3ff80000 	.word	0x3ff80000
 8000ed8:	789abcde 	.word	0x789abcde
 8000edc:	3f723456 	.word	0x3f723456

08000ee0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ee4:	f000 fe0c 	bl	8001b00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ee8:	f000 f88e 	bl	8001008 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000eec:	f000 fa14 	bl	8001318 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000ef0:	f000 f8f6 	bl	80010e0 <MX_I2C1_Init>
  MX_TIM4_Init();
 8000ef4:	f000 f922 	bl	800113c <MX_TIM4_Init>
  MX_TIM14_Init();
 8000ef8:	f000 f996 	bl	8001228 <MX_TIM14_Init>
  MX_USART3_UART_Init();
 8000efc:	f000 f9e2 	bl	80012c4 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000f00:	f003 fdce 	bl	8004aa0 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of queueMagnetometro */
  queueMagnetometroHandle = osMessageQueueNew (1, sizeof(float), &queueMagnetometro_attributes);
 8000f04:	4a28      	ldr	r2, [pc, #160]	; (8000fa8 <main+0xc8>)
 8000f06:	2104      	movs	r1, #4
 8000f08:	2001      	movs	r0, #1
 8000f0a:	f003 fffc 	bl	8004f06 <osMessageQueueNew>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	4a26      	ldr	r2, [pc, #152]	; (8000fac <main+0xcc>)
 8000f12:	6013      	str	r3, [r2, #0]

  /* creation of queueBluetooth */
  queueBluetoothHandle = osMessageQueueNew (16, sizeof(char), &queueBluetooth_attributes);
 8000f14:	4a26      	ldr	r2, [pc, #152]	; (8000fb0 <main+0xd0>)
 8000f16:	2101      	movs	r1, #1
 8000f18:	2010      	movs	r0, #16
 8000f1a:	f003 fff4 	bl	8004f06 <osMessageQueueNew>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	4a24      	ldr	r2, [pc, #144]	; (8000fb4 <main+0xd4>)
 8000f22:	6013      	str	r3, [r2, #0]

  /* creation of queueMotorDC */
  queueMotorDCHandle = osMessageQueueNew (1, sizeof(uint8_t), &queueMotorDC_attributes);
 8000f24:	4a24      	ldr	r2, [pc, #144]	; (8000fb8 <main+0xd8>)
 8000f26:	2101      	movs	r1, #1
 8000f28:	2001      	movs	r0, #1
 8000f2a:	f003 ffec 	bl	8004f06 <osMessageQueueNew>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	4a22      	ldr	r2, [pc, #136]	; (8000fbc <main+0xdc>)
 8000f32:	6013      	str	r3, [r2, #0]

  /* creation of queueServoMotor */
  queueServoMotorHandle = osMessageQueueNew (1, sizeof(uint16_t), &queueServoMotor_attributes);
 8000f34:	4a22      	ldr	r2, [pc, #136]	; (8000fc0 <main+0xe0>)
 8000f36:	2102      	movs	r1, #2
 8000f38:	2001      	movs	r0, #1
 8000f3a:	f003 ffe4 	bl	8004f06 <osMessageQueueNew>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	4a20      	ldr	r2, [pc, #128]	; (8000fc4 <main+0xe4>)
 8000f42:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of controlador */
  controladorHandle = osThreadNew(startControlador, NULL, &controlador_attributes);
 8000f44:	4a20      	ldr	r2, [pc, #128]	; (8000fc8 <main+0xe8>)
 8000f46:	2100      	movs	r1, #0
 8000f48:	4820      	ldr	r0, [pc, #128]	; (8000fcc <main+0xec>)
 8000f4a:	f003 fdf3 	bl	8004b34 <osThreadNew>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	4a1f      	ldr	r2, [pc, #124]	; (8000fd0 <main+0xf0>)
 8000f52:	6013      	str	r3, [r2, #0]

  /* creation of magnetometro */
  magnetometroHandle = osThreadNew(startMagnetometro, NULL, &magnetometro_attributes);
 8000f54:	4a1f      	ldr	r2, [pc, #124]	; (8000fd4 <main+0xf4>)
 8000f56:	2100      	movs	r1, #0
 8000f58:	481f      	ldr	r0, [pc, #124]	; (8000fd8 <main+0xf8>)
 8000f5a:	f003 fdeb 	bl	8004b34 <osThreadNew>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	4a1e      	ldr	r2, [pc, #120]	; (8000fdc <main+0xfc>)
 8000f62:	6013      	str	r3, [r2, #0]

  /* creation of servoMotor */
  servoMotorHandle = osThreadNew(startServoMotor, NULL, &servoMotor_attributes);
 8000f64:	4a1e      	ldr	r2, [pc, #120]	; (8000fe0 <main+0x100>)
 8000f66:	2100      	movs	r1, #0
 8000f68:	481e      	ldr	r0, [pc, #120]	; (8000fe4 <main+0x104>)
 8000f6a:	f003 fde3 	bl	8004b34 <osThreadNew>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	4a1d      	ldr	r2, [pc, #116]	; (8000fe8 <main+0x108>)
 8000f72:	6013      	str	r3, [r2, #0]

  /* creation of bluetooth */
  bluetoothHandle = osThreadNew(startBluetooth, NULL, &bluetooth_attributes);
 8000f74:	4a1d      	ldr	r2, [pc, #116]	; (8000fec <main+0x10c>)
 8000f76:	2100      	movs	r1, #0
 8000f78:	481d      	ldr	r0, [pc, #116]	; (8000ff0 <main+0x110>)
 8000f7a:	f003 fddb 	bl	8004b34 <osThreadNew>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	4a1c      	ldr	r2, [pc, #112]	; (8000ff4 <main+0x114>)
 8000f82:	6013      	str	r3, [r2, #0]

  /* creation of motorDC */
  motorDCHandle = osThreadNew(startMotorDC, NULL, &motorDC_attributes);
 8000f84:	4a1c      	ldr	r2, [pc, #112]	; (8000ff8 <main+0x118>)
 8000f86:	2100      	movs	r1, #0
 8000f88:	481c      	ldr	r0, [pc, #112]	; (8000ffc <main+0x11c>)
 8000f8a:	f003 fdd3 	bl	8004b34 <osThreadNew>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	4a1b      	ldr	r2, [pc, #108]	; (8001000 <main+0x120>)
 8000f92:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  // Declara grupo de eventos utilizado
  grupoEventosBarco = osEventFlagsNew(NULL);
 8000f94:	2000      	movs	r0, #0
 8000f96:	f003 fe7a 	bl	8004c8e <osEventFlagsNew>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	4a19      	ldr	r2, [pc, #100]	; (8001004 <main+0x124>)
 8000f9e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000fa0:	f003 fda2 	bl	8004ae8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000fa4:	e7fe      	b.n	8000fa4 <main+0xc4>
 8000fa6:	bf00      	nop
 8000fa8:	080081a8 	.word	0x080081a8
 8000fac:	20004a38 	.word	0x20004a38
 8000fb0:	080081c0 	.word	0x080081c0
 8000fb4:	20004940 	.word	0x20004940
 8000fb8:	080081d8 	.word	0x080081d8
 8000fbc:	20004a2c 	.word	0x20004a2c
 8000fc0:	080081f0 	.word	0x080081f0
 8000fc4:	20004a8c 	.word	0x20004a8c
 8000fc8:	080080f4 	.word	0x080080f4
 8000fcc:	08001409 	.word	0x08001409
 8000fd0:	20004a28 	.word	0x20004a28
 8000fd4:	08008118 	.word	0x08008118
 8000fd8:	0800148d 	.word	0x0800148d
 8000fdc:	20004a30 	.word	0x20004a30
 8000fe0:	0800813c 	.word	0x0800813c
 8000fe4:	0800150d 	.word	0x0800150d
 8000fe8:	20004a3c 	.word	0x20004a3c
 8000fec:	08008160 	.word	0x08008160
 8000ff0:	080015a1 	.word	0x080015a1
 8000ff4:	20004a34 	.word	0x20004a34
 8000ff8:	08008184 	.word	0x08008184
 8000ffc:	080015e5 	.word	0x080015e5
 8001000:	20004a40 	.word	0x20004a40
 8001004:	20004a24 	.word	0x20004a24

08001008 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b094      	sub	sp, #80	; 0x50
 800100c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800100e:	f107 031c 	add.w	r3, r7, #28
 8001012:	2234      	movs	r2, #52	; 0x34
 8001014:	2100      	movs	r1, #0
 8001016:	4618      	mov	r0, r3
 8001018:	f007 f80a 	bl	8008030 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800101c:	f107 0308 	add.w	r3, r7, #8
 8001020:	2200      	movs	r2, #0
 8001022:	601a      	str	r2, [r3, #0]
 8001024:	605a      	str	r2, [r3, #4]
 8001026:	609a      	str	r2, [r3, #8]
 8001028:	60da      	str	r2, [r3, #12]
 800102a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800102c:	2300      	movs	r3, #0
 800102e:	607b      	str	r3, [r7, #4]
 8001030:	4b29      	ldr	r3, [pc, #164]	; (80010d8 <SystemClock_Config+0xd0>)
 8001032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001034:	4a28      	ldr	r2, [pc, #160]	; (80010d8 <SystemClock_Config+0xd0>)
 8001036:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800103a:	6413      	str	r3, [r2, #64]	; 0x40
 800103c:	4b26      	ldr	r3, [pc, #152]	; (80010d8 <SystemClock_Config+0xd0>)
 800103e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001040:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001044:	607b      	str	r3, [r7, #4]
 8001046:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001048:	2300      	movs	r3, #0
 800104a:	603b      	str	r3, [r7, #0]
 800104c:	4b23      	ldr	r3, [pc, #140]	; (80010dc <SystemClock_Config+0xd4>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001054:	4a21      	ldr	r2, [pc, #132]	; (80010dc <SystemClock_Config+0xd4>)
 8001056:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800105a:	6013      	str	r3, [r2, #0]
 800105c:	4b1f      	ldr	r3, [pc, #124]	; (80010dc <SystemClock_Config+0xd4>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001064:	603b      	str	r3, [r7, #0]
 8001066:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001068:	2302      	movs	r3, #2
 800106a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800106c:	2301      	movs	r3, #1
 800106e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001070:	2310      	movs	r3, #16
 8001072:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001074:	2302      	movs	r3, #2
 8001076:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001078:	2300      	movs	r3, #0
 800107a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 800107c:	2308      	movs	r3, #8
 800107e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 80;
 8001080:	2350      	movs	r3, #80	; 0x50
 8001082:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001084:	2302      	movs	r3, #2
 8001086:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001088:	2302      	movs	r3, #2
 800108a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800108c:	2302      	movs	r3, #2
 800108e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001090:	f107 031c 	add.w	r3, r7, #28
 8001094:	4618      	mov	r0, r3
 8001096:	f001 ff5f 	bl	8002f58 <HAL_RCC_OscConfig>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d001      	beq.n	80010a4 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80010a0:	f000 fafe 	bl	80016a0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010a4:	230f      	movs	r3, #15
 80010a6:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010a8:	2302      	movs	r3, #2
 80010aa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80010ac:	2380      	movs	r3, #128	; 0x80
 80010ae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010b4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010b6:	2300      	movs	r3, #0
 80010b8:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80010ba:	f107 0308 	add.w	r3, r7, #8
 80010be:	2101      	movs	r1, #1
 80010c0:	4618      	mov	r0, r3
 80010c2:	f001 fc4b 	bl	800295c <HAL_RCC_ClockConfig>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d001      	beq.n	80010d0 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80010cc:	f000 fae8 	bl	80016a0 <Error_Handler>
  }
}
 80010d0:	bf00      	nop
 80010d2:	3750      	adds	r7, #80	; 0x50
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	40023800 	.word	0x40023800
 80010dc:	40007000 	.word	0x40007000

080010e0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80010e4:	4b12      	ldr	r3, [pc, #72]	; (8001130 <MX_I2C1_Init+0x50>)
 80010e6:	4a13      	ldr	r2, [pc, #76]	; (8001134 <MX_I2C1_Init+0x54>)
 80010e8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80010ea:	4b11      	ldr	r3, [pc, #68]	; (8001130 <MX_I2C1_Init+0x50>)
 80010ec:	4a12      	ldr	r2, [pc, #72]	; (8001138 <MX_I2C1_Init+0x58>)
 80010ee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80010f0:	4b0f      	ldr	r3, [pc, #60]	; (8001130 <MX_I2C1_Init+0x50>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80010f6:	4b0e      	ldr	r3, [pc, #56]	; (8001130 <MX_I2C1_Init+0x50>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010fc:	4b0c      	ldr	r3, [pc, #48]	; (8001130 <MX_I2C1_Init+0x50>)
 80010fe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001102:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001104:	4b0a      	ldr	r3, [pc, #40]	; (8001130 <MX_I2C1_Init+0x50>)
 8001106:	2200      	movs	r2, #0
 8001108:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800110a:	4b09      	ldr	r3, [pc, #36]	; (8001130 <MX_I2C1_Init+0x50>)
 800110c:	2200      	movs	r2, #0
 800110e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001110:	4b07      	ldr	r3, [pc, #28]	; (8001130 <MX_I2C1_Init+0x50>)
 8001112:	2200      	movs	r2, #0
 8001114:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001116:	4b06      	ldr	r3, [pc, #24]	; (8001130 <MX_I2C1_Init+0x50>)
 8001118:	2200      	movs	r2, #0
 800111a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800111c:	4804      	ldr	r0, [pc, #16]	; (8001130 <MX_I2C1_Init+0x50>)
 800111e:	f000 ffc1 	bl	80020a4 <HAL_I2C_Init>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d001      	beq.n	800112c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001128:	f000 faba 	bl	80016a0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800112c:	bf00      	nop
 800112e:	bd80      	pop	{r7, pc}
 8001130:	200049d0 	.word	0x200049d0
 8001134:	40005400 	.word	0x40005400
 8001138:	000186a0 	.word	0x000186a0

0800113c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b08e      	sub	sp, #56	; 0x38
 8001140:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001142:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001146:	2200      	movs	r2, #0
 8001148:	601a      	str	r2, [r3, #0]
 800114a:	605a      	str	r2, [r3, #4]
 800114c:	609a      	str	r2, [r3, #8]
 800114e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001150:	f107 0320 	add.w	r3, r7, #32
 8001154:	2200      	movs	r2, #0
 8001156:	601a      	str	r2, [r3, #0]
 8001158:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800115a:	1d3b      	adds	r3, r7, #4
 800115c:	2200      	movs	r2, #0
 800115e:	601a      	str	r2, [r3, #0]
 8001160:	605a      	str	r2, [r3, #4]
 8001162:	609a      	str	r2, [r3, #8]
 8001164:	60da      	str	r2, [r3, #12]
 8001166:	611a      	str	r2, [r3, #16]
 8001168:	615a      	str	r2, [r3, #20]
 800116a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800116c:	4b2c      	ldr	r3, [pc, #176]	; (8001220 <MX_TIM4_Init+0xe4>)
 800116e:	4a2d      	ldr	r2, [pc, #180]	; (8001224 <MX_TIM4_Init+0xe8>)
 8001170:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001172:	4b2b      	ldr	r3, [pc, #172]	; (8001220 <MX_TIM4_Init+0xe4>)
 8001174:	2200      	movs	r2, #0
 8001176:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001178:	4b29      	ldr	r3, [pc, #164]	; (8001220 <MX_TIM4_Init+0xe4>)
 800117a:	2200      	movs	r2, #0
 800117c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800117e:	4b28      	ldr	r3, [pc, #160]	; (8001220 <MX_TIM4_Init+0xe4>)
 8001180:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001184:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001186:	4b26      	ldr	r3, [pc, #152]	; (8001220 <MX_TIM4_Init+0xe4>)
 8001188:	2200      	movs	r2, #0
 800118a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800118c:	4b24      	ldr	r3, [pc, #144]	; (8001220 <MX_TIM4_Init+0xe4>)
 800118e:	2200      	movs	r2, #0
 8001190:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001192:	4823      	ldr	r0, [pc, #140]	; (8001220 <MX_TIM4_Init+0xe4>)
 8001194:	f002 f97e 	bl	8003494 <HAL_TIM_Base_Init>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d001      	beq.n	80011a2 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 800119e:	f000 fa7f 	bl	80016a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011a6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80011a8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011ac:	4619      	mov	r1, r3
 80011ae:	481c      	ldr	r0, [pc, #112]	; (8001220 <MX_TIM4_Init+0xe4>)
 80011b0:	f002 fd8c 	bl	8003ccc <HAL_TIM_ConfigClockSource>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 80011ba:	f000 fa71 	bl	80016a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80011be:	4818      	ldr	r0, [pc, #96]	; (8001220 <MX_TIM4_Init+0xe4>)
 80011c0:	f002 fa28 	bl	8003614 <HAL_TIM_PWM_Init>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d001      	beq.n	80011ce <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 80011ca:	f000 fa69 	bl	80016a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011ce:	2300      	movs	r3, #0
 80011d0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011d2:	2300      	movs	r3, #0
 80011d4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80011d6:	f107 0320 	add.w	r3, r7, #32
 80011da:	4619      	mov	r1, r3
 80011dc:	4810      	ldr	r0, [pc, #64]	; (8001220 <MX_TIM4_Init+0xe4>)
 80011de:	f003 f975 	bl	80044cc <HAL_TIMEx_MasterConfigSynchronization>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d001      	beq.n	80011ec <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 80011e8:	f000 fa5a 	bl	80016a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011ec:	2360      	movs	r3, #96	; 0x60
 80011ee:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80011f0:	2300      	movs	r3, #0
 80011f2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011f4:	2300      	movs	r3, #0
 80011f6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011f8:	2300      	movs	r3, #0
 80011fa:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011fc:	1d3b      	adds	r3, r7, #4
 80011fe:	2200      	movs	r2, #0
 8001200:	4619      	mov	r1, r3
 8001202:	4807      	ldr	r0, [pc, #28]	; (8001220 <MX_TIM4_Init+0xe4>)
 8001204:	f002 fca0 	bl	8003b48 <HAL_TIM_PWM_ConfigChannel>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d001      	beq.n	8001212 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 800120e:	f000 fa47 	bl	80016a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001212:	4803      	ldr	r0, [pc, #12]	; (8001220 <MX_TIM4_Init+0xe4>)
 8001214:	f000 faf6 	bl	8001804 <HAL_TIM_MspPostInit>

}
 8001218:	bf00      	nop
 800121a:	3738      	adds	r7, #56	; 0x38
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}
 8001220:	20004944 	.word	0x20004944
 8001224:	40000800 	.word	0x40000800

08001228 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b088      	sub	sp, #32
 800122c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800122e:	1d3b      	adds	r3, r7, #4
 8001230:	2200      	movs	r2, #0
 8001232:	601a      	str	r2, [r3, #0]
 8001234:	605a      	str	r2, [r3, #4]
 8001236:	609a      	str	r2, [r3, #8]
 8001238:	60da      	str	r2, [r3, #12]
 800123a:	611a      	str	r2, [r3, #16]
 800123c:	615a      	str	r2, [r3, #20]
 800123e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8001240:	4b1e      	ldr	r3, [pc, #120]	; (80012bc <MX_TIM14_Init+0x94>)
 8001242:	4a1f      	ldr	r2, [pc, #124]	; (80012c0 <MX_TIM14_Init+0x98>)
 8001244:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 0;
 8001246:	4b1d      	ldr	r3, [pc, #116]	; (80012bc <MX_TIM14_Init+0x94>)
 8001248:	2200      	movs	r2, #0
 800124a:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800124c:	4b1b      	ldr	r3, [pc, #108]	; (80012bc <MX_TIM14_Init+0x94>)
 800124e:	2200      	movs	r2, #0
 8001250:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 8001252:	4b1a      	ldr	r3, [pc, #104]	; (80012bc <MX_TIM14_Init+0x94>)
 8001254:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001258:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800125a:	4b18      	ldr	r3, [pc, #96]	; (80012bc <MX_TIM14_Init+0x94>)
 800125c:	2200      	movs	r2, #0
 800125e:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001260:	4b16      	ldr	r3, [pc, #88]	; (80012bc <MX_TIM14_Init+0x94>)
 8001262:	2200      	movs	r2, #0
 8001264:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8001266:	4815      	ldr	r0, [pc, #84]	; (80012bc <MX_TIM14_Init+0x94>)
 8001268:	f002 f914 	bl	8003494 <HAL_TIM_Base_Init>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <MX_TIM14_Init+0x4e>
  {
    Error_Handler();
 8001272:	f000 fa15 	bl	80016a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 8001276:	4811      	ldr	r0, [pc, #68]	; (80012bc <MX_TIM14_Init+0x94>)
 8001278:	f002 f9cc 	bl	8003614 <HAL_TIM_PWM_Init>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d001      	beq.n	8001286 <MX_TIM14_Init+0x5e>
  {
    Error_Handler();
 8001282:	f000 fa0d 	bl	80016a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001286:	2360      	movs	r3, #96	; 0x60
 8001288:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800128a:	2300      	movs	r3, #0
 800128c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800128e:	2300      	movs	r3, #0
 8001290:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001292:	2300      	movs	r3, #0
 8001294:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001296:	1d3b      	adds	r3, r7, #4
 8001298:	2200      	movs	r2, #0
 800129a:	4619      	mov	r1, r3
 800129c:	4807      	ldr	r0, [pc, #28]	; (80012bc <MX_TIM14_Init+0x94>)
 800129e:	f002 fc53 	bl	8003b48 <HAL_TIM_PWM_ConfigChannel>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d001      	beq.n	80012ac <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 80012a8:	f000 f9fa 	bl	80016a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 80012ac:	4803      	ldr	r0, [pc, #12]	; (80012bc <MX_TIM14_Init+0x94>)
 80012ae:	f000 faa9 	bl	8001804 <HAL_TIM_MspPostInit>

}
 80012b2:	bf00      	nop
 80012b4:	3720      	adds	r7, #32
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	20004a44 	.word	0x20004a44
 80012c0:	40002000 	.word	0x40002000

080012c4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80012c8:	4b11      	ldr	r3, [pc, #68]	; (8001310 <MX_USART3_UART_Init+0x4c>)
 80012ca:	4a12      	ldr	r2, [pc, #72]	; (8001314 <MX_USART3_UART_Init+0x50>)
 80012cc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80012ce:	4b10      	ldr	r3, [pc, #64]	; (8001310 <MX_USART3_UART_Init+0x4c>)
 80012d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012d4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80012d6:	4b0e      	ldr	r3, [pc, #56]	; (8001310 <MX_USART3_UART_Init+0x4c>)
 80012d8:	2200      	movs	r2, #0
 80012da:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80012dc:	4b0c      	ldr	r3, [pc, #48]	; (8001310 <MX_USART3_UART_Init+0x4c>)
 80012de:	2200      	movs	r2, #0
 80012e0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80012e2:	4b0b      	ldr	r3, [pc, #44]	; (8001310 <MX_USART3_UART_Init+0x4c>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80012e8:	4b09      	ldr	r3, [pc, #36]	; (8001310 <MX_USART3_UART_Init+0x4c>)
 80012ea:	220c      	movs	r2, #12
 80012ec:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012ee:	4b08      	ldr	r3, [pc, #32]	; (8001310 <MX_USART3_UART_Init+0x4c>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80012f4:	4b06      	ldr	r3, [pc, #24]	; (8001310 <MX_USART3_UART_Init+0x4c>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80012fa:	4805      	ldr	r0, [pc, #20]	; (8001310 <MX_USART3_UART_Init+0x4c>)
 80012fc:	f003 f976 	bl	80045ec <HAL_UART_Init>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d001      	beq.n	800130a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001306:	f000 f9cb 	bl	80016a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800130a:	bf00      	nop
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	2000498c 	.word	0x2000498c
 8001314:	40004800 	.word	0x40004800

08001318 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b088      	sub	sp, #32
 800131c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800131e:	f107 030c 	add.w	r3, r7, #12
 8001322:	2200      	movs	r2, #0
 8001324:	601a      	str	r2, [r3, #0]
 8001326:	605a      	str	r2, [r3, #4]
 8001328:	609a      	str	r2, [r3, #8]
 800132a:	60da      	str	r2, [r3, #12]
 800132c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800132e:	2300      	movs	r3, #0
 8001330:	60bb      	str	r3, [r7, #8]
 8001332:	4b31      	ldr	r3, [pc, #196]	; (80013f8 <MX_GPIO_Init+0xe0>)
 8001334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001336:	4a30      	ldr	r2, [pc, #192]	; (80013f8 <MX_GPIO_Init+0xe0>)
 8001338:	f043 0304 	orr.w	r3, r3, #4
 800133c:	6313      	str	r3, [r2, #48]	; 0x30
 800133e:	4b2e      	ldr	r3, [pc, #184]	; (80013f8 <MX_GPIO_Init+0xe0>)
 8001340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001342:	f003 0304 	and.w	r3, r3, #4
 8001346:	60bb      	str	r3, [r7, #8]
 8001348:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800134a:	2300      	movs	r3, #0
 800134c:	607b      	str	r3, [r7, #4]
 800134e:	4b2a      	ldr	r3, [pc, #168]	; (80013f8 <MX_GPIO_Init+0xe0>)
 8001350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001352:	4a29      	ldr	r2, [pc, #164]	; (80013f8 <MX_GPIO_Init+0xe0>)
 8001354:	f043 0301 	orr.w	r3, r3, #1
 8001358:	6313      	str	r3, [r2, #48]	; 0x30
 800135a:	4b27      	ldr	r3, [pc, #156]	; (80013f8 <MX_GPIO_Init+0xe0>)
 800135c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135e:	f003 0301 	and.w	r3, r3, #1
 8001362:	607b      	str	r3, [r7, #4]
 8001364:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001366:	2300      	movs	r3, #0
 8001368:	603b      	str	r3, [r7, #0]
 800136a:	4b23      	ldr	r3, [pc, #140]	; (80013f8 <MX_GPIO_Init+0xe0>)
 800136c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136e:	4a22      	ldr	r2, [pc, #136]	; (80013f8 <MX_GPIO_Init+0xe0>)
 8001370:	f043 0302 	orr.w	r3, r3, #2
 8001374:	6313      	str	r3, [r2, #48]	; 0x30
 8001376:	4b20      	ldr	r3, [pc, #128]	; (80013f8 <MX_GPIO_Init+0xe0>)
 8001378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137a:	f003 0302 	and.w	r3, r3, #2
 800137e:	603b      	str	r3, [r7, #0]
 8001380:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|L293D_LATCH_Pin|L293D_EN_Pin|L293D_SER_Pin, GPIO_PIN_RESET);
 8001382:	2200      	movs	r2, #0
 8001384:	f44f 7158 	mov.w	r1, #864	; 0x360
 8001388:	481c      	ldr	r0, [pc, #112]	; (80013fc <MX_GPIO_Init+0xe4>)
 800138a:	f000 fe71 	bl	8002070 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(L293D_CLK_GPIO_Port, L293D_CLK_Pin, GPIO_PIN_RESET);
 800138e:	2200      	movs	r2, #0
 8001390:	2120      	movs	r1, #32
 8001392:	481b      	ldr	r0, [pc, #108]	; (8001400 <MX_GPIO_Init+0xe8>)
 8001394:	f000 fe6c 	bl	8002070 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001398:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800139c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800139e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80013a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a4:	2300      	movs	r3, #0
 80013a6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80013a8:	f107 030c 	add.w	r3, r7, #12
 80013ac:	4619      	mov	r1, r3
 80013ae:	4815      	ldr	r0, [pc, #84]	; (8001404 <MX_GPIO_Init+0xec>)
 80013b0:	f000 fcca 	bl	8001d48 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin L293D_LATCH_Pin L293D_EN_Pin L293D_SER_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|L293D_LATCH_Pin|L293D_EN_Pin|L293D_SER_Pin;
 80013b4:	f44f 7358 	mov.w	r3, #864	; 0x360
 80013b8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013ba:	2301      	movs	r3, #1
 80013bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013be:	2300      	movs	r3, #0
 80013c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013c2:	2300      	movs	r3, #0
 80013c4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013c6:	f107 030c 	add.w	r3, r7, #12
 80013ca:	4619      	mov	r1, r3
 80013cc:	480b      	ldr	r0, [pc, #44]	; (80013fc <MX_GPIO_Init+0xe4>)
 80013ce:	f000 fcbb 	bl	8001d48 <HAL_GPIO_Init>

  /*Configure GPIO pin : L293D_CLK_Pin */
  GPIO_InitStruct.Pin = L293D_CLK_Pin;
 80013d2:	2320      	movs	r3, #32
 80013d4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013d6:	2301      	movs	r3, #1
 80013d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013da:	2300      	movs	r3, #0
 80013dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013de:	2300      	movs	r3, #0
 80013e0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(L293D_CLK_GPIO_Port, &GPIO_InitStruct);
 80013e2:	f107 030c 	add.w	r3, r7, #12
 80013e6:	4619      	mov	r1, r3
 80013e8:	4805      	ldr	r0, [pc, #20]	; (8001400 <MX_GPIO_Init+0xe8>)
 80013ea:	f000 fcad 	bl	8001d48 <HAL_GPIO_Init>

}
 80013ee:	bf00      	nop
 80013f0:	3720      	adds	r7, #32
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	40023800 	.word	0x40023800
 80013fc:	40020000 	.word	0x40020000
 8001400:	40020400 	.word	0x40020400
 8001404:	40020800 	.word	0x40020800

08001408 <startControlador>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_startControlador */
void startControlador(void *argument)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b084      	sub	sp, #16
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]

  /* Infinite loop */
  for(;;)
  {
	// Delay entre os ciclos de controle
	osDelay(pdMS_TO_TICKS(TEMPLO_CICLO_CONTROLE));
 8001410:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001414:	f003 fc20 	bl	8004c58 <osDelay>

	// Seta as flags do bluetooth e magnetômetro
	osEventFlagsSet(grupoEventosBarco, BIT_MAGNETOMETRO | BIT_BLUETOOTH);
 8001418:	4b1b      	ldr	r3, [pc, #108]	; (8001488 <startControlador+0x80>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	2103      	movs	r1, #3
 800141e:	4618      	mov	r0, r3
 8001420:	f003 fc74 	bl	8004d0c <osEventFlagsSet>

	// Espera até que os bits do bluetooth e magnetômetro sejam iguais a 0
	eventosBarco = osEventFlagsGet(grupoEventosBarco);
 8001424:	4b18      	ldr	r3, [pc, #96]	; (8001488 <startControlador+0x80>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4618      	mov	r0, r3
 800142a:	f003 fce5 	bl	8004df8 <osEventFlagsGet>
 800142e:	60f8      	str	r0, [r7, #12]
	while( (eventosBarco & BIT_BLUETOOTH) | (eventosBarco & BIT_MAGNETOMETRO) )
 8001430:	e008      	b.n	8001444 <startControlador+0x3c>
	{
		eventosBarco = osEventFlagsGet(grupoEventosBarco);
 8001432:	4b15      	ldr	r3, [pc, #84]	; (8001488 <startControlador+0x80>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4618      	mov	r0, r3
 8001438:	f003 fcde 	bl	8004df8 <osEventFlagsGet>
 800143c:	60f8      	str	r0, [r7, #12]
		osDelay(pdMS_TO_TICKS(10));
 800143e:	200a      	movs	r0, #10
 8001440:	f003 fc0a 	bl	8004c58 <osDelay>
	while( (eventosBarco & BIT_BLUETOOTH) | (eventosBarco & BIT_MAGNETOMETRO) )
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	f003 0303 	and.w	r3, r3, #3
 800144a:	2b00      	cmp	r3, #0
 800144c:	d1f1      	bne.n	8001432 <startControlador+0x2a>

	// TODO: Adiciona a nova velocidade e ângulo para as filas correspondentes


	// Seta os bits de evento do motor dc e do servomotor após a adição dos elementos à fila
	osEventFlagsSet(grupoEventosBarco, BIT_SERVO_MOTOR | BIT_MOTOR_DC);
 800144e:	4b0e      	ldr	r3, [pc, #56]	; (8001488 <startControlador+0x80>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	210c      	movs	r1, #12
 8001454:	4618      	mov	r0, r3
 8001456:	f003 fc59 	bl	8004d0c <osEventFlagsSet>

	// Espera até que os bits do servomotor e motor DC sejam iguais a 0
	eventosBarco = osEventFlagsGet(grupoEventosBarco);
 800145a:	4b0b      	ldr	r3, [pc, #44]	; (8001488 <startControlador+0x80>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4618      	mov	r0, r3
 8001460:	f003 fcca 	bl	8004df8 <osEventFlagsGet>
 8001464:	60f8      	str	r0, [r7, #12]
	while( (eventosBarco & BIT_SERVO_MOTOR) | (eventosBarco & BIT_MOTOR_DC) )
 8001466:	e008      	b.n	800147a <startControlador+0x72>
	{
		eventosBarco = osEventFlagsGet(grupoEventosBarco);
 8001468:	4b07      	ldr	r3, [pc, #28]	; (8001488 <startControlador+0x80>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4618      	mov	r0, r3
 800146e:	f003 fcc3 	bl	8004df8 <osEventFlagsGet>
 8001472:	60f8      	str	r0, [r7, #12]
		osDelay(pdMS_TO_TICKS(10));
 8001474:	200a      	movs	r0, #10
 8001476:	f003 fbef 	bl	8004c58 <osDelay>
	while( (eventosBarco & BIT_SERVO_MOTOR) | (eventosBarco & BIT_MOTOR_DC) )
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	f003 030c 	and.w	r3, r3, #12
 8001480:	2b00      	cmp	r3, #0
 8001482:	d1f1      	bne.n	8001468 <startControlador+0x60>
	osDelay(pdMS_TO_TICKS(TEMPLO_CICLO_CONTROLE));
 8001484:	e7c4      	b.n	8001410 <startControlador+0x8>
 8001486:	bf00      	nop
 8001488:	20004a24 	.word	0x20004a24

0800148c <startMagnetometro>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startMagnetometro */
void startMagnetometro(void *argument)
{
 800148c:	b590      	push	{r4, r7, lr}
 800148e:	b099      	sub	sp, #100	; 0x64
 8001490:	af14      	add	r7, sp, #80	; 0x50
 8001492:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startMagnetometro */

  // Parâmetros magnetômetro
  uint8_t config[3] = {0x70, 0xA0, 0x00}; // Valores de exemplo para CONTROL REG A, CONTROL REG B e MODE REGISTER
 8001494:	4a19      	ldr	r2, [pc, #100]	; (80014fc <startMagnetometro+0x70>)
 8001496:	f107 030c 	add.w	r3, r7, #12
 800149a:	6812      	ldr	r2, [r2, #0]
 800149c:	4611      	mov	r1, r2
 800149e:	8019      	strh	r1, [r3, #0]
 80014a0:	3302      	adds	r3, #2
 80014a2:	0c12      	lsrs	r2, r2, #16
 80014a4:	701a      	strb	r2, [r3, #0]
  // config[0] = 0x70 = 01110000 -> Configuração de medição normal, output de dados de 15 Hz e média de 8 amostras por medição
  // config[1] = 0xA0 = 10100000 -> Ganho de 4.7 GA
  // config[2] = 0x00 = 00000000 -> Modo de leitura contínua
  configuraMagnetometro(hi2c1, config[0], config[1], config[2]);
 80014a6:	7b3b      	ldrb	r3, [r7, #12]
 80014a8:	7b7a      	ldrb	r2, [r7, #13]
 80014aa:	7bb9      	ldrb	r1, [r7, #14]
 80014ac:	4c14      	ldr	r4, [pc, #80]	; (8001500 <startMagnetometro+0x74>)
 80014ae:	9113      	str	r1, [sp, #76]	; 0x4c
 80014b0:	9212      	str	r2, [sp, #72]	; 0x48
 80014b2:	9311      	str	r3, [sp, #68]	; 0x44
 80014b4:	4668      	mov	r0, sp
 80014b6:	f104 0310 	add.w	r3, r4, #16
 80014ba:	2244      	movs	r2, #68	; 0x44
 80014bc:	4619      	mov	r1, r3
 80014be:	f006 fda9 	bl	8008014 <memcpy>
 80014c2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80014c6:	f7ff fc51 	bl	8000d6c <configuraMagnetometro>

  /* Infinite loop */
  for(;;)
  {
	// Espera até que a task controlador solicite uma leitura
	osEventFlagsWait(grupoEventosBarco, BIT_MAGNETOMETRO, osFlagsNoClear, osWaitForever);
 80014ca:	4b0e      	ldr	r3, [pc, #56]	; (8001504 <startMagnetometro+0x78>)
 80014cc:	6818      	ldr	r0, [r3, #0]
 80014ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80014d2:	2202      	movs	r2, #2
 80014d4:	2101      	movs	r1, #1
 80014d6:	f003 fcb0 	bl	8004e3a <osEventFlagsWait>


	teste += 1;
 80014da:	4b0b      	ldr	r3, [pc, #44]	; (8001508 <startMagnetometro+0x7c>)
 80014dc:	781b      	ldrb	r3, [r3, #0]
 80014de:	3301      	adds	r3, #1
 80014e0:	b2da      	uxtb	r2, r3
 80014e2:	4b09      	ldr	r3, [pc, #36]	; (8001508 <startMagnetometro+0x7c>)
 80014e4:	701a      	strb	r2, [r3, #0]

	// TODO: Enviar informações para a fila


	// Realiza um clear no grupo de eventos após enviar suas informações
    osEventFlagsClear(grupoEventosBarco, BIT_MAGNETOMETRO);
 80014e6:	4b07      	ldr	r3, [pc, #28]	; (8001504 <startMagnetometro+0x78>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	2101      	movs	r1, #1
 80014ec:	4618      	mov	r0, r3
 80014ee:	f003 fc51 	bl	8004d94 <osEventFlagsClear>
	osDelay(pdMS_TO_TICKS(1));
 80014f2:	2001      	movs	r0, #1
 80014f4:	f003 fbb0 	bl	8004c58 <osDelay>
	osEventFlagsWait(grupoEventosBarco, BIT_MAGNETOMETRO, osFlagsNoClear, osWaitForever);
 80014f8:	e7e7      	b.n	80014ca <startMagnetometro+0x3e>
 80014fa:	bf00      	nop
 80014fc:	080080d8 	.word	0x080080d8
 8001500:	200049d0 	.word	0x200049d0
 8001504:	20004a24 	.word	0x20004a24
 8001508:	20000000 	.word	0x20000000

0800150c <startServoMotor>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startServoMotor */
void startServoMotor(void *argument)
{
 800150c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800150e:	b097      	sub	sp, #92	; 0x5c
 8001510:	af12      	add	r7, sp, #72	; 0x48
 8001512:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startServoMotor */

  // Variáveis de controle
  UBaseType_t quantidadeElementosQueue = 5;
 8001514:	2305      	movs	r3, #5
 8001516:	60fb      	str	r3, [r7, #12]
  uint16_t anguloServoMotor = 0; // Ângulo recebido pela queue
 8001518:	2300      	movs	r3, #0
 800151a:	817b      	strh	r3, [r7, #10]

  /* Infinite loop */
  for(;;)
  {
    // Espera até que a task controlador solicite uma mudança de velocidade
	osEventFlagsWait(grupoEventosBarco, BIT_SERVO_MOTOR, osFlagsNoClear, osWaitForever);
 800151c:	4b1d      	ldr	r3, [pc, #116]	; (8001594 <startServoMotor+0x88>)
 800151e:	6818      	ldr	r0, [r3, #0]
 8001520:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001524:	2202      	movs	r2, #2
 8001526:	2104      	movs	r1, #4
 8001528:	f003 fc87 	bl	8004e3a <osEventFlagsWait>

	quantidadeElementosQueue =  uxQueueMessagesWaiting(queueServoMotorHandle);
 800152c:	4b1a      	ldr	r3, [pc, #104]	; (8001598 <startServoMotor+0x8c>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4618      	mov	r0, r3
 8001532:	f004 fc67 	bl	8005e04 <uxQueueMessagesWaiting>
 8001536:	60f8      	str	r0, [r7, #12]
	if(quantidadeElementosQueue > 0)
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d020      	beq.n	8001580 <startServoMotor+0x74>
	{
		xQueueReceive(queueServoMotorHandle, &anguloServoMotor, pdMS_TO_TICKS(100));
 800153e:	4b16      	ldr	r3, [pc, #88]	; (8001598 <startServoMotor+0x8c>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f107 010a 	add.w	r1, r7, #10
 8001546:	2264      	movs	r2, #100	; 0x64
 8001548:	4618      	mov	r0, r3
 800154a:	f004 fb7b 	bl	8005c44 <xQueueReceive>

		// Altera o ângulo do servomotor
		setPWMAngulo(htim4, TIM_CHANNEL_1, 12500 , anguloServoMotor);
 800154e:	897b      	ldrh	r3, [r7, #10]
 8001550:	4e12      	ldr	r6, [pc, #72]	; (800159c <startServoMotor+0x90>)
 8001552:	9310      	str	r3, [sp, #64]	; 0x40
 8001554:	f243 03d4 	movw	r3, #12500	; 0x30d4
 8001558:	930f      	str	r3, [sp, #60]	; 0x3c
 800155a:	2300      	movs	r3, #0
 800155c:	930e      	str	r3, [sp, #56]	; 0x38
 800155e:	466d      	mov	r5, sp
 8001560:	f106 0410 	add.w	r4, r6, #16
 8001564:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001566:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001568:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800156a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800156c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800156e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001570:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001574:	e885 0003 	stmia.w	r5, {r0, r1}
 8001578:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800157c:	f7ff fc30 	bl	8000de0 <setPWMAngulo>

	}

	// Limpa a flag após mudar o ângulo do barco
    osEventFlagsClear(grupoEventosBarco, BIT_SERVO_MOTOR);
 8001580:	4b04      	ldr	r3, [pc, #16]	; (8001594 <startServoMotor+0x88>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	2104      	movs	r1, #4
 8001586:	4618      	mov	r0, r3
 8001588:	f003 fc04 	bl	8004d94 <osEventFlagsClear>

    osDelay(1);
 800158c:	2001      	movs	r0, #1
 800158e:	f003 fb63 	bl	8004c58 <osDelay>
	osEventFlagsWait(grupoEventosBarco, BIT_SERVO_MOTOR, osFlagsNoClear, osWaitForever);
 8001592:	e7c3      	b.n	800151c <startServoMotor+0x10>
 8001594:	20004a24 	.word	0x20004a24
 8001598:	20004a8c 	.word	0x20004a8c
 800159c:	20004944 	.word	0x20004944

080015a0 <startBluetooth>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startBluetooth */
void startBluetooth(void *argument)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b0a2      	sub	sp, #136	; 0x88
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startBluetooth */

	// String que armazena os resultados lidos pelo módulo bluetooth
	char respostaBluetooth[128] = {0};
 80015a8:	2300      	movs	r3, #0
 80015aa:	60bb      	str	r3, [r7, #8]
 80015ac:	f107 030c 	add.w	r3, r7, #12
 80015b0:	227c      	movs	r2, #124	; 0x7c
 80015b2:	2100      	movs	r1, #0
 80015b4:	4618      	mov	r0, r3
 80015b6:	f006 fd3b 	bl	8008030 <memset>

  /* Infinite loop */
  for(;;)
  {
	// Espera até que a task controlador solicite uma leitura
	osEventFlagsWait(grupoEventosBarco, BIT_BLUETOOTH, osFlagsNoClear, osWaitForever);
 80015ba:	4b09      	ldr	r3, [pc, #36]	; (80015e0 <startBluetooth+0x40>)
 80015bc:	6818      	ldr	r0, [r3, #0]
 80015be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80015c2:	2202      	movs	r2, #2
 80015c4:	2102      	movs	r1, #2
 80015c6:	f003 fc38 	bl	8004e3a <osEventFlagsWait>
	// TODO: Realizar leituras

	// TODO: Enviar informações para a fila

	// Após enviar informações para a fila, dá um clear no bit do magnetômetro
	osEventFlagsClear(grupoEventosBarco, BIT_BLUETOOTH);
 80015ca:	4b05      	ldr	r3, [pc, #20]	; (80015e0 <startBluetooth+0x40>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	2102      	movs	r1, #2
 80015d0:	4618      	mov	r0, r3
 80015d2:	f003 fbdf 	bl	8004d94 <osEventFlagsClear>
    osDelay(1);
 80015d6:	2001      	movs	r0, #1
 80015d8:	f003 fb3e 	bl	8004c58 <osDelay>
	osEventFlagsWait(grupoEventosBarco, BIT_BLUETOOTH, osFlagsNoClear, osWaitForever);
 80015dc:	e7ed      	b.n	80015ba <startBluetooth+0x1a>
 80015de:	bf00      	nop
 80015e0:	20004a24 	.word	0x20004a24

080015e4 <startMotorDC>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startMotorDC */
void startMotorDC(void *argument)
{
 80015e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015e6:	b0af      	sub	sp, #188	; 0xbc
 80015e8:	af10      	add	r7, sp, #64	; 0x40
 80015ea:	6078      	str	r0, [r7, #4]
  // Structs de configuração para o PWM e o HC595
  motor_dc motorTeste;
  HC595 hc595;

  // Configuração das structs de interação com o motor e com o HC595
  configHC595(&hc595, L293D_EN_GPIO_Port, L293D_EN_Pin, L293D_CLK_GPIO_Port, L293D_CLK_Pin, L293D_SER_GPIO_Port, L293D_SER_Pin);
 80015ec:	f107 000c 	add.w	r0, r7, #12
 80015f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80015f4:	9302      	str	r3, [sp, #8]
 80015f6:	4b1c      	ldr	r3, [pc, #112]	; (8001668 <startMotorDC+0x84>)
 80015f8:	9301      	str	r3, [sp, #4]
 80015fa:	2320      	movs	r3, #32
 80015fc:	9300      	str	r3, [sp, #0]
 80015fe:	4b1b      	ldr	r3, [pc, #108]	; (800166c <startMotorDC+0x88>)
 8001600:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001604:	4918      	ldr	r1, [pc, #96]	; (8001668 <startMotorDC+0x84>)
 8001606:	f7ff fb8b 	bl	8000d20 <configHC595>
  configMotor(&motorTeste, htim14, TIM_CHANNEL_1);
 800160a:	4e19      	ldr	r6, [pc, #100]	; (8001670 <startMotorDC+0x8c>)
 800160c:	f107 0c28 	add.w	ip, r7, #40	; 0x28
 8001610:	2300      	movs	r3, #0
 8001612:	930f      	str	r3, [sp, #60]	; 0x3c
 8001614:	466d      	mov	r5, sp
 8001616:	f106 040c 	add.w	r4, r6, #12
 800161a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800161c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800161e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001620:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001622:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001624:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001626:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800162a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800162e:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8001632:	4660      	mov	r0, ip
 8001634:	f7ff fb56 	bl	8000ce4 <configMotor>

  /* Infinite loop */
  for(;;)
  {
	// Espera até que a task controlador solicite uma mudança de velocidade
	osEventFlagsWait(grupoEventosBarco, BIT_MOTOR_DC, osFlagsNoClear, osWaitForever);
 8001638:	4b0e      	ldr	r3, [pc, #56]	; (8001674 <startMotorDC+0x90>)
 800163a:	6818      	ldr	r0, [r3, #0]
 800163c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001640:	2202      	movs	r2, #2
 8001642:	2108      	movs	r1, #8
 8001644:	f003 fbf9 	bl	8004e3a <osEventFlagsWait>
	teste += 100;
 8001648:	4b0b      	ldr	r3, [pc, #44]	; (8001678 <startMotorDC+0x94>)
 800164a:	781b      	ldrb	r3, [r3, #0]
 800164c:	3364      	adds	r3, #100	; 0x64
 800164e:	b2da      	uxtb	r2, r3
 8001650:	4b09      	ldr	r3, [pc, #36]	; (8001678 <startMotorDC+0x94>)
 8001652:	701a      	strb	r2, [r3, #0]
    osDelay(1);
 8001654:	2001      	movs	r0, #1
 8001656:	f003 faff 	bl	8004c58 <osDelay>

    // Limpa a flag após mudar a velocidade do barco
    osEventFlagsClear(grupoEventosBarco, BIT_MOTOR_DC);
 800165a:	4b06      	ldr	r3, [pc, #24]	; (8001674 <startMotorDC+0x90>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	2108      	movs	r1, #8
 8001660:	4618      	mov	r0, r3
 8001662:	f003 fb97 	bl	8004d94 <osEventFlagsClear>
	osEventFlagsWait(grupoEventosBarco, BIT_MOTOR_DC, osFlagsNoClear, osWaitForever);
 8001666:	e7e7      	b.n	8001638 <startMotorDC+0x54>
 8001668:	40020000 	.word	0x40020000
 800166c:	40020400 	.word	0x40020400
 8001670:	20004a44 	.word	0x20004a44
 8001674:	20004a24 	.word	0x20004a24
 8001678:	20000000 	.word	0x20000000

0800167c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b082      	sub	sp, #8
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a04      	ldr	r2, [pc, #16]	; (800169c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d101      	bne.n	8001692 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800168e:	f000 fa59 	bl	8001b44 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001692:	bf00      	nop
 8001694:	3708      	adds	r7, #8
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	40010000 	.word	0x40010000

080016a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016a4:	b672      	cpsid	i
}
 80016a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016a8:	e7fe      	b.n	80016a8 <Error_Handler+0x8>
	...

080016ac <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b082      	sub	sp, #8
 80016b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016b2:	2300      	movs	r3, #0
 80016b4:	607b      	str	r3, [r7, #4]
 80016b6:	4b12      	ldr	r3, [pc, #72]	; (8001700 <HAL_MspInit+0x54>)
 80016b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ba:	4a11      	ldr	r2, [pc, #68]	; (8001700 <HAL_MspInit+0x54>)
 80016bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016c0:	6453      	str	r3, [r2, #68]	; 0x44
 80016c2:	4b0f      	ldr	r3, [pc, #60]	; (8001700 <HAL_MspInit+0x54>)
 80016c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016ca:	607b      	str	r3, [r7, #4]
 80016cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016ce:	2300      	movs	r3, #0
 80016d0:	603b      	str	r3, [r7, #0]
 80016d2:	4b0b      	ldr	r3, [pc, #44]	; (8001700 <HAL_MspInit+0x54>)
 80016d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d6:	4a0a      	ldr	r2, [pc, #40]	; (8001700 <HAL_MspInit+0x54>)
 80016d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016dc:	6413      	str	r3, [r2, #64]	; 0x40
 80016de:	4b08      	ldr	r3, [pc, #32]	; (8001700 <HAL_MspInit+0x54>)
 80016e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016e6:	603b      	str	r3, [r7, #0]
 80016e8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80016ea:	2200      	movs	r2, #0
 80016ec:	210f      	movs	r1, #15
 80016ee:	f06f 0001 	mvn.w	r0, #1
 80016f2:	f000 faff 	bl	8001cf4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016f6:	bf00      	nop
 80016f8:	3708      	adds	r7, #8
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	40023800 	.word	0x40023800

08001704 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b08a      	sub	sp, #40	; 0x28
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800170c:	f107 0314 	add.w	r3, r7, #20
 8001710:	2200      	movs	r2, #0
 8001712:	601a      	str	r2, [r3, #0]
 8001714:	605a      	str	r2, [r3, #4]
 8001716:	609a      	str	r2, [r3, #8]
 8001718:	60da      	str	r2, [r3, #12]
 800171a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4a19      	ldr	r2, [pc, #100]	; (8001788 <HAL_I2C_MspInit+0x84>)
 8001722:	4293      	cmp	r3, r2
 8001724:	d12c      	bne.n	8001780 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001726:	2300      	movs	r3, #0
 8001728:	613b      	str	r3, [r7, #16]
 800172a:	4b18      	ldr	r3, [pc, #96]	; (800178c <HAL_I2C_MspInit+0x88>)
 800172c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172e:	4a17      	ldr	r2, [pc, #92]	; (800178c <HAL_I2C_MspInit+0x88>)
 8001730:	f043 0302 	orr.w	r3, r3, #2
 8001734:	6313      	str	r3, [r2, #48]	; 0x30
 8001736:	4b15      	ldr	r3, [pc, #84]	; (800178c <HAL_I2C_MspInit+0x88>)
 8001738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800173a:	f003 0302 	and.w	r3, r3, #2
 800173e:	613b      	str	r3, [r7, #16]
 8001740:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8001742:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001746:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001748:	2312      	movs	r3, #18
 800174a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800174c:	2301      	movs	r3, #1
 800174e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001750:	2303      	movs	r3, #3
 8001752:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001754:	2304      	movs	r3, #4
 8001756:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001758:	f107 0314 	add.w	r3, r7, #20
 800175c:	4619      	mov	r1, r3
 800175e:	480c      	ldr	r0, [pc, #48]	; (8001790 <HAL_I2C_MspInit+0x8c>)
 8001760:	f000 faf2 	bl	8001d48 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001764:	2300      	movs	r3, #0
 8001766:	60fb      	str	r3, [r7, #12]
 8001768:	4b08      	ldr	r3, [pc, #32]	; (800178c <HAL_I2C_MspInit+0x88>)
 800176a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800176c:	4a07      	ldr	r2, [pc, #28]	; (800178c <HAL_I2C_MspInit+0x88>)
 800176e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001772:	6413      	str	r3, [r2, #64]	; 0x40
 8001774:	4b05      	ldr	r3, [pc, #20]	; (800178c <HAL_I2C_MspInit+0x88>)
 8001776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001778:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800177c:	60fb      	str	r3, [r7, #12]
 800177e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001780:	bf00      	nop
 8001782:	3728      	adds	r7, #40	; 0x28
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}
 8001788:	40005400 	.word	0x40005400
 800178c:	40023800 	.word	0x40023800
 8001790:	40020400 	.word	0x40020400

08001794 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001794:	b480      	push	{r7}
 8001796:	b085      	sub	sp, #20
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a15      	ldr	r2, [pc, #84]	; (80017f8 <HAL_TIM_Base_MspInit+0x64>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d10e      	bne.n	80017c4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80017a6:	2300      	movs	r3, #0
 80017a8:	60fb      	str	r3, [r7, #12]
 80017aa:	4b14      	ldr	r3, [pc, #80]	; (80017fc <HAL_TIM_Base_MspInit+0x68>)
 80017ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ae:	4a13      	ldr	r2, [pc, #76]	; (80017fc <HAL_TIM_Base_MspInit+0x68>)
 80017b0:	f043 0304 	orr.w	r3, r3, #4
 80017b4:	6413      	str	r3, [r2, #64]	; 0x40
 80017b6:	4b11      	ldr	r3, [pc, #68]	; (80017fc <HAL_TIM_Base_MspInit+0x68>)
 80017b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ba:	f003 0304 	and.w	r3, r3, #4
 80017be:	60fb      	str	r3, [r7, #12]
 80017c0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 80017c2:	e012      	b.n	80017ea <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM14)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a0d      	ldr	r2, [pc, #52]	; (8001800 <HAL_TIM_Base_MspInit+0x6c>)
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d10d      	bne.n	80017ea <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM14_CLK_ENABLE();
 80017ce:	2300      	movs	r3, #0
 80017d0:	60bb      	str	r3, [r7, #8]
 80017d2:	4b0a      	ldr	r3, [pc, #40]	; (80017fc <HAL_TIM_Base_MspInit+0x68>)
 80017d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d6:	4a09      	ldr	r2, [pc, #36]	; (80017fc <HAL_TIM_Base_MspInit+0x68>)
 80017d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017dc:	6413      	str	r3, [r2, #64]	; 0x40
 80017de:	4b07      	ldr	r3, [pc, #28]	; (80017fc <HAL_TIM_Base_MspInit+0x68>)
 80017e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017e6:	60bb      	str	r3, [r7, #8]
 80017e8:	68bb      	ldr	r3, [r7, #8]
}
 80017ea:	bf00      	nop
 80017ec:	3714      	adds	r7, #20
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr
 80017f6:	bf00      	nop
 80017f8:	40000800 	.word	0x40000800
 80017fc:	40023800 	.word	0x40023800
 8001800:	40002000 	.word	0x40002000

08001804 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b08a      	sub	sp, #40	; 0x28
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800180c:	f107 0314 	add.w	r3, r7, #20
 8001810:	2200      	movs	r2, #0
 8001812:	601a      	str	r2, [r3, #0]
 8001814:	605a      	str	r2, [r3, #4]
 8001816:	609a      	str	r2, [r3, #8]
 8001818:	60da      	str	r2, [r3, #12]
 800181a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a24      	ldr	r2, [pc, #144]	; (80018b4 <HAL_TIM_MspPostInit+0xb0>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d11e      	bne.n	8001864 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001826:	2300      	movs	r3, #0
 8001828:	613b      	str	r3, [r7, #16]
 800182a:	4b23      	ldr	r3, [pc, #140]	; (80018b8 <HAL_TIM_MspPostInit+0xb4>)
 800182c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182e:	4a22      	ldr	r2, [pc, #136]	; (80018b8 <HAL_TIM_MspPostInit+0xb4>)
 8001830:	f043 0302 	orr.w	r3, r3, #2
 8001834:	6313      	str	r3, [r2, #48]	; 0x30
 8001836:	4b20      	ldr	r3, [pc, #128]	; (80018b8 <HAL_TIM_MspPostInit+0xb4>)
 8001838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183a:	f003 0302 	and.w	r3, r3, #2
 800183e:	613b      	str	r3, [r7, #16]
 8001840:	693b      	ldr	r3, [r7, #16]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = SG90_PWM_Pin;
 8001842:	2340      	movs	r3, #64	; 0x40
 8001844:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001846:	2302      	movs	r3, #2
 8001848:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184a:	2300      	movs	r3, #0
 800184c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800184e:	2300      	movs	r3, #0
 8001850:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001852:	2302      	movs	r3, #2
 8001854:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SG90_PWM_GPIO_Port, &GPIO_InitStruct);
 8001856:	f107 0314 	add.w	r3, r7, #20
 800185a:	4619      	mov	r1, r3
 800185c:	4817      	ldr	r0, [pc, #92]	; (80018bc <HAL_TIM_MspPostInit+0xb8>)
 800185e:	f000 fa73 	bl	8001d48 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM14_MspPostInit 1 */

  /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 8001862:	e022      	b.n	80018aa <HAL_TIM_MspPostInit+0xa6>
  else if(htim->Instance==TIM14)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a15      	ldr	r2, [pc, #84]	; (80018c0 <HAL_TIM_MspPostInit+0xbc>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d11d      	bne.n	80018aa <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800186e:	2300      	movs	r3, #0
 8001870:	60fb      	str	r3, [r7, #12]
 8001872:	4b11      	ldr	r3, [pc, #68]	; (80018b8 <HAL_TIM_MspPostInit+0xb4>)
 8001874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001876:	4a10      	ldr	r2, [pc, #64]	; (80018b8 <HAL_TIM_MspPostInit+0xb4>)
 8001878:	f043 0301 	orr.w	r3, r3, #1
 800187c:	6313      	str	r3, [r2, #48]	; 0x30
 800187e:	4b0e      	ldr	r3, [pc, #56]	; (80018b8 <HAL_TIM_MspPostInit+0xb4>)
 8001880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001882:	f003 0301 	and.w	r3, r3, #1
 8001886:	60fb      	str	r3, [r7, #12]
 8001888:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = L293D_PWM_Pin;
 800188a:	2380      	movs	r3, #128	; 0x80
 800188c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800188e:	2302      	movs	r3, #2
 8001890:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001892:	2300      	movs	r3, #0
 8001894:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001896:	2300      	movs	r3, #0
 8001898:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 800189a:	2309      	movs	r3, #9
 800189c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(L293D_PWM_GPIO_Port, &GPIO_InitStruct);
 800189e:	f107 0314 	add.w	r3, r7, #20
 80018a2:	4619      	mov	r1, r3
 80018a4:	4807      	ldr	r0, [pc, #28]	; (80018c4 <HAL_TIM_MspPostInit+0xc0>)
 80018a6:	f000 fa4f 	bl	8001d48 <HAL_GPIO_Init>
}
 80018aa:	bf00      	nop
 80018ac:	3728      	adds	r7, #40	; 0x28
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	40000800 	.word	0x40000800
 80018b8:	40023800 	.word	0x40023800
 80018bc:	40020400 	.word	0x40020400
 80018c0:	40002000 	.word	0x40002000
 80018c4:	40020000 	.word	0x40020000

080018c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b08a      	sub	sp, #40	; 0x28
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018d0:	f107 0314 	add.w	r3, r7, #20
 80018d4:	2200      	movs	r2, #0
 80018d6:	601a      	str	r2, [r3, #0]
 80018d8:	605a      	str	r2, [r3, #4]
 80018da:	609a      	str	r2, [r3, #8]
 80018dc:	60da      	str	r2, [r3, #12]
 80018de:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a28      	ldr	r2, [pc, #160]	; (8001988 <HAL_UART_MspInit+0xc0>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d14a      	bne.n	8001980 <HAL_UART_MspInit+0xb8>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80018ea:	2300      	movs	r3, #0
 80018ec:	613b      	str	r3, [r7, #16]
 80018ee:	4b27      	ldr	r3, [pc, #156]	; (800198c <HAL_UART_MspInit+0xc4>)
 80018f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f2:	4a26      	ldr	r2, [pc, #152]	; (800198c <HAL_UART_MspInit+0xc4>)
 80018f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018f8:	6413      	str	r3, [r2, #64]	; 0x40
 80018fa:	4b24      	ldr	r3, [pc, #144]	; (800198c <HAL_UART_MspInit+0xc4>)
 80018fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001902:	613b      	str	r3, [r7, #16]
 8001904:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001906:	2300      	movs	r3, #0
 8001908:	60fb      	str	r3, [r7, #12]
 800190a:	4b20      	ldr	r3, [pc, #128]	; (800198c <HAL_UART_MspInit+0xc4>)
 800190c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190e:	4a1f      	ldr	r2, [pc, #124]	; (800198c <HAL_UART_MspInit+0xc4>)
 8001910:	f043 0304 	orr.w	r3, r3, #4
 8001914:	6313      	str	r3, [r2, #48]	; 0x30
 8001916:	4b1d      	ldr	r3, [pc, #116]	; (800198c <HAL_UART_MspInit+0xc4>)
 8001918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800191a:	f003 0304 	and.w	r3, r3, #4
 800191e:	60fb      	str	r3, [r7, #12]
 8001920:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001922:	2300      	movs	r3, #0
 8001924:	60bb      	str	r3, [r7, #8]
 8001926:	4b19      	ldr	r3, [pc, #100]	; (800198c <HAL_UART_MspInit+0xc4>)
 8001928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800192a:	4a18      	ldr	r2, [pc, #96]	; (800198c <HAL_UART_MspInit+0xc4>)
 800192c:	f043 0302 	orr.w	r3, r3, #2
 8001930:	6313      	str	r3, [r2, #48]	; 0x30
 8001932:	4b16      	ldr	r3, [pc, #88]	; (800198c <HAL_UART_MspInit+0xc4>)
 8001934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001936:	f003 0302 	and.w	r3, r3, #2
 800193a:	60bb      	str	r3, [r7, #8]
 800193c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PC5     ------> USART3_RX
    PB10     ------> USART3_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800193e:	2320      	movs	r3, #32
 8001940:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001942:	2302      	movs	r3, #2
 8001944:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001946:	2300      	movs	r3, #0
 8001948:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800194a:	2303      	movs	r3, #3
 800194c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800194e:	2307      	movs	r3, #7
 8001950:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001952:	f107 0314 	add.w	r3, r7, #20
 8001956:	4619      	mov	r1, r3
 8001958:	480d      	ldr	r0, [pc, #52]	; (8001990 <HAL_UART_MspInit+0xc8>)
 800195a:	f000 f9f5 	bl	8001d48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800195e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001962:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001964:	2302      	movs	r3, #2
 8001966:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001968:	2300      	movs	r3, #0
 800196a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800196c:	2303      	movs	r3, #3
 800196e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001970:	2307      	movs	r3, #7
 8001972:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001974:	f107 0314 	add.w	r3, r7, #20
 8001978:	4619      	mov	r1, r3
 800197a:	4806      	ldr	r0, [pc, #24]	; (8001994 <HAL_UART_MspInit+0xcc>)
 800197c:	f000 f9e4 	bl	8001d48 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001980:	bf00      	nop
 8001982:	3728      	adds	r7, #40	; 0x28
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}
 8001988:	40004800 	.word	0x40004800
 800198c:	40023800 	.word	0x40023800
 8001990:	40020800 	.word	0x40020800
 8001994:	40020400 	.word	0x40020400

08001998 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b08c      	sub	sp, #48	; 0x30
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80019a0:	2300      	movs	r3, #0
 80019a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80019a4:	2300      	movs	r3, #0
 80019a6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 80019a8:	2200      	movs	r2, #0
 80019aa:	6879      	ldr	r1, [r7, #4]
 80019ac:	2019      	movs	r0, #25
 80019ae:	f000 f9a1 	bl	8001cf4 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80019b2:	2019      	movs	r0, #25
 80019b4:	f000 f9ba 	bl	8001d2c <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80019b8:	2300      	movs	r3, #0
 80019ba:	60fb      	str	r3, [r7, #12]
 80019bc:	4b1e      	ldr	r3, [pc, #120]	; (8001a38 <HAL_InitTick+0xa0>)
 80019be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019c0:	4a1d      	ldr	r2, [pc, #116]	; (8001a38 <HAL_InitTick+0xa0>)
 80019c2:	f043 0301 	orr.w	r3, r3, #1
 80019c6:	6453      	str	r3, [r2, #68]	; 0x44
 80019c8:	4b1b      	ldr	r3, [pc, #108]	; (8001a38 <HAL_InitTick+0xa0>)
 80019ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019cc:	f003 0301 	and.w	r3, r3, #1
 80019d0:	60fb      	str	r3, [r7, #12]
 80019d2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80019d4:	f107 0210 	add.w	r2, r7, #16
 80019d8:	f107 0314 	add.w	r3, r7, #20
 80019dc:	4611      	mov	r1, r2
 80019de:	4618      	mov	r0, r3
 80019e0:	f001 f8d6 	bl	8002b90 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80019e4:	f001 f8c0 	bl	8002b68 <HAL_RCC_GetPCLK2Freq>
 80019e8:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80019ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019ec:	4a13      	ldr	r2, [pc, #76]	; (8001a3c <HAL_InitTick+0xa4>)
 80019ee:	fba2 2303 	umull	r2, r3, r2, r3
 80019f2:	0c9b      	lsrs	r3, r3, #18
 80019f4:	3b01      	subs	r3, #1
 80019f6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80019f8:	4b11      	ldr	r3, [pc, #68]	; (8001a40 <HAL_InitTick+0xa8>)
 80019fa:	4a12      	ldr	r2, [pc, #72]	; (8001a44 <HAL_InitTick+0xac>)
 80019fc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80019fe:	4b10      	ldr	r3, [pc, #64]	; (8001a40 <HAL_InitTick+0xa8>)
 8001a00:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001a04:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001a06:	4a0e      	ldr	r2, [pc, #56]	; (8001a40 <HAL_InitTick+0xa8>)
 8001a08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a0a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001a0c:	4b0c      	ldr	r3, [pc, #48]	; (8001a40 <HAL_InitTick+0xa8>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a12:	4b0b      	ldr	r3, [pc, #44]	; (8001a40 <HAL_InitTick+0xa8>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001a18:	4809      	ldr	r0, [pc, #36]	; (8001a40 <HAL_InitTick+0xa8>)
 8001a1a:	f001 fd3b 	bl	8003494 <HAL_TIM_Base_Init>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d104      	bne.n	8001a2e <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001a24:	4806      	ldr	r0, [pc, #24]	; (8001a40 <HAL_InitTick+0xa8>)
 8001a26:	f001 fd85 	bl	8003534 <HAL_TIM_Base_Start_IT>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	e000      	b.n	8001a30 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8001a2e:	2301      	movs	r3, #1
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	3730      	adds	r7, #48	; 0x30
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}
 8001a38:	40023800 	.word	0x40023800
 8001a3c:	431bde83 	.word	0x431bde83
 8001a40:	20004a90 	.word	0x20004a90
 8001a44:	40010000 	.word	0x40010000

08001a48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a4c:	e7fe      	b.n	8001a4c <NMI_Handler+0x4>

08001a4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a4e:	b480      	push	{r7}
 8001a50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a52:	e7fe      	b.n	8001a52 <HardFault_Handler+0x4>

08001a54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a54:	b480      	push	{r7}
 8001a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a58:	e7fe      	b.n	8001a58 <MemManage_Handler+0x4>

08001a5a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a5a:	b480      	push	{r7}
 8001a5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a5e:	e7fe      	b.n	8001a5e <BusFault_Handler+0x4>

08001a60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a60:	b480      	push	{r7}
 8001a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a64:	e7fe      	b.n	8001a64 <UsageFault_Handler+0x4>

08001a66 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a66:	b480      	push	{r7}
 8001a68:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a6a:	bf00      	nop
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a72:	4770      	bx	lr

08001a74 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001a78:	4802      	ldr	r0, [pc, #8]	; (8001a84 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001a7a:	f001 ff5d 	bl	8003938 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001a7e:	bf00      	nop
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	20004a90 	.word	0x20004a90

08001a88 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a8c:	4b06      	ldr	r3, [pc, #24]	; (8001aa8 <SystemInit+0x20>)
 8001a8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a92:	4a05      	ldr	r2, [pc, #20]	; (8001aa8 <SystemInit+0x20>)
 8001a94:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a98:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a9c:	bf00      	nop
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr
 8001aa6:	bf00      	nop
 8001aa8:	e000ed00 	.word	0xe000ed00

08001aac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001aac:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ae4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ab0:	480d      	ldr	r0, [pc, #52]	; (8001ae8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001ab2:	490e      	ldr	r1, [pc, #56]	; (8001aec <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001ab4:	4a0e      	ldr	r2, [pc, #56]	; (8001af0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001ab6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ab8:	e002      	b.n	8001ac0 <LoopCopyDataInit>

08001aba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001aba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001abc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001abe:	3304      	adds	r3, #4

08001ac0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ac0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ac2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ac4:	d3f9      	bcc.n	8001aba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ac6:	4a0b      	ldr	r2, [pc, #44]	; (8001af4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001ac8:	4c0b      	ldr	r4, [pc, #44]	; (8001af8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001aca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001acc:	e001      	b.n	8001ad2 <LoopFillZerobss>

08001ace <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ace:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ad0:	3204      	adds	r2, #4

08001ad2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ad2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ad4:	d3fb      	bcc.n	8001ace <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001ad6:	f7ff ffd7 	bl	8001a88 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ada:	f006 fa77 	bl	8007fcc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ade:	f7ff f9ff 	bl	8000ee0 <main>
  bx  lr    
 8001ae2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001ae4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001ae8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001aec:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8001af0:	08008230 	.word	0x08008230
  ldr r2, =_sbss
 8001af4:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8001af8:	20004b1c 	.word	0x20004b1c

08001afc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001afc:	e7fe      	b.n	8001afc <ADC_IRQHandler>
	...

08001b00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b04:	4b0e      	ldr	r3, [pc, #56]	; (8001b40 <HAL_Init+0x40>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a0d      	ldr	r2, [pc, #52]	; (8001b40 <HAL_Init+0x40>)
 8001b0a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b0e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b10:	4b0b      	ldr	r3, [pc, #44]	; (8001b40 <HAL_Init+0x40>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a0a      	ldr	r2, [pc, #40]	; (8001b40 <HAL_Init+0x40>)
 8001b16:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b1a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b1c:	4b08      	ldr	r3, [pc, #32]	; (8001b40 <HAL_Init+0x40>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a07      	ldr	r2, [pc, #28]	; (8001b40 <HAL_Init+0x40>)
 8001b22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b26:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b28:	2003      	movs	r0, #3
 8001b2a:	f000 f8d8 	bl	8001cde <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b2e:	2000      	movs	r0, #0
 8001b30:	f7ff ff32 	bl	8001998 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b34:	f7ff fdba 	bl	80016ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b38:	2300      	movs	r3, #0
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	40023c00 	.word	0x40023c00

08001b44 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b44:	b480      	push	{r7}
 8001b46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b48:	4b06      	ldr	r3, [pc, #24]	; (8001b64 <HAL_IncTick+0x20>)
 8001b4a:	781b      	ldrb	r3, [r3, #0]
 8001b4c:	461a      	mov	r2, r3
 8001b4e:	4b06      	ldr	r3, [pc, #24]	; (8001b68 <HAL_IncTick+0x24>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4413      	add	r3, r2
 8001b54:	4a04      	ldr	r2, [pc, #16]	; (8001b68 <HAL_IncTick+0x24>)
 8001b56:	6013      	str	r3, [r2, #0]
}
 8001b58:	bf00      	nop
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr
 8001b62:	bf00      	nop
 8001b64:	2000000c 	.word	0x2000000c
 8001b68:	20004ad8 	.word	0x20004ad8

08001b6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	af00      	add	r7, sp, #0
  return uwTick;
 8001b70:	4b03      	ldr	r3, [pc, #12]	; (8001b80 <HAL_GetTick+0x14>)
 8001b72:	681b      	ldr	r3, [r3, #0]
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	46bd      	mov	sp, r7
 8001b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7c:	4770      	bx	lr
 8001b7e:	bf00      	nop
 8001b80:	20004ad8 	.word	0x20004ad8

08001b84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b085      	sub	sp, #20
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	f003 0307 	and.w	r3, r3, #7
 8001b92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b94:	4b0c      	ldr	r3, [pc, #48]	; (8001bc8 <__NVIC_SetPriorityGrouping+0x44>)
 8001b96:	68db      	ldr	r3, [r3, #12]
 8001b98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b9a:	68ba      	ldr	r2, [r7, #8]
 8001b9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ba8:	68bb      	ldr	r3, [r7, #8]
 8001baa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001bb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bb6:	4a04      	ldr	r2, [pc, #16]	; (8001bc8 <__NVIC_SetPriorityGrouping+0x44>)
 8001bb8:	68bb      	ldr	r3, [r7, #8]
 8001bba:	60d3      	str	r3, [r2, #12]
}
 8001bbc:	bf00      	nop
 8001bbe:	3714      	adds	r7, #20
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc6:	4770      	bx	lr
 8001bc8:	e000ed00 	.word	0xe000ed00

08001bcc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bd0:	4b04      	ldr	r3, [pc, #16]	; (8001be4 <__NVIC_GetPriorityGrouping+0x18>)
 8001bd2:	68db      	ldr	r3, [r3, #12]
 8001bd4:	0a1b      	lsrs	r3, r3, #8
 8001bd6:	f003 0307 	and.w	r3, r3, #7
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be2:	4770      	bx	lr
 8001be4:	e000ed00 	.word	0xe000ed00

08001be8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b083      	sub	sp, #12
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	4603      	mov	r3, r0
 8001bf0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	db0b      	blt.n	8001c12 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bfa:	79fb      	ldrb	r3, [r7, #7]
 8001bfc:	f003 021f 	and.w	r2, r3, #31
 8001c00:	4907      	ldr	r1, [pc, #28]	; (8001c20 <__NVIC_EnableIRQ+0x38>)
 8001c02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c06:	095b      	lsrs	r3, r3, #5
 8001c08:	2001      	movs	r0, #1
 8001c0a:	fa00 f202 	lsl.w	r2, r0, r2
 8001c0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c12:	bf00      	nop
 8001c14:	370c      	adds	r7, #12
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr
 8001c1e:	bf00      	nop
 8001c20:	e000e100 	.word	0xe000e100

08001c24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b083      	sub	sp, #12
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	6039      	str	r1, [r7, #0]
 8001c2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	db0a      	blt.n	8001c4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	b2da      	uxtb	r2, r3
 8001c3c:	490c      	ldr	r1, [pc, #48]	; (8001c70 <__NVIC_SetPriority+0x4c>)
 8001c3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c42:	0112      	lsls	r2, r2, #4
 8001c44:	b2d2      	uxtb	r2, r2
 8001c46:	440b      	add	r3, r1
 8001c48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c4c:	e00a      	b.n	8001c64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	b2da      	uxtb	r2, r3
 8001c52:	4908      	ldr	r1, [pc, #32]	; (8001c74 <__NVIC_SetPriority+0x50>)
 8001c54:	79fb      	ldrb	r3, [r7, #7]
 8001c56:	f003 030f 	and.w	r3, r3, #15
 8001c5a:	3b04      	subs	r3, #4
 8001c5c:	0112      	lsls	r2, r2, #4
 8001c5e:	b2d2      	uxtb	r2, r2
 8001c60:	440b      	add	r3, r1
 8001c62:	761a      	strb	r2, [r3, #24]
}
 8001c64:	bf00      	nop
 8001c66:	370c      	adds	r7, #12
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6e:	4770      	bx	lr
 8001c70:	e000e100 	.word	0xe000e100
 8001c74:	e000ed00 	.word	0xe000ed00

08001c78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b089      	sub	sp, #36	; 0x24
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	60f8      	str	r0, [r7, #12]
 8001c80:	60b9      	str	r1, [r7, #8]
 8001c82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	f003 0307 	and.w	r3, r3, #7
 8001c8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c8c:	69fb      	ldr	r3, [r7, #28]
 8001c8e:	f1c3 0307 	rsb	r3, r3, #7
 8001c92:	2b04      	cmp	r3, #4
 8001c94:	bf28      	it	cs
 8001c96:	2304      	movcs	r3, #4
 8001c98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c9a:	69fb      	ldr	r3, [r7, #28]
 8001c9c:	3304      	adds	r3, #4
 8001c9e:	2b06      	cmp	r3, #6
 8001ca0:	d902      	bls.n	8001ca8 <NVIC_EncodePriority+0x30>
 8001ca2:	69fb      	ldr	r3, [r7, #28]
 8001ca4:	3b03      	subs	r3, #3
 8001ca6:	e000      	b.n	8001caa <NVIC_EncodePriority+0x32>
 8001ca8:	2300      	movs	r3, #0
 8001caa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001cb0:	69bb      	ldr	r3, [r7, #24]
 8001cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb6:	43da      	mvns	r2, r3
 8001cb8:	68bb      	ldr	r3, [r7, #8]
 8001cba:	401a      	ands	r2, r3
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cc0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	fa01 f303 	lsl.w	r3, r1, r3
 8001cca:	43d9      	mvns	r1, r3
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cd0:	4313      	orrs	r3, r2
         );
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	3724      	adds	r7, #36	; 0x24
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr

08001cde <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cde:	b580      	push	{r7, lr}
 8001ce0:	b082      	sub	sp, #8
 8001ce2:	af00      	add	r7, sp, #0
 8001ce4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ce6:	6878      	ldr	r0, [r7, #4]
 8001ce8:	f7ff ff4c 	bl	8001b84 <__NVIC_SetPriorityGrouping>
}
 8001cec:	bf00      	nop
 8001cee:	3708      	adds	r7, #8
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}

08001cf4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b086      	sub	sp, #24
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	60b9      	str	r1, [r7, #8]
 8001cfe:	607a      	str	r2, [r7, #4]
 8001d00:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d02:	2300      	movs	r3, #0
 8001d04:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d06:	f7ff ff61 	bl	8001bcc <__NVIC_GetPriorityGrouping>
 8001d0a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d0c:	687a      	ldr	r2, [r7, #4]
 8001d0e:	68b9      	ldr	r1, [r7, #8]
 8001d10:	6978      	ldr	r0, [r7, #20]
 8001d12:	f7ff ffb1 	bl	8001c78 <NVIC_EncodePriority>
 8001d16:	4602      	mov	r2, r0
 8001d18:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d1c:	4611      	mov	r1, r2
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f7ff ff80 	bl	8001c24 <__NVIC_SetPriority>
}
 8001d24:	bf00      	nop
 8001d26:	3718      	adds	r7, #24
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}

08001d2c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b082      	sub	sp, #8
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	4603      	mov	r3, r0
 8001d34:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f7ff ff54 	bl	8001be8 <__NVIC_EnableIRQ>
}
 8001d40:	bf00      	nop
 8001d42:	3708      	adds	r7, #8
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}

08001d48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b089      	sub	sp, #36	; 0x24
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
 8001d50:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001d52:	2300      	movs	r3, #0
 8001d54:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001d56:	2300      	movs	r3, #0
 8001d58:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d5e:	2300      	movs	r3, #0
 8001d60:	61fb      	str	r3, [r7, #28]
 8001d62:	e165      	b.n	8002030 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d64:	2201      	movs	r2, #1
 8001d66:	69fb      	ldr	r3, [r7, #28]
 8001d68:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	697a      	ldr	r2, [r7, #20]
 8001d74:	4013      	ands	r3, r2
 8001d76:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d78:	693a      	ldr	r2, [r7, #16]
 8001d7a:	697b      	ldr	r3, [r7, #20]
 8001d7c:	429a      	cmp	r2, r3
 8001d7e:	f040 8154 	bne.w	800202a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	f003 0303 	and.w	r3, r3, #3
 8001d8a:	2b01      	cmp	r3, #1
 8001d8c:	d005      	beq.n	8001d9a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d96:	2b02      	cmp	r3, #2
 8001d98:	d130      	bne.n	8001dfc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	689b      	ldr	r3, [r3, #8]
 8001d9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001da0:	69fb      	ldr	r3, [r7, #28]
 8001da2:	005b      	lsls	r3, r3, #1
 8001da4:	2203      	movs	r2, #3
 8001da6:	fa02 f303 	lsl.w	r3, r2, r3
 8001daa:	43db      	mvns	r3, r3
 8001dac:	69ba      	ldr	r2, [r7, #24]
 8001dae:	4013      	ands	r3, r2
 8001db0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	68da      	ldr	r2, [r3, #12]
 8001db6:	69fb      	ldr	r3, [r7, #28]
 8001db8:	005b      	lsls	r3, r3, #1
 8001dba:	fa02 f303 	lsl.w	r3, r2, r3
 8001dbe:	69ba      	ldr	r2, [r7, #24]
 8001dc0:	4313      	orrs	r3, r2
 8001dc2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	69ba      	ldr	r2, [r7, #24]
 8001dc8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001dd0:	2201      	movs	r2, #1
 8001dd2:	69fb      	ldr	r3, [r7, #28]
 8001dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd8:	43db      	mvns	r3, r3
 8001dda:	69ba      	ldr	r2, [r7, #24]
 8001ddc:	4013      	ands	r3, r2
 8001dde:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	091b      	lsrs	r3, r3, #4
 8001de6:	f003 0201 	and.w	r2, r3, #1
 8001dea:	69fb      	ldr	r3, [r7, #28]
 8001dec:	fa02 f303 	lsl.w	r3, r2, r3
 8001df0:	69ba      	ldr	r2, [r7, #24]
 8001df2:	4313      	orrs	r3, r2
 8001df4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	69ba      	ldr	r2, [r7, #24]
 8001dfa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	f003 0303 	and.w	r3, r3, #3
 8001e04:	2b03      	cmp	r3, #3
 8001e06:	d017      	beq.n	8001e38 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	68db      	ldr	r3, [r3, #12]
 8001e0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001e0e:	69fb      	ldr	r3, [r7, #28]
 8001e10:	005b      	lsls	r3, r3, #1
 8001e12:	2203      	movs	r2, #3
 8001e14:	fa02 f303 	lsl.w	r3, r2, r3
 8001e18:	43db      	mvns	r3, r3
 8001e1a:	69ba      	ldr	r2, [r7, #24]
 8001e1c:	4013      	ands	r3, r2
 8001e1e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	689a      	ldr	r2, [r3, #8]
 8001e24:	69fb      	ldr	r3, [r7, #28]
 8001e26:	005b      	lsls	r3, r3, #1
 8001e28:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2c:	69ba      	ldr	r2, [r7, #24]
 8001e2e:	4313      	orrs	r3, r2
 8001e30:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	69ba      	ldr	r2, [r7, #24]
 8001e36:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	f003 0303 	and.w	r3, r3, #3
 8001e40:	2b02      	cmp	r3, #2
 8001e42:	d123      	bne.n	8001e8c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e44:	69fb      	ldr	r3, [r7, #28]
 8001e46:	08da      	lsrs	r2, r3, #3
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	3208      	adds	r2, #8
 8001e4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e50:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e52:	69fb      	ldr	r3, [r7, #28]
 8001e54:	f003 0307 	and.w	r3, r3, #7
 8001e58:	009b      	lsls	r3, r3, #2
 8001e5a:	220f      	movs	r2, #15
 8001e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e60:	43db      	mvns	r3, r3
 8001e62:	69ba      	ldr	r2, [r7, #24]
 8001e64:	4013      	ands	r3, r2
 8001e66:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	691a      	ldr	r2, [r3, #16]
 8001e6c:	69fb      	ldr	r3, [r7, #28]
 8001e6e:	f003 0307 	and.w	r3, r3, #7
 8001e72:	009b      	lsls	r3, r3, #2
 8001e74:	fa02 f303 	lsl.w	r3, r2, r3
 8001e78:	69ba      	ldr	r2, [r7, #24]
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e7e:	69fb      	ldr	r3, [r7, #28]
 8001e80:	08da      	lsrs	r2, r3, #3
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	3208      	adds	r2, #8
 8001e86:	69b9      	ldr	r1, [r7, #24]
 8001e88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e92:	69fb      	ldr	r3, [r7, #28]
 8001e94:	005b      	lsls	r3, r3, #1
 8001e96:	2203      	movs	r2, #3
 8001e98:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9c:	43db      	mvns	r3, r3
 8001e9e:	69ba      	ldr	r2, [r7, #24]
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	f003 0203 	and.w	r2, r3, #3
 8001eac:	69fb      	ldr	r3, [r7, #28]
 8001eae:	005b      	lsls	r3, r3, #1
 8001eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb4:	69ba      	ldr	r2, [r7, #24]
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	69ba      	ldr	r2, [r7, #24]
 8001ebe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	f000 80ae 	beq.w	800202a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ece:	2300      	movs	r3, #0
 8001ed0:	60fb      	str	r3, [r7, #12]
 8001ed2:	4b5d      	ldr	r3, [pc, #372]	; (8002048 <HAL_GPIO_Init+0x300>)
 8001ed4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ed6:	4a5c      	ldr	r2, [pc, #368]	; (8002048 <HAL_GPIO_Init+0x300>)
 8001ed8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001edc:	6453      	str	r3, [r2, #68]	; 0x44
 8001ede:	4b5a      	ldr	r3, [pc, #360]	; (8002048 <HAL_GPIO_Init+0x300>)
 8001ee0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ee2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ee6:	60fb      	str	r3, [r7, #12]
 8001ee8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001eea:	4a58      	ldr	r2, [pc, #352]	; (800204c <HAL_GPIO_Init+0x304>)
 8001eec:	69fb      	ldr	r3, [r7, #28]
 8001eee:	089b      	lsrs	r3, r3, #2
 8001ef0:	3302      	adds	r3, #2
 8001ef2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ef6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ef8:	69fb      	ldr	r3, [r7, #28]
 8001efa:	f003 0303 	and.w	r3, r3, #3
 8001efe:	009b      	lsls	r3, r3, #2
 8001f00:	220f      	movs	r2, #15
 8001f02:	fa02 f303 	lsl.w	r3, r2, r3
 8001f06:	43db      	mvns	r3, r3
 8001f08:	69ba      	ldr	r2, [r7, #24]
 8001f0a:	4013      	ands	r3, r2
 8001f0c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	4a4f      	ldr	r2, [pc, #316]	; (8002050 <HAL_GPIO_Init+0x308>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d025      	beq.n	8001f62 <HAL_GPIO_Init+0x21a>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	4a4e      	ldr	r2, [pc, #312]	; (8002054 <HAL_GPIO_Init+0x30c>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d01f      	beq.n	8001f5e <HAL_GPIO_Init+0x216>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	4a4d      	ldr	r2, [pc, #308]	; (8002058 <HAL_GPIO_Init+0x310>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d019      	beq.n	8001f5a <HAL_GPIO_Init+0x212>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	4a4c      	ldr	r2, [pc, #304]	; (800205c <HAL_GPIO_Init+0x314>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d013      	beq.n	8001f56 <HAL_GPIO_Init+0x20e>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	4a4b      	ldr	r2, [pc, #300]	; (8002060 <HAL_GPIO_Init+0x318>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d00d      	beq.n	8001f52 <HAL_GPIO_Init+0x20a>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	4a4a      	ldr	r2, [pc, #296]	; (8002064 <HAL_GPIO_Init+0x31c>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d007      	beq.n	8001f4e <HAL_GPIO_Init+0x206>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	4a49      	ldr	r2, [pc, #292]	; (8002068 <HAL_GPIO_Init+0x320>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d101      	bne.n	8001f4a <HAL_GPIO_Init+0x202>
 8001f46:	2306      	movs	r3, #6
 8001f48:	e00c      	b.n	8001f64 <HAL_GPIO_Init+0x21c>
 8001f4a:	2307      	movs	r3, #7
 8001f4c:	e00a      	b.n	8001f64 <HAL_GPIO_Init+0x21c>
 8001f4e:	2305      	movs	r3, #5
 8001f50:	e008      	b.n	8001f64 <HAL_GPIO_Init+0x21c>
 8001f52:	2304      	movs	r3, #4
 8001f54:	e006      	b.n	8001f64 <HAL_GPIO_Init+0x21c>
 8001f56:	2303      	movs	r3, #3
 8001f58:	e004      	b.n	8001f64 <HAL_GPIO_Init+0x21c>
 8001f5a:	2302      	movs	r3, #2
 8001f5c:	e002      	b.n	8001f64 <HAL_GPIO_Init+0x21c>
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e000      	b.n	8001f64 <HAL_GPIO_Init+0x21c>
 8001f62:	2300      	movs	r3, #0
 8001f64:	69fa      	ldr	r2, [r7, #28]
 8001f66:	f002 0203 	and.w	r2, r2, #3
 8001f6a:	0092      	lsls	r2, r2, #2
 8001f6c:	4093      	lsls	r3, r2
 8001f6e:	69ba      	ldr	r2, [r7, #24]
 8001f70:	4313      	orrs	r3, r2
 8001f72:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f74:	4935      	ldr	r1, [pc, #212]	; (800204c <HAL_GPIO_Init+0x304>)
 8001f76:	69fb      	ldr	r3, [r7, #28]
 8001f78:	089b      	lsrs	r3, r3, #2
 8001f7a:	3302      	adds	r3, #2
 8001f7c:	69ba      	ldr	r2, [r7, #24]
 8001f7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f82:	4b3a      	ldr	r3, [pc, #232]	; (800206c <HAL_GPIO_Init+0x324>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f88:	693b      	ldr	r3, [r7, #16]
 8001f8a:	43db      	mvns	r3, r3
 8001f8c:	69ba      	ldr	r2, [r7, #24]
 8001f8e:	4013      	ands	r3, r2
 8001f90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d003      	beq.n	8001fa6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001f9e:	69ba      	ldr	r2, [r7, #24]
 8001fa0:	693b      	ldr	r3, [r7, #16]
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001fa6:	4a31      	ldr	r2, [pc, #196]	; (800206c <HAL_GPIO_Init+0x324>)
 8001fa8:	69bb      	ldr	r3, [r7, #24]
 8001faa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001fac:	4b2f      	ldr	r3, [pc, #188]	; (800206c <HAL_GPIO_Init+0x324>)
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fb2:	693b      	ldr	r3, [r7, #16]
 8001fb4:	43db      	mvns	r3, r3
 8001fb6:	69ba      	ldr	r2, [r7, #24]
 8001fb8:	4013      	ands	r3, r2
 8001fba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d003      	beq.n	8001fd0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001fc8:	69ba      	ldr	r2, [r7, #24]
 8001fca:	693b      	ldr	r3, [r7, #16]
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001fd0:	4a26      	ldr	r2, [pc, #152]	; (800206c <HAL_GPIO_Init+0x324>)
 8001fd2:	69bb      	ldr	r3, [r7, #24]
 8001fd4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001fd6:	4b25      	ldr	r3, [pc, #148]	; (800206c <HAL_GPIO_Init+0x324>)
 8001fd8:	689b      	ldr	r3, [r3, #8]
 8001fda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fdc:	693b      	ldr	r3, [r7, #16]
 8001fde:	43db      	mvns	r3, r3
 8001fe0:	69ba      	ldr	r2, [r7, #24]
 8001fe2:	4013      	ands	r3, r2
 8001fe4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d003      	beq.n	8001ffa <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001ff2:	69ba      	ldr	r2, [r7, #24]
 8001ff4:	693b      	ldr	r3, [r7, #16]
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ffa:	4a1c      	ldr	r2, [pc, #112]	; (800206c <HAL_GPIO_Init+0x324>)
 8001ffc:	69bb      	ldr	r3, [r7, #24]
 8001ffe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002000:	4b1a      	ldr	r3, [pc, #104]	; (800206c <HAL_GPIO_Init+0x324>)
 8002002:	68db      	ldr	r3, [r3, #12]
 8002004:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002006:	693b      	ldr	r3, [r7, #16]
 8002008:	43db      	mvns	r3, r3
 800200a:	69ba      	ldr	r2, [r7, #24]
 800200c:	4013      	ands	r3, r2
 800200e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002018:	2b00      	cmp	r3, #0
 800201a:	d003      	beq.n	8002024 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800201c:	69ba      	ldr	r2, [r7, #24]
 800201e:	693b      	ldr	r3, [r7, #16]
 8002020:	4313      	orrs	r3, r2
 8002022:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002024:	4a11      	ldr	r2, [pc, #68]	; (800206c <HAL_GPIO_Init+0x324>)
 8002026:	69bb      	ldr	r3, [r7, #24]
 8002028:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800202a:	69fb      	ldr	r3, [r7, #28]
 800202c:	3301      	adds	r3, #1
 800202e:	61fb      	str	r3, [r7, #28]
 8002030:	69fb      	ldr	r3, [r7, #28]
 8002032:	2b0f      	cmp	r3, #15
 8002034:	f67f ae96 	bls.w	8001d64 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002038:	bf00      	nop
 800203a:	bf00      	nop
 800203c:	3724      	adds	r7, #36	; 0x24
 800203e:	46bd      	mov	sp, r7
 8002040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002044:	4770      	bx	lr
 8002046:	bf00      	nop
 8002048:	40023800 	.word	0x40023800
 800204c:	40013800 	.word	0x40013800
 8002050:	40020000 	.word	0x40020000
 8002054:	40020400 	.word	0x40020400
 8002058:	40020800 	.word	0x40020800
 800205c:	40020c00 	.word	0x40020c00
 8002060:	40021000 	.word	0x40021000
 8002064:	40021400 	.word	0x40021400
 8002068:	40021800 	.word	0x40021800
 800206c:	40013c00 	.word	0x40013c00

08002070 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002070:	b480      	push	{r7}
 8002072:	b083      	sub	sp, #12
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
 8002078:	460b      	mov	r3, r1
 800207a:	807b      	strh	r3, [r7, #2]
 800207c:	4613      	mov	r3, r2
 800207e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002080:	787b      	ldrb	r3, [r7, #1]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d003      	beq.n	800208e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002086:	887a      	ldrh	r2, [r7, #2]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800208c:	e003      	b.n	8002096 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800208e:	887b      	ldrh	r3, [r7, #2]
 8002090:	041a      	lsls	r2, r3, #16
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	619a      	str	r2, [r3, #24]
}
 8002096:	bf00      	nop
 8002098:	370c      	adds	r7, #12
 800209a:	46bd      	mov	sp, r7
 800209c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a0:	4770      	bx	lr
	...

080020a4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b084      	sub	sp, #16
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d101      	bne.n	80020b6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80020b2:	2301      	movs	r3, #1
 80020b4:	e12b      	b.n	800230e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020bc:	b2db      	uxtb	r3, r3
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d106      	bne.n	80020d0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2200      	movs	r2, #0
 80020c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80020ca:	6878      	ldr	r0, [r7, #4]
 80020cc:	f7ff fb1a 	bl	8001704 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2224      	movs	r2, #36	; 0x24
 80020d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	681a      	ldr	r2, [r3, #0]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f022 0201 	bic.w	r2, r2, #1
 80020e6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	681a      	ldr	r2, [r3, #0]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80020f6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	681a      	ldr	r2, [r3, #0]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002106:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002108:	f000 fd1a 	bl	8002b40 <HAL_RCC_GetPCLK1Freq>
 800210c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	4a81      	ldr	r2, [pc, #516]	; (8002318 <HAL_I2C_Init+0x274>)
 8002114:	4293      	cmp	r3, r2
 8002116:	d807      	bhi.n	8002128 <HAL_I2C_Init+0x84>
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	4a80      	ldr	r2, [pc, #512]	; (800231c <HAL_I2C_Init+0x278>)
 800211c:	4293      	cmp	r3, r2
 800211e:	bf94      	ite	ls
 8002120:	2301      	movls	r3, #1
 8002122:	2300      	movhi	r3, #0
 8002124:	b2db      	uxtb	r3, r3
 8002126:	e006      	b.n	8002136 <HAL_I2C_Init+0x92>
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	4a7d      	ldr	r2, [pc, #500]	; (8002320 <HAL_I2C_Init+0x27c>)
 800212c:	4293      	cmp	r3, r2
 800212e:	bf94      	ite	ls
 8002130:	2301      	movls	r3, #1
 8002132:	2300      	movhi	r3, #0
 8002134:	b2db      	uxtb	r3, r3
 8002136:	2b00      	cmp	r3, #0
 8002138:	d001      	beq.n	800213e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800213a:	2301      	movs	r3, #1
 800213c:	e0e7      	b.n	800230e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	4a78      	ldr	r2, [pc, #480]	; (8002324 <HAL_I2C_Init+0x280>)
 8002142:	fba2 2303 	umull	r2, r3, r2, r3
 8002146:	0c9b      	lsrs	r3, r3, #18
 8002148:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	68ba      	ldr	r2, [r7, #8]
 800215a:	430a      	orrs	r2, r1
 800215c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	6a1b      	ldr	r3, [r3, #32]
 8002164:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	4a6a      	ldr	r2, [pc, #424]	; (8002318 <HAL_I2C_Init+0x274>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d802      	bhi.n	8002178 <HAL_I2C_Init+0xd4>
 8002172:	68bb      	ldr	r3, [r7, #8]
 8002174:	3301      	adds	r3, #1
 8002176:	e009      	b.n	800218c <HAL_I2C_Init+0xe8>
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800217e:	fb02 f303 	mul.w	r3, r2, r3
 8002182:	4a69      	ldr	r2, [pc, #420]	; (8002328 <HAL_I2C_Init+0x284>)
 8002184:	fba2 2303 	umull	r2, r3, r2, r3
 8002188:	099b      	lsrs	r3, r3, #6
 800218a:	3301      	adds	r3, #1
 800218c:	687a      	ldr	r2, [r7, #4]
 800218e:	6812      	ldr	r2, [r2, #0]
 8002190:	430b      	orrs	r3, r1
 8002192:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	69db      	ldr	r3, [r3, #28]
 800219a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800219e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	495c      	ldr	r1, [pc, #368]	; (8002318 <HAL_I2C_Init+0x274>)
 80021a8:	428b      	cmp	r3, r1
 80021aa:	d819      	bhi.n	80021e0 <HAL_I2C_Init+0x13c>
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	1e59      	subs	r1, r3, #1
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	005b      	lsls	r3, r3, #1
 80021b6:	fbb1 f3f3 	udiv	r3, r1, r3
 80021ba:	1c59      	adds	r1, r3, #1
 80021bc:	f640 73fc 	movw	r3, #4092	; 0xffc
 80021c0:	400b      	ands	r3, r1
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d00a      	beq.n	80021dc <HAL_I2C_Init+0x138>
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	1e59      	subs	r1, r3, #1
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	005b      	lsls	r3, r3, #1
 80021d0:	fbb1 f3f3 	udiv	r3, r1, r3
 80021d4:	3301      	adds	r3, #1
 80021d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021da:	e051      	b.n	8002280 <HAL_I2C_Init+0x1dc>
 80021dc:	2304      	movs	r3, #4
 80021de:	e04f      	b.n	8002280 <HAL_I2C_Init+0x1dc>
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	689b      	ldr	r3, [r3, #8]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d111      	bne.n	800220c <HAL_I2C_Init+0x168>
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	1e58      	subs	r0, r3, #1
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6859      	ldr	r1, [r3, #4]
 80021f0:	460b      	mov	r3, r1
 80021f2:	005b      	lsls	r3, r3, #1
 80021f4:	440b      	add	r3, r1
 80021f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80021fa:	3301      	adds	r3, #1
 80021fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002200:	2b00      	cmp	r3, #0
 8002202:	bf0c      	ite	eq
 8002204:	2301      	moveq	r3, #1
 8002206:	2300      	movne	r3, #0
 8002208:	b2db      	uxtb	r3, r3
 800220a:	e012      	b.n	8002232 <HAL_I2C_Init+0x18e>
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	1e58      	subs	r0, r3, #1
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6859      	ldr	r1, [r3, #4]
 8002214:	460b      	mov	r3, r1
 8002216:	009b      	lsls	r3, r3, #2
 8002218:	440b      	add	r3, r1
 800221a:	0099      	lsls	r1, r3, #2
 800221c:	440b      	add	r3, r1
 800221e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002222:	3301      	adds	r3, #1
 8002224:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002228:	2b00      	cmp	r3, #0
 800222a:	bf0c      	ite	eq
 800222c:	2301      	moveq	r3, #1
 800222e:	2300      	movne	r3, #0
 8002230:	b2db      	uxtb	r3, r3
 8002232:	2b00      	cmp	r3, #0
 8002234:	d001      	beq.n	800223a <HAL_I2C_Init+0x196>
 8002236:	2301      	movs	r3, #1
 8002238:	e022      	b.n	8002280 <HAL_I2C_Init+0x1dc>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d10e      	bne.n	8002260 <HAL_I2C_Init+0x1bc>
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	1e58      	subs	r0, r3, #1
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6859      	ldr	r1, [r3, #4]
 800224a:	460b      	mov	r3, r1
 800224c:	005b      	lsls	r3, r3, #1
 800224e:	440b      	add	r3, r1
 8002250:	fbb0 f3f3 	udiv	r3, r0, r3
 8002254:	3301      	adds	r3, #1
 8002256:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800225a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800225e:	e00f      	b.n	8002280 <HAL_I2C_Init+0x1dc>
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	1e58      	subs	r0, r3, #1
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6859      	ldr	r1, [r3, #4]
 8002268:	460b      	mov	r3, r1
 800226a:	009b      	lsls	r3, r3, #2
 800226c:	440b      	add	r3, r1
 800226e:	0099      	lsls	r1, r3, #2
 8002270:	440b      	add	r3, r1
 8002272:	fbb0 f3f3 	udiv	r3, r0, r3
 8002276:	3301      	adds	r3, #1
 8002278:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800227c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002280:	6879      	ldr	r1, [r7, #4]
 8002282:	6809      	ldr	r1, [r1, #0]
 8002284:	4313      	orrs	r3, r2
 8002286:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	69da      	ldr	r2, [r3, #28]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6a1b      	ldr	r3, [r3, #32]
 800229a:	431a      	orrs	r2, r3
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	430a      	orrs	r2, r1
 80022a2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	689b      	ldr	r3, [r3, #8]
 80022aa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80022ae:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80022b2:	687a      	ldr	r2, [r7, #4]
 80022b4:	6911      	ldr	r1, [r2, #16]
 80022b6:	687a      	ldr	r2, [r7, #4]
 80022b8:	68d2      	ldr	r2, [r2, #12]
 80022ba:	4311      	orrs	r1, r2
 80022bc:	687a      	ldr	r2, [r7, #4]
 80022be:	6812      	ldr	r2, [r2, #0]
 80022c0:	430b      	orrs	r3, r1
 80022c2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	68db      	ldr	r3, [r3, #12]
 80022ca:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	695a      	ldr	r2, [r3, #20]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	699b      	ldr	r3, [r3, #24]
 80022d6:	431a      	orrs	r2, r3
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	430a      	orrs	r2, r1
 80022de:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	681a      	ldr	r2, [r3, #0]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f042 0201 	orr.w	r2, r2, #1
 80022ee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2200      	movs	r2, #0
 80022f4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2220      	movs	r2, #32
 80022fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2200      	movs	r2, #0
 8002302:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2200      	movs	r2, #0
 8002308:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800230c:	2300      	movs	r3, #0
}
 800230e:	4618      	mov	r0, r3
 8002310:	3710      	adds	r7, #16
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	000186a0 	.word	0x000186a0
 800231c:	001e847f 	.word	0x001e847f
 8002320:	003d08ff 	.word	0x003d08ff
 8002324:	431bde83 	.word	0x431bde83
 8002328:	10624dd3 	.word	0x10624dd3

0800232c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b088      	sub	sp, #32
 8002330:	af02      	add	r7, sp, #8
 8002332:	60f8      	str	r0, [r7, #12]
 8002334:	4608      	mov	r0, r1
 8002336:	4611      	mov	r1, r2
 8002338:	461a      	mov	r2, r3
 800233a:	4603      	mov	r3, r0
 800233c:	817b      	strh	r3, [r7, #10]
 800233e:	460b      	mov	r3, r1
 8002340:	813b      	strh	r3, [r7, #8]
 8002342:	4613      	mov	r3, r2
 8002344:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002346:	f7ff fc11 	bl	8001b6c <HAL_GetTick>
 800234a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002352:	b2db      	uxtb	r3, r3
 8002354:	2b20      	cmp	r3, #32
 8002356:	f040 80d9 	bne.w	800250c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800235a:	697b      	ldr	r3, [r7, #20]
 800235c:	9300      	str	r3, [sp, #0]
 800235e:	2319      	movs	r3, #25
 8002360:	2201      	movs	r2, #1
 8002362:	496d      	ldr	r1, [pc, #436]	; (8002518 <HAL_I2C_Mem_Write+0x1ec>)
 8002364:	68f8      	ldr	r0, [r7, #12]
 8002366:	f000 f971 	bl	800264c <I2C_WaitOnFlagUntilTimeout>
 800236a:	4603      	mov	r3, r0
 800236c:	2b00      	cmp	r3, #0
 800236e:	d001      	beq.n	8002374 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002370:	2302      	movs	r3, #2
 8002372:	e0cc      	b.n	800250e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800237a:	2b01      	cmp	r3, #1
 800237c:	d101      	bne.n	8002382 <HAL_I2C_Mem_Write+0x56>
 800237e:	2302      	movs	r3, #2
 8002380:	e0c5      	b.n	800250e <HAL_I2C_Mem_Write+0x1e2>
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	2201      	movs	r2, #1
 8002386:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f003 0301 	and.w	r3, r3, #1
 8002394:	2b01      	cmp	r3, #1
 8002396:	d007      	beq.n	80023a8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	681a      	ldr	r2, [r3, #0]
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f042 0201 	orr.w	r2, r2, #1
 80023a6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	681a      	ldr	r2, [r3, #0]
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80023b6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	2221      	movs	r2, #33	; 0x21
 80023bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	2240      	movs	r2, #64	; 0x40
 80023c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	2200      	movs	r2, #0
 80023cc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	6a3a      	ldr	r2, [r7, #32]
 80023d2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80023d8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023de:	b29a      	uxth	r2, r3
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	4a4d      	ldr	r2, [pc, #308]	; (800251c <HAL_I2C_Mem_Write+0x1f0>)
 80023e8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80023ea:	88f8      	ldrh	r0, [r7, #6]
 80023ec:	893a      	ldrh	r2, [r7, #8]
 80023ee:	8979      	ldrh	r1, [r7, #10]
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	9301      	str	r3, [sp, #4]
 80023f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023f6:	9300      	str	r3, [sp, #0]
 80023f8:	4603      	mov	r3, r0
 80023fa:	68f8      	ldr	r0, [r7, #12]
 80023fc:	f000 f890 	bl	8002520 <I2C_RequestMemoryWrite>
 8002400:	4603      	mov	r3, r0
 8002402:	2b00      	cmp	r3, #0
 8002404:	d052      	beq.n	80024ac <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002406:	2301      	movs	r3, #1
 8002408:	e081      	b.n	800250e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800240a:	697a      	ldr	r2, [r7, #20]
 800240c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800240e:	68f8      	ldr	r0, [r7, #12]
 8002410:	f000 f9f2 	bl	80027f8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002414:	4603      	mov	r3, r0
 8002416:	2b00      	cmp	r3, #0
 8002418:	d00d      	beq.n	8002436 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800241e:	2b04      	cmp	r3, #4
 8002420:	d107      	bne.n	8002432 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	681a      	ldr	r2, [r3, #0]
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002430:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002432:	2301      	movs	r3, #1
 8002434:	e06b      	b.n	800250e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800243a:	781a      	ldrb	r2, [r3, #0]
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002446:	1c5a      	adds	r2, r3, #1
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002450:	3b01      	subs	r3, #1
 8002452:	b29a      	uxth	r2, r3
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800245c:	b29b      	uxth	r3, r3
 800245e:	3b01      	subs	r3, #1
 8002460:	b29a      	uxth	r2, r3
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	695b      	ldr	r3, [r3, #20]
 800246c:	f003 0304 	and.w	r3, r3, #4
 8002470:	2b04      	cmp	r3, #4
 8002472:	d11b      	bne.n	80024ac <HAL_I2C_Mem_Write+0x180>
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002478:	2b00      	cmp	r3, #0
 800247a:	d017      	beq.n	80024ac <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002480:	781a      	ldrb	r2, [r3, #0]
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800248c:	1c5a      	adds	r2, r3, #1
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002496:	3b01      	subs	r3, #1
 8002498:	b29a      	uxth	r2, r3
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024a2:	b29b      	uxth	r3, r3
 80024a4:	3b01      	subs	r3, #1
 80024a6:	b29a      	uxth	r2, r3
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d1aa      	bne.n	800240a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024b4:	697a      	ldr	r2, [r7, #20]
 80024b6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80024b8:	68f8      	ldr	r0, [r7, #12]
 80024ba:	f000 f9de 	bl	800287a <I2C_WaitOnBTFFlagUntilTimeout>
 80024be:	4603      	mov	r3, r0
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d00d      	beq.n	80024e0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c8:	2b04      	cmp	r3, #4
 80024ca:	d107      	bne.n	80024dc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	681a      	ldr	r2, [r3, #0]
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024da:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80024dc:	2301      	movs	r3, #1
 80024de:	e016      	b.n	800250e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	681a      	ldr	r2, [r3, #0]
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	2220      	movs	r2, #32
 80024f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	2200      	movs	r2, #0
 80024fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	2200      	movs	r2, #0
 8002504:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002508:	2300      	movs	r3, #0
 800250a:	e000      	b.n	800250e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800250c:	2302      	movs	r3, #2
  }
}
 800250e:	4618      	mov	r0, r3
 8002510:	3718      	adds	r7, #24
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}
 8002516:	bf00      	nop
 8002518:	00100002 	.word	0x00100002
 800251c:	ffff0000 	.word	0xffff0000

08002520 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b088      	sub	sp, #32
 8002524:	af02      	add	r7, sp, #8
 8002526:	60f8      	str	r0, [r7, #12]
 8002528:	4608      	mov	r0, r1
 800252a:	4611      	mov	r1, r2
 800252c:	461a      	mov	r2, r3
 800252e:	4603      	mov	r3, r0
 8002530:	817b      	strh	r3, [r7, #10]
 8002532:	460b      	mov	r3, r1
 8002534:	813b      	strh	r3, [r7, #8]
 8002536:	4613      	mov	r3, r2
 8002538:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	681a      	ldr	r2, [r3, #0]
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002548:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800254a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800254c:	9300      	str	r3, [sp, #0]
 800254e:	6a3b      	ldr	r3, [r7, #32]
 8002550:	2200      	movs	r2, #0
 8002552:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002556:	68f8      	ldr	r0, [r7, #12]
 8002558:	f000 f878 	bl	800264c <I2C_WaitOnFlagUntilTimeout>
 800255c:	4603      	mov	r3, r0
 800255e:	2b00      	cmp	r3, #0
 8002560:	d00d      	beq.n	800257e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800256c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002570:	d103      	bne.n	800257a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002578:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800257a:	2303      	movs	r3, #3
 800257c:	e05f      	b.n	800263e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800257e:	897b      	ldrh	r3, [r7, #10]
 8002580:	b2db      	uxtb	r3, r3
 8002582:	461a      	mov	r2, r3
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800258c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800258e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002590:	6a3a      	ldr	r2, [r7, #32]
 8002592:	492d      	ldr	r1, [pc, #180]	; (8002648 <I2C_RequestMemoryWrite+0x128>)
 8002594:	68f8      	ldr	r0, [r7, #12]
 8002596:	f000 f8b0 	bl	80026fa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800259a:	4603      	mov	r3, r0
 800259c:	2b00      	cmp	r3, #0
 800259e:	d001      	beq.n	80025a4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80025a0:	2301      	movs	r3, #1
 80025a2:	e04c      	b.n	800263e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025a4:	2300      	movs	r3, #0
 80025a6:	617b      	str	r3, [r7, #20]
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	695b      	ldr	r3, [r3, #20]
 80025ae:	617b      	str	r3, [r7, #20]
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	699b      	ldr	r3, [r3, #24]
 80025b6:	617b      	str	r3, [r7, #20]
 80025b8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80025ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025bc:	6a39      	ldr	r1, [r7, #32]
 80025be:	68f8      	ldr	r0, [r7, #12]
 80025c0:	f000 f91a 	bl	80027f8 <I2C_WaitOnTXEFlagUntilTimeout>
 80025c4:	4603      	mov	r3, r0
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d00d      	beq.n	80025e6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ce:	2b04      	cmp	r3, #4
 80025d0:	d107      	bne.n	80025e2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	681a      	ldr	r2, [r3, #0]
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025e0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
 80025e4:	e02b      	b.n	800263e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80025e6:	88fb      	ldrh	r3, [r7, #6]
 80025e8:	2b01      	cmp	r3, #1
 80025ea:	d105      	bne.n	80025f8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80025ec:	893b      	ldrh	r3, [r7, #8]
 80025ee:	b2da      	uxtb	r2, r3
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	611a      	str	r2, [r3, #16]
 80025f6:	e021      	b.n	800263c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80025f8:	893b      	ldrh	r3, [r7, #8]
 80025fa:	0a1b      	lsrs	r3, r3, #8
 80025fc:	b29b      	uxth	r3, r3
 80025fe:	b2da      	uxtb	r2, r3
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002606:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002608:	6a39      	ldr	r1, [r7, #32]
 800260a:	68f8      	ldr	r0, [r7, #12]
 800260c:	f000 f8f4 	bl	80027f8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002610:	4603      	mov	r3, r0
 8002612:	2b00      	cmp	r3, #0
 8002614:	d00d      	beq.n	8002632 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800261a:	2b04      	cmp	r3, #4
 800261c:	d107      	bne.n	800262e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	681a      	ldr	r2, [r3, #0]
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800262c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800262e:	2301      	movs	r3, #1
 8002630:	e005      	b.n	800263e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002632:	893b      	ldrh	r3, [r7, #8]
 8002634:	b2da      	uxtb	r2, r3
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800263c:	2300      	movs	r3, #0
}
 800263e:	4618      	mov	r0, r3
 8002640:	3718      	adds	r7, #24
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}
 8002646:	bf00      	nop
 8002648:	00010002 	.word	0x00010002

0800264c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b084      	sub	sp, #16
 8002650:	af00      	add	r7, sp, #0
 8002652:	60f8      	str	r0, [r7, #12]
 8002654:	60b9      	str	r1, [r7, #8]
 8002656:	603b      	str	r3, [r7, #0]
 8002658:	4613      	mov	r3, r2
 800265a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800265c:	e025      	b.n	80026aa <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002664:	d021      	beq.n	80026aa <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002666:	f7ff fa81 	bl	8001b6c <HAL_GetTick>
 800266a:	4602      	mov	r2, r0
 800266c:	69bb      	ldr	r3, [r7, #24]
 800266e:	1ad3      	subs	r3, r2, r3
 8002670:	683a      	ldr	r2, [r7, #0]
 8002672:	429a      	cmp	r2, r3
 8002674:	d302      	bcc.n	800267c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d116      	bne.n	80026aa <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	2200      	movs	r2, #0
 8002680:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	2220      	movs	r2, #32
 8002686:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	2200      	movs	r2, #0
 800268e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002696:	f043 0220 	orr.w	r2, r3, #32
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	2200      	movs	r2, #0
 80026a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80026a6:	2301      	movs	r3, #1
 80026a8:	e023      	b.n	80026f2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80026aa:	68bb      	ldr	r3, [r7, #8]
 80026ac:	0c1b      	lsrs	r3, r3, #16
 80026ae:	b2db      	uxtb	r3, r3
 80026b0:	2b01      	cmp	r3, #1
 80026b2:	d10d      	bne.n	80026d0 <I2C_WaitOnFlagUntilTimeout+0x84>
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	695b      	ldr	r3, [r3, #20]
 80026ba:	43da      	mvns	r2, r3
 80026bc:	68bb      	ldr	r3, [r7, #8]
 80026be:	4013      	ands	r3, r2
 80026c0:	b29b      	uxth	r3, r3
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	bf0c      	ite	eq
 80026c6:	2301      	moveq	r3, #1
 80026c8:	2300      	movne	r3, #0
 80026ca:	b2db      	uxtb	r3, r3
 80026cc:	461a      	mov	r2, r3
 80026ce:	e00c      	b.n	80026ea <I2C_WaitOnFlagUntilTimeout+0x9e>
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	699b      	ldr	r3, [r3, #24]
 80026d6:	43da      	mvns	r2, r3
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	4013      	ands	r3, r2
 80026dc:	b29b      	uxth	r3, r3
 80026de:	2b00      	cmp	r3, #0
 80026e0:	bf0c      	ite	eq
 80026e2:	2301      	moveq	r3, #1
 80026e4:	2300      	movne	r3, #0
 80026e6:	b2db      	uxtb	r3, r3
 80026e8:	461a      	mov	r2, r3
 80026ea:	79fb      	ldrb	r3, [r7, #7]
 80026ec:	429a      	cmp	r2, r3
 80026ee:	d0b6      	beq.n	800265e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80026f0:	2300      	movs	r3, #0
}
 80026f2:	4618      	mov	r0, r3
 80026f4:	3710      	adds	r7, #16
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}

080026fa <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80026fa:	b580      	push	{r7, lr}
 80026fc:	b084      	sub	sp, #16
 80026fe:	af00      	add	r7, sp, #0
 8002700:	60f8      	str	r0, [r7, #12]
 8002702:	60b9      	str	r1, [r7, #8]
 8002704:	607a      	str	r2, [r7, #4]
 8002706:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002708:	e051      	b.n	80027ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	695b      	ldr	r3, [r3, #20]
 8002710:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002714:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002718:	d123      	bne.n	8002762 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	681a      	ldr	r2, [r3, #0]
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002728:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002732:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	2200      	movs	r2, #0
 8002738:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	2220      	movs	r2, #32
 800273e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	2200      	movs	r2, #0
 8002746:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800274e:	f043 0204 	orr.w	r2, r3, #4
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	2200      	movs	r2, #0
 800275a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800275e:	2301      	movs	r3, #1
 8002760:	e046      	b.n	80027f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002768:	d021      	beq.n	80027ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800276a:	f7ff f9ff 	bl	8001b6c <HAL_GetTick>
 800276e:	4602      	mov	r2, r0
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	1ad3      	subs	r3, r2, r3
 8002774:	687a      	ldr	r2, [r7, #4]
 8002776:	429a      	cmp	r2, r3
 8002778:	d302      	bcc.n	8002780 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d116      	bne.n	80027ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	2200      	movs	r2, #0
 8002784:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	2220      	movs	r2, #32
 800278a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	2200      	movs	r2, #0
 8002792:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800279a:	f043 0220 	orr.w	r2, r3, #32
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	2200      	movs	r2, #0
 80027a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	e020      	b.n	80027f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80027ae:	68bb      	ldr	r3, [r7, #8]
 80027b0:	0c1b      	lsrs	r3, r3, #16
 80027b2:	b2db      	uxtb	r3, r3
 80027b4:	2b01      	cmp	r3, #1
 80027b6:	d10c      	bne.n	80027d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	695b      	ldr	r3, [r3, #20]
 80027be:	43da      	mvns	r2, r3
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	4013      	ands	r3, r2
 80027c4:	b29b      	uxth	r3, r3
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	bf14      	ite	ne
 80027ca:	2301      	movne	r3, #1
 80027cc:	2300      	moveq	r3, #0
 80027ce:	b2db      	uxtb	r3, r3
 80027d0:	e00b      	b.n	80027ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	699b      	ldr	r3, [r3, #24]
 80027d8:	43da      	mvns	r2, r3
 80027da:	68bb      	ldr	r3, [r7, #8]
 80027dc:	4013      	ands	r3, r2
 80027de:	b29b      	uxth	r3, r3
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	bf14      	ite	ne
 80027e4:	2301      	movne	r3, #1
 80027e6:	2300      	moveq	r3, #0
 80027e8:	b2db      	uxtb	r3, r3
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d18d      	bne.n	800270a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80027ee:	2300      	movs	r3, #0
}
 80027f0:	4618      	mov	r0, r3
 80027f2:	3710      	adds	r7, #16
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bd80      	pop	{r7, pc}

080027f8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b084      	sub	sp, #16
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	60f8      	str	r0, [r7, #12]
 8002800:	60b9      	str	r1, [r7, #8]
 8002802:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002804:	e02d      	b.n	8002862 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002806:	68f8      	ldr	r0, [r7, #12]
 8002808:	f000 f878 	bl	80028fc <I2C_IsAcknowledgeFailed>
 800280c:	4603      	mov	r3, r0
 800280e:	2b00      	cmp	r3, #0
 8002810:	d001      	beq.n	8002816 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002812:	2301      	movs	r3, #1
 8002814:	e02d      	b.n	8002872 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002816:	68bb      	ldr	r3, [r7, #8]
 8002818:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800281c:	d021      	beq.n	8002862 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800281e:	f7ff f9a5 	bl	8001b6c <HAL_GetTick>
 8002822:	4602      	mov	r2, r0
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	1ad3      	subs	r3, r2, r3
 8002828:	68ba      	ldr	r2, [r7, #8]
 800282a:	429a      	cmp	r2, r3
 800282c:	d302      	bcc.n	8002834 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800282e:	68bb      	ldr	r3, [r7, #8]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d116      	bne.n	8002862 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	2200      	movs	r2, #0
 8002838:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	2220      	movs	r2, #32
 800283e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	2200      	movs	r2, #0
 8002846:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800284e:	f043 0220 	orr.w	r2, r3, #32
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	2200      	movs	r2, #0
 800285a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800285e:	2301      	movs	r3, #1
 8002860:	e007      	b.n	8002872 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	695b      	ldr	r3, [r3, #20]
 8002868:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800286c:	2b80      	cmp	r3, #128	; 0x80
 800286e:	d1ca      	bne.n	8002806 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002870:	2300      	movs	r3, #0
}
 8002872:	4618      	mov	r0, r3
 8002874:	3710      	adds	r7, #16
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}

0800287a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800287a:	b580      	push	{r7, lr}
 800287c:	b084      	sub	sp, #16
 800287e:	af00      	add	r7, sp, #0
 8002880:	60f8      	str	r0, [r7, #12]
 8002882:	60b9      	str	r1, [r7, #8]
 8002884:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002886:	e02d      	b.n	80028e4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002888:	68f8      	ldr	r0, [r7, #12]
 800288a:	f000 f837 	bl	80028fc <I2C_IsAcknowledgeFailed>
 800288e:	4603      	mov	r3, r0
 8002890:	2b00      	cmp	r3, #0
 8002892:	d001      	beq.n	8002898 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002894:	2301      	movs	r3, #1
 8002896:	e02d      	b.n	80028f4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002898:	68bb      	ldr	r3, [r7, #8]
 800289a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800289e:	d021      	beq.n	80028e4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028a0:	f7ff f964 	bl	8001b6c <HAL_GetTick>
 80028a4:	4602      	mov	r2, r0
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	1ad3      	subs	r3, r2, r3
 80028aa:	68ba      	ldr	r2, [r7, #8]
 80028ac:	429a      	cmp	r2, r3
 80028ae:	d302      	bcc.n	80028b6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80028b0:	68bb      	ldr	r3, [r7, #8]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d116      	bne.n	80028e4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	2200      	movs	r2, #0
 80028ba:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	2220      	movs	r2, #32
 80028c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	2200      	movs	r2, #0
 80028c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d0:	f043 0220 	orr.w	r2, r3, #32
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	2200      	movs	r2, #0
 80028dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80028e0:	2301      	movs	r3, #1
 80028e2:	e007      	b.n	80028f4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	695b      	ldr	r3, [r3, #20]
 80028ea:	f003 0304 	and.w	r3, r3, #4
 80028ee:	2b04      	cmp	r3, #4
 80028f0:	d1ca      	bne.n	8002888 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80028f2:	2300      	movs	r3, #0
}
 80028f4:	4618      	mov	r0, r3
 80028f6:	3710      	adds	r7, #16
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bd80      	pop	{r7, pc}

080028fc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80028fc:	b480      	push	{r7}
 80028fe:	b083      	sub	sp, #12
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	695b      	ldr	r3, [r3, #20]
 800290a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800290e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002912:	d11b      	bne.n	800294c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800291c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2200      	movs	r2, #0
 8002922:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2220      	movs	r2, #32
 8002928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2200      	movs	r2, #0
 8002930:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002938:	f043 0204 	orr.w	r2, r3, #4
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2200      	movs	r2, #0
 8002944:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002948:	2301      	movs	r3, #1
 800294a:	e000      	b.n	800294e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800294c:	2300      	movs	r3, #0
}
 800294e:	4618      	mov	r0, r3
 8002950:	370c      	adds	r7, #12
 8002952:	46bd      	mov	sp, r7
 8002954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002958:	4770      	bx	lr
	...

0800295c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b084      	sub	sp, #16
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
 8002964:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d101      	bne.n	8002970 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800296c:	2301      	movs	r3, #1
 800296e:	e0cc      	b.n	8002b0a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002970:	4b68      	ldr	r3, [pc, #416]	; (8002b14 <HAL_RCC_ClockConfig+0x1b8>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f003 030f 	and.w	r3, r3, #15
 8002978:	683a      	ldr	r2, [r7, #0]
 800297a:	429a      	cmp	r2, r3
 800297c:	d90c      	bls.n	8002998 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800297e:	4b65      	ldr	r3, [pc, #404]	; (8002b14 <HAL_RCC_ClockConfig+0x1b8>)
 8002980:	683a      	ldr	r2, [r7, #0]
 8002982:	b2d2      	uxtb	r2, r2
 8002984:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002986:	4b63      	ldr	r3, [pc, #396]	; (8002b14 <HAL_RCC_ClockConfig+0x1b8>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f003 030f 	and.w	r3, r3, #15
 800298e:	683a      	ldr	r2, [r7, #0]
 8002990:	429a      	cmp	r2, r3
 8002992:	d001      	beq.n	8002998 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002994:	2301      	movs	r3, #1
 8002996:	e0b8      	b.n	8002b0a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f003 0302 	and.w	r3, r3, #2
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d020      	beq.n	80029e6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f003 0304 	and.w	r3, r3, #4
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d005      	beq.n	80029bc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80029b0:	4b59      	ldr	r3, [pc, #356]	; (8002b18 <HAL_RCC_ClockConfig+0x1bc>)
 80029b2:	689b      	ldr	r3, [r3, #8]
 80029b4:	4a58      	ldr	r2, [pc, #352]	; (8002b18 <HAL_RCC_ClockConfig+0x1bc>)
 80029b6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80029ba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f003 0308 	and.w	r3, r3, #8
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d005      	beq.n	80029d4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80029c8:	4b53      	ldr	r3, [pc, #332]	; (8002b18 <HAL_RCC_ClockConfig+0x1bc>)
 80029ca:	689b      	ldr	r3, [r3, #8]
 80029cc:	4a52      	ldr	r2, [pc, #328]	; (8002b18 <HAL_RCC_ClockConfig+0x1bc>)
 80029ce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80029d2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029d4:	4b50      	ldr	r3, [pc, #320]	; (8002b18 <HAL_RCC_ClockConfig+0x1bc>)
 80029d6:	689b      	ldr	r3, [r3, #8]
 80029d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	689b      	ldr	r3, [r3, #8]
 80029e0:	494d      	ldr	r1, [pc, #308]	; (8002b18 <HAL_RCC_ClockConfig+0x1bc>)
 80029e2:	4313      	orrs	r3, r2
 80029e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f003 0301 	and.w	r3, r3, #1
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d044      	beq.n	8002a7c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	2b01      	cmp	r3, #1
 80029f8:	d107      	bne.n	8002a0a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029fa:	4b47      	ldr	r3, [pc, #284]	; (8002b18 <HAL_RCC_ClockConfig+0x1bc>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d119      	bne.n	8002a3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	e07f      	b.n	8002b0a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	2b02      	cmp	r3, #2
 8002a10:	d003      	beq.n	8002a1a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a16:	2b03      	cmp	r3, #3
 8002a18:	d107      	bne.n	8002a2a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a1a:	4b3f      	ldr	r3, [pc, #252]	; (8002b18 <HAL_RCC_ClockConfig+0x1bc>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d109      	bne.n	8002a3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a26:	2301      	movs	r3, #1
 8002a28:	e06f      	b.n	8002b0a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a2a:	4b3b      	ldr	r3, [pc, #236]	; (8002b18 <HAL_RCC_ClockConfig+0x1bc>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f003 0302 	and.w	r3, r3, #2
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d101      	bne.n	8002a3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
 8002a38:	e067      	b.n	8002b0a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a3a:	4b37      	ldr	r3, [pc, #220]	; (8002b18 <HAL_RCC_ClockConfig+0x1bc>)
 8002a3c:	689b      	ldr	r3, [r3, #8]
 8002a3e:	f023 0203 	bic.w	r2, r3, #3
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	4934      	ldr	r1, [pc, #208]	; (8002b18 <HAL_RCC_ClockConfig+0x1bc>)
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a4c:	f7ff f88e 	bl	8001b6c <HAL_GetTick>
 8002a50:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a52:	e00a      	b.n	8002a6a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a54:	f7ff f88a 	bl	8001b6c <HAL_GetTick>
 8002a58:	4602      	mov	r2, r0
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	1ad3      	subs	r3, r2, r3
 8002a5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d901      	bls.n	8002a6a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a66:	2303      	movs	r3, #3
 8002a68:	e04f      	b.n	8002b0a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a6a:	4b2b      	ldr	r3, [pc, #172]	; (8002b18 <HAL_RCC_ClockConfig+0x1bc>)
 8002a6c:	689b      	ldr	r3, [r3, #8]
 8002a6e:	f003 020c 	and.w	r2, r3, #12
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	009b      	lsls	r3, r3, #2
 8002a78:	429a      	cmp	r2, r3
 8002a7a:	d1eb      	bne.n	8002a54 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a7c:	4b25      	ldr	r3, [pc, #148]	; (8002b14 <HAL_RCC_ClockConfig+0x1b8>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f003 030f 	and.w	r3, r3, #15
 8002a84:	683a      	ldr	r2, [r7, #0]
 8002a86:	429a      	cmp	r2, r3
 8002a88:	d20c      	bcs.n	8002aa4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a8a:	4b22      	ldr	r3, [pc, #136]	; (8002b14 <HAL_RCC_ClockConfig+0x1b8>)
 8002a8c:	683a      	ldr	r2, [r7, #0]
 8002a8e:	b2d2      	uxtb	r2, r2
 8002a90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a92:	4b20      	ldr	r3, [pc, #128]	; (8002b14 <HAL_RCC_ClockConfig+0x1b8>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f003 030f 	and.w	r3, r3, #15
 8002a9a:	683a      	ldr	r2, [r7, #0]
 8002a9c:	429a      	cmp	r2, r3
 8002a9e:	d001      	beq.n	8002aa4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	e032      	b.n	8002b0a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f003 0304 	and.w	r3, r3, #4
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d008      	beq.n	8002ac2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ab0:	4b19      	ldr	r3, [pc, #100]	; (8002b18 <HAL_RCC_ClockConfig+0x1bc>)
 8002ab2:	689b      	ldr	r3, [r3, #8]
 8002ab4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	68db      	ldr	r3, [r3, #12]
 8002abc:	4916      	ldr	r1, [pc, #88]	; (8002b18 <HAL_RCC_ClockConfig+0x1bc>)
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f003 0308 	and.w	r3, r3, #8
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d009      	beq.n	8002ae2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ace:	4b12      	ldr	r3, [pc, #72]	; (8002b18 <HAL_RCC_ClockConfig+0x1bc>)
 8002ad0:	689b      	ldr	r3, [r3, #8]
 8002ad2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	691b      	ldr	r3, [r3, #16]
 8002ada:	00db      	lsls	r3, r3, #3
 8002adc:	490e      	ldr	r1, [pc, #56]	; (8002b18 <HAL_RCC_ClockConfig+0x1bc>)
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002ae2:	f000 f887 	bl	8002bf4 <HAL_RCC_GetSysClockFreq>
 8002ae6:	4602      	mov	r2, r0
 8002ae8:	4b0b      	ldr	r3, [pc, #44]	; (8002b18 <HAL_RCC_ClockConfig+0x1bc>)
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	091b      	lsrs	r3, r3, #4
 8002aee:	f003 030f 	and.w	r3, r3, #15
 8002af2:	490a      	ldr	r1, [pc, #40]	; (8002b1c <HAL_RCC_ClockConfig+0x1c0>)
 8002af4:	5ccb      	ldrb	r3, [r1, r3]
 8002af6:	fa22 f303 	lsr.w	r3, r2, r3
 8002afa:	4a09      	ldr	r2, [pc, #36]	; (8002b20 <HAL_RCC_ClockConfig+0x1c4>)
 8002afc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002afe:	4b09      	ldr	r3, [pc, #36]	; (8002b24 <HAL_RCC_ClockConfig+0x1c8>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4618      	mov	r0, r3
 8002b04:	f7fe ff48 	bl	8001998 <HAL_InitTick>

  return HAL_OK;
 8002b08:	2300      	movs	r3, #0
}
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	3710      	adds	r7, #16
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}
 8002b12:	bf00      	nop
 8002b14:	40023c00 	.word	0x40023c00
 8002b18:	40023800 	.word	0x40023800
 8002b1c:	08008208 	.word	0x08008208
 8002b20:	20000004 	.word	0x20000004
 8002b24:	20000008 	.word	0x20000008

08002b28 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b2c:	4b03      	ldr	r3, [pc, #12]	; (8002b3c <HAL_RCC_GetHCLKFreq+0x14>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
}
 8002b30:	4618      	mov	r0, r3
 8002b32:	46bd      	mov	sp, r7
 8002b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b38:	4770      	bx	lr
 8002b3a:	bf00      	nop
 8002b3c:	20000004 	.word	0x20000004

08002b40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002b44:	f7ff fff0 	bl	8002b28 <HAL_RCC_GetHCLKFreq>
 8002b48:	4602      	mov	r2, r0
 8002b4a:	4b05      	ldr	r3, [pc, #20]	; (8002b60 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b4c:	689b      	ldr	r3, [r3, #8]
 8002b4e:	0a9b      	lsrs	r3, r3, #10
 8002b50:	f003 0307 	and.w	r3, r3, #7
 8002b54:	4903      	ldr	r1, [pc, #12]	; (8002b64 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b56:	5ccb      	ldrb	r3, [r1, r3]
 8002b58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	bd80      	pop	{r7, pc}
 8002b60:	40023800 	.word	0x40023800
 8002b64:	08008218 	.word	0x08008218

08002b68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002b6c:	f7ff ffdc 	bl	8002b28 <HAL_RCC_GetHCLKFreq>
 8002b70:	4602      	mov	r2, r0
 8002b72:	4b05      	ldr	r3, [pc, #20]	; (8002b88 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002b74:	689b      	ldr	r3, [r3, #8]
 8002b76:	0b5b      	lsrs	r3, r3, #13
 8002b78:	f003 0307 	and.w	r3, r3, #7
 8002b7c:	4903      	ldr	r1, [pc, #12]	; (8002b8c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b7e:	5ccb      	ldrb	r3, [r1, r3]
 8002b80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b84:	4618      	mov	r0, r3
 8002b86:	bd80      	pop	{r7, pc}
 8002b88:	40023800 	.word	0x40023800
 8002b8c:	08008218 	.word	0x08008218

08002b90 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002b90:	b480      	push	{r7}
 8002b92:	b083      	sub	sp, #12
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
 8002b98:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	220f      	movs	r2, #15
 8002b9e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002ba0:	4b12      	ldr	r3, [pc, #72]	; (8002bec <HAL_RCC_GetClockConfig+0x5c>)
 8002ba2:	689b      	ldr	r3, [r3, #8]
 8002ba4:	f003 0203 	and.w	r2, r3, #3
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002bac:	4b0f      	ldr	r3, [pc, #60]	; (8002bec <HAL_RCC_GetClockConfig+0x5c>)
 8002bae:	689b      	ldr	r3, [r3, #8]
 8002bb0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002bb8:	4b0c      	ldr	r3, [pc, #48]	; (8002bec <HAL_RCC_GetClockConfig+0x5c>)
 8002bba:	689b      	ldr	r3, [r3, #8]
 8002bbc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002bc4:	4b09      	ldr	r3, [pc, #36]	; (8002bec <HAL_RCC_GetClockConfig+0x5c>)
 8002bc6:	689b      	ldr	r3, [r3, #8]
 8002bc8:	08db      	lsrs	r3, r3, #3
 8002bca:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002bd2:	4b07      	ldr	r3, [pc, #28]	; (8002bf0 <HAL_RCC_GetClockConfig+0x60>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f003 020f 	and.w	r2, r3, #15
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	601a      	str	r2, [r3, #0]
}
 8002bde:	bf00      	nop
 8002be0:	370c      	adds	r7, #12
 8002be2:	46bd      	mov	sp, r7
 8002be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be8:	4770      	bx	lr
 8002bea:	bf00      	nop
 8002bec:	40023800 	.word	0x40023800
 8002bf0:	40023c00 	.word	0x40023c00

08002bf4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bf4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002bf8:	b088      	sub	sp, #32
 8002bfa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8002c00:	2300      	movs	r3, #0
 8002c02:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 8002c04:	2300      	movs	r3, #0
 8002c06:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8002c08:	2300      	movs	r3, #0
 8002c0a:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c10:	4bce      	ldr	r3, [pc, #824]	; (8002f4c <HAL_RCC_GetSysClockFreq+0x358>)
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	f003 030c 	and.w	r3, r3, #12
 8002c18:	2b0c      	cmp	r3, #12
 8002c1a:	f200 818d 	bhi.w	8002f38 <HAL_RCC_GetSysClockFreq+0x344>
 8002c1e:	a201      	add	r2, pc, #4	; (adr r2, 8002c24 <HAL_RCC_GetSysClockFreq+0x30>)
 8002c20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c24:	08002c59 	.word	0x08002c59
 8002c28:	08002f39 	.word	0x08002f39
 8002c2c:	08002f39 	.word	0x08002f39
 8002c30:	08002f39 	.word	0x08002f39
 8002c34:	08002c5f 	.word	0x08002c5f
 8002c38:	08002f39 	.word	0x08002f39
 8002c3c:	08002f39 	.word	0x08002f39
 8002c40:	08002f39 	.word	0x08002f39
 8002c44:	08002c65 	.word	0x08002c65
 8002c48:	08002f39 	.word	0x08002f39
 8002c4c:	08002f39 	.word	0x08002f39
 8002c50:	08002f39 	.word	0x08002f39
 8002c54:	08002dd9 	.word	0x08002dd9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002c58:	4bbd      	ldr	r3, [pc, #756]	; (8002f50 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002c5a:	61bb      	str	r3, [r7, #24]
       break;
 8002c5c:	e16f      	b.n	8002f3e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002c5e:	4bbd      	ldr	r3, [pc, #756]	; (8002f54 <HAL_RCC_GetSysClockFreq+0x360>)
 8002c60:	61bb      	str	r3, [r7, #24]
      break;
 8002c62:	e16c      	b.n	8002f3e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c64:	4bb9      	ldr	r3, [pc, #740]	; (8002f4c <HAL_RCC_GetSysClockFreq+0x358>)
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002c6c:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c6e:	4bb7      	ldr	r3, [pc, #732]	; (8002f4c <HAL_RCC_GetSysClockFreq+0x358>)
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d053      	beq.n	8002d22 <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c7a:	4bb4      	ldr	r3, [pc, #720]	; (8002f4c <HAL_RCC_GetSysClockFreq+0x358>)
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	099b      	lsrs	r3, r3, #6
 8002c80:	461a      	mov	r2, r3
 8002c82:	f04f 0300 	mov.w	r3, #0
 8002c86:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002c8a:	f04f 0100 	mov.w	r1, #0
 8002c8e:	ea02 0400 	and.w	r4, r2, r0
 8002c92:	603c      	str	r4, [r7, #0]
 8002c94:	400b      	ands	r3, r1
 8002c96:	607b      	str	r3, [r7, #4]
 8002c98:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002c9c:	4620      	mov	r0, r4
 8002c9e:	4629      	mov	r1, r5
 8002ca0:	f04f 0200 	mov.w	r2, #0
 8002ca4:	f04f 0300 	mov.w	r3, #0
 8002ca8:	014b      	lsls	r3, r1, #5
 8002caa:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002cae:	0142      	lsls	r2, r0, #5
 8002cb0:	4610      	mov	r0, r2
 8002cb2:	4619      	mov	r1, r3
 8002cb4:	4623      	mov	r3, r4
 8002cb6:	1ac0      	subs	r0, r0, r3
 8002cb8:	462b      	mov	r3, r5
 8002cba:	eb61 0103 	sbc.w	r1, r1, r3
 8002cbe:	f04f 0200 	mov.w	r2, #0
 8002cc2:	f04f 0300 	mov.w	r3, #0
 8002cc6:	018b      	lsls	r3, r1, #6
 8002cc8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002ccc:	0182      	lsls	r2, r0, #6
 8002cce:	1a12      	subs	r2, r2, r0
 8002cd0:	eb63 0301 	sbc.w	r3, r3, r1
 8002cd4:	f04f 0000 	mov.w	r0, #0
 8002cd8:	f04f 0100 	mov.w	r1, #0
 8002cdc:	00d9      	lsls	r1, r3, #3
 8002cde:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002ce2:	00d0      	lsls	r0, r2, #3
 8002ce4:	4602      	mov	r2, r0
 8002ce6:	460b      	mov	r3, r1
 8002ce8:	4621      	mov	r1, r4
 8002cea:	1852      	adds	r2, r2, r1
 8002cec:	4629      	mov	r1, r5
 8002cee:	eb43 0101 	adc.w	r1, r3, r1
 8002cf2:	460b      	mov	r3, r1
 8002cf4:	f04f 0000 	mov.w	r0, #0
 8002cf8:	f04f 0100 	mov.w	r1, #0
 8002cfc:	0259      	lsls	r1, r3, #9
 8002cfe:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002d02:	0250      	lsls	r0, r2, #9
 8002d04:	4602      	mov	r2, r0
 8002d06:	460b      	mov	r3, r1
 8002d08:	4610      	mov	r0, r2
 8002d0a:	4619      	mov	r1, r3
 8002d0c:	697b      	ldr	r3, [r7, #20]
 8002d0e:	461a      	mov	r2, r3
 8002d10:	f04f 0300 	mov.w	r3, #0
 8002d14:	f7fd fe6a 	bl	80009ec <__aeabi_uldivmod>
 8002d18:	4602      	mov	r2, r0
 8002d1a:	460b      	mov	r3, r1
 8002d1c:	4613      	mov	r3, r2
 8002d1e:	61fb      	str	r3, [r7, #28]
 8002d20:	e04c      	b.n	8002dbc <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d22:	4b8a      	ldr	r3, [pc, #552]	; (8002f4c <HAL_RCC_GetSysClockFreq+0x358>)
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	099b      	lsrs	r3, r3, #6
 8002d28:	461a      	mov	r2, r3
 8002d2a:	f04f 0300 	mov.w	r3, #0
 8002d2e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002d32:	f04f 0100 	mov.w	r1, #0
 8002d36:	ea02 0a00 	and.w	sl, r2, r0
 8002d3a:	ea03 0b01 	and.w	fp, r3, r1
 8002d3e:	4650      	mov	r0, sl
 8002d40:	4659      	mov	r1, fp
 8002d42:	f04f 0200 	mov.w	r2, #0
 8002d46:	f04f 0300 	mov.w	r3, #0
 8002d4a:	014b      	lsls	r3, r1, #5
 8002d4c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002d50:	0142      	lsls	r2, r0, #5
 8002d52:	4610      	mov	r0, r2
 8002d54:	4619      	mov	r1, r3
 8002d56:	ebb0 000a 	subs.w	r0, r0, sl
 8002d5a:	eb61 010b 	sbc.w	r1, r1, fp
 8002d5e:	f04f 0200 	mov.w	r2, #0
 8002d62:	f04f 0300 	mov.w	r3, #0
 8002d66:	018b      	lsls	r3, r1, #6
 8002d68:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002d6c:	0182      	lsls	r2, r0, #6
 8002d6e:	1a12      	subs	r2, r2, r0
 8002d70:	eb63 0301 	sbc.w	r3, r3, r1
 8002d74:	f04f 0000 	mov.w	r0, #0
 8002d78:	f04f 0100 	mov.w	r1, #0
 8002d7c:	00d9      	lsls	r1, r3, #3
 8002d7e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002d82:	00d0      	lsls	r0, r2, #3
 8002d84:	4602      	mov	r2, r0
 8002d86:	460b      	mov	r3, r1
 8002d88:	eb12 020a 	adds.w	r2, r2, sl
 8002d8c:	eb43 030b 	adc.w	r3, r3, fp
 8002d90:	f04f 0000 	mov.w	r0, #0
 8002d94:	f04f 0100 	mov.w	r1, #0
 8002d98:	0299      	lsls	r1, r3, #10
 8002d9a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002d9e:	0290      	lsls	r0, r2, #10
 8002da0:	4602      	mov	r2, r0
 8002da2:	460b      	mov	r3, r1
 8002da4:	4610      	mov	r0, r2
 8002da6:	4619      	mov	r1, r3
 8002da8:	697b      	ldr	r3, [r7, #20]
 8002daa:	461a      	mov	r2, r3
 8002dac:	f04f 0300 	mov.w	r3, #0
 8002db0:	f7fd fe1c 	bl	80009ec <__aeabi_uldivmod>
 8002db4:	4602      	mov	r2, r0
 8002db6:	460b      	mov	r3, r1
 8002db8:	4613      	mov	r3, r2
 8002dba:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002dbc:	4b63      	ldr	r3, [pc, #396]	; (8002f4c <HAL_RCC_GetSysClockFreq+0x358>)
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	0c1b      	lsrs	r3, r3, #16
 8002dc2:	f003 0303 	and.w	r3, r3, #3
 8002dc6:	3301      	adds	r3, #1
 8002dc8:	005b      	lsls	r3, r3, #1
 8002dca:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 8002dcc:	69fa      	ldr	r2, [r7, #28]
 8002dce:	693b      	ldr	r3, [r7, #16]
 8002dd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dd4:	61bb      	str	r3, [r7, #24]
      break;
 8002dd6:	e0b2      	b.n	8002f3e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002dd8:	4b5c      	ldr	r3, [pc, #368]	; (8002f4c <HAL_RCC_GetSysClockFreq+0x358>)
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002de0:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002de2:	4b5a      	ldr	r3, [pc, #360]	; (8002f4c <HAL_RCC_GetSysClockFreq+0x358>)
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d04d      	beq.n	8002e8a <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002dee:	4b57      	ldr	r3, [pc, #348]	; (8002f4c <HAL_RCC_GetSysClockFreq+0x358>)
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	099b      	lsrs	r3, r3, #6
 8002df4:	461a      	mov	r2, r3
 8002df6:	f04f 0300 	mov.w	r3, #0
 8002dfa:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002dfe:	f04f 0100 	mov.w	r1, #0
 8002e02:	ea02 0800 	and.w	r8, r2, r0
 8002e06:	ea03 0901 	and.w	r9, r3, r1
 8002e0a:	4640      	mov	r0, r8
 8002e0c:	4649      	mov	r1, r9
 8002e0e:	f04f 0200 	mov.w	r2, #0
 8002e12:	f04f 0300 	mov.w	r3, #0
 8002e16:	014b      	lsls	r3, r1, #5
 8002e18:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002e1c:	0142      	lsls	r2, r0, #5
 8002e1e:	4610      	mov	r0, r2
 8002e20:	4619      	mov	r1, r3
 8002e22:	ebb0 0008 	subs.w	r0, r0, r8
 8002e26:	eb61 0109 	sbc.w	r1, r1, r9
 8002e2a:	f04f 0200 	mov.w	r2, #0
 8002e2e:	f04f 0300 	mov.w	r3, #0
 8002e32:	018b      	lsls	r3, r1, #6
 8002e34:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002e38:	0182      	lsls	r2, r0, #6
 8002e3a:	1a12      	subs	r2, r2, r0
 8002e3c:	eb63 0301 	sbc.w	r3, r3, r1
 8002e40:	f04f 0000 	mov.w	r0, #0
 8002e44:	f04f 0100 	mov.w	r1, #0
 8002e48:	00d9      	lsls	r1, r3, #3
 8002e4a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002e4e:	00d0      	lsls	r0, r2, #3
 8002e50:	4602      	mov	r2, r0
 8002e52:	460b      	mov	r3, r1
 8002e54:	eb12 0208 	adds.w	r2, r2, r8
 8002e58:	eb43 0309 	adc.w	r3, r3, r9
 8002e5c:	f04f 0000 	mov.w	r0, #0
 8002e60:	f04f 0100 	mov.w	r1, #0
 8002e64:	0259      	lsls	r1, r3, #9
 8002e66:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002e6a:	0250      	lsls	r0, r2, #9
 8002e6c:	4602      	mov	r2, r0
 8002e6e:	460b      	mov	r3, r1
 8002e70:	4610      	mov	r0, r2
 8002e72:	4619      	mov	r1, r3
 8002e74:	697b      	ldr	r3, [r7, #20]
 8002e76:	461a      	mov	r2, r3
 8002e78:	f04f 0300 	mov.w	r3, #0
 8002e7c:	f7fd fdb6 	bl	80009ec <__aeabi_uldivmod>
 8002e80:	4602      	mov	r2, r0
 8002e82:	460b      	mov	r3, r1
 8002e84:	4613      	mov	r3, r2
 8002e86:	61fb      	str	r3, [r7, #28]
 8002e88:	e04a      	b.n	8002f20 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e8a:	4b30      	ldr	r3, [pc, #192]	; (8002f4c <HAL_RCC_GetSysClockFreq+0x358>)
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	099b      	lsrs	r3, r3, #6
 8002e90:	461a      	mov	r2, r3
 8002e92:	f04f 0300 	mov.w	r3, #0
 8002e96:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002e9a:	f04f 0100 	mov.w	r1, #0
 8002e9e:	ea02 0400 	and.w	r4, r2, r0
 8002ea2:	ea03 0501 	and.w	r5, r3, r1
 8002ea6:	4620      	mov	r0, r4
 8002ea8:	4629      	mov	r1, r5
 8002eaa:	f04f 0200 	mov.w	r2, #0
 8002eae:	f04f 0300 	mov.w	r3, #0
 8002eb2:	014b      	lsls	r3, r1, #5
 8002eb4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002eb8:	0142      	lsls	r2, r0, #5
 8002eba:	4610      	mov	r0, r2
 8002ebc:	4619      	mov	r1, r3
 8002ebe:	1b00      	subs	r0, r0, r4
 8002ec0:	eb61 0105 	sbc.w	r1, r1, r5
 8002ec4:	f04f 0200 	mov.w	r2, #0
 8002ec8:	f04f 0300 	mov.w	r3, #0
 8002ecc:	018b      	lsls	r3, r1, #6
 8002ece:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002ed2:	0182      	lsls	r2, r0, #6
 8002ed4:	1a12      	subs	r2, r2, r0
 8002ed6:	eb63 0301 	sbc.w	r3, r3, r1
 8002eda:	f04f 0000 	mov.w	r0, #0
 8002ede:	f04f 0100 	mov.w	r1, #0
 8002ee2:	00d9      	lsls	r1, r3, #3
 8002ee4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002ee8:	00d0      	lsls	r0, r2, #3
 8002eea:	4602      	mov	r2, r0
 8002eec:	460b      	mov	r3, r1
 8002eee:	1912      	adds	r2, r2, r4
 8002ef0:	eb45 0303 	adc.w	r3, r5, r3
 8002ef4:	f04f 0000 	mov.w	r0, #0
 8002ef8:	f04f 0100 	mov.w	r1, #0
 8002efc:	0299      	lsls	r1, r3, #10
 8002efe:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002f02:	0290      	lsls	r0, r2, #10
 8002f04:	4602      	mov	r2, r0
 8002f06:	460b      	mov	r3, r1
 8002f08:	4610      	mov	r0, r2
 8002f0a:	4619      	mov	r1, r3
 8002f0c:	697b      	ldr	r3, [r7, #20]
 8002f0e:	461a      	mov	r2, r3
 8002f10:	f04f 0300 	mov.w	r3, #0
 8002f14:	f7fd fd6a 	bl	80009ec <__aeabi_uldivmod>
 8002f18:	4602      	mov	r2, r0
 8002f1a:	460b      	mov	r3, r1
 8002f1c:	4613      	mov	r3, r2
 8002f1e:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002f20:	4b0a      	ldr	r3, [pc, #40]	; (8002f4c <HAL_RCC_GetSysClockFreq+0x358>)
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	0f1b      	lsrs	r3, r3, #28
 8002f26:	f003 0307 	and.w	r3, r3, #7
 8002f2a:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 8002f2c:	69fa      	ldr	r2, [r7, #28]
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f34:	61bb      	str	r3, [r7, #24]
      break;
 8002f36:	e002      	b.n	8002f3e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002f38:	4b05      	ldr	r3, [pc, #20]	; (8002f50 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002f3a:	61bb      	str	r3, [r7, #24]
      break;
 8002f3c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f3e:	69bb      	ldr	r3, [r7, #24]
}
 8002f40:	4618      	mov	r0, r3
 8002f42:	3720      	adds	r7, #32
 8002f44:	46bd      	mov	sp, r7
 8002f46:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f4a:	bf00      	nop
 8002f4c:	40023800 	.word	0x40023800
 8002f50:	00f42400 	.word	0x00f42400
 8002f54:	007a1200 	.word	0x007a1200

08002f58 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b086      	sub	sp, #24
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d101      	bne.n	8002f6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	e28d      	b.n	8003486 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f003 0301 	and.w	r3, r3, #1
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	f000 8083 	beq.w	800307e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002f78:	4b94      	ldr	r3, [pc, #592]	; (80031cc <HAL_RCC_OscConfig+0x274>)
 8002f7a:	689b      	ldr	r3, [r3, #8]
 8002f7c:	f003 030c 	and.w	r3, r3, #12
 8002f80:	2b04      	cmp	r3, #4
 8002f82:	d019      	beq.n	8002fb8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002f84:	4b91      	ldr	r3, [pc, #580]	; (80031cc <HAL_RCC_OscConfig+0x274>)
 8002f86:	689b      	ldr	r3, [r3, #8]
 8002f88:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002f8c:	2b08      	cmp	r3, #8
 8002f8e:	d106      	bne.n	8002f9e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002f90:	4b8e      	ldr	r3, [pc, #568]	; (80031cc <HAL_RCC_OscConfig+0x274>)
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f98:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f9c:	d00c      	beq.n	8002fb8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f9e:	4b8b      	ldr	r3, [pc, #556]	; (80031cc <HAL_RCC_OscConfig+0x274>)
 8002fa0:	689b      	ldr	r3, [r3, #8]
 8002fa2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002fa6:	2b0c      	cmp	r3, #12
 8002fa8:	d112      	bne.n	8002fd0 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002faa:	4b88      	ldr	r3, [pc, #544]	; (80031cc <HAL_RCC_OscConfig+0x274>)
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fb2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002fb6:	d10b      	bne.n	8002fd0 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fb8:	4b84      	ldr	r3, [pc, #528]	; (80031cc <HAL_RCC_OscConfig+0x274>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d05b      	beq.n	800307c <HAL_RCC_OscConfig+0x124>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d157      	bne.n	800307c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	e25a      	b.n	8003486 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fd8:	d106      	bne.n	8002fe8 <HAL_RCC_OscConfig+0x90>
 8002fda:	4b7c      	ldr	r3, [pc, #496]	; (80031cc <HAL_RCC_OscConfig+0x274>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4a7b      	ldr	r2, [pc, #492]	; (80031cc <HAL_RCC_OscConfig+0x274>)
 8002fe0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fe4:	6013      	str	r3, [r2, #0]
 8002fe6:	e01d      	b.n	8003024 <HAL_RCC_OscConfig+0xcc>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ff0:	d10c      	bne.n	800300c <HAL_RCC_OscConfig+0xb4>
 8002ff2:	4b76      	ldr	r3, [pc, #472]	; (80031cc <HAL_RCC_OscConfig+0x274>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a75      	ldr	r2, [pc, #468]	; (80031cc <HAL_RCC_OscConfig+0x274>)
 8002ff8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ffc:	6013      	str	r3, [r2, #0]
 8002ffe:	4b73      	ldr	r3, [pc, #460]	; (80031cc <HAL_RCC_OscConfig+0x274>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4a72      	ldr	r2, [pc, #456]	; (80031cc <HAL_RCC_OscConfig+0x274>)
 8003004:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003008:	6013      	str	r3, [r2, #0]
 800300a:	e00b      	b.n	8003024 <HAL_RCC_OscConfig+0xcc>
 800300c:	4b6f      	ldr	r3, [pc, #444]	; (80031cc <HAL_RCC_OscConfig+0x274>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a6e      	ldr	r2, [pc, #440]	; (80031cc <HAL_RCC_OscConfig+0x274>)
 8003012:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003016:	6013      	str	r3, [r2, #0]
 8003018:	4b6c      	ldr	r3, [pc, #432]	; (80031cc <HAL_RCC_OscConfig+0x274>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a6b      	ldr	r2, [pc, #428]	; (80031cc <HAL_RCC_OscConfig+0x274>)
 800301e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003022:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d013      	beq.n	8003054 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800302c:	f7fe fd9e 	bl	8001b6c <HAL_GetTick>
 8003030:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003032:	e008      	b.n	8003046 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003034:	f7fe fd9a 	bl	8001b6c <HAL_GetTick>
 8003038:	4602      	mov	r2, r0
 800303a:	693b      	ldr	r3, [r7, #16]
 800303c:	1ad3      	subs	r3, r2, r3
 800303e:	2b64      	cmp	r3, #100	; 0x64
 8003040:	d901      	bls.n	8003046 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003042:	2303      	movs	r3, #3
 8003044:	e21f      	b.n	8003486 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003046:	4b61      	ldr	r3, [pc, #388]	; (80031cc <HAL_RCC_OscConfig+0x274>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800304e:	2b00      	cmp	r3, #0
 8003050:	d0f0      	beq.n	8003034 <HAL_RCC_OscConfig+0xdc>
 8003052:	e014      	b.n	800307e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003054:	f7fe fd8a 	bl	8001b6c <HAL_GetTick>
 8003058:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800305a:	e008      	b.n	800306e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800305c:	f7fe fd86 	bl	8001b6c <HAL_GetTick>
 8003060:	4602      	mov	r2, r0
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	1ad3      	subs	r3, r2, r3
 8003066:	2b64      	cmp	r3, #100	; 0x64
 8003068:	d901      	bls.n	800306e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800306a:	2303      	movs	r3, #3
 800306c:	e20b      	b.n	8003486 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800306e:	4b57      	ldr	r3, [pc, #348]	; (80031cc <HAL_RCC_OscConfig+0x274>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003076:	2b00      	cmp	r3, #0
 8003078:	d1f0      	bne.n	800305c <HAL_RCC_OscConfig+0x104>
 800307a:	e000      	b.n	800307e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800307c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f003 0302 	and.w	r3, r3, #2
 8003086:	2b00      	cmp	r3, #0
 8003088:	d06f      	beq.n	800316a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800308a:	4b50      	ldr	r3, [pc, #320]	; (80031cc <HAL_RCC_OscConfig+0x274>)
 800308c:	689b      	ldr	r3, [r3, #8]
 800308e:	f003 030c 	and.w	r3, r3, #12
 8003092:	2b00      	cmp	r3, #0
 8003094:	d017      	beq.n	80030c6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003096:	4b4d      	ldr	r3, [pc, #308]	; (80031cc <HAL_RCC_OscConfig+0x274>)
 8003098:	689b      	ldr	r3, [r3, #8]
 800309a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800309e:	2b08      	cmp	r3, #8
 80030a0:	d105      	bne.n	80030ae <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80030a2:	4b4a      	ldr	r3, [pc, #296]	; (80031cc <HAL_RCC_OscConfig+0x274>)
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d00b      	beq.n	80030c6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80030ae:	4b47      	ldr	r3, [pc, #284]	; (80031cc <HAL_RCC_OscConfig+0x274>)
 80030b0:	689b      	ldr	r3, [r3, #8]
 80030b2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80030b6:	2b0c      	cmp	r3, #12
 80030b8:	d11c      	bne.n	80030f4 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80030ba:	4b44      	ldr	r3, [pc, #272]	; (80031cc <HAL_RCC_OscConfig+0x274>)
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d116      	bne.n	80030f4 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030c6:	4b41      	ldr	r3, [pc, #260]	; (80031cc <HAL_RCC_OscConfig+0x274>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f003 0302 	and.w	r3, r3, #2
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d005      	beq.n	80030de <HAL_RCC_OscConfig+0x186>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	68db      	ldr	r3, [r3, #12]
 80030d6:	2b01      	cmp	r3, #1
 80030d8:	d001      	beq.n	80030de <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80030da:	2301      	movs	r3, #1
 80030dc:	e1d3      	b.n	8003486 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030de:	4b3b      	ldr	r3, [pc, #236]	; (80031cc <HAL_RCC_OscConfig+0x274>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	691b      	ldr	r3, [r3, #16]
 80030ea:	00db      	lsls	r3, r3, #3
 80030ec:	4937      	ldr	r1, [pc, #220]	; (80031cc <HAL_RCC_OscConfig+0x274>)
 80030ee:	4313      	orrs	r3, r2
 80030f0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030f2:	e03a      	b.n	800316a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	68db      	ldr	r3, [r3, #12]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d020      	beq.n	800313e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80030fc:	4b34      	ldr	r3, [pc, #208]	; (80031d0 <HAL_RCC_OscConfig+0x278>)
 80030fe:	2201      	movs	r2, #1
 8003100:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003102:	f7fe fd33 	bl	8001b6c <HAL_GetTick>
 8003106:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003108:	e008      	b.n	800311c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800310a:	f7fe fd2f 	bl	8001b6c <HAL_GetTick>
 800310e:	4602      	mov	r2, r0
 8003110:	693b      	ldr	r3, [r7, #16]
 8003112:	1ad3      	subs	r3, r2, r3
 8003114:	2b02      	cmp	r3, #2
 8003116:	d901      	bls.n	800311c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003118:	2303      	movs	r3, #3
 800311a:	e1b4      	b.n	8003486 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800311c:	4b2b      	ldr	r3, [pc, #172]	; (80031cc <HAL_RCC_OscConfig+0x274>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f003 0302 	and.w	r3, r3, #2
 8003124:	2b00      	cmp	r3, #0
 8003126:	d0f0      	beq.n	800310a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003128:	4b28      	ldr	r3, [pc, #160]	; (80031cc <HAL_RCC_OscConfig+0x274>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	691b      	ldr	r3, [r3, #16]
 8003134:	00db      	lsls	r3, r3, #3
 8003136:	4925      	ldr	r1, [pc, #148]	; (80031cc <HAL_RCC_OscConfig+0x274>)
 8003138:	4313      	orrs	r3, r2
 800313a:	600b      	str	r3, [r1, #0]
 800313c:	e015      	b.n	800316a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800313e:	4b24      	ldr	r3, [pc, #144]	; (80031d0 <HAL_RCC_OscConfig+0x278>)
 8003140:	2200      	movs	r2, #0
 8003142:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003144:	f7fe fd12 	bl	8001b6c <HAL_GetTick>
 8003148:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800314a:	e008      	b.n	800315e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800314c:	f7fe fd0e 	bl	8001b6c <HAL_GetTick>
 8003150:	4602      	mov	r2, r0
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	1ad3      	subs	r3, r2, r3
 8003156:	2b02      	cmp	r3, #2
 8003158:	d901      	bls.n	800315e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800315a:	2303      	movs	r3, #3
 800315c:	e193      	b.n	8003486 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800315e:	4b1b      	ldr	r3, [pc, #108]	; (80031cc <HAL_RCC_OscConfig+0x274>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f003 0302 	and.w	r3, r3, #2
 8003166:	2b00      	cmp	r3, #0
 8003168:	d1f0      	bne.n	800314c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f003 0308 	and.w	r3, r3, #8
 8003172:	2b00      	cmp	r3, #0
 8003174:	d036      	beq.n	80031e4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	695b      	ldr	r3, [r3, #20]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d016      	beq.n	80031ac <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800317e:	4b15      	ldr	r3, [pc, #84]	; (80031d4 <HAL_RCC_OscConfig+0x27c>)
 8003180:	2201      	movs	r2, #1
 8003182:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003184:	f7fe fcf2 	bl	8001b6c <HAL_GetTick>
 8003188:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800318a:	e008      	b.n	800319e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800318c:	f7fe fcee 	bl	8001b6c <HAL_GetTick>
 8003190:	4602      	mov	r2, r0
 8003192:	693b      	ldr	r3, [r7, #16]
 8003194:	1ad3      	subs	r3, r2, r3
 8003196:	2b02      	cmp	r3, #2
 8003198:	d901      	bls.n	800319e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800319a:	2303      	movs	r3, #3
 800319c:	e173      	b.n	8003486 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800319e:	4b0b      	ldr	r3, [pc, #44]	; (80031cc <HAL_RCC_OscConfig+0x274>)
 80031a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031a2:	f003 0302 	and.w	r3, r3, #2
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d0f0      	beq.n	800318c <HAL_RCC_OscConfig+0x234>
 80031aa:	e01b      	b.n	80031e4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031ac:	4b09      	ldr	r3, [pc, #36]	; (80031d4 <HAL_RCC_OscConfig+0x27c>)
 80031ae:	2200      	movs	r2, #0
 80031b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031b2:	f7fe fcdb 	bl	8001b6c <HAL_GetTick>
 80031b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031b8:	e00e      	b.n	80031d8 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031ba:	f7fe fcd7 	bl	8001b6c <HAL_GetTick>
 80031be:	4602      	mov	r2, r0
 80031c0:	693b      	ldr	r3, [r7, #16]
 80031c2:	1ad3      	subs	r3, r2, r3
 80031c4:	2b02      	cmp	r3, #2
 80031c6:	d907      	bls.n	80031d8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80031c8:	2303      	movs	r3, #3
 80031ca:	e15c      	b.n	8003486 <HAL_RCC_OscConfig+0x52e>
 80031cc:	40023800 	.word	0x40023800
 80031d0:	42470000 	.word	0x42470000
 80031d4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031d8:	4b8a      	ldr	r3, [pc, #552]	; (8003404 <HAL_RCC_OscConfig+0x4ac>)
 80031da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031dc:	f003 0302 	and.w	r3, r3, #2
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d1ea      	bne.n	80031ba <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f003 0304 	and.w	r3, r3, #4
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	f000 8097 	beq.w	8003320 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031f2:	2300      	movs	r3, #0
 80031f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031f6:	4b83      	ldr	r3, [pc, #524]	; (8003404 <HAL_RCC_OscConfig+0x4ac>)
 80031f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d10f      	bne.n	8003222 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003202:	2300      	movs	r3, #0
 8003204:	60bb      	str	r3, [r7, #8]
 8003206:	4b7f      	ldr	r3, [pc, #508]	; (8003404 <HAL_RCC_OscConfig+0x4ac>)
 8003208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800320a:	4a7e      	ldr	r2, [pc, #504]	; (8003404 <HAL_RCC_OscConfig+0x4ac>)
 800320c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003210:	6413      	str	r3, [r2, #64]	; 0x40
 8003212:	4b7c      	ldr	r3, [pc, #496]	; (8003404 <HAL_RCC_OscConfig+0x4ac>)
 8003214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003216:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800321a:	60bb      	str	r3, [r7, #8]
 800321c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800321e:	2301      	movs	r3, #1
 8003220:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003222:	4b79      	ldr	r3, [pc, #484]	; (8003408 <HAL_RCC_OscConfig+0x4b0>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800322a:	2b00      	cmp	r3, #0
 800322c:	d118      	bne.n	8003260 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800322e:	4b76      	ldr	r3, [pc, #472]	; (8003408 <HAL_RCC_OscConfig+0x4b0>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a75      	ldr	r2, [pc, #468]	; (8003408 <HAL_RCC_OscConfig+0x4b0>)
 8003234:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003238:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800323a:	f7fe fc97 	bl	8001b6c <HAL_GetTick>
 800323e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003240:	e008      	b.n	8003254 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003242:	f7fe fc93 	bl	8001b6c <HAL_GetTick>
 8003246:	4602      	mov	r2, r0
 8003248:	693b      	ldr	r3, [r7, #16]
 800324a:	1ad3      	subs	r3, r2, r3
 800324c:	2b02      	cmp	r3, #2
 800324e:	d901      	bls.n	8003254 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003250:	2303      	movs	r3, #3
 8003252:	e118      	b.n	8003486 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003254:	4b6c      	ldr	r3, [pc, #432]	; (8003408 <HAL_RCC_OscConfig+0x4b0>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800325c:	2b00      	cmp	r3, #0
 800325e:	d0f0      	beq.n	8003242 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	689b      	ldr	r3, [r3, #8]
 8003264:	2b01      	cmp	r3, #1
 8003266:	d106      	bne.n	8003276 <HAL_RCC_OscConfig+0x31e>
 8003268:	4b66      	ldr	r3, [pc, #408]	; (8003404 <HAL_RCC_OscConfig+0x4ac>)
 800326a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800326c:	4a65      	ldr	r2, [pc, #404]	; (8003404 <HAL_RCC_OscConfig+0x4ac>)
 800326e:	f043 0301 	orr.w	r3, r3, #1
 8003272:	6713      	str	r3, [r2, #112]	; 0x70
 8003274:	e01c      	b.n	80032b0 <HAL_RCC_OscConfig+0x358>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	689b      	ldr	r3, [r3, #8]
 800327a:	2b05      	cmp	r3, #5
 800327c:	d10c      	bne.n	8003298 <HAL_RCC_OscConfig+0x340>
 800327e:	4b61      	ldr	r3, [pc, #388]	; (8003404 <HAL_RCC_OscConfig+0x4ac>)
 8003280:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003282:	4a60      	ldr	r2, [pc, #384]	; (8003404 <HAL_RCC_OscConfig+0x4ac>)
 8003284:	f043 0304 	orr.w	r3, r3, #4
 8003288:	6713      	str	r3, [r2, #112]	; 0x70
 800328a:	4b5e      	ldr	r3, [pc, #376]	; (8003404 <HAL_RCC_OscConfig+0x4ac>)
 800328c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800328e:	4a5d      	ldr	r2, [pc, #372]	; (8003404 <HAL_RCC_OscConfig+0x4ac>)
 8003290:	f043 0301 	orr.w	r3, r3, #1
 8003294:	6713      	str	r3, [r2, #112]	; 0x70
 8003296:	e00b      	b.n	80032b0 <HAL_RCC_OscConfig+0x358>
 8003298:	4b5a      	ldr	r3, [pc, #360]	; (8003404 <HAL_RCC_OscConfig+0x4ac>)
 800329a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800329c:	4a59      	ldr	r2, [pc, #356]	; (8003404 <HAL_RCC_OscConfig+0x4ac>)
 800329e:	f023 0301 	bic.w	r3, r3, #1
 80032a2:	6713      	str	r3, [r2, #112]	; 0x70
 80032a4:	4b57      	ldr	r3, [pc, #348]	; (8003404 <HAL_RCC_OscConfig+0x4ac>)
 80032a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032a8:	4a56      	ldr	r2, [pc, #344]	; (8003404 <HAL_RCC_OscConfig+0x4ac>)
 80032aa:	f023 0304 	bic.w	r3, r3, #4
 80032ae:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	689b      	ldr	r3, [r3, #8]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d015      	beq.n	80032e4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032b8:	f7fe fc58 	bl	8001b6c <HAL_GetTick>
 80032bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032be:	e00a      	b.n	80032d6 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032c0:	f7fe fc54 	bl	8001b6c <HAL_GetTick>
 80032c4:	4602      	mov	r2, r0
 80032c6:	693b      	ldr	r3, [r7, #16]
 80032c8:	1ad3      	subs	r3, r2, r3
 80032ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d901      	bls.n	80032d6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80032d2:	2303      	movs	r3, #3
 80032d4:	e0d7      	b.n	8003486 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032d6:	4b4b      	ldr	r3, [pc, #300]	; (8003404 <HAL_RCC_OscConfig+0x4ac>)
 80032d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032da:	f003 0302 	and.w	r3, r3, #2
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d0ee      	beq.n	80032c0 <HAL_RCC_OscConfig+0x368>
 80032e2:	e014      	b.n	800330e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032e4:	f7fe fc42 	bl	8001b6c <HAL_GetTick>
 80032e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032ea:	e00a      	b.n	8003302 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032ec:	f7fe fc3e 	bl	8001b6c <HAL_GetTick>
 80032f0:	4602      	mov	r2, r0
 80032f2:	693b      	ldr	r3, [r7, #16]
 80032f4:	1ad3      	subs	r3, r2, r3
 80032f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d901      	bls.n	8003302 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80032fe:	2303      	movs	r3, #3
 8003300:	e0c1      	b.n	8003486 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003302:	4b40      	ldr	r3, [pc, #256]	; (8003404 <HAL_RCC_OscConfig+0x4ac>)
 8003304:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003306:	f003 0302 	and.w	r3, r3, #2
 800330a:	2b00      	cmp	r3, #0
 800330c:	d1ee      	bne.n	80032ec <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800330e:	7dfb      	ldrb	r3, [r7, #23]
 8003310:	2b01      	cmp	r3, #1
 8003312:	d105      	bne.n	8003320 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003314:	4b3b      	ldr	r3, [pc, #236]	; (8003404 <HAL_RCC_OscConfig+0x4ac>)
 8003316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003318:	4a3a      	ldr	r2, [pc, #232]	; (8003404 <HAL_RCC_OscConfig+0x4ac>)
 800331a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800331e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	699b      	ldr	r3, [r3, #24]
 8003324:	2b00      	cmp	r3, #0
 8003326:	f000 80ad 	beq.w	8003484 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800332a:	4b36      	ldr	r3, [pc, #216]	; (8003404 <HAL_RCC_OscConfig+0x4ac>)
 800332c:	689b      	ldr	r3, [r3, #8]
 800332e:	f003 030c 	and.w	r3, r3, #12
 8003332:	2b08      	cmp	r3, #8
 8003334:	d060      	beq.n	80033f8 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	699b      	ldr	r3, [r3, #24]
 800333a:	2b02      	cmp	r3, #2
 800333c:	d145      	bne.n	80033ca <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800333e:	4b33      	ldr	r3, [pc, #204]	; (800340c <HAL_RCC_OscConfig+0x4b4>)
 8003340:	2200      	movs	r2, #0
 8003342:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003344:	f7fe fc12 	bl	8001b6c <HAL_GetTick>
 8003348:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800334a:	e008      	b.n	800335e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800334c:	f7fe fc0e 	bl	8001b6c <HAL_GetTick>
 8003350:	4602      	mov	r2, r0
 8003352:	693b      	ldr	r3, [r7, #16]
 8003354:	1ad3      	subs	r3, r2, r3
 8003356:	2b02      	cmp	r3, #2
 8003358:	d901      	bls.n	800335e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800335a:	2303      	movs	r3, #3
 800335c:	e093      	b.n	8003486 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800335e:	4b29      	ldr	r3, [pc, #164]	; (8003404 <HAL_RCC_OscConfig+0x4ac>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003366:	2b00      	cmp	r3, #0
 8003368:	d1f0      	bne.n	800334c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	69da      	ldr	r2, [r3, #28]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6a1b      	ldr	r3, [r3, #32]
 8003372:	431a      	orrs	r2, r3
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003378:	019b      	lsls	r3, r3, #6
 800337a:	431a      	orrs	r2, r3
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003380:	085b      	lsrs	r3, r3, #1
 8003382:	3b01      	subs	r3, #1
 8003384:	041b      	lsls	r3, r3, #16
 8003386:	431a      	orrs	r2, r3
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800338c:	061b      	lsls	r3, r3, #24
 800338e:	431a      	orrs	r2, r3
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003394:	071b      	lsls	r3, r3, #28
 8003396:	491b      	ldr	r1, [pc, #108]	; (8003404 <HAL_RCC_OscConfig+0x4ac>)
 8003398:	4313      	orrs	r3, r2
 800339a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800339c:	4b1b      	ldr	r3, [pc, #108]	; (800340c <HAL_RCC_OscConfig+0x4b4>)
 800339e:	2201      	movs	r2, #1
 80033a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033a2:	f7fe fbe3 	bl	8001b6c <HAL_GetTick>
 80033a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033a8:	e008      	b.n	80033bc <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033aa:	f7fe fbdf 	bl	8001b6c <HAL_GetTick>
 80033ae:	4602      	mov	r2, r0
 80033b0:	693b      	ldr	r3, [r7, #16]
 80033b2:	1ad3      	subs	r3, r2, r3
 80033b4:	2b02      	cmp	r3, #2
 80033b6:	d901      	bls.n	80033bc <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80033b8:	2303      	movs	r3, #3
 80033ba:	e064      	b.n	8003486 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033bc:	4b11      	ldr	r3, [pc, #68]	; (8003404 <HAL_RCC_OscConfig+0x4ac>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d0f0      	beq.n	80033aa <HAL_RCC_OscConfig+0x452>
 80033c8:	e05c      	b.n	8003484 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033ca:	4b10      	ldr	r3, [pc, #64]	; (800340c <HAL_RCC_OscConfig+0x4b4>)
 80033cc:	2200      	movs	r2, #0
 80033ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033d0:	f7fe fbcc 	bl	8001b6c <HAL_GetTick>
 80033d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033d6:	e008      	b.n	80033ea <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033d8:	f7fe fbc8 	bl	8001b6c <HAL_GetTick>
 80033dc:	4602      	mov	r2, r0
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	1ad3      	subs	r3, r2, r3
 80033e2:	2b02      	cmp	r3, #2
 80033e4:	d901      	bls.n	80033ea <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80033e6:	2303      	movs	r3, #3
 80033e8:	e04d      	b.n	8003486 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033ea:	4b06      	ldr	r3, [pc, #24]	; (8003404 <HAL_RCC_OscConfig+0x4ac>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d1f0      	bne.n	80033d8 <HAL_RCC_OscConfig+0x480>
 80033f6:	e045      	b.n	8003484 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	699b      	ldr	r3, [r3, #24]
 80033fc:	2b01      	cmp	r3, #1
 80033fe:	d107      	bne.n	8003410 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003400:	2301      	movs	r3, #1
 8003402:	e040      	b.n	8003486 <HAL_RCC_OscConfig+0x52e>
 8003404:	40023800 	.word	0x40023800
 8003408:	40007000 	.word	0x40007000
 800340c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003410:	4b1f      	ldr	r3, [pc, #124]	; (8003490 <HAL_RCC_OscConfig+0x538>)
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	699b      	ldr	r3, [r3, #24]
 800341a:	2b01      	cmp	r3, #1
 800341c:	d030      	beq.n	8003480 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003428:	429a      	cmp	r2, r3
 800342a:	d129      	bne.n	8003480 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003436:	429a      	cmp	r2, r3
 8003438:	d122      	bne.n	8003480 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800343a:	68fa      	ldr	r2, [r7, #12]
 800343c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003440:	4013      	ands	r3, r2
 8003442:	687a      	ldr	r2, [r7, #4]
 8003444:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003446:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003448:	4293      	cmp	r3, r2
 800344a:	d119      	bne.n	8003480 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003456:	085b      	lsrs	r3, r3, #1
 8003458:	3b01      	subs	r3, #1
 800345a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800345c:	429a      	cmp	r2, r3
 800345e:	d10f      	bne.n	8003480 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800346a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800346c:	429a      	cmp	r2, r3
 800346e:	d107      	bne.n	8003480 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800347a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800347c:	429a      	cmp	r2, r3
 800347e:	d001      	beq.n	8003484 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003480:	2301      	movs	r3, #1
 8003482:	e000      	b.n	8003486 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003484:	2300      	movs	r3, #0
}
 8003486:	4618      	mov	r0, r3
 8003488:	3718      	adds	r7, #24
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}
 800348e:	bf00      	nop
 8003490:	40023800 	.word	0x40023800

08003494 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b082      	sub	sp, #8
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d101      	bne.n	80034a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80034a2:	2301      	movs	r3, #1
 80034a4:	e041      	b.n	800352a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034ac:	b2db      	uxtb	r3, r3
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d106      	bne.n	80034c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2200      	movs	r2, #0
 80034b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80034ba:	6878      	ldr	r0, [r7, #4]
 80034bc:	f7fe f96a 	bl	8001794 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2202      	movs	r2, #2
 80034c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681a      	ldr	r2, [r3, #0]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	3304      	adds	r3, #4
 80034d0:	4619      	mov	r1, r3
 80034d2:	4610      	mov	r0, r2
 80034d4:	f000 fcea 	bl	8003eac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2201      	movs	r2, #1
 80034dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2201      	movs	r2, #1
 80034e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2201      	movs	r2, #1
 80034ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2201      	movs	r2, #1
 80034f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2201      	movs	r2, #1
 80034fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2201      	movs	r2, #1
 8003504:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2201      	movs	r2, #1
 800350c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2201      	movs	r2, #1
 8003514:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2201      	movs	r2, #1
 800351c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2201      	movs	r2, #1
 8003524:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003528:	2300      	movs	r3, #0
}
 800352a:	4618      	mov	r0, r3
 800352c:	3708      	adds	r7, #8
 800352e:	46bd      	mov	sp, r7
 8003530:	bd80      	pop	{r7, pc}
	...

08003534 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003534:	b480      	push	{r7}
 8003536:	b085      	sub	sp, #20
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003542:	b2db      	uxtb	r3, r3
 8003544:	2b01      	cmp	r3, #1
 8003546:	d001      	beq.n	800354c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003548:	2301      	movs	r3, #1
 800354a:	e04e      	b.n	80035ea <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2202      	movs	r2, #2
 8003550:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	68da      	ldr	r2, [r3, #12]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f042 0201 	orr.w	r2, r2, #1
 8003562:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a23      	ldr	r2, [pc, #140]	; (80035f8 <HAL_TIM_Base_Start_IT+0xc4>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d022      	beq.n	80035b4 <HAL_TIM_Base_Start_IT+0x80>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003576:	d01d      	beq.n	80035b4 <HAL_TIM_Base_Start_IT+0x80>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a1f      	ldr	r2, [pc, #124]	; (80035fc <HAL_TIM_Base_Start_IT+0xc8>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d018      	beq.n	80035b4 <HAL_TIM_Base_Start_IT+0x80>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a1e      	ldr	r2, [pc, #120]	; (8003600 <HAL_TIM_Base_Start_IT+0xcc>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d013      	beq.n	80035b4 <HAL_TIM_Base_Start_IT+0x80>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a1c      	ldr	r2, [pc, #112]	; (8003604 <HAL_TIM_Base_Start_IT+0xd0>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d00e      	beq.n	80035b4 <HAL_TIM_Base_Start_IT+0x80>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a1b      	ldr	r2, [pc, #108]	; (8003608 <HAL_TIM_Base_Start_IT+0xd4>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d009      	beq.n	80035b4 <HAL_TIM_Base_Start_IT+0x80>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a19      	ldr	r2, [pc, #100]	; (800360c <HAL_TIM_Base_Start_IT+0xd8>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d004      	beq.n	80035b4 <HAL_TIM_Base_Start_IT+0x80>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a18      	ldr	r2, [pc, #96]	; (8003610 <HAL_TIM_Base_Start_IT+0xdc>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d111      	bne.n	80035d8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	689b      	ldr	r3, [r3, #8]
 80035ba:	f003 0307 	and.w	r3, r3, #7
 80035be:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	2b06      	cmp	r3, #6
 80035c4:	d010      	beq.n	80035e8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	681a      	ldr	r2, [r3, #0]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f042 0201 	orr.w	r2, r2, #1
 80035d4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035d6:	e007      	b.n	80035e8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	681a      	ldr	r2, [r3, #0]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f042 0201 	orr.w	r2, r2, #1
 80035e6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80035e8:	2300      	movs	r3, #0
}
 80035ea:	4618      	mov	r0, r3
 80035ec:	3714      	adds	r7, #20
 80035ee:	46bd      	mov	sp, r7
 80035f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f4:	4770      	bx	lr
 80035f6:	bf00      	nop
 80035f8:	40010000 	.word	0x40010000
 80035fc:	40000400 	.word	0x40000400
 8003600:	40000800 	.word	0x40000800
 8003604:	40000c00 	.word	0x40000c00
 8003608:	40010400 	.word	0x40010400
 800360c:	40014000 	.word	0x40014000
 8003610:	40001800 	.word	0x40001800

08003614 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b082      	sub	sp, #8
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d101      	bne.n	8003626 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	e041      	b.n	80036aa <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800362c:	b2db      	uxtb	r3, r3
 800362e:	2b00      	cmp	r3, #0
 8003630:	d106      	bne.n	8003640 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2200      	movs	r2, #0
 8003636:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800363a:	6878      	ldr	r0, [r7, #4]
 800363c:	f000 f839 	bl	80036b2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2202      	movs	r2, #2
 8003644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681a      	ldr	r2, [r3, #0]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	3304      	adds	r3, #4
 8003650:	4619      	mov	r1, r3
 8003652:	4610      	mov	r0, r2
 8003654:	f000 fc2a 	bl	8003eac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2201      	movs	r2, #1
 800365c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2201      	movs	r2, #1
 8003664:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2201      	movs	r2, #1
 800366c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2201      	movs	r2, #1
 8003674:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2201      	movs	r2, #1
 800367c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2201      	movs	r2, #1
 8003684:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2201      	movs	r2, #1
 800368c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2201      	movs	r2, #1
 8003694:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2201      	movs	r2, #1
 800369c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2201      	movs	r2, #1
 80036a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80036a8:	2300      	movs	r3, #0
}
 80036aa:	4618      	mov	r0, r3
 80036ac:	3708      	adds	r7, #8
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}

080036b2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80036b2:	b480      	push	{r7}
 80036b4:	b083      	sub	sp, #12
 80036b6:	af00      	add	r7, sp, #0
 80036b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80036ba:	bf00      	nop
 80036bc:	370c      	adds	r7, #12
 80036be:	46bd      	mov	sp, r7
 80036c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c4:	4770      	bx	lr
	...

080036c8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b084      	sub	sp, #16
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
 80036d0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d109      	bne.n	80036ec <HAL_TIM_PWM_Start+0x24>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80036de:	b2db      	uxtb	r3, r3
 80036e0:	2b01      	cmp	r3, #1
 80036e2:	bf14      	ite	ne
 80036e4:	2301      	movne	r3, #1
 80036e6:	2300      	moveq	r3, #0
 80036e8:	b2db      	uxtb	r3, r3
 80036ea:	e022      	b.n	8003732 <HAL_TIM_PWM_Start+0x6a>
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	2b04      	cmp	r3, #4
 80036f0:	d109      	bne.n	8003706 <HAL_TIM_PWM_Start+0x3e>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80036f8:	b2db      	uxtb	r3, r3
 80036fa:	2b01      	cmp	r3, #1
 80036fc:	bf14      	ite	ne
 80036fe:	2301      	movne	r3, #1
 8003700:	2300      	moveq	r3, #0
 8003702:	b2db      	uxtb	r3, r3
 8003704:	e015      	b.n	8003732 <HAL_TIM_PWM_Start+0x6a>
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	2b08      	cmp	r3, #8
 800370a:	d109      	bne.n	8003720 <HAL_TIM_PWM_Start+0x58>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003712:	b2db      	uxtb	r3, r3
 8003714:	2b01      	cmp	r3, #1
 8003716:	bf14      	ite	ne
 8003718:	2301      	movne	r3, #1
 800371a:	2300      	moveq	r3, #0
 800371c:	b2db      	uxtb	r3, r3
 800371e:	e008      	b.n	8003732 <HAL_TIM_PWM_Start+0x6a>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003726:	b2db      	uxtb	r3, r3
 8003728:	2b01      	cmp	r3, #1
 800372a:	bf14      	ite	ne
 800372c:	2301      	movne	r3, #1
 800372e:	2300      	moveq	r3, #0
 8003730:	b2db      	uxtb	r3, r3
 8003732:	2b00      	cmp	r3, #0
 8003734:	d001      	beq.n	800373a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003736:	2301      	movs	r3, #1
 8003738:	e07c      	b.n	8003834 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d104      	bne.n	800374a <HAL_TIM_PWM_Start+0x82>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2202      	movs	r2, #2
 8003744:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003748:	e013      	b.n	8003772 <HAL_TIM_PWM_Start+0xaa>
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	2b04      	cmp	r3, #4
 800374e:	d104      	bne.n	800375a <HAL_TIM_PWM_Start+0x92>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2202      	movs	r2, #2
 8003754:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003758:	e00b      	b.n	8003772 <HAL_TIM_PWM_Start+0xaa>
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	2b08      	cmp	r3, #8
 800375e:	d104      	bne.n	800376a <HAL_TIM_PWM_Start+0xa2>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2202      	movs	r2, #2
 8003764:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003768:	e003      	b.n	8003772 <HAL_TIM_PWM_Start+0xaa>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2202      	movs	r2, #2
 800376e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	2201      	movs	r2, #1
 8003778:	6839      	ldr	r1, [r7, #0]
 800377a:	4618      	mov	r0, r3
 800377c:	f000 fe80 	bl	8004480 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a2d      	ldr	r2, [pc, #180]	; (800383c <HAL_TIM_PWM_Start+0x174>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d004      	beq.n	8003794 <HAL_TIM_PWM_Start+0xcc>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4a2c      	ldr	r2, [pc, #176]	; (8003840 <HAL_TIM_PWM_Start+0x178>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d101      	bne.n	8003798 <HAL_TIM_PWM_Start+0xd0>
 8003794:	2301      	movs	r3, #1
 8003796:	e000      	b.n	800379a <HAL_TIM_PWM_Start+0xd2>
 8003798:	2300      	movs	r3, #0
 800379a:	2b00      	cmp	r3, #0
 800379c:	d007      	beq.n	80037ae <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80037ac:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a22      	ldr	r2, [pc, #136]	; (800383c <HAL_TIM_PWM_Start+0x174>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d022      	beq.n	80037fe <HAL_TIM_PWM_Start+0x136>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037c0:	d01d      	beq.n	80037fe <HAL_TIM_PWM_Start+0x136>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a1f      	ldr	r2, [pc, #124]	; (8003844 <HAL_TIM_PWM_Start+0x17c>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d018      	beq.n	80037fe <HAL_TIM_PWM_Start+0x136>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a1d      	ldr	r2, [pc, #116]	; (8003848 <HAL_TIM_PWM_Start+0x180>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d013      	beq.n	80037fe <HAL_TIM_PWM_Start+0x136>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a1c      	ldr	r2, [pc, #112]	; (800384c <HAL_TIM_PWM_Start+0x184>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d00e      	beq.n	80037fe <HAL_TIM_PWM_Start+0x136>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a16      	ldr	r2, [pc, #88]	; (8003840 <HAL_TIM_PWM_Start+0x178>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d009      	beq.n	80037fe <HAL_TIM_PWM_Start+0x136>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a18      	ldr	r2, [pc, #96]	; (8003850 <HAL_TIM_PWM_Start+0x188>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d004      	beq.n	80037fe <HAL_TIM_PWM_Start+0x136>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a16      	ldr	r2, [pc, #88]	; (8003854 <HAL_TIM_PWM_Start+0x18c>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d111      	bne.n	8003822 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	689b      	ldr	r3, [r3, #8]
 8003804:	f003 0307 	and.w	r3, r3, #7
 8003808:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	2b06      	cmp	r3, #6
 800380e:	d010      	beq.n	8003832 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	681a      	ldr	r2, [r3, #0]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f042 0201 	orr.w	r2, r2, #1
 800381e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003820:	e007      	b.n	8003832 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	681a      	ldr	r2, [r3, #0]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f042 0201 	orr.w	r2, r2, #1
 8003830:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003832:	2300      	movs	r3, #0
}
 8003834:	4618      	mov	r0, r3
 8003836:	3710      	adds	r7, #16
 8003838:	46bd      	mov	sp, r7
 800383a:	bd80      	pop	{r7, pc}
 800383c:	40010000 	.word	0x40010000
 8003840:	40010400 	.word	0x40010400
 8003844:	40000400 	.word	0x40000400
 8003848:	40000800 	.word	0x40000800
 800384c:	40000c00 	.word	0x40000c00
 8003850:	40014000 	.word	0x40014000
 8003854:	40001800 	.word	0x40001800

08003858 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b082      	sub	sp, #8
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
 8003860:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	2200      	movs	r2, #0
 8003868:	6839      	ldr	r1, [r7, #0]
 800386a:	4618      	mov	r0, r3
 800386c:	f000 fe08 	bl	8004480 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a2e      	ldr	r2, [pc, #184]	; (8003930 <HAL_TIM_PWM_Stop+0xd8>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d004      	beq.n	8003884 <HAL_TIM_PWM_Stop+0x2c>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4a2d      	ldr	r2, [pc, #180]	; (8003934 <HAL_TIM_PWM_Stop+0xdc>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d101      	bne.n	8003888 <HAL_TIM_PWM_Stop+0x30>
 8003884:	2301      	movs	r3, #1
 8003886:	e000      	b.n	800388a <HAL_TIM_PWM_Stop+0x32>
 8003888:	2300      	movs	r3, #0
 800388a:	2b00      	cmp	r3, #0
 800388c:	d017      	beq.n	80038be <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	6a1a      	ldr	r2, [r3, #32]
 8003894:	f241 1311 	movw	r3, #4369	; 0x1111
 8003898:	4013      	ands	r3, r2
 800389a:	2b00      	cmp	r3, #0
 800389c:	d10f      	bne.n	80038be <HAL_TIM_PWM_Stop+0x66>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	6a1a      	ldr	r2, [r3, #32]
 80038a4:	f240 4344 	movw	r3, #1092	; 0x444
 80038a8:	4013      	ands	r3, r2
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d107      	bne.n	80038be <HAL_TIM_PWM_Stop+0x66>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80038bc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	6a1a      	ldr	r2, [r3, #32]
 80038c4:	f241 1311 	movw	r3, #4369	; 0x1111
 80038c8:	4013      	ands	r3, r2
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d10f      	bne.n	80038ee <HAL_TIM_PWM_Stop+0x96>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	6a1a      	ldr	r2, [r3, #32]
 80038d4:	f240 4344 	movw	r3, #1092	; 0x444
 80038d8:	4013      	ands	r3, r2
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d107      	bne.n	80038ee <HAL_TIM_PWM_Stop+0x96>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	681a      	ldr	r2, [r3, #0]
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f022 0201 	bic.w	r2, r2, #1
 80038ec:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d104      	bne.n	80038fe <HAL_TIM_PWM_Stop+0xa6>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2201      	movs	r2, #1
 80038f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80038fc:	e013      	b.n	8003926 <HAL_TIM_PWM_Stop+0xce>
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	2b04      	cmp	r3, #4
 8003902:	d104      	bne.n	800390e <HAL_TIM_PWM_Stop+0xb6>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2201      	movs	r2, #1
 8003908:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800390c:	e00b      	b.n	8003926 <HAL_TIM_PWM_Stop+0xce>
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	2b08      	cmp	r3, #8
 8003912:	d104      	bne.n	800391e <HAL_TIM_PWM_Stop+0xc6>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2201      	movs	r2, #1
 8003918:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800391c:	e003      	b.n	8003926 <HAL_TIM_PWM_Stop+0xce>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2201      	movs	r2, #1
 8003922:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8003926:	2300      	movs	r3, #0
}
 8003928:	4618      	mov	r0, r3
 800392a:	3708      	adds	r7, #8
 800392c:	46bd      	mov	sp, r7
 800392e:	bd80      	pop	{r7, pc}
 8003930:	40010000 	.word	0x40010000
 8003934:	40010400 	.word	0x40010400

08003938 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b082      	sub	sp, #8
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	691b      	ldr	r3, [r3, #16]
 8003946:	f003 0302 	and.w	r3, r3, #2
 800394a:	2b02      	cmp	r3, #2
 800394c:	d122      	bne.n	8003994 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	68db      	ldr	r3, [r3, #12]
 8003954:	f003 0302 	and.w	r3, r3, #2
 8003958:	2b02      	cmp	r3, #2
 800395a:	d11b      	bne.n	8003994 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f06f 0202 	mvn.w	r2, #2
 8003964:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2201      	movs	r2, #1
 800396a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	699b      	ldr	r3, [r3, #24]
 8003972:	f003 0303 	and.w	r3, r3, #3
 8003976:	2b00      	cmp	r3, #0
 8003978:	d003      	beq.n	8003982 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800397a:	6878      	ldr	r0, [r7, #4]
 800397c:	f000 fa77 	bl	8003e6e <HAL_TIM_IC_CaptureCallback>
 8003980:	e005      	b.n	800398e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003982:	6878      	ldr	r0, [r7, #4]
 8003984:	f000 fa69 	bl	8003e5a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003988:	6878      	ldr	r0, [r7, #4]
 800398a:	f000 fa7a 	bl	8003e82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2200      	movs	r2, #0
 8003992:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	691b      	ldr	r3, [r3, #16]
 800399a:	f003 0304 	and.w	r3, r3, #4
 800399e:	2b04      	cmp	r3, #4
 80039a0:	d122      	bne.n	80039e8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	68db      	ldr	r3, [r3, #12]
 80039a8:	f003 0304 	and.w	r3, r3, #4
 80039ac:	2b04      	cmp	r3, #4
 80039ae:	d11b      	bne.n	80039e8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f06f 0204 	mvn.w	r2, #4
 80039b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2202      	movs	r2, #2
 80039be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	699b      	ldr	r3, [r3, #24]
 80039c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d003      	beq.n	80039d6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039ce:	6878      	ldr	r0, [r7, #4]
 80039d0:	f000 fa4d 	bl	8003e6e <HAL_TIM_IC_CaptureCallback>
 80039d4:	e005      	b.n	80039e2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039d6:	6878      	ldr	r0, [r7, #4]
 80039d8:	f000 fa3f 	bl	8003e5a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039dc:	6878      	ldr	r0, [r7, #4]
 80039de:	f000 fa50 	bl	8003e82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2200      	movs	r2, #0
 80039e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	691b      	ldr	r3, [r3, #16]
 80039ee:	f003 0308 	and.w	r3, r3, #8
 80039f2:	2b08      	cmp	r3, #8
 80039f4:	d122      	bne.n	8003a3c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	68db      	ldr	r3, [r3, #12]
 80039fc:	f003 0308 	and.w	r3, r3, #8
 8003a00:	2b08      	cmp	r3, #8
 8003a02:	d11b      	bne.n	8003a3c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f06f 0208 	mvn.w	r2, #8
 8003a0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2204      	movs	r2, #4
 8003a12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	69db      	ldr	r3, [r3, #28]
 8003a1a:	f003 0303 	and.w	r3, r3, #3
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d003      	beq.n	8003a2a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a22:	6878      	ldr	r0, [r7, #4]
 8003a24:	f000 fa23 	bl	8003e6e <HAL_TIM_IC_CaptureCallback>
 8003a28:	e005      	b.n	8003a36 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a2a:	6878      	ldr	r0, [r7, #4]
 8003a2c:	f000 fa15 	bl	8003e5a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a30:	6878      	ldr	r0, [r7, #4]
 8003a32:	f000 fa26 	bl	8003e82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2200      	movs	r2, #0
 8003a3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	691b      	ldr	r3, [r3, #16]
 8003a42:	f003 0310 	and.w	r3, r3, #16
 8003a46:	2b10      	cmp	r3, #16
 8003a48:	d122      	bne.n	8003a90 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	68db      	ldr	r3, [r3, #12]
 8003a50:	f003 0310 	and.w	r3, r3, #16
 8003a54:	2b10      	cmp	r3, #16
 8003a56:	d11b      	bne.n	8003a90 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f06f 0210 	mvn.w	r2, #16
 8003a60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2208      	movs	r2, #8
 8003a66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	69db      	ldr	r3, [r3, #28]
 8003a6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d003      	beq.n	8003a7e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a76:	6878      	ldr	r0, [r7, #4]
 8003a78:	f000 f9f9 	bl	8003e6e <HAL_TIM_IC_CaptureCallback>
 8003a7c:	e005      	b.n	8003a8a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a7e:	6878      	ldr	r0, [r7, #4]
 8003a80:	f000 f9eb 	bl	8003e5a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a84:	6878      	ldr	r0, [r7, #4]
 8003a86:	f000 f9fc 	bl	8003e82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	691b      	ldr	r3, [r3, #16]
 8003a96:	f003 0301 	and.w	r3, r3, #1
 8003a9a:	2b01      	cmp	r3, #1
 8003a9c:	d10e      	bne.n	8003abc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	68db      	ldr	r3, [r3, #12]
 8003aa4:	f003 0301 	and.w	r3, r3, #1
 8003aa8:	2b01      	cmp	r3, #1
 8003aaa:	d107      	bne.n	8003abc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f06f 0201 	mvn.w	r2, #1
 8003ab4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003ab6:	6878      	ldr	r0, [r7, #4]
 8003ab8:	f7fd fde0 	bl	800167c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	691b      	ldr	r3, [r3, #16]
 8003ac2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ac6:	2b80      	cmp	r3, #128	; 0x80
 8003ac8:	d10e      	bne.n	8003ae8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	68db      	ldr	r3, [r3, #12]
 8003ad0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ad4:	2b80      	cmp	r3, #128	; 0x80
 8003ad6:	d107      	bne.n	8003ae8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003ae0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003ae2:	6878      	ldr	r0, [r7, #4]
 8003ae4:	f000 fd78 	bl	80045d8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	691b      	ldr	r3, [r3, #16]
 8003aee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003af2:	2b40      	cmp	r3, #64	; 0x40
 8003af4:	d10e      	bne.n	8003b14 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	68db      	ldr	r3, [r3, #12]
 8003afc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b00:	2b40      	cmp	r3, #64	; 0x40
 8003b02:	d107      	bne.n	8003b14 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003b0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003b0e:	6878      	ldr	r0, [r7, #4]
 8003b10:	f000 f9c1 	bl	8003e96 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	691b      	ldr	r3, [r3, #16]
 8003b1a:	f003 0320 	and.w	r3, r3, #32
 8003b1e:	2b20      	cmp	r3, #32
 8003b20:	d10e      	bne.n	8003b40 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	68db      	ldr	r3, [r3, #12]
 8003b28:	f003 0320 	and.w	r3, r3, #32
 8003b2c:	2b20      	cmp	r3, #32
 8003b2e:	d107      	bne.n	8003b40 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f06f 0220 	mvn.w	r2, #32
 8003b38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003b3a:	6878      	ldr	r0, [r7, #4]
 8003b3c:	f000 fd42 	bl	80045c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003b40:	bf00      	nop
 8003b42:	3708      	adds	r7, #8
 8003b44:	46bd      	mov	sp, r7
 8003b46:	bd80      	pop	{r7, pc}

08003b48 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b086      	sub	sp, #24
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	60f8      	str	r0, [r7, #12]
 8003b50:	60b9      	str	r1, [r7, #8]
 8003b52:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b54:	2300      	movs	r3, #0
 8003b56:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b5e:	2b01      	cmp	r3, #1
 8003b60:	d101      	bne.n	8003b66 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003b62:	2302      	movs	r3, #2
 8003b64:	e0ae      	b.n	8003cc4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	2201      	movs	r2, #1
 8003b6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2b0c      	cmp	r3, #12
 8003b72:	f200 809f 	bhi.w	8003cb4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003b76:	a201      	add	r2, pc, #4	; (adr r2, 8003b7c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003b78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b7c:	08003bb1 	.word	0x08003bb1
 8003b80:	08003cb5 	.word	0x08003cb5
 8003b84:	08003cb5 	.word	0x08003cb5
 8003b88:	08003cb5 	.word	0x08003cb5
 8003b8c:	08003bf1 	.word	0x08003bf1
 8003b90:	08003cb5 	.word	0x08003cb5
 8003b94:	08003cb5 	.word	0x08003cb5
 8003b98:	08003cb5 	.word	0x08003cb5
 8003b9c:	08003c33 	.word	0x08003c33
 8003ba0:	08003cb5 	.word	0x08003cb5
 8003ba4:	08003cb5 	.word	0x08003cb5
 8003ba8:	08003cb5 	.word	0x08003cb5
 8003bac:	08003c73 	.word	0x08003c73
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	68b9      	ldr	r1, [r7, #8]
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	f000 fa18 	bl	8003fec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	699a      	ldr	r2, [r3, #24]
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f042 0208 	orr.w	r2, r2, #8
 8003bca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	699a      	ldr	r2, [r3, #24]
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f022 0204 	bic.w	r2, r2, #4
 8003bda:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	6999      	ldr	r1, [r3, #24]
 8003be2:	68bb      	ldr	r3, [r7, #8]
 8003be4:	691a      	ldr	r2, [r3, #16]
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	430a      	orrs	r2, r1
 8003bec:	619a      	str	r2, [r3, #24]
      break;
 8003bee:	e064      	b.n	8003cba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	68b9      	ldr	r1, [r7, #8]
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	f000 fa68 	bl	80040cc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	699a      	ldr	r2, [r3, #24]
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c0a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	699a      	ldr	r2, [r3, #24]
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c1a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	6999      	ldr	r1, [r3, #24]
 8003c22:	68bb      	ldr	r3, [r7, #8]
 8003c24:	691b      	ldr	r3, [r3, #16]
 8003c26:	021a      	lsls	r2, r3, #8
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	430a      	orrs	r2, r1
 8003c2e:	619a      	str	r2, [r3, #24]
      break;
 8003c30:	e043      	b.n	8003cba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	68b9      	ldr	r1, [r7, #8]
 8003c38:	4618      	mov	r0, r3
 8003c3a:	f000 fabd 	bl	80041b8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	69da      	ldr	r2, [r3, #28]
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f042 0208 	orr.w	r2, r2, #8
 8003c4c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	69da      	ldr	r2, [r3, #28]
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f022 0204 	bic.w	r2, r2, #4
 8003c5c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	69d9      	ldr	r1, [r3, #28]
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	691a      	ldr	r2, [r3, #16]
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	430a      	orrs	r2, r1
 8003c6e:	61da      	str	r2, [r3, #28]
      break;
 8003c70:	e023      	b.n	8003cba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	68b9      	ldr	r1, [r7, #8]
 8003c78:	4618      	mov	r0, r3
 8003c7a:	f000 fb11 	bl	80042a0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	69da      	ldr	r2, [r3, #28]
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c8c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	69da      	ldr	r2, [r3, #28]
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c9c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	69d9      	ldr	r1, [r3, #28]
 8003ca4:	68bb      	ldr	r3, [r7, #8]
 8003ca6:	691b      	ldr	r3, [r3, #16]
 8003ca8:	021a      	lsls	r2, r3, #8
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	430a      	orrs	r2, r1
 8003cb0:	61da      	str	r2, [r3, #28]
      break;
 8003cb2:	e002      	b.n	8003cba <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	75fb      	strb	r3, [r7, #23]
      break;
 8003cb8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003cc2:	7dfb      	ldrb	r3, [r7, #23]
}
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	3718      	adds	r7, #24
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	bd80      	pop	{r7, pc}

08003ccc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b084      	sub	sp, #16
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
 8003cd4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ce0:	2b01      	cmp	r3, #1
 8003ce2:	d101      	bne.n	8003ce8 <HAL_TIM_ConfigClockSource+0x1c>
 8003ce4:	2302      	movs	r3, #2
 8003ce6:	e0b4      	b.n	8003e52 <HAL_TIM_ConfigClockSource+0x186>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2201      	movs	r2, #1
 8003cec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2202      	movs	r2, #2
 8003cf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	689b      	ldr	r3, [r3, #8]
 8003cfe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003d00:	68bb      	ldr	r3, [r7, #8]
 8003d02:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003d06:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003d0e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	68ba      	ldr	r2, [r7, #8]
 8003d16:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d20:	d03e      	beq.n	8003da0 <HAL_TIM_ConfigClockSource+0xd4>
 8003d22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d26:	f200 8087 	bhi.w	8003e38 <HAL_TIM_ConfigClockSource+0x16c>
 8003d2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d2e:	f000 8086 	beq.w	8003e3e <HAL_TIM_ConfigClockSource+0x172>
 8003d32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d36:	d87f      	bhi.n	8003e38 <HAL_TIM_ConfigClockSource+0x16c>
 8003d38:	2b70      	cmp	r3, #112	; 0x70
 8003d3a:	d01a      	beq.n	8003d72 <HAL_TIM_ConfigClockSource+0xa6>
 8003d3c:	2b70      	cmp	r3, #112	; 0x70
 8003d3e:	d87b      	bhi.n	8003e38 <HAL_TIM_ConfigClockSource+0x16c>
 8003d40:	2b60      	cmp	r3, #96	; 0x60
 8003d42:	d050      	beq.n	8003de6 <HAL_TIM_ConfigClockSource+0x11a>
 8003d44:	2b60      	cmp	r3, #96	; 0x60
 8003d46:	d877      	bhi.n	8003e38 <HAL_TIM_ConfigClockSource+0x16c>
 8003d48:	2b50      	cmp	r3, #80	; 0x50
 8003d4a:	d03c      	beq.n	8003dc6 <HAL_TIM_ConfigClockSource+0xfa>
 8003d4c:	2b50      	cmp	r3, #80	; 0x50
 8003d4e:	d873      	bhi.n	8003e38 <HAL_TIM_ConfigClockSource+0x16c>
 8003d50:	2b40      	cmp	r3, #64	; 0x40
 8003d52:	d058      	beq.n	8003e06 <HAL_TIM_ConfigClockSource+0x13a>
 8003d54:	2b40      	cmp	r3, #64	; 0x40
 8003d56:	d86f      	bhi.n	8003e38 <HAL_TIM_ConfigClockSource+0x16c>
 8003d58:	2b30      	cmp	r3, #48	; 0x30
 8003d5a:	d064      	beq.n	8003e26 <HAL_TIM_ConfigClockSource+0x15a>
 8003d5c:	2b30      	cmp	r3, #48	; 0x30
 8003d5e:	d86b      	bhi.n	8003e38 <HAL_TIM_ConfigClockSource+0x16c>
 8003d60:	2b20      	cmp	r3, #32
 8003d62:	d060      	beq.n	8003e26 <HAL_TIM_ConfigClockSource+0x15a>
 8003d64:	2b20      	cmp	r3, #32
 8003d66:	d867      	bhi.n	8003e38 <HAL_TIM_ConfigClockSource+0x16c>
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d05c      	beq.n	8003e26 <HAL_TIM_ConfigClockSource+0x15a>
 8003d6c:	2b10      	cmp	r3, #16
 8003d6e:	d05a      	beq.n	8003e26 <HAL_TIM_ConfigClockSource+0x15a>
 8003d70:	e062      	b.n	8003e38 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6818      	ldr	r0, [r3, #0]
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	6899      	ldr	r1, [r3, #8]
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	685a      	ldr	r2, [r3, #4]
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	68db      	ldr	r3, [r3, #12]
 8003d82:	f000 fb5d 	bl	8004440 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	689b      	ldr	r3, [r3, #8]
 8003d8c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003d8e:	68bb      	ldr	r3, [r7, #8]
 8003d90:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003d94:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	68ba      	ldr	r2, [r7, #8]
 8003d9c:	609a      	str	r2, [r3, #8]
      break;
 8003d9e:	e04f      	b.n	8003e40 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6818      	ldr	r0, [r3, #0]
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	6899      	ldr	r1, [r3, #8]
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	685a      	ldr	r2, [r3, #4]
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	68db      	ldr	r3, [r3, #12]
 8003db0:	f000 fb46 	bl	8004440 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	689a      	ldr	r2, [r3, #8]
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003dc2:	609a      	str	r2, [r3, #8]
      break;
 8003dc4:	e03c      	b.n	8003e40 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6818      	ldr	r0, [r3, #0]
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	6859      	ldr	r1, [r3, #4]
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	68db      	ldr	r3, [r3, #12]
 8003dd2:	461a      	mov	r2, r3
 8003dd4:	f000 faba 	bl	800434c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	2150      	movs	r1, #80	; 0x50
 8003dde:	4618      	mov	r0, r3
 8003de0:	f000 fb13 	bl	800440a <TIM_ITRx_SetConfig>
      break;
 8003de4:	e02c      	b.n	8003e40 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6818      	ldr	r0, [r3, #0]
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	6859      	ldr	r1, [r3, #4]
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	68db      	ldr	r3, [r3, #12]
 8003df2:	461a      	mov	r2, r3
 8003df4:	f000 fad9 	bl	80043aa <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	2160      	movs	r1, #96	; 0x60
 8003dfe:	4618      	mov	r0, r3
 8003e00:	f000 fb03 	bl	800440a <TIM_ITRx_SetConfig>
      break;
 8003e04:	e01c      	b.n	8003e40 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6818      	ldr	r0, [r3, #0]
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	6859      	ldr	r1, [r3, #4]
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	68db      	ldr	r3, [r3, #12]
 8003e12:	461a      	mov	r2, r3
 8003e14:	f000 fa9a 	bl	800434c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	2140      	movs	r1, #64	; 0x40
 8003e1e:	4618      	mov	r0, r3
 8003e20:	f000 faf3 	bl	800440a <TIM_ITRx_SetConfig>
      break;
 8003e24:	e00c      	b.n	8003e40 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681a      	ldr	r2, [r3, #0]
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4619      	mov	r1, r3
 8003e30:	4610      	mov	r0, r2
 8003e32:	f000 faea 	bl	800440a <TIM_ITRx_SetConfig>
      break;
 8003e36:	e003      	b.n	8003e40 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003e38:	2301      	movs	r3, #1
 8003e3a:	73fb      	strb	r3, [r7, #15]
      break;
 8003e3c:	e000      	b.n	8003e40 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003e3e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2201      	movs	r2, #1
 8003e44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003e50:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e52:	4618      	mov	r0, r3
 8003e54:	3710      	adds	r7, #16
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd80      	pop	{r7, pc}

08003e5a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003e5a:	b480      	push	{r7}
 8003e5c:	b083      	sub	sp, #12
 8003e5e:	af00      	add	r7, sp, #0
 8003e60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003e62:	bf00      	nop
 8003e64:	370c      	adds	r7, #12
 8003e66:	46bd      	mov	sp, r7
 8003e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6c:	4770      	bx	lr

08003e6e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003e6e:	b480      	push	{r7}
 8003e70:	b083      	sub	sp, #12
 8003e72:	af00      	add	r7, sp, #0
 8003e74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003e76:	bf00      	nop
 8003e78:	370c      	adds	r7, #12
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e80:	4770      	bx	lr

08003e82 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003e82:	b480      	push	{r7}
 8003e84:	b083      	sub	sp, #12
 8003e86:	af00      	add	r7, sp, #0
 8003e88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003e8a:	bf00      	nop
 8003e8c:	370c      	adds	r7, #12
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e94:	4770      	bx	lr

08003e96 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003e96:	b480      	push	{r7}
 8003e98:	b083      	sub	sp, #12
 8003e9a:	af00      	add	r7, sp, #0
 8003e9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003e9e:	bf00      	nop
 8003ea0:	370c      	adds	r7, #12
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea8:	4770      	bx	lr
	...

08003eac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003eac:	b480      	push	{r7}
 8003eae:	b085      	sub	sp, #20
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
 8003eb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	4a40      	ldr	r2, [pc, #256]	; (8003fc0 <TIM_Base_SetConfig+0x114>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d013      	beq.n	8003eec <TIM_Base_SetConfig+0x40>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003eca:	d00f      	beq.n	8003eec <TIM_Base_SetConfig+0x40>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	4a3d      	ldr	r2, [pc, #244]	; (8003fc4 <TIM_Base_SetConfig+0x118>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d00b      	beq.n	8003eec <TIM_Base_SetConfig+0x40>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	4a3c      	ldr	r2, [pc, #240]	; (8003fc8 <TIM_Base_SetConfig+0x11c>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d007      	beq.n	8003eec <TIM_Base_SetConfig+0x40>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	4a3b      	ldr	r2, [pc, #236]	; (8003fcc <TIM_Base_SetConfig+0x120>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d003      	beq.n	8003eec <TIM_Base_SetConfig+0x40>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	4a3a      	ldr	r2, [pc, #232]	; (8003fd0 <TIM_Base_SetConfig+0x124>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d108      	bne.n	8003efe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ef2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	68fa      	ldr	r2, [r7, #12]
 8003efa:	4313      	orrs	r3, r2
 8003efc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	4a2f      	ldr	r2, [pc, #188]	; (8003fc0 <TIM_Base_SetConfig+0x114>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d02b      	beq.n	8003f5e <TIM_Base_SetConfig+0xb2>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f0c:	d027      	beq.n	8003f5e <TIM_Base_SetConfig+0xb2>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	4a2c      	ldr	r2, [pc, #176]	; (8003fc4 <TIM_Base_SetConfig+0x118>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d023      	beq.n	8003f5e <TIM_Base_SetConfig+0xb2>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	4a2b      	ldr	r2, [pc, #172]	; (8003fc8 <TIM_Base_SetConfig+0x11c>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d01f      	beq.n	8003f5e <TIM_Base_SetConfig+0xb2>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	4a2a      	ldr	r2, [pc, #168]	; (8003fcc <TIM_Base_SetConfig+0x120>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d01b      	beq.n	8003f5e <TIM_Base_SetConfig+0xb2>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	4a29      	ldr	r2, [pc, #164]	; (8003fd0 <TIM_Base_SetConfig+0x124>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d017      	beq.n	8003f5e <TIM_Base_SetConfig+0xb2>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	4a28      	ldr	r2, [pc, #160]	; (8003fd4 <TIM_Base_SetConfig+0x128>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d013      	beq.n	8003f5e <TIM_Base_SetConfig+0xb2>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	4a27      	ldr	r2, [pc, #156]	; (8003fd8 <TIM_Base_SetConfig+0x12c>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d00f      	beq.n	8003f5e <TIM_Base_SetConfig+0xb2>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	4a26      	ldr	r2, [pc, #152]	; (8003fdc <TIM_Base_SetConfig+0x130>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d00b      	beq.n	8003f5e <TIM_Base_SetConfig+0xb2>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	4a25      	ldr	r2, [pc, #148]	; (8003fe0 <TIM_Base_SetConfig+0x134>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d007      	beq.n	8003f5e <TIM_Base_SetConfig+0xb2>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	4a24      	ldr	r2, [pc, #144]	; (8003fe4 <TIM_Base_SetConfig+0x138>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d003      	beq.n	8003f5e <TIM_Base_SetConfig+0xb2>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	4a23      	ldr	r2, [pc, #140]	; (8003fe8 <TIM_Base_SetConfig+0x13c>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d108      	bne.n	8003f70 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	68db      	ldr	r3, [r3, #12]
 8003f6a:	68fa      	ldr	r2, [r7, #12]
 8003f6c:	4313      	orrs	r3, r2
 8003f6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	695b      	ldr	r3, [r3, #20]
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	68fa      	ldr	r2, [r7, #12]
 8003f82:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	689a      	ldr	r2, [r3, #8]
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	681a      	ldr	r2, [r3, #0]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	4a0a      	ldr	r2, [pc, #40]	; (8003fc0 <TIM_Base_SetConfig+0x114>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d003      	beq.n	8003fa4 <TIM_Base_SetConfig+0xf8>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	4a0c      	ldr	r2, [pc, #48]	; (8003fd0 <TIM_Base_SetConfig+0x124>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d103      	bne.n	8003fac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	691a      	ldr	r2, [r3, #16]
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2201      	movs	r2, #1
 8003fb0:	615a      	str	r2, [r3, #20]
}
 8003fb2:	bf00      	nop
 8003fb4:	3714      	adds	r7, #20
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbc:	4770      	bx	lr
 8003fbe:	bf00      	nop
 8003fc0:	40010000 	.word	0x40010000
 8003fc4:	40000400 	.word	0x40000400
 8003fc8:	40000800 	.word	0x40000800
 8003fcc:	40000c00 	.word	0x40000c00
 8003fd0:	40010400 	.word	0x40010400
 8003fd4:	40014000 	.word	0x40014000
 8003fd8:	40014400 	.word	0x40014400
 8003fdc:	40014800 	.word	0x40014800
 8003fe0:	40001800 	.word	0x40001800
 8003fe4:	40001c00 	.word	0x40001c00
 8003fe8:	40002000 	.word	0x40002000

08003fec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003fec:	b480      	push	{r7}
 8003fee:	b087      	sub	sp, #28
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
 8003ff4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6a1b      	ldr	r3, [r3, #32]
 8003ffa:	f023 0201 	bic.w	r2, r3, #1
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6a1b      	ldr	r3, [r3, #32]
 8004006:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	685b      	ldr	r3, [r3, #4]
 800400c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	699b      	ldr	r3, [r3, #24]
 8004012:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800401a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	f023 0303 	bic.w	r3, r3, #3
 8004022:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	68fa      	ldr	r2, [r7, #12]
 800402a:	4313      	orrs	r3, r2
 800402c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800402e:	697b      	ldr	r3, [r7, #20]
 8004030:	f023 0302 	bic.w	r3, r3, #2
 8004034:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	689b      	ldr	r3, [r3, #8]
 800403a:	697a      	ldr	r2, [r7, #20]
 800403c:	4313      	orrs	r3, r2
 800403e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	4a20      	ldr	r2, [pc, #128]	; (80040c4 <TIM_OC1_SetConfig+0xd8>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d003      	beq.n	8004050 <TIM_OC1_SetConfig+0x64>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	4a1f      	ldr	r2, [pc, #124]	; (80040c8 <TIM_OC1_SetConfig+0xdc>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d10c      	bne.n	800406a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004050:	697b      	ldr	r3, [r7, #20]
 8004052:	f023 0308 	bic.w	r3, r3, #8
 8004056:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	68db      	ldr	r3, [r3, #12]
 800405c:	697a      	ldr	r2, [r7, #20]
 800405e:	4313      	orrs	r3, r2
 8004060:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004062:	697b      	ldr	r3, [r7, #20]
 8004064:	f023 0304 	bic.w	r3, r3, #4
 8004068:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	4a15      	ldr	r2, [pc, #84]	; (80040c4 <TIM_OC1_SetConfig+0xd8>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d003      	beq.n	800407a <TIM_OC1_SetConfig+0x8e>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	4a14      	ldr	r2, [pc, #80]	; (80040c8 <TIM_OC1_SetConfig+0xdc>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d111      	bne.n	800409e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800407a:	693b      	ldr	r3, [r7, #16]
 800407c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004080:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004082:	693b      	ldr	r3, [r7, #16]
 8004084:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004088:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	695b      	ldr	r3, [r3, #20]
 800408e:	693a      	ldr	r2, [r7, #16]
 8004090:	4313      	orrs	r3, r2
 8004092:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	699b      	ldr	r3, [r3, #24]
 8004098:	693a      	ldr	r2, [r7, #16]
 800409a:	4313      	orrs	r3, r2
 800409c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	693a      	ldr	r2, [r7, #16]
 80040a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	68fa      	ldr	r2, [r7, #12]
 80040a8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	685a      	ldr	r2, [r3, #4]
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	697a      	ldr	r2, [r7, #20]
 80040b6:	621a      	str	r2, [r3, #32]
}
 80040b8:	bf00      	nop
 80040ba:	371c      	adds	r7, #28
 80040bc:	46bd      	mov	sp, r7
 80040be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c2:	4770      	bx	lr
 80040c4:	40010000 	.word	0x40010000
 80040c8:	40010400 	.word	0x40010400

080040cc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80040cc:	b480      	push	{r7}
 80040ce:	b087      	sub	sp, #28
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
 80040d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6a1b      	ldr	r3, [r3, #32]
 80040da:	f023 0210 	bic.w	r2, r3, #16
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6a1b      	ldr	r3, [r3, #32]
 80040e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	699b      	ldr	r3, [r3, #24]
 80040f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004102:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	021b      	lsls	r3, r3, #8
 800410a:	68fa      	ldr	r2, [r7, #12]
 800410c:	4313      	orrs	r3, r2
 800410e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004110:	697b      	ldr	r3, [r7, #20]
 8004112:	f023 0320 	bic.w	r3, r3, #32
 8004116:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	689b      	ldr	r3, [r3, #8]
 800411c:	011b      	lsls	r3, r3, #4
 800411e:	697a      	ldr	r2, [r7, #20]
 8004120:	4313      	orrs	r3, r2
 8004122:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	4a22      	ldr	r2, [pc, #136]	; (80041b0 <TIM_OC2_SetConfig+0xe4>)
 8004128:	4293      	cmp	r3, r2
 800412a:	d003      	beq.n	8004134 <TIM_OC2_SetConfig+0x68>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	4a21      	ldr	r2, [pc, #132]	; (80041b4 <TIM_OC2_SetConfig+0xe8>)
 8004130:	4293      	cmp	r3, r2
 8004132:	d10d      	bne.n	8004150 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004134:	697b      	ldr	r3, [r7, #20]
 8004136:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800413a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	68db      	ldr	r3, [r3, #12]
 8004140:	011b      	lsls	r3, r3, #4
 8004142:	697a      	ldr	r2, [r7, #20]
 8004144:	4313      	orrs	r3, r2
 8004146:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004148:	697b      	ldr	r3, [r7, #20]
 800414a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800414e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	4a17      	ldr	r2, [pc, #92]	; (80041b0 <TIM_OC2_SetConfig+0xe4>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d003      	beq.n	8004160 <TIM_OC2_SetConfig+0x94>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	4a16      	ldr	r2, [pc, #88]	; (80041b4 <TIM_OC2_SetConfig+0xe8>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d113      	bne.n	8004188 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004160:	693b      	ldr	r3, [r7, #16]
 8004162:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004166:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004168:	693b      	ldr	r3, [r7, #16]
 800416a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800416e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	695b      	ldr	r3, [r3, #20]
 8004174:	009b      	lsls	r3, r3, #2
 8004176:	693a      	ldr	r2, [r7, #16]
 8004178:	4313      	orrs	r3, r2
 800417a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	699b      	ldr	r3, [r3, #24]
 8004180:	009b      	lsls	r3, r3, #2
 8004182:	693a      	ldr	r2, [r7, #16]
 8004184:	4313      	orrs	r3, r2
 8004186:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	693a      	ldr	r2, [r7, #16]
 800418c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	68fa      	ldr	r2, [r7, #12]
 8004192:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	685a      	ldr	r2, [r3, #4]
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	697a      	ldr	r2, [r7, #20]
 80041a0:	621a      	str	r2, [r3, #32]
}
 80041a2:	bf00      	nop
 80041a4:	371c      	adds	r7, #28
 80041a6:	46bd      	mov	sp, r7
 80041a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ac:	4770      	bx	lr
 80041ae:	bf00      	nop
 80041b0:	40010000 	.word	0x40010000
 80041b4:	40010400 	.word	0x40010400

080041b8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80041b8:	b480      	push	{r7}
 80041ba:	b087      	sub	sp, #28
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
 80041c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6a1b      	ldr	r3, [r3, #32]
 80041c6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6a1b      	ldr	r3, [r3, #32]
 80041d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	69db      	ldr	r3, [r3, #28]
 80041de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	f023 0303 	bic.w	r3, r3, #3
 80041ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	68fa      	ldr	r2, [r7, #12]
 80041f6:	4313      	orrs	r3, r2
 80041f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80041fa:	697b      	ldr	r3, [r7, #20]
 80041fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004200:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	689b      	ldr	r3, [r3, #8]
 8004206:	021b      	lsls	r3, r3, #8
 8004208:	697a      	ldr	r2, [r7, #20]
 800420a:	4313      	orrs	r3, r2
 800420c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	4a21      	ldr	r2, [pc, #132]	; (8004298 <TIM_OC3_SetConfig+0xe0>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d003      	beq.n	800421e <TIM_OC3_SetConfig+0x66>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	4a20      	ldr	r2, [pc, #128]	; (800429c <TIM_OC3_SetConfig+0xe4>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d10d      	bne.n	800423a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800421e:	697b      	ldr	r3, [r7, #20]
 8004220:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004224:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	68db      	ldr	r3, [r3, #12]
 800422a:	021b      	lsls	r3, r3, #8
 800422c:	697a      	ldr	r2, [r7, #20]
 800422e:	4313      	orrs	r3, r2
 8004230:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004232:	697b      	ldr	r3, [r7, #20]
 8004234:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004238:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	4a16      	ldr	r2, [pc, #88]	; (8004298 <TIM_OC3_SetConfig+0xe0>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d003      	beq.n	800424a <TIM_OC3_SetConfig+0x92>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	4a15      	ldr	r2, [pc, #84]	; (800429c <TIM_OC3_SetConfig+0xe4>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d113      	bne.n	8004272 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800424a:	693b      	ldr	r3, [r7, #16]
 800424c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004250:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004252:	693b      	ldr	r3, [r7, #16]
 8004254:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004258:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	695b      	ldr	r3, [r3, #20]
 800425e:	011b      	lsls	r3, r3, #4
 8004260:	693a      	ldr	r2, [r7, #16]
 8004262:	4313      	orrs	r3, r2
 8004264:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	699b      	ldr	r3, [r3, #24]
 800426a:	011b      	lsls	r3, r3, #4
 800426c:	693a      	ldr	r2, [r7, #16]
 800426e:	4313      	orrs	r3, r2
 8004270:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	693a      	ldr	r2, [r7, #16]
 8004276:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	68fa      	ldr	r2, [r7, #12]
 800427c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	685a      	ldr	r2, [r3, #4]
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	697a      	ldr	r2, [r7, #20]
 800428a:	621a      	str	r2, [r3, #32]
}
 800428c:	bf00      	nop
 800428e:	371c      	adds	r7, #28
 8004290:	46bd      	mov	sp, r7
 8004292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004296:	4770      	bx	lr
 8004298:	40010000 	.word	0x40010000
 800429c:	40010400 	.word	0x40010400

080042a0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80042a0:	b480      	push	{r7}
 80042a2:	b087      	sub	sp, #28
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
 80042a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6a1b      	ldr	r3, [r3, #32]
 80042ae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6a1b      	ldr	r3, [r3, #32]
 80042ba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	685b      	ldr	r3, [r3, #4]
 80042c0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	69db      	ldr	r3, [r3, #28]
 80042c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	021b      	lsls	r3, r3, #8
 80042de:	68fa      	ldr	r2, [r7, #12]
 80042e0:	4313      	orrs	r3, r2
 80042e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80042e4:	693b      	ldr	r3, [r7, #16]
 80042e6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80042ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	689b      	ldr	r3, [r3, #8]
 80042f0:	031b      	lsls	r3, r3, #12
 80042f2:	693a      	ldr	r2, [r7, #16]
 80042f4:	4313      	orrs	r3, r2
 80042f6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	4a12      	ldr	r2, [pc, #72]	; (8004344 <TIM_OC4_SetConfig+0xa4>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d003      	beq.n	8004308 <TIM_OC4_SetConfig+0x68>
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	4a11      	ldr	r2, [pc, #68]	; (8004348 <TIM_OC4_SetConfig+0xa8>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d109      	bne.n	800431c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004308:	697b      	ldr	r3, [r7, #20]
 800430a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800430e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	695b      	ldr	r3, [r3, #20]
 8004314:	019b      	lsls	r3, r3, #6
 8004316:	697a      	ldr	r2, [r7, #20]
 8004318:	4313      	orrs	r3, r2
 800431a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	697a      	ldr	r2, [r7, #20]
 8004320:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	68fa      	ldr	r2, [r7, #12]
 8004326:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	685a      	ldr	r2, [r3, #4]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	693a      	ldr	r2, [r7, #16]
 8004334:	621a      	str	r2, [r3, #32]
}
 8004336:	bf00      	nop
 8004338:	371c      	adds	r7, #28
 800433a:	46bd      	mov	sp, r7
 800433c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004340:	4770      	bx	lr
 8004342:	bf00      	nop
 8004344:	40010000 	.word	0x40010000
 8004348:	40010400 	.word	0x40010400

0800434c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800434c:	b480      	push	{r7}
 800434e:	b087      	sub	sp, #28
 8004350:	af00      	add	r7, sp, #0
 8004352:	60f8      	str	r0, [r7, #12]
 8004354:	60b9      	str	r1, [r7, #8]
 8004356:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	6a1b      	ldr	r3, [r3, #32]
 800435c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	6a1b      	ldr	r3, [r3, #32]
 8004362:	f023 0201 	bic.w	r2, r3, #1
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	699b      	ldr	r3, [r3, #24]
 800436e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004370:	693b      	ldr	r3, [r7, #16]
 8004372:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004376:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	011b      	lsls	r3, r3, #4
 800437c:	693a      	ldr	r2, [r7, #16]
 800437e:	4313      	orrs	r3, r2
 8004380:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004382:	697b      	ldr	r3, [r7, #20]
 8004384:	f023 030a 	bic.w	r3, r3, #10
 8004388:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800438a:	697a      	ldr	r2, [r7, #20]
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	4313      	orrs	r3, r2
 8004390:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	693a      	ldr	r2, [r7, #16]
 8004396:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	697a      	ldr	r2, [r7, #20]
 800439c:	621a      	str	r2, [r3, #32]
}
 800439e:	bf00      	nop
 80043a0:	371c      	adds	r7, #28
 80043a2:	46bd      	mov	sp, r7
 80043a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a8:	4770      	bx	lr

080043aa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80043aa:	b480      	push	{r7}
 80043ac:	b087      	sub	sp, #28
 80043ae:	af00      	add	r7, sp, #0
 80043b0:	60f8      	str	r0, [r7, #12]
 80043b2:	60b9      	str	r1, [r7, #8]
 80043b4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	6a1b      	ldr	r3, [r3, #32]
 80043ba:	f023 0210 	bic.w	r2, r3, #16
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	699b      	ldr	r3, [r3, #24]
 80043c6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	6a1b      	ldr	r3, [r3, #32]
 80043cc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80043ce:	697b      	ldr	r3, [r7, #20]
 80043d0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80043d4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	031b      	lsls	r3, r3, #12
 80043da:	697a      	ldr	r2, [r7, #20]
 80043dc:	4313      	orrs	r3, r2
 80043de:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80043e0:	693b      	ldr	r3, [r7, #16]
 80043e2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80043e6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80043e8:	68bb      	ldr	r3, [r7, #8]
 80043ea:	011b      	lsls	r3, r3, #4
 80043ec:	693a      	ldr	r2, [r7, #16]
 80043ee:	4313      	orrs	r3, r2
 80043f0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	697a      	ldr	r2, [r7, #20]
 80043f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	693a      	ldr	r2, [r7, #16]
 80043fc:	621a      	str	r2, [r3, #32]
}
 80043fe:	bf00      	nop
 8004400:	371c      	adds	r7, #28
 8004402:	46bd      	mov	sp, r7
 8004404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004408:	4770      	bx	lr

0800440a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800440a:	b480      	push	{r7}
 800440c:	b085      	sub	sp, #20
 800440e:	af00      	add	r7, sp, #0
 8004410:	6078      	str	r0, [r7, #4]
 8004412:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	689b      	ldr	r3, [r3, #8]
 8004418:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004420:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004422:	683a      	ldr	r2, [r7, #0]
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	4313      	orrs	r3, r2
 8004428:	f043 0307 	orr.w	r3, r3, #7
 800442c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	68fa      	ldr	r2, [r7, #12]
 8004432:	609a      	str	r2, [r3, #8]
}
 8004434:	bf00      	nop
 8004436:	3714      	adds	r7, #20
 8004438:	46bd      	mov	sp, r7
 800443a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443e:	4770      	bx	lr

08004440 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004440:	b480      	push	{r7}
 8004442:	b087      	sub	sp, #28
 8004444:	af00      	add	r7, sp, #0
 8004446:	60f8      	str	r0, [r7, #12]
 8004448:	60b9      	str	r1, [r7, #8]
 800444a:	607a      	str	r2, [r7, #4]
 800444c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	689b      	ldr	r3, [r3, #8]
 8004452:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004454:	697b      	ldr	r3, [r7, #20]
 8004456:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800445a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	021a      	lsls	r2, r3, #8
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	431a      	orrs	r2, r3
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	4313      	orrs	r3, r2
 8004468:	697a      	ldr	r2, [r7, #20]
 800446a:	4313      	orrs	r3, r2
 800446c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	697a      	ldr	r2, [r7, #20]
 8004472:	609a      	str	r2, [r3, #8]
}
 8004474:	bf00      	nop
 8004476:	371c      	adds	r7, #28
 8004478:	46bd      	mov	sp, r7
 800447a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447e:	4770      	bx	lr

08004480 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004480:	b480      	push	{r7}
 8004482:	b087      	sub	sp, #28
 8004484:	af00      	add	r7, sp, #0
 8004486:	60f8      	str	r0, [r7, #12]
 8004488:	60b9      	str	r1, [r7, #8]
 800448a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	f003 031f 	and.w	r3, r3, #31
 8004492:	2201      	movs	r2, #1
 8004494:	fa02 f303 	lsl.w	r3, r2, r3
 8004498:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	6a1a      	ldr	r2, [r3, #32]
 800449e:	697b      	ldr	r3, [r7, #20]
 80044a0:	43db      	mvns	r3, r3
 80044a2:	401a      	ands	r2, r3
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	6a1a      	ldr	r2, [r3, #32]
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	f003 031f 	and.w	r3, r3, #31
 80044b2:	6879      	ldr	r1, [r7, #4]
 80044b4:	fa01 f303 	lsl.w	r3, r1, r3
 80044b8:	431a      	orrs	r2, r3
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	621a      	str	r2, [r3, #32]
}
 80044be:	bf00      	nop
 80044c0:	371c      	adds	r7, #28
 80044c2:	46bd      	mov	sp, r7
 80044c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c8:	4770      	bx	lr
	...

080044cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80044cc:	b480      	push	{r7}
 80044ce:	b085      	sub	sp, #20
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
 80044d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044dc:	2b01      	cmp	r3, #1
 80044de:	d101      	bne.n	80044e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80044e0:	2302      	movs	r3, #2
 80044e2:	e05a      	b.n	800459a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2201      	movs	r2, #1
 80044e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2202      	movs	r2, #2
 80044f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	689b      	ldr	r3, [r3, #8]
 8004502:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800450a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	68fa      	ldr	r2, [r7, #12]
 8004512:	4313      	orrs	r3, r2
 8004514:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	68fa      	ldr	r2, [r7, #12]
 800451c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4a21      	ldr	r2, [pc, #132]	; (80045a8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004524:	4293      	cmp	r3, r2
 8004526:	d022      	beq.n	800456e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004530:	d01d      	beq.n	800456e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4a1d      	ldr	r2, [pc, #116]	; (80045ac <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004538:	4293      	cmp	r3, r2
 800453a:	d018      	beq.n	800456e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4a1b      	ldr	r2, [pc, #108]	; (80045b0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d013      	beq.n	800456e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	4a1a      	ldr	r2, [pc, #104]	; (80045b4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d00e      	beq.n	800456e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4a18      	ldr	r2, [pc, #96]	; (80045b8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d009      	beq.n	800456e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	4a17      	ldr	r2, [pc, #92]	; (80045bc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004560:	4293      	cmp	r3, r2
 8004562:	d004      	beq.n	800456e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	4a15      	ldr	r2, [pc, #84]	; (80045c0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d10c      	bne.n	8004588 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800456e:	68bb      	ldr	r3, [r7, #8]
 8004570:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004574:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	685b      	ldr	r3, [r3, #4]
 800457a:	68ba      	ldr	r2, [r7, #8]
 800457c:	4313      	orrs	r3, r2
 800457e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	68ba      	ldr	r2, [r7, #8]
 8004586:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2201      	movs	r2, #1
 800458c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2200      	movs	r2, #0
 8004594:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004598:	2300      	movs	r3, #0
}
 800459a:	4618      	mov	r0, r3
 800459c:	3714      	adds	r7, #20
 800459e:	46bd      	mov	sp, r7
 80045a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a4:	4770      	bx	lr
 80045a6:	bf00      	nop
 80045a8:	40010000 	.word	0x40010000
 80045ac:	40000400 	.word	0x40000400
 80045b0:	40000800 	.word	0x40000800
 80045b4:	40000c00 	.word	0x40000c00
 80045b8:	40010400 	.word	0x40010400
 80045bc:	40014000 	.word	0x40014000
 80045c0:	40001800 	.word	0x40001800

080045c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80045c4:	b480      	push	{r7}
 80045c6:	b083      	sub	sp, #12
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80045cc:	bf00      	nop
 80045ce:	370c      	adds	r7, #12
 80045d0:	46bd      	mov	sp, r7
 80045d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d6:	4770      	bx	lr

080045d8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80045d8:	b480      	push	{r7}
 80045da:	b083      	sub	sp, #12
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80045e0:	bf00      	nop
 80045e2:	370c      	adds	r7, #12
 80045e4:	46bd      	mov	sp, r7
 80045e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ea:	4770      	bx	lr

080045ec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b082      	sub	sp, #8
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d101      	bne.n	80045fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80045fa:	2301      	movs	r3, #1
 80045fc:	e03f      	b.n	800467e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004604:	b2db      	uxtb	r3, r3
 8004606:	2b00      	cmp	r3, #0
 8004608:	d106      	bne.n	8004618 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2200      	movs	r2, #0
 800460e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004612:	6878      	ldr	r0, [r7, #4]
 8004614:	f7fd f958 	bl	80018c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2224      	movs	r2, #36	; 0x24
 800461c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	68da      	ldr	r2, [r3, #12]
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800462e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004630:	6878      	ldr	r0, [r7, #4]
 8004632:	f000 f829 	bl	8004688 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	691a      	ldr	r2, [r3, #16]
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004644:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	695a      	ldr	r2, [r3, #20]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004654:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	68da      	ldr	r2, [r3, #12]
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004664:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2200      	movs	r2, #0
 800466a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2220      	movs	r2, #32
 8004670:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2220      	movs	r2, #32
 8004678:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800467c:	2300      	movs	r3, #0
}
 800467e:	4618      	mov	r0, r3
 8004680:	3708      	adds	r7, #8
 8004682:	46bd      	mov	sp, r7
 8004684:	bd80      	pop	{r7, pc}
	...

08004688 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800468c:	b09f      	sub	sp, #124	; 0x7c
 800468e:	af00      	add	r7, sp, #0
 8004690:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004692:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	691b      	ldr	r3, [r3, #16]
 8004698:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800469c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800469e:	68d9      	ldr	r1, [r3, #12]
 80046a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046a2:	681a      	ldr	r2, [r3, #0]
 80046a4:	ea40 0301 	orr.w	r3, r0, r1
 80046a8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80046aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046ac:	689a      	ldr	r2, [r3, #8]
 80046ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046b0:	691b      	ldr	r3, [r3, #16]
 80046b2:	431a      	orrs	r2, r3
 80046b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046b6:	695b      	ldr	r3, [r3, #20]
 80046b8:	431a      	orrs	r2, r3
 80046ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046bc:	69db      	ldr	r3, [r3, #28]
 80046be:	4313      	orrs	r3, r2
 80046c0:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80046c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	68db      	ldr	r3, [r3, #12]
 80046c8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80046cc:	f021 010c 	bic.w	r1, r1, #12
 80046d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046d2:	681a      	ldr	r2, [r3, #0]
 80046d4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80046d6:	430b      	orrs	r3, r1
 80046d8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80046da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	695b      	ldr	r3, [r3, #20]
 80046e0:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80046e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046e6:	6999      	ldr	r1, [r3, #24]
 80046e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046ea:	681a      	ldr	r2, [r3, #0]
 80046ec:	ea40 0301 	orr.w	r3, r0, r1
 80046f0:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80046f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046f4:	681a      	ldr	r2, [r3, #0]
 80046f6:	4bc5      	ldr	r3, [pc, #788]	; (8004a0c <UART_SetConfig+0x384>)
 80046f8:	429a      	cmp	r2, r3
 80046fa:	d004      	beq.n	8004706 <UART_SetConfig+0x7e>
 80046fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046fe:	681a      	ldr	r2, [r3, #0]
 8004700:	4bc3      	ldr	r3, [pc, #780]	; (8004a10 <UART_SetConfig+0x388>)
 8004702:	429a      	cmp	r2, r3
 8004704:	d103      	bne.n	800470e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004706:	f7fe fa2f 	bl	8002b68 <HAL_RCC_GetPCLK2Freq>
 800470a:	6778      	str	r0, [r7, #116]	; 0x74
 800470c:	e002      	b.n	8004714 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800470e:	f7fe fa17 	bl	8002b40 <HAL_RCC_GetPCLK1Freq>
 8004712:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004714:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004716:	69db      	ldr	r3, [r3, #28]
 8004718:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800471c:	f040 80b6 	bne.w	800488c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004720:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004722:	461c      	mov	r4, r3
 8004724:	f04f 0500 	mov.w	r5, #0
 8004728:	4622      	mov	r2, r4
 800472a:	462b      	mov	r3, r5
 800472c:	1891      	adds	r1, r2, r2
 800472e:	6439      	str	r1, [r7, #64]	; 0x40
 8004730:	415b      	adcs	r3, r3
 8004732:	647b      	str	r3, [r7, #68]	; 0x44
 8004734:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004738:	1912      	adds	r2, r2, r4
 800473a:	eb45 0303 	adc.w	r3, r5, r3
 800473e:	f04f 0000 	mov.w	r0, #0
 8004742:	f04f 0100 	mov.w	r1, #0
 8004746:	00d9      	lsls	r1, r3, #3
 8004748:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800474c:	00d0      	lsls	r0, r2, #3
 800474e:	4602      	mov	r2, r0
 8004750:	460b      	mov	r3, r1
 8004752:	1911      	adds	r1, r2, r4
 8004754:	6639      	str	r1, [r7, #96]	; 0x60
 8004756:	416b      	adcs	r3, r5
 8004758:	667b      	str	r3, [r7, #100]	; 0x64
 800475a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800475c:	685b      	ldr	r3, [r3, #4]
 800475e:	461a      	mov	r2, r3
 8004760:	f04f 0300 	mov.w	r3, #0
 8004764:	1891      	adds	r1, r2, r2
 8004766:	63b9      	str	r1, [r7, #56]	; 0x38
 8004768:	415b      	adcs	r3, r3
 800476a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800476c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004770:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004774:	f7fc f93a 	bl	80009ec <__aeabi_uldivmod>
 8004778:	4602      	mov	r2, r0
 800477a:	460b      	mov	r3, r1
 800477c:	4ba5      	ldr	r3, [pc, #660]	; (8004a14 <UART_SetConfig+0x38c>)
 800477e:	fba3 2302 	umull	r2, r3, r3, r2
 8004782:	095b      	lsrs	r3, r3, #5
 8004784:	011e      	lsls	r6, r3, #4
 8004786:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004788:	461c      	mov	r4, r3
 800478a:	f04f 0500 	mov.w	r5, #0
 800478e:	4622      	mov	r2, r4
 8004790:	462b      	mov	r3, r5
 8004792:	1891      	adds	r1, r2, r2
 8004794:	6339      	str	r1, [r7, #48]	; 0x30
 8004796:	415b      	adcs	r3, r3
 8004798:	637b      	str	r3, [r7, #52]	; 0x34
 800479a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800479e:	1912      	adds	r2, r2, r4
 80047a0:	eb45 0303 	adc.w	r3, r5, r3
 80047a4:	f04f 0000 	mov.w	r0, #0
 80047a8:	f04f 0100 	mov.w	r1, #0
 80047ac:	00d9      	lsls	r1, r3, #3
 80047ae:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80047b2:	00d0      	lsls	r0, r2, #3
 80047b4:	4602      	mov	r2, r0
 80047b6:	460b      	mov	r3, r1
 80047b8:	1911      	adds	r1, r2, r4
 80047ba:	65b9      	str	r1, [r7, #88]	; 0x58
 80047bc:	416b      	adcs	r3, r5
 80047be:	65fb      	str	r3, [r7, #92]	; 0x5c
 80047c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	461a      	mov	r2, r3
 80047c6:	f04f 0300 	mov.w	r3, #0
 80047ca:	1891      	adds	r1, r2, r2
 80047cc:	62b9      	str	r1, [r7, #40]	; 0x28
 80047ce:	415b      	adcs	r3, r3
 80047d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80047d2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80047d6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80047da:	f7fc f907 	bl	80009ec <__aeabi_uldivmod>
 80047de:	4602      	mov	r2, r0
 80047e0:	460b      	mov	r3, r1
 80047e2:	4b8c      	ldr	r3, [pc, #560]	; (8004a14 <UART_SetConfig+0x38c>)
 80047e4:	fba3 1302 	umull	r1, r3, r3, r2
 80047e8:	095b      	lsrs	r3, r3, #5
 80047ea:	2164      	movs	r1, #100	; 0x64
 80047ec:	fb01 f303 	mul.w	r3, r1, r3
 80047f0:	1ad3      	subs	r3, r2, r3
 80047f2:	00db      	lsls	r3, r3, #3
 80047f4:	3332      	adds	r3, #50	; 0x32
 80047f6:	4a87      	ldr	r2, [pc, #540]	; (8004a14 <UART_SetConfig+0x38c>)
 80047f8:	fba2 2303 	umull	r2, r3, r2, r3
 80047fc:	095b      	lsrs	r3, r3, #5
 80047fe:	005b      	lsls	r3, r3, #1
 8004800:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004804:	441e      	add	r6, r3
 8004806:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004808:	4618      	mov	r0, r3
 800480a:	f04f 0100 	mov.w	r1, #0
 800480e:	4602      	mov	r2, r0
 8004810:	460b      	mov	r3, r1
 8004812:	1894      	adds	r4, r2, r2
 8004814:	623c      	str	r4, [r7, #32]
 8004816:	415b      	adcs	r3, r3
 8004818:	627b      	str	r3, [r7, #36]	; 0x24
 800481a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800481e:	1812      	adds	r2, r2, r0
 8004820:	eb41 0303 	adc.w	r3, r1, r3
 8004824:	f04f 0400 	mov.w	r4, #0
 8004828:	f04f 0500 	mov.w	r5, #0
 800482c:	00dd      	lsls	r5, r3, #3
 800482e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004832:	00d4      	lsls	r4, r2, #3
 8004834:	4622      	mov	r2, r4
 8004836:	462b      	mov	r3, r5
 8004838:	1814      	adds	r4, r2, r0
 800483a:	653c      	str	r4, [r7, #80]	; 0x50
 800483c:	414b      	adcs	r3, r1
 800483e:	657b      	str	r3, [r7, #84]	; 0x54
 8004840:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004842:	685b      	ldr	r3, [r3, #4]
 8004844:	461a      	mov	r2, r3
 8004846:	f04f 0300 	mov.w	r3, #0
 800484a:	1891      	adds	r1, r2, r2
 800484c:	61b9      	str	r1, [r7, #24]
 800484e:	415b      	adcs	r3, r3
 8004850:	61fb      	str	r3, [r7, #28]
 8004852:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004856:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800485a:	f7fc f8c7 	bl	80009ec <__aeabi_uldivmod>
 800485e:	4602      	mov	r2, r0
 8004860:	460b      	mov	r3, r1
 8004862:	4b6c      	ldr	r3, [pc, #432]	; (8004a14 <UART_SetConfig+0x38c>)
 8004864:	fba3 1302 	umull	r1, r3, r3, r2
 8004868:	095b      	lsrs	r3, r3, #5
 800486a:	2164      	movs	r1, #100	; 0x64
 800486c:	fb01 f303 	mul.w	r3, r1, r3
 8004870:	1ad3      	subs	r3, r2, r3
 8004872:	00db      	lsls	r3, r3, #3
 8004874:	3332      	adds	r3, #50	; 0x32
 8004876:	4a67      	ldr	r2, [pc, #412]	; (8004a14 <UART_SetConfig+0x38c>)
 8004878:	fba2 2303 	umull	r2, r3, r2, r3
 800487c:	095b      	lsrs	r3, r3, #5
 800487e:	f003 0207 	and.w	r2, r3, #7
 8004882:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4432      	add	r2, r6
 8004888:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800488a:	e0b9      	b.n	8004a00 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800488c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800488e:	461c      	mov	r4, r3
 8004890:	f04f 0500 	mov.w	r5, #0
 8004894:	4622      	mov	r2, r4
 8004896:	462b      	mov	r3, r5
 8004898:	1891      	adds	r1, r2, r2
 800489a:	6139      	str	r1, [r7, #16]
 800489c:	415b      	adcs	r3, r3
 800489e:	617b      	str	r3, [r7, #20]
 80048a0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80048a4:	1912      	adds	r2, r2, r4
 80048a6:	eb45 0303 	adc.w	r3, r5, r3
 80048aa:	f04f 0000 	mov.w	r0, #0
 80048ae:	f04f 0100 	mov.w	r1, #0
 80048b2:	00d9      	lsls	r1, r3, #3
 80048b4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80048b8:	00d0      	lsls	r0, r2, #3
 80048ba:	4602      	mov	r2, r0
 80048bc:	460b      	mov	r3, r1
 80048be:	eb12 0804 	adds.w	r8, r2, r4
 80048c2:	eb43 0905 	adc.w	r9, r3, r5
 80048c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048c8:	685b      	ldr	r3, [r3, #4]
 80048ca:	4618      	mov	r0, r3
 80048cc:	f04f 0100 	mov.w	r1, #0
 80048d0:	f04f 0200 	mov.w	r2, #0
 80048d4:	f04f 0300 	mov.w	r3, #0
 80048d8:	008b      	lsls	r3, r1, #2
 80048da:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80048de:	0082      	lsls	r2, r0, #2
 80048e0:	4640      	mov	r0, r8
 80048e2:	4649      	mov	r1, r9
 80048e4:	f7fc f882 	bl	80009ec <__aeabi_uldivmod>
 80048e8:	4602      	mov	r2, r0
 80048ea:	460b      	mov	r3, r1
 80048ec:	4b49      	ldr	r3, [pc, #292]	; (8004a14 <UART_SetConfig+0x38c>)
 80048ee:	fba3 2302 	umull	r2, r3, r3, r2
 80048f2:	095b      	lsrs	r3, r3, #5
 80048f4:	011e      	lsls	r6, r3, #4
 80048f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80048f8:	4618      	mov	r0, r3
 80048fa:	f04f 0100 	mov.w	r1, #0
 80048fe:	4602      	mov	r2, r0
 8004900:	460b      	mov	r3, r1
 8004902:	1894      	adds	r4, r2, r2
 8004904:	60bc      	str	r4, [r7, #8]
 8004906:	415b      	adcs	r3, r3
 8004908:	60fb      	str	r3, [r7, #12]
 800490a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800490e:	1812      	adds	r2, r2, r0
 8004910:	eb41 0303 	adc.w	r3, r1, r3
 8004914:	f04f 0400 	mov.w	r4, #0
 8004918:	f04f 0500 	mov.w	r5, #0
 800491c:	00dd      	lsls	r5, r3, #3
 800491e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004922:	00d4      	lsls	r4, r2, #3
 8004924:	4622      	mov	r2, r4
 8004926:	462b      	mov	r3, r5
 8004928:	1814      	adds	r4, r2, r0
 800492a:	64bc      	str	r4, [r7, #72]	; 0x48
 800492c:	414b      	adcs	r3, r1
 800492e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004930:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004932:	685b      	ldr	r3, [r3, #4]
 8004934:	4618      	mov	r0, r3
 8004936:	f04f 0100 	mov.w	r1, #0
 800493a:	f04f 0200 	mov.w	r2, #0
 800493e:	f04f 0300 	mov.w	r3, #0
 8004942:	008b      	lsls	r3, r1, #2
 8004944:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004948:	0082      	lsls	r2, r0, #2
 800494a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800494e:	f7fc f84d 	bl	80009ec <__aeabi_uldivmod>
 8004952:	4602      	mov	r2, r0
 8004954:	460b      	mov	r3, r1
 8004956:	4b2f      	ldr	r3, [pc, #188]	; (8004a14 <UART_SetConfig+0x38c>)
 8004958:	fba3 1302 	umull	r1, r3, r3, r2
 800495c:	095b      	lsrs	r3, r3, #5
 800495e:	2164      	movs	r1, #100	; 0x64
 8004960:	fb01 f303 	mul.w	r3, r1, r3
 8004964:	1ad3      	subs	r3, r2, r3
 8004966:	011b      	lsls	r3, r3, #4
 8004968:	3332      	adds	r3, #50	; 0x32
 800496a:	4a2a      	ldr	r2, [pc, #168]	; (8004a14 <UART_SetConfig+0x38c>)
 800496c:	fba2 2303 	umull	r2, r3, r2, r3
 8004970:	095b      	lsrs	r3, r3, #5
 8004972:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004976:	441e      	add	r6, r3
 8004978:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800497a:	4618      	mov	r0, r3
 800497c:	f04f 0100 	mov.w	r1, #0
 8004980:	4602      	mov	r2, r0
 8004982:	460b      	mov	r3, r1
 8004984:	1894      	adds	r4, r2, r2
 8004986:	603c      	str	r4, [r7, #0]
 8004988:	415b      	adcs	r3, r3
 800498a:	607b      	str	r3, [r7, #4]
 800498c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004990:	1812      	adds	r2, r2, r0
 8004992:	eb41 0303 	adc.w	r3, r1, r3
 8004996:	f04f 0400 	mov.w	r4, #0
 800499a:	f04f 0500 	mov.w	r5, #0
 800499e:	00dd      	lsls	r5, r3, #3
 80049a0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80049a4:	00d4      	lsls	r4, r2, #3
 80049a6:	4622      	mov	r2, r4
 80049a8:	462b      	mov	r3, r5
 80049aa:	eb12 0a00 	adds.w	sl, r2, r0
 80049ae:	eb43 0b01 	adc.w	fp, r3, r1
 80049b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	4618      	mov	r0, r3
 80049b8:	f04f 0100 	mov.w	r1, #0
 80049bc:	f04f 0200 	mov.w	r2, #0
 80049c0:	f04f 0300 	mov.w	r3, #0
 80049c4:	008b      	lsls	r3, r1, #2
 80049c6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80049ca:	0082      	lsls	r2, r0, #2
 80049cc:	4650      	mov	r0, sl
 80049ce:	4659      	mov	r1, fp
 80049d0:	f7fc f80c 	bl	80009ec <__aeabi_uldivmod>
 80049d4:	4602      	mov	r2, r0
 80049d6:	460b      	mov	r3, r1
 80049d8:	4b0e      	ldr	r3, [pc, #56]	; (8004a14 <UART_SetConfig+0x38c>)
 80049da:	fba3 1302 	umull	r1, r3, r3, r2
 80049de:	095b      	lsrs	r3, r3, #5
 80049e0:	2164      	movs	r1, #100	; 0x64
 80049e2:	fb01 f303 	mul.w	r3, r1, r3
 80049e6:	1ad3      	subs	r3, r2, r3
 80049e8:	011b      	lsls	r3, r3, #4
 80049ea:	3332      	adds	r3, #50	; 0x32
 80049ec:	4a09      	ldr	r2, [pc, #36]	; (8004a14 <UART_SetConfig+0x38c>)
 80049ee:	fba2 2303 	umull	r2, r3, r2, r3
 80049f2:	095b      	lsrs	r3, r3, #5
 80049f4:	f003 020f 	and.w	r2, r3, #15
 80049f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4432      	add	r2, r6
 80049fe:	609a      	str	r2, [r3, #8]
}
 8004a00:	bf00      	nop
 8004a02:	377c      	adds	r7, #124	; 0x7c
 8004a04:	46bd      	mov	sp, r7
 8004a06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a0a:	bf00      	nop
 8004a0c:	40011000 	.word	0x40011000
 8004a10:	40011400 	.word	0x40011400
 8004a14:	51eb851f 	.word	0x51eb851f

08004a18 <__NVIC_SetPriority>:
{
 8004a18:	b480      	push	{r7}
 8004a1a:	b083      	sub	sp, #12
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	4603      	mov	r3, r0
 8004a20:	6039      	str	r1, [r7, #0]
 8004a22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	db0a      	blt.n	8004a42 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	b2da      	uxtb	r2, r3
 8004a30:	490c      	ldr	r1, [pc, #48]	; (8004a64 <__NVIC_SetPriority+0x4c>)
 8004a32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a36:	0112      	lsls	r2, r2, #4
 8004a38:	b2d2      	uxtb	r2, r2
 8004a3a:	440b      	add	r3, r1
 8004a3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004a40:	e00a      	b.n	8004a58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	b2da      	uxtb	r2, r3
 8004a46:	4908      	ldr	r1, [pc, #32]	; (8004a68 <__NVIC_SetPriority+0x50>)
 8004a48:	79fb      	ldrb	r3, [r7, #7]
 8004a4a:	f003 030f 	and.w	r3, r3, #15
 8004a4e:	3b04      	subs	r3, #4
 8004a50:	0112      	lsls	r2, r2, #4
 8004a52:	b2d2      	uxtb	r2, r2
 8004a54:	440b      	add	r3, r1
 8004a56:	761a      	strb	r2, [r3, #24]
}
 8004a58:	bf00      	nop
 8004a5a:	370c      	adds	r7, #12
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a62:	4770      	bx	lr
 8004a64:	e000e100 	.word	0xe000e100
 8004a68:	e000ed00 	.word	0xe000ed00

08004a6c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004a70:	4b05      	ldr	r3, [pc, #20]	; (8004a88 <SysTick_Handler+0x1c>)
 8004a72:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004a74:	f002 fa0e 	bl	8006e94 <xTaskGetSchedulerState>
 8004a78:	4603      	mov	r3, r0
 8004a7a:	2b01      	cmp	r3, #1
 8004a7c:	d001      	beq.n	8004a82 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8004a7e:	f003 f82b 	bl	8007ad8 <xPortSysTickHandler>
  }
}
 8004a82:	bf00      	nop
 8004a84:	bd80      	pop	{r7, pc}
 8004a86:	bf00      	nop
 8004a88:	e000e010 	.word	0xe000e010

08004a8c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004a90:	2100      	movs	r1, #0
 8004a92:	f06f 0004 	mvn.w	r0, #4
 8004a96:	f7ff ffbf 	bl	8004a18 <__NVIC_SetPriority>
#endif
}
 8004a9a:	bf00      	nop
 8004a9c:	bd80      	pop	{r7, pc}
	...

08004aa0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004aa0:	b480      	push	{r7}
 8004aa2:	b083      	sub	sp, #12
 8004aa4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004aa6:	f3ef 8305 	mrs	r3, IPSR
 8004aaa:	603b      	str	r3, [r7, #0]
  return(result);
 8004aac:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d003      	beq.n	8004aba <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004ab2:	f06f 0305 	mvn.w	r3, #5
 8004ab6:	607b      	str	r3, [r7, #4]
 8004ab8:	e00c      	b.n	8004ad4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004aba:	4b0a      	ldr	r3, [pc, #40]	; (8004ae4 <osKernelInitialize+0x44>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d105      	bne.n	8004ace <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004ac2:	4b08      	ldr	r3, [pc, #32]	; (8004ae4 <osKernelInitialize+0x44>)
 8004ac4:	2201      	movs	r2, #1
 8004ac6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004ac8:	2300      	movs	r3, #0
 8004aca:	607b      	str	r3, [r7, #4]
 8004acc:	e002      	b.n	8004ad4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8004ace:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004ad2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004ad4:	687b      	ldr	r3, [r7, #4]
}
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	370c      	adds	r7, #12
 8004ada:	46bd      	mov	sp, r7
 8004adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae0:	4770      	bx	lr
 8004ae2:	bf00      	nop
 8004ae4:	20000030 	.word	0x20000030

08004ae8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b082      	sub	sp, #8
 8004aec:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004aee:	f3ef 8305 	mrs	r3, IPSR
 8004af2:	603b      	str	r3, [r7, #0]
  return(result);
 8004af4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d003      	beq.n	8004b02 <osKernelStart+0x1a>
    stat = osErrorISR;
 8004afa:	f06f 0305 	mvn.w	r3, #5
 8004afe:	607b      	str	r3, [r7, #4]
 8004b00:	e010      	b.n	8004b24 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004b02:	4b0b      	ldr	r3, [pc, #44]	; (8004b30 <osKernelStart+0x48>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	2b01      	cmp	r3, #1
 8004b08:	d109      	bne.n	8004b1e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004b0a:	f7ff ffbf 	bl	8004a8c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004b0e:	4b08      	ldr	r3, [pc, #32]	; (8004b30 <osKernelStart+0x48>)
 8004b10:	2202      	movs	r2, #2
 8004b12:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004b14:	f001 fcd8 	bl	80064c8 <vTaskStartScheduler>
      stat = osOK;
 8004b18:	2300      	movs	r3, #0
 8004b1a:	607b      	str	r3, [r7, #4]
 8004b1c:	e002      	b.n	8004b24 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8004b1e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004b22:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004b24:	687b      	ldr	r3, [r7, #4]
}
 8004b26:	4618      	mov	r0, r3
 8004b28:	3708      	adds	r7, #8
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	bd80      	pop	{r7, pc}
 8004b2e:	bf00      	nop
 8004b30:	20000030 	.word	0x20000030

08004b34 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b08e      	sub	sp, #56	; 0x38
 8004b38:	af04      	add	r7, sp, #16
 8004b3a:	60f8      	str	r0, [r7, #12]
 8004b3c:	60b9      	str	r1, [r7, #8]
 8004b3e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004b40:	2300      	movs	r3, #0
 8004b42:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004b44:	f3ef 8305 	mrs	r3, IPSR
 8004b48:	617b      	str	r3, [r7, #20]
  return(result);
 8004b4a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d17e      	bne.n	8004c4e <osThreadNew+0x11a>
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d07b      	beq.n	8004c4e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8004b56:	2380      	movs	r3, #128	; 0x80
 8004b58:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004b5a:	2318      	movs	r3, #24
 8004b5c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8004b5e:	2300      	movs	r3, #0
 8004b60:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8004b62:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004b66:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d045      	beq.n	8004bfa <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d002      	beq.n	8004b7c <osThreadNew+0x48>
        name = attr->name;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	699b      	ldr	r3, [r3, #24]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d002      	beq.n	8004b8a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	699b      	ldr	r3, [r3, #24]
 8004b88:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004b8a:	69fb      	ldr	r3, [r7, #28]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d008      	beq.n	8004ba2 <osThreadNew+0x6e>
 8004b90:	69fb      	ldr	r3, [r7, #28]
 8004b92:	2b38      	cmp	r3, #56	; 0x38
 8004b94:	d805      	bhi.n	8004ba2 <osThreadNew+0x6e>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	685b      	ldr	r3, [r3, #4]
 8004b9a:	f003 0301 	and.w	r3, r3, #1
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d001      	beq.n	8004ba6 <osThreadNew+0x72>
        return (NULL);
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	e054      	b.n	8004c50 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	695b      	ldr	r3, [r3, #20]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d003      	beq.n	8004bb6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	695b      	ldr	r3, [r3, #20]
 8004bb2:	089b      	lsrs	r3, r3, #2
 8004bb4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	689b      	ldr	r3, [r3, #8]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d00e      	beq.n	8004bdc <osThreadNew+0xa8>
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	68db      	ldr	r3, [r3, #12]
 8004bc2:	2b5b      	cmp	r3, #91	; 0x5b
 8004bc4:	d90a      	bls.n	8004bdc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d006      	beq.n	8004bdc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	695b      	ldr	r3, [r3, #20]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d002      	beq.n	8004bdc <osThreadNew+0xa8>
        mem = 1;
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	61bb      	str	r3, [r7, #24]
 8004bda:	e010      	b.n	8004bfe <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	689b      	ldr	r3, [r3, #8]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d10c      	bne.n	8004bfe <osThreadNew+0xca>
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	68db      	ldr	r3, [r3, #12]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d108      	bne.n	8004bfe <osThreadNew+0xca>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	691b      	ldr	r3, [r3, #16]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d104      	bne.n	8004bfe <osThreadNew+0xca>
          mem = 0;
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	61bb      	str	r3, [r7, #24]
 8004bf8:	e001      	b.n	8004bfe <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004bfe:	69bb      	ldr	r3, [r7, #24]
 8004c00:	2b01      	cmp	r3, #1
 8004c02:	d110      	bne.n	8004c26 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004c08:	687a      	ldr	r2, [r7, #4]
 8004c0a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004c0c:	9202      	str	r2, [sp, #8]
 8004c0e:	9301      	str	r3, [sp, #4]
 8004c10:	69fb      	ldr	r3, [r7, #28]
 8004c12:	9300      	str	r3, [sp, #0]
 8004c14:	68bb      	ldr	r3, [r7, #8]
 8004c16:	6a3a      	ldr	r2, [r7, #32]
 8004c18:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004c1a:	68f8      	ldr	r0, [r7, #12]
 8004c1c:	f001 fa7e 	bl	800611c <xTaskCreateStatic>
 8004c20:	4603      	mov	r3, r0
 8004c22:	613b      	str	r3, [r7, #16]
 8004c24:	e013      	b.n	8004c4e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8004c26:	69bb      	ldr	r3, [r7, #24]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d110      	bne.n	8004c4e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004c2c:	6a3b      	ldr	r3, [r7, #32]
 8004c2e:	b29a      	uxth	r2, r3
 8004c30:	f107 0310 	add.w	r3, r7, #16
 8004c34:	9301      	str	r3, [sp, #4]
 8004c36:	69fb      	ldr	r3, [r7, #28]
 8004c38:	9300      	str	r3, [sp, #0]
 8004c3a:	68bb      	ldr	r3, [r7, #8]
 8004c3c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004c3e:	68f8      	ldr	r0, [r7, #12]
 8004c40:	f001 fac9 	bl	80061d6 <xTaskCreate>
 8004c44:	4603      	mov	r3, r0
 8004c46:	2b01      	cmp	r3, #1
 8004c48:	d001      	beq.n	8004c4e <osThreadNew+0x11a>
            hTask = NULL;
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004c4e:	693b      	ldr	r3, [r7, #16]
}
 8004c50:	4618      	mov	r0, r3
 8004c52:	3728      	adds	r7, #40	; 0x28
 8004c54:	46bd      	mov	sp, r7
 8004c56:	bd80      	pop	{r7, pc}

08004c58 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b084      	sub	sp, #16
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004c60:	f3ef 8305 	mrs	r3, IPSR
 8004c64:	60bb      	str	r3, [r7, #8]
  return(result);
 8004c66:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d003      	beq.n	8004c74 <osDelay+0x1c>
    stat = osErrorISR;
 8004c6c:	f06f 0305 	mvn.w	r3, #5
 8004c70:	60fb      	str	r3, [r7, #12]
 8004c72:	e007      	b.n	8004c84 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8004c74:	2300      	movs	r3, #0
 8004c76:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d002      	beq.n	8004c84 <osDelay+0x2c>
      vTaskDelay(ticks);
 8004c7e:	6878      	ldr	r0, [r7, #4]
 8004c80:	f001 fbee 	bl	8006460 <vTaskDelay>
    }
  }

  return (stat);
 8004c84:	68fb      	ldr	r3, [r7, #12]
}
 8004c86:	4618      	mov	r0, r3
 8004c88:	3710      	adds	r7, #16
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	bd80      	pop	{r7, pc}

08004c8e <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 8004c8e:	b580      	push	{r7, lr}
 8004c90:	b086      	sub	sp, #24
 8004c92:	af00      	add	r7, sp, #0
 8004c94:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 8004c96:	2300      	movs	r3, #0
 8004c98:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004c9a:	f3ef 8305 	mrs	r3, IPSR
 8004c9e:	60fb      	str	r3, [r7, #12]
  return(result);
 8004ca0:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d12d      	bne.n	8004d02 <osEventFlagsNew+0x74>
    mem = -1;
 8004ca6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004caa:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d015      	beq.n	8004cde <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	689b      	ldr	r3, [r3, #8]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d006      	beq.n	8004cc8 <osEventFlagsNew+0x3a>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	68db      	ldr	r3, [r3, #12]
 8004cbe:	2b1f      	cmp	r3, #31
 8004cc0:	d902      	bls.n	8004cc8 <osEventFlagsNew+0x3a>
        mem = 1;
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	613b      	str	r3, [r7, #16]
 8004cc6:	e00c      	b.n	8004ce2 <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	689b      	ldr	r3, [r3, #8]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d108      	bne.n	8004ce2 <osEventFlagsNew+0x54>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	68db      	ldr	r3, [r3, #12]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d104      	bne.n	8004ce2 <osEventFlagsNew+0x54>
          mem = 0;
 8004cd8:	2300      	movs	r3, #0
 8004cda:	613b      	str	r3, [r7, #16]
 8004cdc:	e001      	b.n	8004ce2 <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 8004cde:	2300      	movs	r3, #0
 8004ce0:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 8004ce2:	693b      	ldr	r3, [r7, #16]
 8004ce4:	2b01      	cmp	r3, #1
 8004ce6:	d106      	bne.n	8004cf6 <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	689b      	ldr	r3, [r3, #8]
 8004cec:	4618      	mov	r0, r3
 8004cee:	f000 f9b1 	bl	8005054 <xEventGroupCreateStatic>
 8004cf2:	6178      	str	r0, [r7, #20]
 8004cf4:	e005      	b.n	8004d02 <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 8004cf6:	693b      	ldr	r3, [r7, #16]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d102      	bne.n	8004d02 <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 8004cfc:	f000 f9e1 	bl	80050c2 <xEventGroupCreate>
 8004d00:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 8004d02:	697b      	ldr	r3, [r7, #20]
}
 8004d04:	4618      	mov	r0, r3
 8004d06:	3718      	adds	r7, #24
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	bd80      	pop	{r7, pc}

08004d0c <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b086      	sub	sp, #24
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
 8004d14:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8004d1a:	693b      	ldr	r3, [r7, #16]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d004      	beq.n	8004d2a <osEventFlagsSet+0x1e>
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d003      	beq.n	8004d32 <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 8004d2a:	f06f 0303 	mvn.w	r3, #3
 8004d2e:	617b      	str	r3, [r7, #20]
 8004d30:	e028      	b.n	8004d84 <osEventFlagsSet+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004d32:	f3ef 8305 	mrs	r3, IPSR
 8004d36:	60fb      	str	r3, [r7, #12]
  return(result);
 8004d38:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d01d      	beq.n	8004d7a <osEventFlagsSet+0x6e>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 8004d3e:	2300      	movs	r3, #0
 8004d40:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 8004d42:	f107 0308 	add.w	r3, r7, #8
 8004d46:	461a      	mov	r2, r3
 8004d48:	6839      	ldr	r1, [r7, #0]
 8004d4a:	6938      	ldr	r0, [r7, #16]
 8004d4c:	f000 fbda 	bl	8005504 <xEventGroupSetBitsFromISR>
 8004d50:	4603      	mov	r3, r0
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d103      	bne.n	8004d5e <osEventFlagsSet+0x52>
      rflags = (uint32_t)osErrorResource;
 8004d56:	f06f 0302 	mvn.w	r3, #2
 8004d5a:	617b      	str	r3, [r7, #20]
 8004d5c:	e012      	b.n	8004d84 <osEventFlagsSet+0x78>
    } else {
      rflags = flags;
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 8004d62:	68bb      	ldr	r3, [r7, #8]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d00d      	beq.n	8004d84 <osEventFlagsSet+0x78>
 8004d68:	4b09      	ldr	r3, [pc, #36]	; (8004d90 <osEventFlagsSet+0x84>)
 8004d6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d6e:	601a      	str	r2, [r3, #0]
 8004d70:	f3bf 8f4f 	dsb	sy
 8004d74:	f3bf 8f6f 	isb	sy
 8004d78:	e004      	b.n	8004d84 <osEventFlagsSet+0x78>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 8004d7a:	6839      	ldr	r1, [r7, #0]
 8004d7c:	6938      	ldr	r0, [r7, #16]
 8004d7e:	f000 faf9 	bl	8005374 <xEventGroupSetBits>
 8004d82:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 8004d84:	697b      	ldr	r3, [r7, #20]
}
 8004d86:	4618      	mov	r0, r3
 8004d88:	3718      	adds	r7, #24
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	bd80      	pop	{r7, pc}
 8004d8e:	bf00      	nop
 8004d90:	e000ed04 	.word	0xe000ed04

08004d94 <osEventFlagsClear>:

uint32_t osEventFlagsClear (osEventFlagsId_t ef_id, uint32_t flags) {
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b086      	sub	sp, #24
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
 8004d9c:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	613b      	str	r3, [r7, #16]
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8004da2:	693b      	ldr	r3, [r7, #16]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d004      	beq.n	8004db2 <osEventFlagsClear+0x1e>
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d003      	beq.n	8004dba <osEventFlagsClear+0x26>
    rflags = (uint32_t)osErrorParameter;
 8004db2:	f06f 0303 	mvn.w	r3, #3
 8004db6:	617b      	str	r3, [r7, #20]
 8004db8:	e019      	b.n	8004dee <osEventFlagsClear+0x5a>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004dba:	f3ef 8305 	mrs	r3, IPSR
 8004dbe:	60fb      	str	r3, [r7, #12]
  return(result);
 8004dc0:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d00e      	beq.n	8004de4 <osEventFlagsClear+0x50>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    rflags = xEventGroupGetBitsFromISR (hEventGroup);
 8004dc6:	6938      	ldr	r0, [r7, #16]
 8004dc8:	f000 fab0 	bl	800532c <xEventGroupGetBitsFromISR>
 8004dcc:	6178      	str	r0, [r7, #20]

    if (xEventGroupClearBitsFromISR (hEventGroup, (EventBits_t)flags) == pdFAIL) {
 8004dce:	6839      	ldr	r1, [r7, #0]
 8004dd0:	6938      	ldr	r0, [r7, #16]
 8004dd2:	f000 fa97 	bl	8005304 <xEventGroupClearBitsFromISR>
 8004dd6:	4603      	mov	r3, r0
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d108      	bne.n	8004dee <osEventFlagsClear+0x5a>
      rflags = (uint32_t)osErrorResource;
 8004ddc:	f06f 0302 	mvn.w	r3, #2
 8004de0:	617b      	str	r3, [r7, #20]
 8004de2:	e004      	b.n	8004dee <osEventFlagsClear+0x5a>
    }
  #endif
  }
  else {
    rflags = xEventGroupClearBits (hEventGroup, (EventBits_t)flags);
 8004de4:	6839      	ldr	r1, [r7, #0]
 8004de6:	6938      	ldr	r0, [r7, #16]
 8004de8:	f000 fa54 	bl	8005294 <xEventGroupClearBits>
 8004dec:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 8004dee:	697b      	ldr	r3, [r7, #20]
}
 8004df0:	4618      	mov	r0, r3
 8004df2:	3718      	adds	r7, #24
 8004df4:	46bd      	mov	sp, r7
 8004df6:	bd80      	pop	{r7, pc}

08004df8 <osEventFlagsGet>:

uint32_t osEventFlagsGet (osEventFlagsId_t ef_id) {
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b086      	sub	sp, #24
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	613b      	str	r3, [r7, #16]
  uint32_t rflags;

  if (ef_id == NULL) {
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d102      	bne.n	8004e10 <osEventFlagsGet+0x18>
    rflags = 0U;
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	617b      	str	r3, [r7, #20]
 8004e0e:	e00f      	b.n	8004e30 <osEventFlagsGet+0x38>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004e10:	f3ef 8305 	mrs	r3, IPSR
 8004e14:	60fb      	str	r3, [r7, #12]
  return(result);
 8004e16:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d004      	beq.n	8004e26 <osEventFlagsGet+0x2e>
    rflags = xEventGroupGetBitsFromISR (hEventGroup);
 8004e1c:	6938      	ldr	r0, [r7, #16]
 8004e1e:	f000 fa85 	bl	800532c <xEventGroupGetBitsFromISR>
 8004e22:	6178      	str	r0, [r7, #20]
 8004e24:	e004      	b.n	8004e30 <osEventFlagsGet+0x38>
  }
  else {
    rflags = xEventGroupGetBits (hEventGroup);
 8004e26:	2100      	movs	r1, #0
 8004e28:	6938      	ldr	r0, [r7, #16]
 8004e2a:	f000 fa33 	bl	8005294 <xEventGroupClearBits>
 8004e2e:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 8004e30:	697b      	ldr	r3, [r7, #20]
}
 8004e32:	4618      	mov	r0, r3
 8004e34:	3718      	adds	r7, #24
 8004e36:	46bd      	mov	sp, r7
 8004e38:	bd80      	pop	{r7, pc}

08004e3a <osEventFlagsWait>:

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 8004e3a:	b580      	push	{r7, lr}
 8004e3c:	b08c      	sub	sp, #48	; 0x30
 8004e3e:	af02      	add	r7, sp, #8
 8004e40:	60f8      	str	r0, [r7, #12]
 8004e42:	60b9      	str	r1, [r7, #8]
 8004e44:	607a      	str	r2, [r7, #4]
 8004e46:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8004e4c:	69bb      	ldr	r3, [r7, #24]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d004      	beq.n	8004e5c <osEventFlagsWait+0x22>
 8004e52:	68bb      	ldr	r3, [r7, #8]
 8004e54:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d003      	beq.n	8004e64 <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 8004e5c:	f06f 0303 	mvn.w	r3, #3
 8004e60:	61fb      	str	r3, [r7, #28]
 8004e62:	e04b      	b.n	8004efc <osEventFlagsWait+0xc2>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004e64:	f3ef 8305 	mrs	r3, IPSR
 8004e68:	617b      	str	r3, [r7, #20]
  return(result);
 8004e6a:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d003      	beq.n	8004e78 <osEventFlagsWait+0x3e>
    rflags = (uint32_t)osErrorISR;
 8004e70:	f06f 0305 	mvn.w	r3, #5
 8004e74:	61fb      	str	r3, [r7, #28]
 8004e76:	e041      	b.n	8004efc <osEventFlagsWait+0xc2>
  }
  else {
    if (options & osFlagsWaitAll) {
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	f003 0301 	and.w	r3, r3, #1
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d002      	beq.n	8004e88 <osEventFlagsWait+0x4e>
      wait_all = pdTRUE;
 8004e82:	2301      	movs	r3, #1
 8004e84:	627b      	str	r3, [r7, #36]	; 0x24
 8004e86:	e001      	b.n	8004e8c <osEventFlagsWait+0x52>
    } else {
      wait_all = pdFAIL;
 8004e88:	2300      	movs	r3, #0
 8004e8a:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (options & osFlagsNoClear) {
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	f003 0302 	and.w	r3, r3, #2
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d002      	beq.n	8004e9c <osEventFlagsWait+0x62>
      exit_clr = pdFAIL;
 8004e96:	2300      	movs	r3, #0
 8004e98:	623b      	str	r3, [r7, #32]
 8004e9a:	e001      	b.n	8004ea0 <osEventFlagsWait+0x66>
    } else {
      exit_clr = pdTRUE;
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	9300      	str	r3, [sp, #0]
 8004ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ea6:	6a3a      	ldr	r2, [r7, #32]
 8004ea8:	68b9      	ldr	r1, [r7, #8]
 8004eaa:	69b8      	ldr	r0, [r7, #24]
 8004eac:	f000 f924 	bl	80050f8 <xEventGroupWaitBits>
 8004eb0:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	f003 0301 	and.w	r3, r3, #1
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d010      	beq.n	8004ede <osEventFlagsWait+0xa4>
      if ((flags & rflags) != flags) {
 8004ebc:	68ba      	ldr	r2, [r7, #8]
 8004ebe:	69fb      	ldr	r3, [r7, #28]
 8004ec0:	4013      	ands	r3, r2
 8004ec2:	68ba      	ldr	r2, [r7, #8]
 8004ec4:	429a      	cmp	r2, r3
 8004ec6:	d019      	beq.n	8004efc <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d003      	beq.n	8004ed6 <osEventFlagsWait+0x9c>
          rflags = (uint32_t)osErrorTimeout;
 8004ece:	f06f 0301 	mvn.w	r3, #1
 8004ed2:	61fb      	str	r3, [r7, #28]
 8004ed4:	e012      	b.n	8004efc <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 8004ed6:	f06f 0302 	mvn.w	r3, #2
 8004eda:	61fb      	str	r3, [r7, #28]
 8004edc:	e00e      	b.n	8004efc <osEventFlagsWait+0xc2>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 8004ede:	68ba      	ldr	r2, [r7, #8]
 8004ee0:	69fb      	ldr	r3, [r7, #28]
 8004ee2:	4013      	ands	r3, r2
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d109      	bne.n	8004efc <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d003      	beq.n	8004ef6 <osEventFlagsWait+0xbc>
          rflags = (uint32_t)osErrorTimeout;
 8004eee:	f06f 0301 	mvn.w	r3, #1
 8004ef2:	61fb      	str	r3, [r7, #28]
 8004ef4:	e002      	b.n	8004efc <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 8004ef6:	f06f 0302 	mvn.w	r3, #2
 8004efa:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 8004efc:	69fb      	ldr	r3, [r7, #28]
}
 8004efe:	4618      	mov	r0, r3
 8004f00:	3728      	adds	r7, #40	; 0x28
 8004f02:	46bd      	mov	sp, r7
 8004f04:	bd80      	pop	{r7, pc}

08004f06 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8004f06:	b580      	push	{r7, lr}
 8004f08:	b08a      	sub	sp, #40	; 0x28
 8004f0a:	af02      	add	r7, sp, #8
 8004f0c:	60f8      	str	r0, [r7, #12]
 8004f0e:	60b9      	str	r1, [r7, #8]
 8004f10:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8004f12:	2300      	movs	r3, #0
 8004f14:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004f16:	f3ef 8305 	mrs	r3, IPSR
 8004f1a:	613b      	str	r3, [r7, #16]
  return(result);
 8004f1c:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d15f      	bne.n	8004fe2 <osMessageQueueNew+0xdc>
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d05c      	beq.n	8004fe2 <osMessageQueueNew+0xdc>
 8004f28:	68bb      	ldr	r3, [r7, #8]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d059      	beq.n	8004fe2 <osMessageQueueNew+0xdc>
    mem = -1;
 8004f2e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004f32:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d029      	beq.n	8004f8e <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	689b      	ldr	r3, [r3, #8]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d012      	beq.n	8004f68 <osMessageQueueNew+0x62>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	68db      	ldr	r3, [r3, #12]
 8004f46:	2b4f      	cmp	r3, #79	; 0x4f
 8004f48:	d90e      	bls.n	8004f68 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d00a      	beq.n	8004f68 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	695a      	ldr	r2, [r3, #20]
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	68b9      	ldr	r1, [r7, #8]
 8004f5a:	fb01 f303 	mul.w	r3, r1, r3
 8004f5e:	429a      	cmp	r2, r3
 8004f60:	d302      	bcc.n	8004f68 <osMessageQueueNew+0x62>
        mem = 1;
 8004f62:	2301      	movs	r3, #1
 8004f64:	61bb      	str	r3, [r7, #24]
 8004f66:	e014      	b.n	8004f92 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	689b      	ldr	r3, [r3, #8]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d110      	bne.n	8004f92 <osMessageQueueNew+0x8c>
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	68db      	ldr	r3, [r3, #12]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d10c      	bne.n	8004f92 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d108      	bne.n	8004f92 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	695b      	ldr	r3, [r3, #20]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d104      	bne.n	8004f92 <osMessageQueueNew+0x8c>
          mem = 0;
 8004f88:	2300      	movs	r3, #0
 8004f8a:	61bb      	str	r3, [r7, #24]
 8004f8c:	e001      	b.n	8004f92 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8004f8e:	2300      	movs	r3, #0
 8004f90:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004f92:	69bb      	ldr	r3, [r7, #24]
 8004f94:	2b01      	cmp	r3, #1
 8004f96:	d10b      	bne.n	8004fb0 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	691a      	ldr	r2, [r3, #16]
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	689b      	ldr	r3, [r3, #8]
 8004fa0:	2100      	movs	r1, #0
 8004fa2:	9100      	str	r1, [sp, #0]
 8004fa4:	68b9      	ldr	r1, [r7, #8]
 8004fa6:	68f8      	ldr	r0, [r7, #12]
 8004fa8:	f000 fbdc 	bl	8005764 <xQueueGenericCreateStatic>
 8004fac:	61f8      	str	r0, [r7, #28]
 8004fae:	e008      	b.n	8004fc2 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8004fb0:	69bb      	ldr	r3, [r7, #24]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d105      	bne.n	8004fc2 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	68b9      	ldr	r1, [r7, #8]
 8004fba:	68f8      	ldr	r0, [r7, #12]
 8004fbc:	f000 fc4a 	bl	8005854 <xQueueGenericCreate>
 8004fc0:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8004fc2:	69fb      	ldr	r3, [r7, #28]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d00c      	beq.n	8004fe2 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d003      	beq.n	8004fd6 <osMessageQueueNew+0xd0>
        name = attr->name;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	617b      	str	r3, [r7, #20]
 8004fd4:	e001      	b.n	8004fda <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8004fda:	6979      	ldr	r1, [r7, #20]
 8004fdc:	69f8      	ldr	r0, [r7, #28]
 8004fde:	f001 f83f 	bl	8006060 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8004fe2:	69fb      	ldr	r3, [r7, #28]
}
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	3720      	adds	r7, #32
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	bd80      	pop	{r7, pc}

08004fec <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004fec:	b480      	push	{r7}
 8004fee:	b085      	sub	sp, #20
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	60f8      	str	r0, [r7, #12]
 8004ff4:	60b9      	str	r1, [r7, #8]
 8004ff6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	4a07      	ldr	r2, [pc, #28]	; (8005018 <vApplicationGetIdleTaskMemory+0x2c>)
 8004ffc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004ffe:	68bb      	ldr	r3, [r7, #8]
 8005000:	4a06      	ldr	r2, [pc, #24]	; (800501c <vApplicationGetIdleTaskMemory+0x30>)
 8005002:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2280      	movs	r2, #128	; 0x80
 8005008:	601a      	str	r2, [r3, #0]
}
 800500a:	bf00      	nop
 800500c:	3714      	adds	r7, #20
 800500e:	46bd      	mov	sp, r7
 8005010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005014:	4770      	bx	lr
 8005016:	bf00      	nop
 8005018:	20000034 	.word	0x20000034
 800501c:	20000090 	.word	0x20000090

08005020 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005020:	b480      	push	{r7}
 8005022:	b085      	sub	sp, #20
 8005024:	af00      	add	r7, sp, #0
 8005026:	60f8      	str	r0, [r7, #12]
 8005028:	60b9      	str	r1, [r7, #8]
 800502a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	4a07      	ldr	r2, [pc, #28]	; (800504c <vApplicationGetTimerTaskMemory+0x2c>)
 8005030:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005032:	68bb      	ldr	r3, [r7, #8]
 8005034:	4a06      	ldr	r2, [pc, #24]	; (8005050 <vApplicationGetTimerTaskMemory+0x30>)
 8005036:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800503e:	601a      	str	r2, [r3, #0]
}
 8005040:	bf00      	nop
 8005042:	3714      	adds	r7, #20
 8005044:	46bd      	mov	sp, r7
 8005046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504a:	4770      	bx	lr
 800504c:	20000290 	.word	0x20000290
 8005050:	200002ec 	.word	0x200002ec

08005054 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 8005054:	b580      	push	{r7, lr}
 8005056:	b086      	sub	sp, #24
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d10a      	bne.n	8005078 <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005062:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005066:	f383 8811 	msr	BASEPRI, r3
 800506a:	f3bf 8f6f 	isb	sy
 800506e:	f3bf 8f4f 	dsb	sy
 8005072:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005074:	bf00      	nop
 8005076:	e7fe      	b.n	8005076 <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 8005078:	2320      	movs	r3, #32
 800507a:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 800507c:	68bb      	ldr	r3, [r7, #8]
 800507e:	2b20      	cmp	r3, #32
 8005080:	d00a      	beq.n	8005098 <xEventGroupCreateStatic+0x44>
	__asm volatile
 8005082:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005086:	f383 8811 	msr	BASEPRI, r3
 800508a:	f3bf 8f6f 	isb	sy
 800508e:	f3bf 8f4f 	dsb	sy
 8005092:	60fb      	str	r3, [r7, #12]
}
 8005094:	bf00      	nop
 8005096:	e7fe      	b.n	8005096 <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 800509c:	697b      	ldr	r3, [r7, #20]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d00a      	beq.n	80050b8 <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 80050a2:	697b      	ldr	r3, [r7, #20]
 80050a4:	2200      	movs	r2, #0
 80050a6:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 80050a8:	697b      	ldr	r3, [r7, #20]
 80050aa:	3304      	adds	r3, #4
 80050ac:	4618      	mov	r0, r3
 80050ae:	f000 fa3d 	bl	800552c <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 80050b2:	697b      	ldr	r3, [r7, #20]
 80050b4:	2201      	movs	r2, #1
 80050b6:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 80050b8:	697b      	ldr	r3, [r7, #20]
	}
 80050ba:	4618      	mov	r0, r3
 80050bc:	3718      	adds	r7, #24
 80050be:	46bd      	mov	sp, r7
 80050c0:	bd80      	pop	{r7, pc}

080050c2 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 80050c2:	b580      	push	{r7, lr}
 80050c4:	b082      	sub	sp, #8
 80050c6:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 80050c8:	2020      	movs	r0, #32
 80050ca:	f002 fd95 	bl	8007bf8 <pvPortMalloc>
 80050ce:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d00a      	beq.n	80050ec <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2200      	movs	r2, #0
 80050da:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	3304      	adds	r3, #4
 80050e0:	4618      	mov	r0, r3
 80050e2:	f000 fa23 	bl	800552c <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2200      	movs	r2, #0
 80050ea:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 80050ec:	687b      	ldr	r3, [r7, #4]
	}
 80050ee:	4618      	mov	r0, r3
 80050f0:	3708      	adds	r7, #8
 80050f2:	46bd      	mov	sp, r7
 80050f4:	bd80      	pop	{r7, pc}
	...

080050f8 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b090      	sub	sp, #64	; 0x40
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	60f8      	str	r0, [r7, #12]
 8005100:	60b9      	str	r1, [r7, #8]
 8005102:	607a      	str	r2, [r7, #4]
 8005104:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 800510a:	2300      	movs	r3, #0
 800510c:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 800510e:	2300      	movs	r3, #0
 8005110:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d10a      	bne.n	800512e <xEventGroupWaitBits+0x36>
	__asm volatile
 8005118:	f04f 0350 	mov.w	r3, #80	; 0x50
 800511c:	f383 8811 	msr	BASEPRI, r3
 8005120:	f3bf 8f6f 	isb	sy
 8005124:	f3bf 8f4f 	dsb	sy
 8005128:	623b      	str	r3, [r7, #32]
}
 800512a:	bf00      	nop
 800512c:	e7fe      	b.n	800512c <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800512e:	68bb      	ldr	r3, [r7, #8]
 8005130:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8005134:	2b00      	cmp	r3, #0
 8005136:	d00a      	beq.n	800514e <xEventGroupWaitBits+0x56>
	__asm volatile
 8005138:	f04f 0350 	mov.w	r3, #80	; 0x50
 800513c:	f383 8811 	msr	BASEPRI, r3
 8005140:	f3bf 8f6f 	isb	sy
 8005144:	f3bf 8f4f 	dsb	sy
 8005148:	61fb      	str	r3, [r7, #28]
}
 800514a:	bf00      	nop
 800514c:	e7fe      	b.n	800514c <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 800514e:	68bb      	ldr	r3, [r7, #8]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d10a      	bne.n	800516a <xEventGroupWaitBits+0x72>
	__asm volatile
 8005154:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005158:	f383 8811 	msr	BASEPRI, r3
 800515c:	f3bf 8f6f 	isb	sy
 8005160:	f3bf 8f4f 	dsb	sy
 8005164:	61bb      	str	r3, [r7, #24]
}
 8005166:	bf00      	nop
 8005168:	e7fe      	b.n	8005168 <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800516a:	f001 fe93 	bl	8006e94 <xTaskGetSchedulerState>
 800516e:	4603      	mov	r3, r0
 8005170:	2b00      	cmp	r3, #0
 8005172:	d102      	bne.n	800517a <xEventGroupWaitBits+0x82>
 8005174:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005176:	2b00      	cmp	r3, #0
 8005178:	d101      	bne.n	800517e <xEventGroupWaitBits+0x86>
 800517a:	2301      	movs	r3, #1
 800517c:	e000      	b.n	8005180 <xEventGroupWaitBits+0x88>
 800517e:	2300      	movs	r3, #0
 8005180:	2b00      	cmp	r3, #0
 8005182:	d10a      	bne.n	800519a <xEventGroupWaitBits+0xa2>
	__asm volatile
 8005184:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005188:	f383 8811 	msr	BASEPRI, r3
 800518c:	f3bf 8f6f 	isb	sy
 8005190:	f3bf 8f4f 	dsb	sy
 8005194:	617b      	str	r3, [r7, #20]
}
 8005196:	bf00      	nop
 8005198:	e7fe      	b.n	8005198 <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 800519a:	f001 f9fb 	bl	8006594 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 800519e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 80051a4:	683a      	ldr	r2, [r7, #0]
 80051a6:	68b9      	ldr	r1, [r7, #8]
 80051a8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80051aa:	f000 f988 	bl	80054be <prvTestWaitCondition>
 80051ae:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 80051b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d00e      	beq.n	80051d4 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 80051b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051b8:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 80051ba:	2300      	movs	r3, #0
 80051bc:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d028      	beq.n	8005216 <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80051c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051c6:	681a      	ldr	r2, [r3, #0]
 80051c8:	68bb      	ldr	r3, [r7, #8]
 80051ca:	43db      	mvns	r3, r3
 80051cc:	401a      	ands	r2, r3
 80051ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051d0:	601a      	str	r2, [r3, #0]
 80051d2:	e020      	b.n	8005216 <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 80051d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d104      	bne.n	80051e4 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 80051da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051dc:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 80051de:	2301      	movs	r3, #1
 80051e0:	633b      	str	r3, [r7, #48]	; 0x30
 80051e2:	e018      	b.n	8005216 <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d003      	beq.n	80051f2 <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 80051ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051ec:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80051f0:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d003      	beq.n	8005200 <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 80051f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051fa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80051fe:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8005200:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005202:	1d18      	adds	r0, r3, #4
 8005204:	68ba      	ldr	r2, [r7, #8]
 8005206:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005208:	4313      	orrs	r3, r2
 800520a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800520c:	4619      	mov	r1, r3
 800520e:	f001 fbb9 	bl	8006984 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 8005212:	2300      	movs	r3, #0
 8005214:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8005216:	f001 f9cb 	bl	80065b0 <xTaskResumeAll>
 800521a:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 800521c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800521e:	2b00      	cmp	r3, #0
 8005220:	d031      	beq.n	8005286 <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 8005222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005224:	2b00      	cmp	r3, #0
 8005226:	d107      	bne.n	8005238 <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 8005228:	4b19      	ldr	r3, [pc, #100]	; (8005290 <xEventGroupWaitBits+0x198>)
 800522a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800522e:	601a      	str	r2, [r3, #0]
 8005230:	f3bf 8f4f 	dsb	sy
 8005234:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8005238:	f001 feb8 	bl	8006fac <uxTaskResetEventItemValue>
 800523c:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 800523e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005240:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005244:	2b00      	cmp	r3, #0
 8005246:	d11a      	bne.n	800527e <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 8005248:	f002 fbb4 	bl	80079b4 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 800524c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8005252:	683a      	ldr	r2, [r7, #0]
 8005254:	68b9      	ldr	r1, [r7, #8]
 8005256:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8005258:	f000 f931 	bl	80054be <prvTestWaitCondition>
 800525c:	4603      	mov	r3, r0
 800525e:	2b00      	cmp	r3, #0
 8005260:	d009      	beq.n	8005276 <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d006      	beq.n	8005276 <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8005268:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800526a:	681a      	ldr	r2, [r3, #0]
 800526c:	68bb      	ldr	r3, [r7, #8]
 800526e:	43db      	mvns	r3, r3
 8005270:	401a      	ands	r2, r3
 8005272:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005274:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 8005276:	2301      	movs	r3, #1
 8005278:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 800527a:	f002 fbcb 	bl	8007a14 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 800527e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005280:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005284:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 8005286:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005288:	4618      	mov	r0, r3
 800528a:	3740      	adds	r7, #64	; 0x40
 800528c:	46bd      	mov	sp, r7
 800528e:	bd80      	pop	{r7, pc}
 8005290:	e000ed04 	.word	0xe000ed04

08005294 <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
 8005294:	b580      	push	{r7, lr}
 8005296:	b086      	sub	sp, #24
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
 800529c:	6039      	str	r1, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	617b      	str	r3, [r7, #20]
EventBits_t uxReturn;

	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d10a      	bne.n	80052be <xEventGroupClearBits+0x2a>
	__asm volatile
 80052a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052ac:	f383 8811 	msr	BASEPRI, r3
 80052b0:	f3bf 8f6f 	isb	sy
 80052b4:	f3bf 8f4f 	dsb	sy
 80052b8:	60fb      	str	r3, [r7, #12]
}
 80052ba:	bf00      	nop
 80052bc:	e7fe      	b.n	80052bc <xEventGroupClearBits+0x28>
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d00a      	beq.n	80052de <xEventGroupClearBits+0x4a>
	__asm volatile
 80052c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052cc:	f383 8811 	msr	BASEPRI, r3
 80052d0:	f3bf 8f6f 	isb	sy
 80052d4:	f3bf 8f4f 	dsb	sy
 80052d8:	60bb      	str	r3, [r7, #8]
}
 80052da:	bf00      	nop
 80052dc:	e7fe      	b.n	80052dc <xEventGroupClearBits+0x48>

	taskENTER_CRITICAL();
 80052de:	f002 fb69 	bl	80079b4 <vPortEnterCritical>
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
 80052e2:	697b      	ldr	r3, [r7, #20]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	613b      	str	r3, [r7, #16]

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 80052e8:	697b      	ldr	r3, [r7, #20]
 80052ea:	681a      	ldr	r2, [r3, #0]
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	43db      	mvns	r3, r3
 80052f0:	401a      	ands	r2, r3
 80052f2:	697b      	ldr	r3, [r7, #20]
 80052f4:	601a      	str	r2, [r3, #0]
	}
	taskEXIT_CRITICAL();
 80052f6:	f002 fb8d 	bl	8007a14 <vPortExitCritical>

	return uxReturn;
 80052fa:	693b      	ldr	r3, [r7, #16]
}
 80052fc:	4618      	mov	r0, r3
 80052fe:	3718      	adds	r7, #24
 8005300:	46bd      	mov	sp, r7
 8005302:	bd80      	pop	{r7, pc}

08005304 <xEventGroupClearBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupClearBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
	{
 8005304:	b580      	push	{r7, lr}
 8005306:	b084      	sub	sp, #16
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
 800530c:	6039      	str	r1, [r7, #0]
		BaseType_t xReturn;

		traceEVENT_GROUP_CLEAR_BITS_FROM_ISR( xEventGroup, uxBitsToClear );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupClearBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToClear, NULL ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 800530e:	2300      	movs	r3, #0
 8005310:	683a      	ldr	r2, [r7, #0]
 8005312:	6879      	ldr	r1, [r7, #4]
 8005314:	4804      	ldr	r0, [pc, #16]	; (8005328 <xEventGroupClearBitsFromISR+0x24>)
 8005316:	f002 fa03 	bl	8007720 <xTimerPendFunctionCallFromISR>
 800531a:	60f8      	str	r0, [r7, #12]

		return xReturn;
 800531c:	68fb      	ldr	r3, [r7, #12]
	}
 800531e:	4618      	mov	r0, r3
 8005320:	3710      	adds	r7, #16
 8005322:	46bd      	mov	sp, r7
 8005324:	bd80      	pop	{r7, pc}
 8005326:	bf00      	nop
 8005328:	080054a5 	.word	0x080054a5

0800532c <xEventGroupGetBitsFromISR>:

#endif
/*-----------------------------------------------------------*/

EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup )
{
 800532c:	b480      	push	{r7}
 800532e:	b089      	sub	sp, #36	; 0x24
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
UBaseType_t uxSavedInterruptStatus;
EventGroup_t const * const pxEventBits = xEventGroup;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	61fb      	str	r3, [r7, #28]

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005338:	f3ef 8211 	mrs	r2, BASEPRI
 800533c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005340:	f383 8811 	msr	BASEPRI, r3
 8005344:	f3bf 8f6f 	isb	sy
 8005348:	f3bf 8f4f 	dsb	sy
 800534c:	60fa      	str	r2, [r7, #12]
 800534e:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005350:	68fb      	ldr	r3, [r7, #12]
EventBits_t uxReturn;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005352:	61bb      	str	r3, [r7, #24]
	{
		uxReturn = pxEventBits->uxEventBits;
 8005354:	69fb      	ldr	r3, [r7, #28]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	617b      	str	r3, [r7, #20]
 800535a:	69bb      	ldr	r3, [r7, #24]
 800535c:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800535e:	693b      	ldr	r3, [r7, #16]
 8005360:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005364:	bf00      	nop
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return uxReturn;
 8005366:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
 8005368:	4618      	mov	r0, r3
 800536a:	3724      	adds	r7, #36	; 0x24
 800536c:	46bd      	mov	sp, r7
 800536e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005372:	4770      	bx	lr

08005374 <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8005374:	b580      	push	{r7, lr}
 8005376:	b08e      	sub	sp, #56	; 0x38
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
 800537c:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 800537e:	2300      	movs	r3, #0
 8005380:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 8005386:	2300      	movs	r3, #0
 8005388:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d10a      	bne.n	80053a6 <xEventGroupSetBits+0x32>
	__asm volatile
 8005390:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005394:	f383 8811 	msr	BASEPRI, r3
 8005398:	f3bf 8f6f 	isb	sy
 800539c:	f3bf 8f4f 	dsb	sy
 80053a0:	613b      	str	r3, [r7, #16]
}
 80053a2:	bf00      	nop
 80053a4:	e7fe      	b.n	80053a4 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d00a      	beq.n	80053c6 <xEventGroupSetBits+0x52>
	__asm volatile
 80053b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053b4:	f383 8811 	msr	BASEPRI, r3
 80053b8:	f3bf 8f6f 	isb	sy
 80053bc:	f3bf 8f4f 	dsb	sy
 80053c0:	60fb      	str	r3, [r7, #12]
}
 80053c2:	bf00      	nop
 80053c4:	e7fe      	b.n	80053c4 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 80053c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053c8:	3304      	adds	r3, #4
 80053ca:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80053cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ce:	3308      	adds	r3, #8
 80053d0:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 80053d2:	f001 f8df 	bl	8006594 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 80053d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053d8:	68db      	ldr	r3, [r3, #12]
 80053da:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 80053dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053de:	681a      	ldr	r2, [r3, #0]
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	431a      	orrs	r2, r3
 80053e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053e6:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 80053e8:	e03c      	b.n	8005464 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 80053ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053ec:	685b      	ldr	r3, [r3, #4]
 80053ee:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 80053f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 80053f6:	2300      	movs	r3, #0
 80053f8:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 80053fa:	69bb      	ldr	r3, [r7, #24]
 80053fc:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8005400:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8005402:	69bb      	ldr	r3, [r7, #24]
 8005404:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005408:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 800540a:	697b      	ldr	r3, [r7, #20]
 800540c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005410:	2b00      	cmp	r3, #0
 8005412:	d108      	bne.n	8005426 <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8005414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005416:	681a      	ldr	r2, [r3, #0]
 8005418:	69bb      	ldr	r3, [r7, #24]
 800541a:	4013      	ands	r3, r2
 800541c:	2b00      	cmp	r3, #0
 800541e:	d00b      	beq.n	8005438 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 8005420:	2301      	movs	r3, #1
 8005422:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005424:	e008      	b.n	8005438 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8005426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005428:	681a      	ldr	r2, [r3, #0]
 800542a:	69bb      	ldr	r3, [r7, #24]
 800542c:	4013      	ands	r3, r2
 800542e:	69ba      	ldr	r2, [r7, #24]
 8005430:	429a      	cmp	r2, r3
 8005432:	d101      	bne.n	8005438 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8005434:	2301      	movs	r3, #1
 8005436:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8005438:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800543a:	2b00      	cmp	r3, #0
 800543c:	d010      	beq.n	8005460 <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 800543e:	697b      	ldr	r3, [r7, #20]
 8005440:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005444:	2b00      	cmp	r3, #0
 8005446:	d003      	beq.n	8005450 <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8005448:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800544a:	69bb      	ldr	r3, [r7, #24]
 800544c:	4313      	orrs	r3, r2
 800544e:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8005450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005458:	4619      	mov	r1, r3
 800545a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800545c:	f001 fb5e 	bl	8006b1c <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8005460:	69fb      	ldr	r3, [r7, #28]
 8005462:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 8005464:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005466:	6a3b      	ldr	r3, [r7, #32]
 8005468:	429a      	cmp	r2, r3
 800546a:	d1be      	bne.n	80053ea <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 800546c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800546e:	681a      	ldr	r2, [r3, #0]
 8005470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005472:	43db      	mvns	r3, r3
 8005474:	401a      	ands	r2, r3
 8005476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005478:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 800547a:	f001 f899 	bl	80065b0 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 800547e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005480:	681b      	ldr	r3, [r3, #0]
}
 8005482:	4618      	mov	r0, r3
 8005484:	3738      	adds	r7, #56	; 0x38
 8005486:	46bd      	mov	sp, r7
 8005488:	bd80      	pop	{r7, pc}

0800548a <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 800548a:	b580      	push	{r7, lr}
 800548c:	b082      	sub	sp, #8
 800548e:	af00      	add	r7, sp, #0
 8005490:	6078      	str	r0, [r7, #4]
 8005492:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8005494:	6839      	ldr	r1, [r7, #0]
 8005496:	6878      	ldr	r0, [r7, #4]
 8005498:	f7ff ff6c 	bl	8005374 <xEventGroupSetBits>
}
 800549c:	bf00      	nop
 800549e:	3708      	adds	r7, #8
 80054a0:	46bd      	mov	sp, r7
 80054a2:	bd80      	pop	{r7, pc}

080054a4 <vEventGroupClearBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'clear bits' command that was pended from
an interrupt. */
void vEventGroupClearBitsCallback( void *pvEventGroup, const uint32_t ulBitsToClear )
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b082      	sub	sp, #8
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
 80054ac:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 80054ae:	6839      	ldr	r1, [r7, #0]
 80054b0:	6878      	ldr	r0, [r7, #4]
 80054b2:	f7ff feef 	bl	8005294 <xEventGroupClearBits>
}
 80054b6:	bf00      	nop
 80054b8:	3708      	adds	r7, #8
 80054ba:	46bd      	mov	sp, r7
 80054bc:	bd80      	pop	{r7, pc}

080054be <prvTestWaitCondition>:
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 80054be:	b480      	push	{r7}
 80054c0:	b087      	sub	sp, #28
 80054c2:	af00      	add	r7, sp, #0
 80054c4:	60f8      	str	r0, [r7, #12]
 80054c6:	60b9      	str	r1, [r7, #8]
 80054c8:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 80054ca:	2300      	movs	r3, #0
 80054cc:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d107      	bne.n	80054e4 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 80054d4:	68fa      	ldr	r2, [r7, #12]
 80054d6:	68bb      	ldr	r3, [r7, #8]
 80054d8:	4013      	ands	r3, r2
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d00a      	beq.n	80054f4 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 80054de:	2301      	movs	r3, #1
 80054e0:	617b      	str	r3, [r7, #20]
 80054e2:	e007      	b.n	80054f4 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 80054e4:	68fa      	ldr	r2, [r7, #12]
 80054e6:	68bb      	ldr	r3, [r7, #8]
 80054e8:	4013      	ands	r3, r2
 80054ea:	68ba      	ldr	r2, [r7, #8]
 80054ec:	429a      	cmp	r2, r3
 80054ee:	d101      	bne.n	80054f4 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 80054f0:	2301      	movs	r3, #1
 80054f2:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 80054f4:	697b      	ldr	r3, [r7, #20]
}
 80054f6:	4618      	mov	r0, r3
 80054f8:	371c      	adds	r7, #28
 80054fa:	46bd      	mov	sp, r7
 80054fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005500:	4770      	bx	lr
	...

08005504 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8005504:	b580      	push	{r7, lr}
 8005506:	b086      	sub	sp, #24
 8005508:	af00      	add	r7, sp, #0
 800550a:	60f8      	str	r0, [r7, #12]
 800550c:	60b9      	str	r1, [r7, #8]
 800550e:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	68ba      	ldr	r2, [r7, #8]
 8005514:	68f9      	ldr	r1, [r7, #12]
 8005516:	4804      	ldr	r0, [pc, #16]	; (8005528 <xEventGroupSetBitsFromISR+0x24>)
 8005518:	f002 f902 	bl	8007720 <xTimerPendFunctionCallFromISR>
 800551c:	6178      	str	r0, [r7, #20]

		return xReturn;
 800551e:	697b      	ldr	r3, [r7, #20]
	}
 8005520:	4618      	mov	r0, r3
 8005522:	3718      	adds	r7, #24
 8005524:	46bd      	mov	sp, r7
 8005526:	bd80      	pop	{r7, pc}
 8005528:	0800548b 	.word	0x0800548b

0800552c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800552c:	b480      	push	{r7}
 800552e:	b083      	sub	sp, #12
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	f103 0208 	add.w	r2, r3, #8
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005544:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	f103 0208 	add.w	r2, r3, #8
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	f103 0208 	add.w	r2, r3, #8
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2200      	movs	r2, #0
 800555e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005560:	bf00      	nop
 8005562:	370c      	adds	r7, #12
 8005564:	46bd      	mov	sp, r7
 8005566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556a:	4770      	bx	lr

0800556c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800556c:	b480      	push	{r7}
 800556e:	b083      	sub	sp, #12
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2200      	movs	r2, #0
 8005578:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800557a:	bf00      	nop
 800557c:	370c      	adds	r7, #12
 800557e:	46bd      	mov	sp, r7
 8005580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005584:	4770      	bx	lr

08005586 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005586:	b480      	push	{r7}
 8005588:	b085      	sub	sp, #20
 800558a:	af00      	add	r7, sp, #0
 800558c:	6078      	str	r0, [r7, #4]
 800558e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	685b      	ldr	r3, [r3, #4]
 8005594:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	68fa      	ldr	r2, [r7, #12]
 800559a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	689a      	ldr	r2, [r3, #8]
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	689b      	ldr	r3, [r3, #8]
 80055a8:	683a      	ldr	r2, [r7, #0]
 80055aa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	683a      	ldr	r2, [r7, #0]
 80055b0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	687a      	ldr	r2, [r7, #4]
 80055b6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	1c5a      	adds	r2, r3, #1
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	601a      	str	r2, [r3, #0]
}
 80055c2:	bf00      	nop
 80055c4:	3714      	adds	r7, #20
 80055c6:	46bd      	mov	sp, r7
 80055c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055cc:	4770      	bx	lr

080055ce <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80055ce:	b480      	push	{r7}
 80055d0:	b085      	sub	sp, #20
 80055d2:	af00      	add	r7, sp, #0
 80055d4:	6078      	str	r0, [r7, #4]
 80055d6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80055de:	68bb      	ldr	r3, [r7, #8]
 80055e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80055e4:	d103      	bne.n	80055ee <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	691b      	ldr	r3, [r3, #16]
 80055ea:	60fb      	str	r3, [r7, #12]
 80055ec:	e00c      	b.n	8005608 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	3308      	adds	r3, #8
 80055f2:	60fb      	str	r3, [r7, #12]
 80055f4:	e002      	b.n	80055fc <vListInsert+0x2e>
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	685b      	ldr	r3, [r3, #4]
 80055fa:	60fb      	str	r3, [r7, #12]
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	685b      	ldr	r3, [r3, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	68ba      	ldr	r2, [r7, #8]
 8005604:	429a      	cmp	r2, r3
 8005606:	d2f6      	bcs.n	80055f6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	685a      	ldr	r2, [r3, #4]
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	685b      	ldr	r3, [r3, #4]
 8005614:	683a      	ldr	r2, [r7, #0]
 8005616:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	68fa      	ldr	r2, [r7, #12]
 800561c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	683a      	ldr	r2, [r7, #0]
 8005622:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	687a      	ldr	r2, [r7, #4]
 8005628:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	1c5a      	adds	r2, r3, #1
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	601a      	str	r2, [r3, #0]
}
 8005634:	bf00      	nop
 8005636:	3714      	adds	r7, #20
 8005638:	46bd      	mov	sp, r7
 800563a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563e:	4770      	bx	lr

08005640 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005640:	b480      	push	{r7}
 8005642:	b085      	sub	sp, #20
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	691b      	ldr	r3, [r3, #16]
 800564c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	685b      	ldr	r3, [r3, #4]
 8005652:	687a      	ldr	r2, [r7, #4]
 8005654:	6892      	ldr	r2, [r2, #8]
 8005656:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	689b      	ldr	r3, [r3, #8]
 800565c:	687a      	ldr	r2, [r7, #4]
 800565e:	6852      	ldr	r2, [r2, #4]
 8005660:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	685b      	ldr	r3, [r3, #4]
 8005666:	687a      	ldr	r2, [r7, #4]
 8005668:	429a      	cmp	r2, r3
 800566a:	d103      	bne.n	8005674 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	689a      	ldr	r2, [r3, #8]
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2200      	movs	r2, #0
 8005678:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	1e5a      	subs	r2, r3, #1
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
}
 8005688:	4618      	mov	r0, r3
 800568a:	3714      	adds	r7, #20
 800568c:	46bd      	mov	sp, r7
 800568e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005692:	4770      	bx	lr

08005694 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b084      	sub	sp, #16
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
 800569c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d10a      	bne.n	80056be <xQueueGenericReset+0x2a>
	__asm volatile
 80056a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056ac:	f383 8811 	msr	BASEPRI, r3
 80056b0:	f3bf 8f6f 	isb	sy
 80056b4:	f3bf 8f4f 	dsb	sy
 80056b8:	60bb      	str	r3, [r7, #8]
}
 80056ba:	bf00      	nop
 80056bc:	e7fe      	b.n	80056bc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80056be:	f002 f979 	bl	80079b4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681a      	ldr	r2, [r3, #0]
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056ca:	68f9      	ldr	r1, [r7, #12]
 80056cc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80056ce:	fb01 f303 	mul.w	r3, r1, r3
 80056d2:	441a      	add	r2, r3
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	2200      	movs	r2, #0
 80056dc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681a      	ldr	r2, [r3, #0]
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681a      	ldr	r2, [r3, #0]
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056ee:	3b01      	subs	r3, #1
 80056f0:	68f9      	ldr	r1, [r7, #12]
 80056f2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80056f4:	fb01 f303 	mul.w	r3, r1, r3
 80056f8:	441a      	add	r2, r3
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	22ff      	movs	r2, #255	; 0xff
 8005702:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	22ff      	movs	r2, #255	; 0xff
 800570a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d114      	bne.n	800573e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	691b      	ldr	r3, [r3, #16]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d01a      	beq.n	8005752 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	3310      	adds	r3, #16
 8005720:	4618      	mov	r0, r3
 8005722:	f001 f997 	bl	8006a54 <xTaskRemoveFromEventList>
 8005726:	4603      	mov	r3, r0
 8005728:	2b00      	cmp	r3, #0
 800572a:	d012      	beq.n	8005752 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800572c:	4b0c      	ldr	r3, [pc, #48]	; (8005760 <xQueueGenericReset+0xcc>)
 800572e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005732:	601a      	str	r2, [r3, #0]
 8005734:	f3bf 8f4f 	dsb	sy
 8005738:	f3bf 8f6f 	isb	sy
 800573c:	e009      	b.n	8005752 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	3310      	adds	r3, #16
 8005742:	4618      	mov	r0, r3
 8005744:	f7ff fef2 	bl	800552c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	3324      	adds	r3, #36	; 0x24
 800574c:	4618      	mov	r0, r3
 800574e:	f7ff feed 	bl	800552c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005752:	f002 f95f 	bl	8007a14 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005756:	2301      	movs	r3, #1
}
 8005758:	4618      	mov	r0, r3
 800575a:	3710      	adds	r7, #16
 800575c:	46bd      	mov	sp, r7
 800575e:	bd80      	pop	{r7, pc}
 8005760:	e000ed04 	.word	0xe000ed04

08005764 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005764:	b580      	push	{r7, lr}
 8005766:	b08e      	sub	sp, #56	; 0x38
 8005768:	af02      	add	r7, sp, #8
 800576a:	60f8      	str	r0, [r7, #12]
 800576c:	60b9      	str	r1, [r7, #8]
 800576e:	607a      	str	r2, [r7, #4]
 8005770:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d10a      	bne.n	800578e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005778:	f04f 0350 	mov.w	r3, #80	; 0x50
 800577c:	f383 8811 	msr	BASEPRI, r3
 8005780:	f3bf 8f6f 	isb	sy
 8005784:	f3bf 8f4f 	dsb	sy
 8005788:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800578a:	bf00      	nop
 800578c:	e7fe      	b.n	800578c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d10a      	bne.n	80057aa <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005794:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005798:	f383 8811 	msr	BASEPRI, r3
 800579c:	f3bf 8f6f 	isb	sy
 80057a0:	f3bf 8f4f 	dsb	sy
 80057a4:	627b      	str	r3, [r7, #36]	; 0x24
}
 80057a6:	bf00      	nop
 80057a8:	e7fe      	b.n	80057a8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d002      	beq.n	80057b6 <xQueueGenericCreateStatic+0x52>
 80057b0:	68bb      	ldr	r3, [r7, #8]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d001      	beq.n	80057ba <xQueueGenericCreateStatic+0x56>
 80057b6:	2301      	movs	r3, #1
 80057b8:	e000      	b.n	80057bc <xQueueGenericCreateStatic+0x58>
 80057ba:	2300      	movs	r3, #0
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d10a      	bne.n	80057d6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80057c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057c4:	f383 8811 	msr	BASEPRI, r3
 80057c8:	f3bf 8f6f 	isb	sy
 80057cc:	f3bf 8f4f 	dsb	sy
 80057d0:	623b      	str	r3, [r7, #32]
}
 80057d2:	bf00      	nop
 80057d4:	e7fe      	b.n	80057d4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d102      	bne.n	80057e2 <xQueueGenericCreateStatic+0x7e>
 80057dc:	68bb      	ldr	r3, [r7, #8]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d101      	bne.n	80057e6 <xQueueGenericCreateStatic+0x82>
 80057e2:	2301      	movs	r3, #1
 80057e4:	e000      	b.n	80057e8 <xQueueGenericCreateStatic+0x84>
 80057e6:	2300      	movs	r3, #0
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d10a      	bne.n	8005802 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80057ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057f0:	f383 8811 	msr	BASEPRI, r3
 80057f4:	f3bf 8f6f 	isb	sy
 80057f8:	f3bf 8f4f 	dsb	sy
 80057fc:	61fb      	str	r3, [r7, #28]
}
 80057fe:	bf00      	nop
 8005800:	e7fe      	b.n	8005800 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005802:	2350      	movs	r3, #80	; 0x50
 8005804:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005806:	697b      	ldr	r3, [r7, #20]
 8005808:	2b50      	cmp	r3, #80	; 0x50
 800580a:	d00a      	beq.n	8005822 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800580c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005810:	f383 8811 	msr	BASEPRI, r3
 8005814:	f3bf 8f6f 	isb	sy
 8005818:	f3bf 8f4f 	dsb	sy
 800581c:	61bb      	str	r3, [r7, #24]
}
 800581e:	bf00      	nop
 8005820:	e7fe      	b.n	8005820 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005822:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800582a:	2b00      	cmp	r3, #0
 800582c:	d00d      	beq.n	800584a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800582e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005830:	2201      	movs	r2, #1
 8005832:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005836:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800583a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800583c:	9300      	str	r3, [sp, #0]
 800583e:	4613      	mov	r3, r2
 8005840:	687a      	ldr	r2, [r7, #4]
 8005842:	68b9      	ldr	r1, [r7, #8]
 8005844:	68f8      	ldr	r0, [r7, #12]
 8005846:	f000 f83f 	bl	80058c8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800584a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800584c:	4618      	mov	r0, r3
 800584e:	3730      	adds	r7, #48	; 0x30
 8005850:	46bd      	mov	sp, r7
 8005852:	bd80      	pop	{r7, pc}

08005854 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005854:	b580      	push	{r7, lr}
 8005856:	b08a      	sub	sp, #40	; 0x28
 8005858:	af02      	add	r7, sp, #8
 800585a:	60f8      	str	r0, [r7, #12]
 800585c:	60b9      	str	r1, [r7, #8]
 800585e:	4613      	mov	r3, r2
 8005860:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d10a      	bne.n	800587e <xQueueGenericCreate+0x2a>
	__asm volatile
 8005868:	f04f 0350 	mov.w	r3, #80	; 0x50
 800586c:	f383 8811 	msr	BASEPRI, r3
 8005870:	f3bf 8f6f 	isb	sy
 8005874:	f3bf 8f4f 	dsb	sy
 8005878:	613b      	str	r3, [r7, #16]
}
 800587a:	bf00      	nop
 800587c:	e7fe      	b.n	800587c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	68ba      	ldr	r2, [r7, #8]
 8005882:	fb02 f303 	mul.w	r3, r2, r3
 8005886:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005888:	69fb      	ldr	r3, [r7, #28]
 800588a:	3350      	adds	r3, #80	; 0x50
 800588c:	4618      	mov	r0, r3
 800588e:	f002 f9b3 	bl	8007bf8 <pvPortMalloc>
 8005892:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005894:	69bb      	ldr	r3, [r7, #24]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d011      	beq.n	80058be <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800589a:	69bb      	ldr	r3, [r7, #24]
 800589c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800589e:	697b      	ldr	r3, [r7, #20]
 80058a0:	3350      	adds	r3, #80	; 0x50
 80058a2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80058a4:	69bb      	ldr	r3, [r7, #24]
 80058a6:	2200      	movs	r2, #0
 80058a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80058ac:	79fa      	ldrb	r2, [r7, #7]
 80058ae:	69bb      	ldr	r3, [r7, #24]
 80058b0:	9300      	str	r3, [sp, #0]
 80058b2:	4613      	mov	r3, r2
 80058b4:	697a      	ldr	r2, [r7, #20]
 80058b6:	68b9      	ldr	r1, [r7, #8]
 80058b8:	68f8      	ldr	r0, [r7, #12]
 80058ba:	f000 f805 	bl	80058c8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80058be:	69bb      	ldr	r3, [r7, #24]
	}
 80058c0:	4618      	mov	r0, r3
 80058c2:	3720      	adds	r7, #32
 80058c4:	46bd      	mov	sp, r7
 80058c6:	bd80      	pop	{r7, pc}

080058c8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b084      	sub	sp, #16
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	60f8      	str	r0, [r7, #12]
 80058d0:	60b9      	str	r1, [r7, #8]
 80058d2:	607a      	str	r2, [r7, #4]
 80058d4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80058d6:	68bb      	ldr	r3, [r7, #8]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d103      	bne.n	80058e4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80058dc:	69bb      	ldr	r3, [r7, #24]
 80058de:	69ba      	ldr	r2, [r7, #24]
 80058e0:	601a      	str	r2, [r3, #0]
 80058e2:	e002      	b.n	80058ea <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80058e4:	69bb      	ldr	r3, [r7, #24]
 80058e6:	687a      	ldr	r2, [r7, #4]
 80058e8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80058ea:	69bb      	ldr	r3, [r7, #24]
 80058ec:	68fa      	ldr	r2, [r7, #12]
 80058ee:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80058f0:	69bb      	ldr	r3, [r7, #24]
 80058f2:	68ba      	ldr	r2, [r7, #8]
 80058f4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80058f6:	2101      	movs	r1, #1
 80058f8:	69b8      	ldr	r0, [r7, #24]
 80058fa:	f7ff fecb 	bl	8005694 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80058fe:	69bb      	ldr	r3, [r7, #24]
 8005900:	78fa      	ldrb	r2, [r7, #3]
 8005902:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005906:	bf00      	nop
 8005908:	3710      	adds	r7, #16
 800590a:	46bd      	mov	sp, r7
 800590c:	bd80      	pop	{r7, pc}
	...

08005910 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b08e      	sub	sp, #56	; 0x38
 8005914:	af00      	add	r7, sp, #0
 8005916:	60f8      	str	r0, [r7, #12]
 8005918:	60b9      	str	r1, [r7, #8]
 800591a:	607a      	str	r2, [r7, #4]
 800591c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800591e:	2300      	movs	r3, #0
 8005920:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005928:	2b00      	cmp	r3, #0
 800592a:	d10a      	bne.n	8005942 <xQueueGenericSend+0x32>
	__asm volatile
 800592c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005930:	f383 8811 	msr	BASEPRI, r3
 8005934:	f3bf 8f6f 	isb	sy
 8005938:	f3bf 8f4f 	dsb	sy
 800593c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800593e:	bf00      	nop
 8005940:	e7fe      	b.n	8005940 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005942:	68bb      	ldr	r3, [r7, #8]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d103      	bne.n	8005950 <xQueueGenericSend+0x40>
 8005948:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800594a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800594c:	2b00      	cmp	r3, #0
 800594e:	d101      	bne.n	8005954 <xQueueGenericSend+0x44>
 8005950:	2301      	movs	r3, #1
 8005952:	e000      	b.n	8005956 <xQueueGenericSend+0x46>
 8005954:	2300      	movs	r3, #0
 8005956:	2b00      	cmp	r3, #0
 8005958:	d10a      	bne.n	8005970 <xQueueGenericSend+0x60>
	__asm volatile
 800595a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800595e:	f383 8811 	msr	BASEPRI, r3
 8005962:	f3bf 8f6f 	isb	sy
 8005966:	f3bf 8f4f 	dsb	sy
 800596a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800596c:	bf00      	nop
 800596e:	e7fe      	b.n	800596e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	2b02      	cmp	r3, #2
 8005974:	d103      	bne.n	800597e <xQueueGenericSend+0x6e>
 8005976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005978:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800597a:	2b01      	cmp	r3, #1
 800597c:	d101      	bne.n	8005982 <xQueueGenericSend+0x72>
 800597e:	2301      	movs	r3, #1
 8005980:	e000      	b.n	8005984 <xQueueGenericSend+0x74>
 8005982:	2300      	movs	r3, #0
 8005984:	2b00      	cmp	r3, #0
 8005986:	d10a      	bne.n	800599e <xQueueGenericSend+0x8e>
	__asm volatile
 8005988:	f04f 0350 	mov.w	r3, #80	; 0x50
 800598c:	f383 8811 	msr	BASEPRI, r3
 8005990:	f3bf 8f6f 	isb	sy
 8005994:	f3bf 8f4f 	dsb	sy
 8005998:	623b      	str	r3, [r7, #32]
}
 800599a:	bf00      	nop
 800599c:	e7fe      	b.n	800599c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800599e:	f001 fa79 	bl	8006e94 <xTaskGetSchedulerState>
 80059a2:	4603      	mov	r3, r0
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d102      	bne.n	80059ae <xQueueGenericSend+0x9e>
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d101      	bne.n	80059b2 <xQueueGenericSend+0xa2>
 80059ae:	2301      	movs	r3, #1
 80059b0:	e000      	b.n	80059b4 <xQueueGenericSend+0xa4>
 80059b2:	2300      	movs	r3, #0
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d10a      	bne.n	80059ce <xQueueGenericSend+0xbe>
	__asm volatile
 80059b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059bc:	f383 8811 	msr	BASEPRI, r3
 80059c0:	f3bf 8f6f 	isb	sy
 80059c4:	f3bf 8f4f 	dsb	sy
 80059c8:	61fb      	str	r3, [r7, #28]
}
 80059ca:	bf00      	nop
 80059cc:	e7fe      	b.n	80059cc <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80059ce:	f001 fff1 	bl	80079b4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80059d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80059d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059da:	429a      	cmp	r2, r3
 80059dc:	d302      	bcc.n	80059e4 <xQueueGenericSend+0xd4>
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	2b02      	cmp	r3, #2
 80059e2:	d129      	bne.n	8005a38 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80059e4:	683a      	ldr	r2, [r7, #0]
 80059e6:	68b9      	ldr	r1, [r7, #8]
 80059e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80059ea:	f000 fa29 	bl	8005e40 <prvCopyDataToQueue>
 80059ee:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80059f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d010      	beq.n	8005a1a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80059f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059fa:	3324      	adds	r3, #36	; 0x24
 80059fc:	4618      	mov	r0, r3
 80059fe:	f001 f829 	bl	8006a54 <xTaskRemoveFromEventList>
 8005a02:	4603      	mov	r3, r0
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d013      	beq.n	8005a30 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005a08:	4b3f      	ldr	r3, [pc, #252]	; (8005b08 <xQueueGenericSend+0x1f8>)
 8005a0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a0e:	601a      	str	r2, [r3, #0]
 8005a10:	f3bf 8f4f 	dsb	sy
 8005a14:	f3bf 8f6f 	isb	sy
 8005a18:	e00a      	b.n	8005a30 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005a1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d007      	beq.n	8005a30 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005a20:	4b39      	ldr	r3, [pc, #228]	; (8005b08 <xQueueGenericSend+0x1f8>)
 8005a22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a26:	601a      	str	r2, [r3, #0]
 8005a28:	f3bf 8f4f 	dsb	sy
 8005a2c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005a30:	f001 fff0 	bl	8007a14 <vPortExitCritical>
				return pdPASS;
 8005a34:	2301      	movs	r3, #1
 8005a36:	e063      	b.n	8005b00 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d103      	bne.n	8005a46 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005a3e:	f001 ffe9 	bl	8007a14 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005a42:	2300      	movs	r3, #0
 8005a44:	e05c      	b.n	8005b00 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005a46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d106      	bne.n	8005a5a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005a4c:	f107 0314 	add.w	r3, r7, #20
 8005a50:	4618      	mov	r0, r3
 8005a52:	f001 f8c5 	bl	8006be0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005a56:	2301      	movs	r3, #1
 8005a58:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005a5a:	f001 ffdb 	bl	8007a14 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005a5e:	f000 fd99 	bl	8006594 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005a62:	f001 ffa7 	bl	80079b4 <vPortEnterCritical>
 8005a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a68:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005a6c:	b25b      	sxtb	r3, r3
 8005a6e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005a72:	d103      	bne.n	8005a7c <xQueueGenericSend+0x16c>
 8005a74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a76:	2200      	movs	r2, #0
 8005a78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a7e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005a82:	b25b      	sxtb	r3, r3
 8005a84:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005a88:	d103      	bne.n	8005a92 <xQueueGenericSend+0x182>
 8005a8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005a92:	f001 ffbf 	bl	8007a14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005a96:	1d3a      	adds	r2, r7, #4
 8005a98:	f107 0314 	add.w	r3, r7, #20
 8005a9c:	4611      	mov	r1, r2
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	f001 f8b4 	bl	8006c0c <xTaskCheckForTimeOut>
 8005aa4:	4603      	mov	r3, r0
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d124      	bne.n	8005af4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005aaa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005aac:	f000 fac0 	bl	8006030 <prvIsQueueFull>
 8005ab0:	4603      	mov	r3, r0
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d018      	beq.n	8005ae8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005ab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ab8:	3310      	adds	r3, #16
 8005aba:	687a      	ldr	r2, [r7, #4]
 8005abc:	4611      	mov	r1, r2
 8005abe:	4618      	mov	r0, r3
 8005ac0:	f000 ff3c 	bl	800693c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005ac4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005ac6:	f000 fa4b 	bl	8005f60 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005aca:	f000 fd71 	bl	80065b0 <xTaskResumeAll>
 8005ace:	4603      	mov	r3, r0
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	f47f af7c 	bne.w	80059ce <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8005ad6:	4b0c      	ldr	r3, [pc, #48]	; (8005b08 <xQueueGenericSend+0x1f8>)
 8005ad8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005adc:	601a      	str	r2, [r3, #0]
 8005ade:	f3bf 8f4f 	dsb	sy
 8005ae2:	f3bf 8f6f 	isb	sy
 8005ae6:	e772      	b.n	80059ce <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005ae8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005aea:	f000 fa39 	bl	8005f60 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005aee:	f000 fd5f 	bl	80065b0 <xTaskResumeAll>
 8005af2:	e76c      	b.n	80059ce <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005af4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005af6:	f000 fa33 	bl	8005f60 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005afa:	f000 fd59 	bl	80065b0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005afe:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005b00:	4618      	mov	r0, r3
 8005b02:	3738      	adds	r7, #56	; 0x38
 8005b04:	46bd      	mov	sp, r7
 8005b06:	bd80      	pop	{r7, pc}
 8005b08:	e000ed04 	.word	0xe000ed04

08005b0c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b090      	sub	sp, #64	; 0x40
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	60f8      	str	r0, [r7, #12]
 8005b14:	60b9      	str	r1, [r7, #8]
 8005b16:	607a      	str	r2, [r7, #4]
 8005b18:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8005b1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d10a      	bne.n	8005b3a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005b24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b28:	f383 8811 	msr	BASEPRI, r3
 8005b2c:	f3bf 8f6f 	isb	sy
 8005b30:	f3bf 8f4f 	dsb	sy
 8005b34:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005b36:	bf00      	nop
 8005b38:	e7fe      	b.n	8005b38 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005b3a:	68bb      	ldr	r3, [r7, #8]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d103      	bne.n	8005b48 <xQueueGenericSendFromISR+0x3c>
 8005b40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d101      	bne.n	8005b4c <xQueueGenericSendFromISR+0x40>
 8005b48:	2301      	movs	r3, #1
 8005b4a:	e000      	b.n	8005b4e <xQueueGenericSendFromISR+0x42>
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d10a      	bne.n	8005b68 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8005b52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b56:	f383 8811 	msr	BASEPRI, r3
 8005b5a:	f3bf 8f6f 	isb	sy
 8005b5e:	f3bf 8f4f 	dsb	sy
 8005b62:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005b64:	bf00      	nop
 8005b66:	e7fe      	b.n	8005b66 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	2b02      	cmp	r3, #2
 8005b6c:	d103      	bne.n	8005b76 <xQueueGenericSendFromISR+0x6a>
 8005b6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b72:	2b01      	cmp	r3, #1
 8005b74:	d101      	bne.n	8005b7a <xQueueGenericSendFromISR+0x6e>
 8005b76:	2301      	movs	r3, #1
 8005b78:	e000      	b.n	8005b7c <xQueueGenericSendFromISR+0x70>
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d10a      	bne.n	8005b96 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005b80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b84:	f383 8811 	msr	BASEPRI, r3
 8005b88:	f3bf 8f6f 	isb	sy
 8005b8c:	f3bf 8f4f 	dsb	sy
 8005b90:	623b      	str	r3, [r7, #32]
}
 8005b92:	bf00      	nop
 8005b94:	e7fe      	b.n	8005b94 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005b96:	f001 ffef 	bl	8007b78 <vPortValidateInterruptPriority>
	__asm volatile
 8005b9a:	f3ef 8211 	mrs	r2, BASEPRI
 8005b9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ba2:	f383 8811 	msr	BASEPRI, r3
 8005ba6:	f3bf 8f6f 	isb	sy
 8005baa:	f3bf 8f4f 	dsb	sy
 8005bae:	61fa      	str	r2, [r7, #28]
 8005bb0:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8005bb2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005bb4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005bb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bb8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005bba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bbe:	429a      	cmp	r2, r3
 8005bc0:	d302      	bcc.n	8005bc8 <xQueueGenericSendFromISR+0xbc>
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	2b02      	cmp	r3, #2
 8005bc6:	d12f      	bne.n	8005c28 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005bc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005bce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005bd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bd6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005bd8:	683a      	ldr	r2, [r7, #0]
 8005bda:	68b9      	ldr	r1, [r7, #8]
 8005bdc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005bde:	f000 f92f 	bl	8005e40 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005be2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8005be6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005bea:	d112      	bne.n	8005c12 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005bec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d016      	beq.n	8005c22 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005bf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bf6:	3324      	adds	r3, #36	; 0x24
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	f000 ff2b 	bl	8006a54 <xTaskRemoveFromEventList>
 8005bfe:	4603      	mov	r3, r0
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d00e      	beq.n	8005c22 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d00b      	beq.n	8005c22 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	2201      	movs	r2, #1
 8005c0e:	601a      	str	r2, [r3, #0]
 8005c10:	e007      	b.n	8005c22 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005c12:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005c16:	3301      	adds	r3, #1
 8005c18:	b2db      	uxtb	r3, r3
 8005c1a:	b25a      	sxtb	r2, r3
 8005c1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005c22:	2301      	movs	r3, #1
 8005c24:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8005c26:	e001      	b.n	8005c2c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005c28:	2300      	movs	r3, #0
 8005c2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005c2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c2e:	617b      	str	r3, [r7, #20]
	__asm volatile
 8005c30:	697b      	ldr	r3, [r7, #20]
 8005c32:	f383 8811 	msr	BASEPRI, r3
}
 8005c36:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005c38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	3740      	adds	r7, #64	; 0x40
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	bd80      	pop	{r7, pc}
	...

08005c44 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b08c      	sub	sp, #48	; 0x30
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	60f8      	str	r0, [r7, #12]
 8005c4c:	60b9      	str	r1, [r7, #8]
 8005c4e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005c50:	2300      	movs	r3, #0
 8005c52:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005c58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d10a      	bne.n	8005c74 <xQueueReceive+0x30>
	__asm volatile
 8005c5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c62:	f383 8811 	msr	BASEPRI, r3
 8005c66:	f3bf 8f6f 	isb	sy
 8005c6a:	f3bf 8f4f 	dsb	sy
 8005c6e:	623b      	str	r3, [r7, #32]
}
 8005c70:	bf00      	nop
 8005c72:	e7fe      	b.n	8005c72 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005c74:	68bb      	ldr	r3, [r7, #8]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d103      	bne.n	8005c82 <xQueueReceive+0x3e>
 8005c7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d101      	bne.n	8005c86 <xQueueReceive+0x42>
 8005c82:	2301      	movs	r3, #1
 8005c84:	e000      	b.n	8005c88 <xQueueReceive+0x44>
 8005c86:	2300      	movs	r3, #0
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d10a      	bne.n	8005ca2 <xQueueReceive+0x5e>
	__asm volatile
 8005c8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c90:	f383 8811 	msr	BASEPRI, r3
 8005c94:	f3bf 8f6f 	isb	sy
 8005c98:	f3bf 8f4f 	dsb	sy
 8005c9c:	61fb      	str	r3, [r7, #28]
}
 8005c9e:	bf00      	nop
 8005ca0:	e7fe      	b.n	8005ca0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005ca2:	f001 f8f7 	bl	8006e94 <xTaskGetSchedulerState>
 8005ca6:	4603      	mov	r3, r0
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d102      	bne.n	8005cb2 <xQueueReceive+0x6e>
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d101      	bne.n	8005cb6 <xQueueReceive+0x72>
 8005cb2:	2301      	movs	r3, #1
 8005cb4:	e000      	b.n	8005cb8 <xQueueReceive+0x74>
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d10a      	bne.n	8005cd2 <xQueueReceive+0x8e>
	__asm volatile
 8005cbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cc0:	f383 8811 	msr	BASEPRI, r3
 8005cc4:	f3bf 8f6f 	isb	sy
 8005cc8:	f3bf 8f4f 	dsb	sy
 8005ccc:	61bb      	str	r3, [r7, #24]
}
 8005cce:	bf00      	nop
 8005cd0:	e7fe      	b.n	8005cd0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005cd2:	f001 fe6f 	bl	80079b4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005cd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cda:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d01f      	beq.n	8005d22 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005ce2:	68b9      	ldr	r1, [r7, #8]
 8005ce4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005ce6:	f000 f915 	bl	8005f14 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cec:	1e5a      	subs	r2, r3, #1
 8005cee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cf0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005cf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cf4:	691b      	ldr	r3, [r3, #16]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d00f      	beq.n	8005d1a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005cfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cfc:	3310      	adds	r3, #16
 8005cfe:	4618      	mov	r0, r3
 8005d00:	f000 fea8 	bl	8006a54 <xTaskRemoveFromEventList>
 8005d04:	4603      	mov	r3, r0
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d007      	beq.n	8005d1a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005d0a:	4b3d      	ldr	r3, [pc, #244]	; (8005e00 <xQueueReceive+0x1bc>)
 8005d0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d10:	601a      	str	r2, [r3, #0]
 8005d12:	f3bf 8f4f 	dsb	sy
 8005d16:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005d1a:	f001 fe7b 	bl	8007a14 <vPortExitCritical>
				return pdPASS;
 8005d1e:	2301      	movs	r3, #1
 8005d20:	e069      	b.n	8005df6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d103      	bne.n	8005d30 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005d28:	f001 fe74 	bl	8007a14 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	e062      	b.n	8005df6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005d30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d106      	bne.n	8005d44 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005d36:	f107 0310 	add.w	r3, r7, #16
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	f000 ff50 	bl	8006be0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005d40:	2301      	movs	r3, #1
 8005d42:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005d44:	f001 fe66 	bl	8007a14 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005d48:	f000 fc24 	bl	8006594 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005d4c:	f001 fe32 	bl	80079b4 <vPortEnterCritical>
 8005d50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d52:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005d56:	b25b      	sxtb	r3, r3
 8005d58:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005d5c:	d103      	bne.n	8005d66 <xQueueReceive+0x122>
 8005d5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d60:	2200      	movs	r2, #0
 8005d62:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d68:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005d6c:	b25b      	sxtb	r3, r3
 8005d6e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005d72:	d103      	bne.n	8005d7c <xQueueReceive+0x138>
 8005d74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d76:	2200      	movs	r2, #0
 8005d78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005d7c:	f001 fe4a 	bl	8007a14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005d80:	1d3a      	adds	r2, r7, #4
 8005d82:	f107 0310 	add.w	r3, r7, #16
 8005d86:	4611      	mov	r1, r2
 8005d88:	4618      	mov	r0, r3
 8005d8a:	f000 ff3f 	bl	8006c0c <xTaskCheckForTimeOut>
 8005d8e:	4603      	mov	r3, r0
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d123      	bne.n	8005ddc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005d94:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d96:	f000 f935 	bl	8006004 <prvIsQueueEmpty>
 8005d9a:	4603      	mov	r3, r0
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d017      	beq.n	8005dd0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005da0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005da2:	3324      	adds	r3, #36	; 0x24
 8005da4:	687a      	ldr	r2, [r7, #4]
 8005da6:	4611      	mov	r1, r2
 8005da8:	4618      	mov	r0, r3
 8005daa:	f000 fdc7 	bl	800693c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005dae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005db0:	f000 f8d6 	bl	8005f60 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005db4:	f000 fbfc 	bl	80065b0 <xTaskResumeAll>
 8005db8:	4603      	mov	r3, r0
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d189      	bne.n	8005cd2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005dbe:	4b10      	ldr	r3, [pc, #64]	; (8005e00 <xQueueReceive+0x1bc>)
 8005dc0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005dc4:	601a      	str	r2, [r3, #0]
 8005dc6:	f3bf 8f4f 	dsb	sy
 8005dca:	f3bf 8f6f 	isb	sy
 8005dce:	e780      	b.n	8005cd2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005dd0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005dd2:	f000 f8c5 	bl	8005f60 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005dd6:	f000 fbeb 	bl	80065b0 <xTaskResumeAll>
 8005dda:	e77a      	b.n	8005cd2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005ddc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005dde:	f000 f8bf 	bl	8005f60 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005de2:	f000 fbe5 	bl	80065b0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005de6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005de8:	f000 f90c 	bl	8006004 <prvIsQueueEmpty>
 8005dec:	4603      	mov	r3, r0
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	f43f af6f 	beq.w	8005cd2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005df4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005df6:	4618      	mov	r0, r3
 8005df8:	3730      	adds	r7, #48	; 0x30
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	bd80      	pop	{r7, pc}
 8005dfe:	bf00      	nop
 8005e00:	e000ed04 	.word	0xe000ed04

08005e04 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b084      	sub	sp, #16
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d10a      	bne.n	8005e28 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 8005e12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e16:	f383 8811 	msr	BASEPRI, r3
 8005e1a:	f3bf 8f6f 	isb	sy
 8005e1e:	f3bf 8f4f 	dsb	sy
 8005e22:	60bb      	str	r3, [r7, #8]
}
 8005e24:	bf00      	nop
 8005e26:	e7fe      	b.n	8005e26 <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 8005e28:	f001 fdc4 	bl	80079b4 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e30:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8005e32:	f001 fdef 	bl	8007a14 <vPortExitCritical>

	return uxReturn;
 8005e36:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8005e38:	4618      	mov	r0, r3
 8005e3a:	3710      	adds	r7, #16
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	bd80      	pop	{r7, pc}

08005e40 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b086      	sub	sp, #24
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	60f8      	str	r0, [r7, #12]
 8005e48:	60b9      	str	r1, [r7, #8]
 8005e4a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e54:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d10d      	bne.n	8005e7a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d14d      	bne.n	8005f02 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	689b      	ldr	r3, [r3, #8]
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	f001 f830 	bl	8006ed0 <xTaskPriorityDisinherit>
 8005e70:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	2200      	movs	r2, #0
 8005e76:	609a      	str	r2, [r3, #8]
 8005e78:	e043      	b.n	8005f02 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d119      	bne.n	8005eb4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	6858      	ldr	r0, [r3, #4]
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e88:	461a      	mov	r2, r3
 8005e8a:	68b9      	ldr	r1, [r7, #8]
 8005e8c:	f002 f8c2 	bl	8008014 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	685a      	ldr	r2, [r3, #4]
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e98:	441a      	add	r2, r3
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	685a      	ldr	r2, [r3, #4]
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	689b      	ldr	r3, [r3, #8]
 8005ea6:	429a      	cmp	r2, r3
 8005ea8:	d32b      	bcc.n	8005f02 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	681a      	ldr	r2, [r3, #0]
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	605a      	str	r2, [r3, #4]
 8005eb2:	e026      	b.n	8005f02 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	68d8      	ldr	r0, [r3, #12]
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ebc:	461a      	mov	r2, r3
 8005ebe:	68b9      	ldr	r1, [r7, #8]
 8005ec0:	f002 f8a8 	bl	8008014 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	68da      	ldr	r2, [r3, #12]
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ecc:	425b      	negs	r3, r3
 8005ece:	441a      	add	r2, r3
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	68da      	ldr	r2, [r3, #12]
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	429a      	cmp	r2, r3
 8005ede:	d207      	bcs.n	8005ef0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	689a      	ldr	r2, [r3, #8]
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ee8:	425b      	negs	r3, r3
 8005eea:	441a      	add	r2, r3
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2b02      	cmp	r3, #2
 8005ef4:	d105      	bne.n	8005f02 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005ef6:	693b      	ldr	r3, [r7, #16]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d002      	beq.n	8005f02 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005efc:	693b      	ldr	r3, [r7, #16]
 8005efe:	3b01      	subs	r3, #1
 8005f00:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005f02:	693b      	ldr	r3, [r7, #16]
 8005f04:	1c5a      	adds	r2, r3, #1
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005f0a:	697b      	ldr	r3, [r7, #20]
}
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	3718      	adds	r7, #24
 8005f10:	46bd      	mov	sp, r7
 8005f12:	bd80      	pop	{r7, pc}

08005f14 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b082      	sub	sp, #8
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
 8005f1c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d018      	beq.n	8005f58 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	68da      	ldr	r2, [r3, #12]
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f2e:	441a      	add	r2, r3
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	68da      	ldr	r2, [r3, #12]
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	689b      	ldr	r3, [r3, #8]
 8005f3c:	429a      	cmp	r2, r3
 8005f3e:	d303      	bcc.n	8005f48 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681a      	ldr	r2, [r3, #0]
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	68d9      	ldr	r1, [r3, #12]
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f50:	461a      	mov	r2, r3
 8005f52:	6838      	ldr	r0, [r7, #0]
 8005f54:	f002 f85e 	bl	8008014 <memcpy>
	}
}
 8005f58:	bf00      	nop
 8005f5a:	3708      	adds	r7, #8
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	bd80      	pop	{r7, pc}

08005f60 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b084      	sub	sp, #16
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005f68:	f001 fd24 	bl	80079b4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005f72:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005f74:	e011      	b.n	8005f9a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d012      	beq.n	8005fa4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	3324      	adds	r3, #36	; 0x24
 8005f82:	4618      	mov	r0, r3
 8005f84:	f000 fd66 	bl	8006a54 <xTaskRemoveFromEventList>
 8005f88:	4603      	mov	r3, r0
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d001      	beq.n	8005f92 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005f8e:	f000 fe9f 	bl	8006cd0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005f92:	7bfb      	ldrb	r3, [r7, #15]
 8005f94:	3b01      	subs	r3, #1
 8005f96:	b2db      	uxtb	r3, r3
 8005f98:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005f9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	dce9      	bgt.n	8005f76 <prvUnlockQueue+0x16>
 8005fa2:	e000      	b.n	8005fa6 <prvUnlockQueue+0x46>
					break;
 8005fa4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	22ff      	movs	r2, #255	; 0xff
 8005faa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005fae:	f001 fd31 	bl	8007a14 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005fb2:	f001 fcff 	bl	80079b4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005fbc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005fbe:	e011      	b.n	8005fe4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	691b      	ldr	r3, [r3, #16]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d012      	beq.n	8005fee <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	3310      	adds	r3, #16
 8005fcc:	4618      	mov	r0, r3
 8005fce:	f000 fd41 	bl	8006a54 <xTaskRemoveFromEventList>
 8005fd2:	4603      	mov	r3, r0
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d001      	beq.n	8005fdc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005fd8:	f000 fe7a 	bl	8006cd0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005fdc:	7bbb      	ldrb	r3, [r7, #14]
 8005fde:	3b01      	subs	r3, #1
 8005fe0:	b2db      	uxtb	r3, r3
 8005fe2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005fe4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	dce9      	bgt.n	8005fc0 <prvUnlockQueue+0x60>
 8005fec:	e000      	b.n	8005ff0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005fee:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	22ff      	movs	r2, #255	; 0xff
 8005ff4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005ff8:	f001 fd0c 	bl	8007a14 <vPortExitCritical>
}
 8005ffc:	bf00      	nop
 8005ffe:	3710      	adds	r7, #16
 8006000:	46bd      	mov	sp, r7
 8006002:	bd80      	pop	{r7, pc}

08006004 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006004:	b580      	push	{r7, lr}
 8006006:	b084      	sub	sp, #16
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800600c:	f001 fcd2 	bl	80079b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006014:	2b00      	cmp	r3, #0
 8006016:	d102      	bne.n	800601e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006018:	2301      	movs	r3, #1
 800601a:	60fb      	str	r3, [r7, #12]
 800601c:	e001      	b.n	8006022 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800601e:	2300      	movs	r3, #0
 8006020:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006022:	f001 fcf7 	bl	8007a14 <vPortExitCritical>

	return xReturn;
 8006026:	68fb      	ldr	r3, [r7, #12]
}
 8006028:	4618      	mov	r0, r3
 800602a:	3710      	adds	r7, #16
 800602c:	46bd      	mov	sp, r7
 800602e:	bd80      	pop	{r7, pc}

08006030 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006030:	b580      	push	{r7, lr}
 8006032:	b084      	sub	sp, #16
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006038:	f001 fcbc 	bl	80079b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006044:	429a      	cmp	r2, r3
 8006046:	d102      	bne.n	800604e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006048:	2301      	movs	r3, #1
 800604a:	60fb      	str	r3, [r7, #12]
 800604c:	e001      	b.n	8006052 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800604e:	2300      	movs	r3, #0
 8006050:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006052:	f001 fcdf 	bl	8007a14 <vPortExitCritical>

	return xReturn;
 8006056:	68fb      	ldr	r3, [r7, #12]
}
 8006058:	4618      	mov	r0, r3
 800605a:	3710      	adds	r7, #16
 800605c:	46bd      	mov	sp, r7
 800605e:	bd80      	pop	{r7, pc}

08006060 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006060:	b480      	push	{r7}
 8006062:	b085      	sub	sp, #20
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
 8006068:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800606a:	2300      	movs	r3, #0
 800606c:	60fb      	str	r3, [r7, #12]
 800606e:	e014      	b.n	800609a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006070:	4a0f      	ldr	r2, [pc, #60]	; (80060b0 <vQueueAddToRegistry+0x50>)
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006078:	2b00      	cmp	r3, #0
 800607a:	d10b      	bne.n	8006094 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800607c:	490c      	ldr	r1, [pc, #48]	; (80060b0 <vQueueAddToRegistry+0x50>)
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	683a      	ldr	r2, [r7, #0]
 8006082:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006086:	4a0a      	ldr	r2, [pc, #40]	; (80060b0 <vQueueAddToRegistry+0x50>)
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	00db      	lsls	r3, r3, #3
 800608c:	4413      	add	r3, r2
 800608e:	687a      	ldr	r2, [r7, #4]
 8006090:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006092:	e006      	b.n	80060a2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	3301      	adds	r3, #1
 8006098:	60fb      	str	r3, [r7, #12]
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	2b07      	cmp	r3, #7
 800609e:	d9e7      	bls.n	8006070 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80060a0:	bf00      	nop
 80060a2:	bf00      	nop
 80060a4:	3714      	adds	r7, #20
 80060a6:	46bd      	mov	sp, r7
 80060a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ac:	4770      	bx	lr
 80060ae:	bf00      	nop
 80060b0:	20004adc 	.word	0x20004adc

080060b4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b086      	sub	sp, #24
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	60f8      	str	r0, [r7, #12]
 80060bc:	60b9      	str	r1, [r7, #8]
 80060be:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80060c4:	f001 fc76 	bl	80079b4 <vPortEnterCritical>
 80060c8:	697b      	ldr	r3, [r7, #20]
 80060ca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80060ce:	b25b      	sxtb	r3, r3
 80060d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80060d4:	d103      	bne.n	80060de <vQueueWaitForMessageRestricted+0x2a>
 80060d6:	697b      	ldr	r3, [r7, #20]
 80060d8:	2200      	movs	r2, #0
 80060da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80060de:	697b      	ldr	r3, [r7, #20]
 80060e0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80060e4:	b25b      	sxtb	r3, r3
 80060e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80060ea:	d103      	bne.n	80060f4 <vQueueWaitForMessageRestricted+0x40>
 80060ec:	697b      	ldr	r3, [r7, #20]
 80060ee:	2200      	movs	r2, #0
 80060f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80060f4:	f001 fc8e 	bl	8007a14 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80060f8:	697b      	ldr	r3, [r7, #20]
 80060fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d106      	bne.n	800610e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006100:	697b      	ldr	r3, [r7, #20]
 8006102:	3324      	adds	r3, #36	; 0x24
 8006104:	687a      	ldr	r2, [r7, #4]
 8006106:	68b9      	ldr	r1, [r7, #8]
 8006108:	4618      	mov	r0, r3
 800610a:	f000 fc77 	bl	80069fc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800610e:	6978      	ldr	r0, [r7, #20]
 8006110:	f7ff ff26 	bl	8005f60 <prvUnlockQueue>
	}
 8006114:	bf00      	nop
 8006116:	3718      	adds	r7, #24
 8006118:	46bd      	mov	sp, r7
 800611a:	bd80      	pop	{r7, pc}

0800611c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800611c:	b580      	push	{r7, lr}
 800611e:	b08e      	sub	sp, #56	; 0x38
 8006120:	af04      	add	r7, sp, #16
 8006122:	60f8      	str	r0, [r7, #12]
 8006124:	60b9      	str	r1, [r7, #8]
 8006126:	607a      	str	r2, [r7, #4]
 8006128:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800612a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800612c:	2b00      	cmp	r3, #0
 800612e:	d10a      	bne.n	8006146 <xTaskCreateStatic+0x2a>
	__asm volatile
 8006130:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006134:	f383 8811 	msr	BASEPRI, r3
 8006138:	f3bf 8f6f 	isb	sy
 800613c:	f3bf 8f4f 	dsb	sy
 8006140:	623b      	str	r3, [r7, #32]
}
 8006142:	bf00      	nop
 8006144:	e7fe      	b.n	8006144 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006146:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006148:	2b00      	cmp	r3, #0
 800614a:	d10a      	bne.n	8006162 <xTaskCreateStatic+0x46>
	__asm volatile
 800614c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006150:	f383 8811 	msr	BASEPRI, r3
 8006154:	f3bf 8f6f 	isb	sy
 8006158:	f3bf 8f4f 	dsb	sy
 800615c:	61fb      	str	r3, [r7, #28]
}
 800615e:	bf00      	nop
 8006160:	e7fe      	b.n	8006160 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006162:	235c      	movs	r3, #92	; 0x5c
 8006164:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006166:	693b      	ldr	r3, [r7, #16]
 8006168:	2b5c      	cmp	r3, #92	; 0x5c
 800616a:	d00a      	beq.n	8006182 <xTaskCreateStatic+0x66>
	__asm volatile
 800616c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006170:	f383 8811 	msr	BASEPRI, r3
 8006174:	f3bf 8f6f 	isb	sy
 8006178:	f3bf 8f4f 	dsb	sy
 800617c:	61bb      	str	r3, [r7, #24]
}
 800617e:	bf00      	nop
 8006180:	e7fe      	b.n	8006180 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006182:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006184:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006186:	2b00      	cmp	r3, #0
 8006188:	d01e      	beq.n	80061c8 <xTaskCreateStatic+0xac>
 800618a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800618c:	2b00      	cmp	r3, #0
 800618e:	d01b      	beq.n	80061c8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006190:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006192:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006196:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006198:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800619a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800619c:	2202      	movs	r2, #2
 800619e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80061a2:	2300      	movs	r3, #0
 80061a4:	9303      	str	r3, [sp, #12]
 80061a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061a8:	9302      	str	r3, [sp, #8]
 80061aa:	f107 0314 	add.w	r3, r7, #20
 80061ae:	9301      	str	r3, [sp, #4]
 80061b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061b2:	9300      	str	r3, [sp, #0]
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	687a      	ldr	r2, [r7, #4]
 80061b8:	68b9      	ldr	r1, [r7, #8]
 80061ba:	68f8      	ldr	r0, [r7, #12]
 80061bc:	f000 f850 	bl	8006260 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80061c0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80061c2:	f000 f8dd 	bl	8006380 <prvAddNewTaskToReadyList>
 80061c6:	e001      	b.n	80061cc <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80061c8:	2300      	movs	r3, #0
 80061ca:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80061cc:	697b      	ldr	r3, [r7, #20]
	}
 80061ce:	4618      	mov	r0, r3
 80061d0:	3728      	adds	r7, #40	; 0x28
 80061d2:	46bd      	mov	sp, r7
 80061d4:	bd80      	pop	{r7, pc}

080061d6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80061d6:	b580      	push	{r7, lr}
 80061d8:	b08c      	sub	sp, #48	; 0x30
 80061da:	af04      	add	r7, sp, #16
 80061dc:	60f8      	str	r0, [r7, #12]
 80061de:	60b9      	str	r1, [r7, #8]
 80061e0:	603b      	str	r3, [r7, #0]
 80061e2:	4613      	mov	r3, r2
 80061e4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80061e6:	88fb      	ldrh	r3, [r7, #6]
 80061e8:	009b      	lsls	r3, r3, #2
 80061ea:	4618      	mov	r0, r3
 80061ec:	f001 fd04 	bl	8007bf8 <pvPortMalloc>
 80061f0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80061f2:	697b      	ldr	r3, [r7, #20]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d00e      	beq.n	8006216 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80061f8:	205c      	movs	r0, #92	; 0x5c
 80061fa:	f001 fcfd 	bl	8007bf8 <pvPortMalloc>
 80061fe:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006200:	69fb      	ldr	r3, [r7, #28]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d003      	beq.n	800620e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006206:	69fb      	ldr	r3, [r7, #28]
 8006208:	697a      	ldr	r2, [r7, #20]
 800620a:	631a      	str	r2, [r3, #48]	; 0x30
 800620c:	e005      	b.n	800621a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800620e:	6978      	ldr	r0, [r7, #20]
 8006210:	f001 fdbe 	bl	8007d90 <vPortFree>
 8006214:	e001      	b.n	800621a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006216:	2300      	movs	r3, #0
 8006218:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800621a:	69fb      	ldr	r3, [r7, #28]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d017      	beq.n	8006250 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006220:	69fb      	ldr	r3, [r7, #28]
 8006222:	2200      	movs	r2, #0
 8006224:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006228:	88fa      	ldrh	r2, [r7, #6]
 800622a:	2300      	movs	r3, #0
 800622c:	9303      	str	r3, [sp, #12]
 800622e:	69fb      	ldr	r3, [r7, #28]
 8006230:	9302      	str	r3, [sp, #8]
 8006232:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006234:	9301      	str	r3, [sp, #4]
 8006236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006238:	9300      	str	r3, [sp, #0]
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	68b9      	ldr	r1, [r7, #8]
 800623e:	68f8      	ldr	r0, [r7, #12]
 8006240:	f000 f80e 	bl	8006260 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006244:	69f8      	ldr	r0, [r7, #28]
 8006246:	f000 f89b 	bl	8006380 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800624a:	2301      	movs	r3, #1
 800624c:	61bb      	str	r3, [r7, #24]
 800624e:	e002      	b.n	8006256 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006250:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006254:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006256:	69bb      	ldr	r3, [r7, #24]
	}
 8006258:	4618      	mov	r0, r3
 800625a:	3720      	adds	r7, #32
 800625c:	46bd      	mov	sp, r7
 800625e:	bd80      	pop	{r7, pc}

08006260 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006260:	b580      	push	{r7, lr}
 8006262:	b088      	sub	sp, #32
 8006264:	af00      	add	r7, sp, #0
 8006266:	60f8      	str	r0, [r7, #12]
 8006268:	60b9      	str	r1, [r7, #8]
 800626a:	607a      	str	r2, [r7, #4]
 800626c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800626e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006270:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	009b      	lsls	r3, r3, #2
 8006276:	461a      	mov	r2, r3
 8006278:	21a5      	movs	r1, #165	; 0xa5
 800627a:	f001 fed9 	bl	8008030 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800627e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006280:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006288:	3b01      	subs	r3, #1
 800628a:	009b      	lsls	r3, r3, #2
 800628c:	4413      	add	r3, r2
 800628e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006290:	69bb      	ldr	r3, [r7, #24]
 8006292:	f023 0307 	bic.w	r3, r3, #7
 8006296:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006298:	69bb      	ldr	r3, [r7, #24]
 800629a:	f003 0307 	and.w	r3, r3, #7
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d00a      	beq.n	80062b8 <prvInitialiseNewTask+0x58>
	__asm volatile
 80062a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062a6:	f383 8811 	msr	BASEPRI, r3
 80062aa:	f3bf 8f6f 	isb	sy
 80062ae:	f3bf 8f4f 	dsb	sy
 80062b2:	617b      	str	r3, [r7, #20]
}
 80062b4:	bf00      	nop
 80062b6:	e7fe      	b.n	80062b6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80062b8:	68bb      	ldr	r3, [r7, #8]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d01f      	beq.n	80062fe <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80062be:	2300      	movs	r3, #0
 80062c0:	61fb      	str	r3, [r7, #28]
 80062c2:	e012      	b.n	80062ea <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80062c4:	68ba      	ldr	r2, [r7, #8]
 80062c6:	69fb      	ldr	r3, [r7, #28]
 80062c8:	4413      	add	r3, r2
 80062ca:	7819      	ldrb	r1, [r3, #0]
 80062cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80062ce:	69fb      	ldr	r3, [r7, #28]
 80062d0:	4413      	add	r3, r2
 80062d2:	3334      	adds	r3, #52	; 0x34
 80062d4:	460a      	mov	r2, r1
 80062d6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80062d8:	68ba      	ldr	r2, [r7, #8]
 80062da:	69fb      	ldr	r3, [r7, #28]
 80062dc:	4413      	add	r3, r2
 80062de:	781b      	ldrb	r3, [r3, #0]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d006      	beq.n	80062f2 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80062e4:	69fb      	ldr	r3, [r7, #28]
 80062e6:	3301      	adds	r3, #1
 80062e8:	61fb      	str	r3, [r7, #28]
 80062ea:	69fb      	ldr	r3, [r7, #28]
 80062ec:	2b0f      	cmp	r3, #15
 80062ee:	d9e9      	bls.n	80062c4 <prvInitialiseNewTask+0x64>
 80062f0:	e000      	b.n	80062f4 <prvInitialiseNewTask+0x94>
			{
				break;
 80062f2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80062f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062f6:	2200      	movs	r2, #0
 80062f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80062fc:	e003      	b.n	8006306 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80062fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006300:	2200      	movs	r2, #0
 8006302:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006308:	2b37      	cmp	r3, #55	; 0x37
 800630a:	d901      	bls.n	8006310 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800630c:	2337      	movs	r3, #55	; 0x37
 800630e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006312:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006314:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006318:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800631a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800631c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800631e:	2200      	movs	r2, #0
 8006320:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006324:	3304      	adds	r3, #4
 8006326:	4618      	mov	r0, r3
 8006328:	f7ff f920 	bl	800556c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800632c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800632e:	3318      	adds	r3, #24
 8006330:	4618      	mov	r0, r3
 8006332:	f7ff f91b 	bl	800556c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006338:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800633a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800633c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800633e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006344:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006348:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800634a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800634c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800634e:	2200      	movs	r2, #0
 8006350:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006354:	2200      	movs	r2, #0
 8006356:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800635a:	683a      	ldr	r2, [r7, #0]
 800635c:	68f9      	ldr	r1, [r7, #12]
 800635e:	69b8      	ldr	r0, [r7, #24]
 8006360:	f001 f9fe 	bl	8007760 <pxPortInitialiseStack>
 8006364:	4602      	mov	r2, r0
 8006366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006368:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800636a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800636c:	2b00      	cmp	r3, #0
 800636e:	d002      	beq.n	8006376 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006372:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006374:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006376:	bf00      	nop
 8006378:	3720      	adds	r7, #32
 800637a:	46bd      	mov	sp, r7
 800637c:	bd80      	pop	{r7, pc}
	...

08006380 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006380:	b580      	push	{r7, lr}
 8006382:	b082      	sub	sp, #8
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006388:	f001 fb14 	bl	80079b4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800638c:	4b2d      	ldr	r3, [pc, #180]	; (8006444 <prvAddNewTaskToReadyList+0xc4>)
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	3301      	adds	r3, #1
 8006392:	4a2c      	ldr	r2, [pc, #176]	; (8006444 <prvAddNewTaskToReadyList+0xc4>)
 8006394:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006396:	4b2c      	ldr	r3, [pc, #176]	; (8006448 <prvAddNewTaskToReadyList+0xc8>)
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d109      	bne.n	80063b2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800639e:	4a2a      	ldr	r2, [pc, #168]	; (8006448 <prvAddNewTaskToReadyList+0xc8>)
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80063a4:	4b27      	ldr	r3, [pc, #156]	; (8006444 <prvAddNewTaskToReadyList+0xc4>)
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	2b01      	cmp	r3, #1
 80063aa:	d110      	bne.n	80063ce <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80063ac:	f000 fcb4 	bl	8006d18 <prvInitialiseTaskLists>
 80063b0:	e00d      	b.n	80063ce <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80063b2:	4b26      	ldr	r3, [pc, #152]	; (800644c <prvAddNewTaskToReadyList+0xcc>)
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d109      	bne.n	80063ce <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80063ba:	4b23      	ldr	r3, [pc, #140]	; (8006448 <prvAddNewTaskToReadyList+0xc8>)
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063c4:	429a      	cmp	r2, r3
 80063c6:	d802      	bhi.n	80063ce <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80063c8:	4a1f      	ldr	r2, [pc, #124]	; (8006448 <prvAddNewTaskToReadyList+0xc8>)
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80063ce:	4b20      	ldr	r3, [pc, #128]	; (8006450 <prvAddNewTaskToReadyList+0xd0>)
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	3301      	adds	r3, #1
 80063d4:	4a1e      	ldr	r2, [pc, #120]	; (8006450 <prvAddNewTaskToReadyList+0xd0>)
 80063d6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80063d8:	4b1d      	ldr	r3, [pc, #116]	; (8006450 <prvAddNewTaskToReadyList+0xd0>)
 80063da:	681a      	ldr	r2, [r3, #0]
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063e4:	4b1b      	ldr	r3, [pc, #108]	; (8006454 <prvAddNewTaskToReadyList+0xd4>)
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	429a      	cmp	r2, r3
 80063ea:	d903      	bls.n	80063f4 <prvAddNewTaskToReadyList+0x74>
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063f0:	4a18      	ldr	r2, [pc, #96]	; (8006454 <prvAddNewTaskToReadyList+0xd4>)
 80063f2:	6013      	str	r3, [r2, #0]
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063f8:	4613      	mov	r3, r2
 80063fa:	009b      	lsls	r3, r3, #2
 80063fc:	4413      	add	r3, r2
 80063fe:	009b      	lsls	r3, r3, #2
 8006400:	4a15      	ldr	r2, [pc, #84]	; (8006458 <prvAddNewTaskToReadyList+0xd8>)
 8006402:	441a      	add	r2, r3
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	3304      	adds	r3, #4
 8006408:	4619      	mov	r1, r3
 800640a:	4610      	mov	r0, r2
 800640c:	f7ff f8bb 	bl	8005586 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006410:	f001 fb00 	bl	8007a14 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006414:	4b0d      	ldr	r3, [pc, #52]	; (800644c <prvAddNewTaskToReadyList+0xcc>)
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d00e      	beq.n	800643a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800641c:	4b0a      	ldr	r3, [pc, #40]	; (8006448 <prvAddNewTaskToReadyList+0xc8>)
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006426:	429a      	cmp	r2, r3
 8006428:	d207      	bcs.n	800643a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800642a:	4b0c      	ldr	r3, [pc, #48]	; (800645c <prvAddNewTaskToReadyList+0xdc>)
 800642c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006430:	601a      	str	r2, [r3, #0]
 8006432:	f3bf 8f4f 	dsb	sy
 8006436:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800643a:	bf00      	nop
 800643c:	3708      	adds	r7, #8
 800643e:	46bd      	mov	sp, r7
 8006440:	bd80      	pop	{r7, pc}
 8006442:	bf00      	nop
 8006444:	20000bc0 	.word	0x20000bc0
 8006448:	200006ec 	.word	0x200006ec
 800644c:	20000bcc 	.word	0x20000bcc
 8006450:	20000bdc 	.word	0x20000bdc
 8006454:	20000bc8 	.word	0x20000bc8
 8006458:	200006f0 	.word	0x200006f0
 800645c:	e000ed04 	.word	0xe000ed04

08006460 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006460:	b580      	push	{r7, lr}
 8006462:	b084      	sub	sp, #16
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006468:	2300      	movs	r3, #0
 800646a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d017      	beq.n	80064a2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006472:	4b13      	ldr	r3, [pc, #76]	; (80064c0 <vTaskDelay+0x60>)
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d00a      	beq.n	8006490 <vTaskDelay+0x30>
	__asm volatile
 800647a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800647e:	f383 8811 	msr	BASEPRI, r3
 8006482:	f3bf 8f6f 	isb	sy
 8006486:	f3bf 8f4f 	dsb	sy
 800648a:	60bb      	str	r3, [r7, #8]
}
 800648c:	bf00      	nop
 800648e:	e7fe      	b.n	800648e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006490:	f000 f880 	bl	8006594 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006494:	2100      	movs	r1, #0
 8006496:	6878      	ldr	r0, [r7, #4]
 8006498:	f000 fda0 	bl	8006fdc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800649c:	f000 f888 	bl	80065b0 <xTaskResumeAll>
 80064a0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d107      	bne.n	80064b8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80064a8:	4b06      	ldr	r3, [pc, #24]	; (80064c4 <vTaskDelay+0x64>)
 80064aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064ae:	601a      	str	r2, [r3, #0]
 80064b0:	f3bf 8f4f 	dsb	sy
 80064b4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80064b8:	bf00      	nop
 80064ba:	3710      	adds	r7, #16
 80064bc:	46bd      	mov	sp, r7
 80064be:	bd80      	pop	{r7, pc}
 80064c0:	20000be8 	.word	0x20000be8
 80064c4:	e000ed04 	.word	0xe000ed04

080064c8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b08a      	sub	sp, #40	; 0x28
 80064cc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80064ce:	2300      	movs	r3, #0
 80064d0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80064d2:	2300      	movs	r3, #0
 80064d4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80064d6:	463a      	mov	r2, r7
 80064d8:	1d39      	adds	r1, r7, #4
 80064da:	f107 0308 	add.w	r3, r7, #8
 80064de:	4618      	mov	r0, r3
 80064e0:	f7fe fd84 	bl	8004fec <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80064e4:	6839      	ldr	r1, [r7, #0]
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	68ba      	ldr	r2, [r7, #8]
 80064ea:	9202      	str	r2, [sp, #8]
 80064ec:	9301      	str	r3, [sp, #4]
 80064ee:	2300      	movs	r3, #0
 80064f0:	9300      	str	r3, [sp, #0]
 80064f2:	2300      	movs	r3, #0
 80064f4:	460a      	mov	r2, r1
 80064f6:	4921      	ldr	r1, [pc, #132]	; (800657c <vTaskStartScheduler+0xb4>)
 80064f8:	4821      	ldr	r0, [pc, #132]	; (8006580 <vTaskStartScheduler+0xb8>)
 80064fa:	f7ff fe0f 	bl	800611c <xTaskCreateStatic>
 80064fe:	4603      	mov	r3, r0
 8006500:	4a20      	ldr	r2, [pc, #128]	; (8006584 <vTaskStartScheduler+0xbc>)
 8006502:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006504:	4b1f      	ldr	r3, [pc, #124]	; (8006584 <vTaskStartScheduler+0xbc>)
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d002      	beq.n	8006512 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800650c:	2301      	movs	r3, #1
 800650e:	617b      	str	r3, [r7, #20]
 8006510:	e001      	b.n	8006516 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006512:	2300      	movs	r3, #0
 8006514:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006516:	697b      	ldr	r3, [r7, #20]
 8006518:	2b01      	cmp	r3, #1
 800651a:	d102      	bne.n	8006522 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800651c:	f000 fdb2 	bl	8007084 <xTimerCreateTimerTask>
 8006520:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006522:	697b      	ldr	r3, [r7, #20]
 8006524:	2b01      	cmp	r3, #1
 8006526:	d116      	bne.n	8006556 <vTaskStartScheduler+0x8e>
	__asm volatile
 8006528:	f04f 0350 	mov.w	r3, #80	; 0x50
 800652c:	f383 8811 	msr	BASEPRI, r3
 8006530:	f3bf 8f6f 	isb	sy
 8006534:	f3bf 8f4f 	dsb	sy
 8006538:	613b      	str	r3, [r7, #16]
}
 800653a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800653c:	4b12      	ldr	r3, [pc, #72]	; (8006588 <vTaskStartScheduler+0xc0>)
 800653e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006542:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006544:	4b11      	ldr	r3, [pc, #68]	; (800658c <vTaskStartScheduler+0xc4>)
 8006546:	2201      	movs	r2, #1
 8006548:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800654a:	4b11      	ldr	r3, [pc, #68]	; (8006590 <vTaskStartScheduler+0xc8>)
 800654c:	2200      	movs	r2, #0
 800654e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006550:	f001 f98e 	bl	8007870 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006554:	e00e      	b.n	8006574 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006556:	697b      	ldr	r3, [r7, #20]
 8006558:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800655c:	d10a      	bne.n	8006574 <vTaskStartScheduler+0xac>
	__asm volatile
 800655e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006562:	f383 8811 	msr	BASEPRI, r3
 8006566:	f3bf 8f6f 	isb	sy
 800656a:	f3bf 8f4f 	dsb	sy
 800656e:	60fb      	str	r3, [r7, #12]
}
 8006570:	bf00      	nop
 8006572:	e7fe      	b.n	8006572 <vTaskStartScheduler+0xaa>
}
 8006574:	bf00      	nop
 8006576:	3718      	adds	r7, #24
 8006578:	46bd      	mov	sp, r7
 800657a:	bd80      	pop	{r7, pc}
 800657c:	080080dc 	.word	0x080080dc
 8006580:	08006ce9 	.word	0x08006ce9
 8006584:	20000be4 	.word	0x20000be4
 8006588:	20000be0 	.word	0x20000be0
 800658c:	20000bcc 	.word	0x20000bcc
 8006590:	20000bc4 	.word	0x20000bc4

08006594 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006594:	b480      	push	{r7}
 8006596:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006598:	4b04      	ldr	r3, [pc, #16]	; (80065ac <vTaskSuspendAll+0x18>)
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	3301      	adds	r3, #1
 800659e:	4a03      	ldr	r2, [pc, #12]	; (80065ac <vTaskSuspendAll+0x18>)
 80065a0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80065a2:	bf00      	nop
 80065a4:	46bd      	mov	sp, r7
 80065a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065aa:	4770      	bx	lr
 80065ac:	20000be8 	.word	0x20000be8

080065b0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80065b0:	b580      	push	{r7, lr}
 80065b2:	b084      	sub	sp, #16
 80065b4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80065b6:	2300      	movs	r3, #0
 80065b8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80065ba:	2300      	movs	r3, #0
 80065bc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80065be:	4b42      	ldr	r3, [pc, #264]	; (80066c8 <xTaskResumeAll+0x118>)
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d10a      	bne.n	80065dc <xTaskResumeAll+0x2c>
	__asm volatile
 80065c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065ca:	f383 8811 	msr	BASEPRI, r3
 80065ce:	f3bf 8f6f 	isb	sy
 80065d2:	f3bf 8f4f 	dsb	sy
 80065d6:	603b      	str	r3, [r7, #0]
}
 80065d8:	bf00      	nop
 80065da:	e7fe      	b.n	80065da <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80065dc:	f001 f9ea 	bl	80079b4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80065e0:	4b39      	ldr	r3, [pc, #228]	; (80066c8 <xTaskResumeAll+0x118>)
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	3b01      	subs	r3, #1
 80065e6:	4a38      	ldr	r2, [pc, #224]	; (80066c8 <xTaskResumeAll+0x118>)
 80065e8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80065ea:	4b37      	ldr	r3, [pc, #220]	; (80066c8 <xTaskResumeAll+0x118>)
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d162      	bne.n	80066b8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80065f2:	4b36      	ldr	r3, [pc, #216]	; (80066cc <xTaskResumeAll+0x11c>)
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d05e      	beq.n	80066b8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80065fa:	e02f      	b.n	800665c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80065fc:	4b34      	ldr	r3, [pc, #208]	; (80066d0 <xTaskResumeAll+0x120>)
 80065fe:	68db      	ldr	r3, [r3, #12]
 8006600:	68db      	ldr	r3, [r3, #12]
 8006602:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	3318      	adds	r3, #24
 8006608:	4618      	mov	r0, r3
 800660a:	f7ff f819 	bl	8005640 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	3304      	adds	r3, #4
 8006612:	4618      	mov	r0, r3
 8006614:	f7ff f814 	bl	8005640 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800661c:	4b2d      	ldr	r3, [pc, #180]	; (80066d4 <xTaskResumeAll+0x124>)
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	429a      	cmp	r2, r3
 8006622:	d903      	bls.n	800662c <xTaskResumeAll+0x7c>
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006628:	4a2a      	ldr	r2, [pc, #168]	; (80066d4 <xTaskResumeAll+0x124>)
 800662a:	6013      	str	r3, [r2, #0]
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006630:	4613      	mov	r3, r2
 8006632:	009b      	lsls	r3, r3, #2
 8006634:	4413      	add	r3, r2
 8006636:	009b      	lsls	r3, r3, #2
 8006638:	4a27      	ldr	r2, [pc, #156]	; (80066d8 <xTaskResumeAll+0x128>)
 800663a:	441a      	add	r2, r3
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	3304      	adds	r3, #4
 8006640:	4619      	mov	r1, r3
 8006642:	4610      	mov	r0, r2
 8006644:	f7fe ff9f 	bl	8005586 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800664c:	4b23      	ldr	r3, [pc, #140]	; (80066dc <xTaskResumeAll+0x12c>)
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006652:	429a      	cmp	r2, r3
 8006654:	d302      	bcc.n	800665c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8006656:	4b22      	ldr	r3, [pc, #136]	; (80066e0 <xTaskResumeAll+0x130>)
 8006658:	2201      	movs	r2, #1
 800665a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800665c:	4b1c      	ldr	r3, [pc, #112]	; (80066d0 <xTaskResumeAll+0x120>)
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d1cb      	bne.n	80065fc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	2b00      	cmp	r3, #0
 8006668:	d001      	beq.n	800666e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800666a:	f000 fbf3 	bl	8006e54 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800666e:	4b1d      	ldr	r3, [pc, #116]	; (80066e4 <xTaskResumeAll+0x134>)
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d010      	beq.n	800669c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800667a:	f000 f847 	bl	800670c <xTaskIncrementTick>
 800667e:	4603      	mov	r3, r0
 8006680:	2b00      	cmp	r3, #0
 8006682:	d002      	beq.n	800668a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006684:	4b16      	ldr	r3, [pc, #88]	; (80066e0 <xTaskResumeAll+0x130>)
 8006686:	2201      	movs	r2, #1
 8006688:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	3b01      	subs	r3, #1
 800668e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d1f1      	bne.n	800667a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8006696:	4b13      	ldr	r3, [pc, #76]	; (80066e4 <xTaskResumeAll+0x134>)
 8006698:	2200      	movs	r2, #0
 800669a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800669c:	4b10      	ldr	r3, [pc, #64]	; (80066e0 <xTaskResumeAll+0x130>)
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d009      	beq.n	80066b8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80066a4:	2301      	movs	r3, #1
 80066a6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80066a8:	4b0f      	ldr	r3, [pc, #60]	; (80066e8 <xTaskResumeAll+0x138>)
 80066aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80066ae:	601a      	str	r2, [r3, #0]
 80066b0:	f3bf 8f4f 	dsb	sy
 80066b4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80066b8:	f001 f9ac 	bl	8007a14 <vPortExitCritical>

	return xAlreadyYielded;
 80066bc:	68bb      	ldr	r3, [r7, #8]
}
 80066be:	4618      	mov	r0, r3
 80066c0:	3710      	adds	r7, #16
 80066c2:	46bd      	mov	sp, r7
 80066c4:	bd80      	pop	{r7, pc}
 80066c6:	bf00      	nop
 80066c8:	20000be8 	.word	0x20000be8
 80066cc:	20000bc0 	.word	0x20000bc0
 80066d0:	20000b80 	.word	0x20000b80
 80066d4:	20000bc8 	.word	0x20000bc8
 80066d8:	200006f0 	.word	0x200006f0
 80066dc:	200006ec 	.word	0x200006ec
 80066e0:	20000bd4 	.word	0x20000bd4
 80066e4:	20000bd0 	.word	0x20000bd0
 80066e8:	e000ed04 	.word	0xe000ed04

080066ec <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80066ec:	b480      	push	{r7}
 80066ee:	b083      	sub	sp, #12
 80066f0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80066f2:	4b05      	ldr	r3, [pc, #20]	; (8006708 <xTaskGetTickCount+0x1c>)
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80066f8:	687b      	ldr	r3, [r7, #4]
}
 80066fa:	4618      	mov	r0, r3
 80066fc:	370c      	adds	r7, #12
 80066fe:	46bd      	mov	sp, r7
 8006700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006704:	4770      	bx	lr
 8006706:	bf00      	nop
 8006708:	20000bc4 	.word	0x20000bc4

0800670c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800670c:	b580      	push	{r7, lr}
 800670e:	b086      	sub	sp, #24
 8006710:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006712:	2300      	movs	r3, #0
 8006714:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006716:	4b4f      	ldr	r3, [pc, #316]	; (8006854 <xTaskIncrementTick+0x148>)
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	2b00      	cmp	r3, #0
 800671c:	f040 808f 	bne.w	800683e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006720:	4b4d      	ldr	r3, [pc, #308]	; (8006858 <xTaskIncrementTick+0x14c>)
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	3301      	adds	r3, #1
 8006726:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006728:	4a4b      	ldr	r2, [pc, #300]	; (8006858 <xTaskIncrementTick+0x14c>)
 800672a:	693b      	ldr	r3, [r7, #16]
 800672c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800672e:	693b      	ldr	r3, [r7, #16]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d120      	bne.n	8006776 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006734:	4b49      	ldr	r3, [pc, #292]	; (800685c <xTaskIncrementTick+0x150>)
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	2b00      	cmp	r3, #0
 800673c:	d00a      	beq.n	8006754 <xTaskIncrementTick+0x48>
	__asm volatile
 800673e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006742:	f383 8811 	msr	BASEPRI, r3
 8006746:	f3bf 8f6f 	isb	sy
 800674a:	f3bf 8f4f 	dsb	sy
 800674e:	603b      	str	r3, [r7, #0]
}
 8006750:	bf00      	nop
 8006752:	e7fe      	b.n	8006752 <xTaskIncrementTick+0x46>
 8006754:	4b41      	ldr	r3, [pc, #260]	; (800685c <xTaskIncrementTick+0x150>)
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	60fb      	str	r3, [r7, #12]
 800675a:	4b41      	ldr	r3, [pc, #260]	; (8006860 <xTaskIncrementTick+0x154>)
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	4a3f      	ldr	r2, [pc, #252]	; (800685c <xTaskIncrementTick+0x150>)
 8006760:	6013      	str	r3, [r2, #0]
 8006762:	4a3f      	ldr	r2, [pc, #252]	; (8006860 <xTaskIncrementTick+0x154>)
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	6013      	str	r3, [r2, #0]
 8006768:	4b3e      	ldr	r3, [pc, #248]	; (8006864 <xTaskIncrementTick+0x158>)
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	3301      	adds	r3, #1
 800676e:	4a3d      	ldr	r2, [pc, #244]	; (8006864 <xTaskIncrementTick+0x158>)
 8006770:	6013      	str	r3, [r2, #0]
 8006772:	f000 fb6f 	bl	8006e54 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006776:	4b3c      	ldr	r3, [pc, #240]	; (8006868 <xTaskIncrementTick+0x15c>)
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	693a      	ldr	r2, [r7, #16]
 800677c:	429a      	cmp	r2, r3
 800677e:	d349      	bcc.n	8006814 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006780:	4b36      	ldr	r3, [pc, #216]	; (800685c <xTaskIncrementTick+0x150>)
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d104      	bne.n	8006794 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800678a:	4b37      	ldr	r3, [pc, #220]	; (8006868 <xTaskIncrementTick+0x15c>)
 800678c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006790:	601a      	str	r2, [r3, #0]
					break;
 8006792:	e03f      	b.n	8006814 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006794:	4b31      	ldr	r3, [pc, #196]	; (800685c <xTaskIncrementTick+0x150>)
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	68db      	ldr	r3, [r3, #12]
 800679a:	68db      	ldr	r3, [r3, #12]
 800679c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800679e:	68bb      	ldr	r3, [r7, #8]
 80067a0:	685b      	ldr	r3, [r3, #4]
 80067a2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80067a4:	693a      	ldr	r2, [r7, #16]
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	429a      	cmp	r2, r3
 80067aa:	d203      	bcs.n	80067b4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80067ac:	4a2e      	ldr	r2, [pc, #184]	; (8006868 <xTaskIncrementTick+0x15c>)
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80067b2:	e02f      	b.n	8006814 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80067b4:	68bb      	ldr	r3, [r7, #8]
 80067b6:	3304      	adds	r3, #4
 80067b8:	4618      	mov	r0, r3
 80067ba:	f7fe ff41 	bl	8005640 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80067be:	68bb      	ldr	r3, [r7, #8]
 80067c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d004      	beq.n	80067d0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80067c6:	68bb      	ldr	r3, [r7, #8]
 80067c8:	3318      	adds	r3, #24
 80067ca:	4618      	mov	r0, r3
 80067cc:	f7fe ff38 	bl	8005640 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80067d0:	68bb      	ldr	r3, [r7, #8]
 80067d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067d4:	4b25      	ldr	r3, [pc, #148]	; (800686c <xTaskIncrementTick+0x160>)
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	429a      	cmp	r2, r3
 80067da:	d903      	bls.n	80067e4 <xTaskIncrementTick+0xd8>
 80067dc:	68bb      	ldr	r3, [r7, #8]
 80067de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067e0:	4a22      	ldr	r2, [pc, #136]	; (800686c <xTaskIncrementTick+0x160>)
 80067e2:	6013      	str	r3, [r2, #0]
 80067e4:	68bb      	ldr	r3, [r7, #8]
 80067e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067e8:	4613      	mov	r3, r2
 80067ea:	009b      	lsls	r3, r3, #2
 80067ec:	4413      	add	r3, r2
 80067ee:	009b      	lsls	r3, r3, #2
 80067f0:	4a1f      	ldr	r2, [pc, #124]	; (8006870 <xTaskIncrementTick+0x164>)
 80067f2:	441a      	add	r2, r3
 80067f4:	68bb      	ldr	r3, [r7, #8]
 80067f6:	3304      	adds	r3, #4
 80067f8:	4619      	mov	r1, r3
 80067fa:	4610      	mov	r0, r2
 80067fc:	f7fe fec3 	bl	8005586 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006800:	68bb      	ldr	r3, [r7, #8]
 8006802:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006804:	4b1b      	ldr	r3, [pc, #108]	; (8006874 <xTaskIncrementTick+0x168>)
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800680a:	429a      	cmp	r2, r3
 800680c:	d3b8      	bcc.n	8006780 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800680e:	2301      	movs	r3, #1
 8006810:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006812:	e7b5      	b.n	8006780 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006814:	4b17      	ldr	r3, [pc, #92]	; (8006874 <xTaskIncrementTick+0x168>)
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800681a:	4915      	ldr	r1, [pc, #84]	; (8006870 <xTaskIncrementTick+0x164>)
 800681c:	4613      	mov	r3, r2
 800681e:	009b      	lsls	r3, r3, #2
 8006820:	4413      	add	r3, r2
 8006822:	009b      	lsls	r3, r3, #2
 8006824:	440b      	add	r3, r1
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	2b01      	cmp	r3, #1
 800682a:	d901      	bls.n	8006830 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800682c:	2301      	movs	r3, #1
 800682e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006830:	4b11      	ldr	r3, [pc, #68]	; (8006878 <xTaskIncrementTick+0x16c>)
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d007      	beq.n	8006848 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8006838:	2301      	movs	r3, #1
 800683a:	617b      	str	r3, [r7, #20]
 800683c:	e004      	b.n	8006848 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800683e:	4b0f      	ldr	r3, [pc, #60]	; (800687c <xTaskIncrementTick+0x170>)
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	3301      	adds	r3, #1
 8006844:	4a0d      	ldr	r2, [pc, #52]	; (800687c <xTaskIncrementTick+0x170>)
 8006846:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006848:	697b      	ldr	r3, [r7, #20]
}
 800684a:	4618      	mov	r0, r3
 800684c:	3718      	adds	r7, #24
 800684e:	46bd      	mov	sp, r7
 8006850:	bd80      	pop	{r7, pc}
 8006852:	bf00      	nop
 8006854:	20000be8 	.word	0x20000be8
 8006858:	20000bc4 	.word	0x20000bc4
 800685c:	20000b78 	.word	0x20000b78
 8006860:	20000b7c 	.word	0x20000b7c
 8006864:	20000bd8 	.word	0x20000bd8
 8006868:	20000be0 	.word	0x20000be0
 800686c:	20000bc8 	.word	0x20000bc8
 8006870:	200006f0 	.word	0x200006f0
 8006874:	200006ec 	.word	0x200006ec
 8006878:	20000bd4 	.word	0x20000bd4
 800687c:	20000bd0 	.word	0x20000bd0

08006880 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006880:	b480      	push	{r7}
 8006882:	b085      	sub	sp, #20
 8006884:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006886:	4b28      	ldr	r3, [pc, #160]	; (8006928 <vTaskSwitchContext+0xa8>)
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	2b00      	cmp	r3, #0
 800688c:	d003      	beq.n	8006896 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800688e:	4b27      	ldr	r3, [pc, #156]	; (800692c <vTaskSwitchContext+0xac>)
 8006890:	2201      	movs	r2, #1
 8006892:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006894:	e041      	b.n	800691a <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8006896:	4b25      	ldr	r3, [pc, #148]	; (800692c <vTaskSwitchContext+0xac>)
 8006898:	2200      	movs	r2, #0
 800689a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800689c:	4b24      	ldr	r3, [pc, #144]	; (8006930 <vTaskSwitchContext+0xb0>)
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	60fb      	str	r3, [r7, #12]
 80068a2:	e010      	b.n	80068c6 <vTaskSwitchContext+0x46>
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d10a      	bne.n	80068c0 <vTaskSwitchContext+0x40>
	__asm volatile
 80068aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068ae:	f383 8811 	msr	BASEPRI, r3
 80068b2:	f3bf 8f6f 	isb	sy
 80068b6:	f3bf 8f4f 	dsb	sy
 80068ba:	607b      	str	r3, [r7, #4]
}
 80068bc:	bf00      	nop
 80068be:	e7fe      	b.n	80068be <vTaskSwitchContext+0x3e>
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	3b01      	subs	r3, #1
 80068c4:	60fb      	str	r3, [r7, #12]
 80068c6:	491b      	ldr	r1, [pc, #108]	; (8006934 <vTaskSwitchContext+0xb4>)
 80068c8:	68fa      	ldr	r2, [r7, #12]
 80068ca:	4613      	mov	r3, r2
 80068cc:	009b      	lsls	r3, r3, #2
 80068ce:	4413      	add	r3, r2
 80068d0:	009b      	lsls	r3, r3, #2
 80068d2:	440b      	add	r3, r1
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d0e4      	beq.n	80068a4 <vTaskSwitchContext+0x24>
 80068da:	68fa      	ldr	r2, [r7, #12]
 80068dc:	4613      	mov	r3, r2
 80068de:	009b      	lsls	r3, r3, #2
 80068e0:	4413      	add	r3, r2
 80068e2:	009b      	lsls	r3, r3, #2
 80068e4:	4a13      	ldr	r2, [pc, #76]	; (8006934 <vTaskSwitchContext+0xb4>)
 80068e6:	4413      	add	r3, r2
 80068e8:	60bb      	str	r3, [r7, #8]
 80068ea:	68bb      	ldr	r3, [r7, #8]
 80068ec:	685b      	ldr	r3, [r3, #4]
 80068ee:	685a      	ldr	r2, [r3, #4]
 80068f0:	68bb      	ldr	r3, [r7, #8]
 80068f2:	605a      	str	r2, [r3, #4]
 80068f4:	68bb      	ldr	r3, [r7, #8]
 80068f6:	685a      	ldr	r2, [r3, #4]
 80068f8:	68bb      	ldr	r3, [r7, #8]
 80068fa:	3308      	adds	r3, #8
 80068fc:	429a      	cmp	r2, r3
 80068fe:	d104      	bne.n	800690a <vTaskSwitchContext+0x8a>
 8006900:	68bb      	ldr	r3, [r7, #8]
 8006902:	685b      	ldr	r3, [r3, #4]
 8006904:	685a      	ldr	r2, [r3, #4]
 8006906:	68bb      	ldr	r3, [r7, #8]
 8006908:	605a      	str	r2, [r3, #4]
 800690a:	68bb      	ldr	r3, [r7, #8]
 800690c:	685b      	ldr	r3, [r3, #4]
 800690e:	68db      	ldr	r3, [r3, #12]
 8006910:	4a09      	ldr	r2, [pc, #36]	; (8006938 <vTaskSwitchContext+0xb8>)
 8006912:	6013      	str	r3, [r2, #0]
 8006914:	4a06      	ldr	r2, [pc, #24]	; (8006930 <vTaskSwitchContext+0xb0>)
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	6013      	str	r3, [r2, #0]
}
 800691a:	bf00      	nop
 800691c:	3714      	adds	r7, #20
 800691e:	46bd      	mov	sp, r7
 8006920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006924:	4770      	bx	lr
 8006926:	bf00      	nop
 8006928:	20000be8 	.word	0x20000be8
 800692c:	20000bd4 	.word	0x20000bd4
 8006930:	20000bc8 	.word	0x20000bc8
 8006934:	200006f0 	.word	0x200006f0
 8006938:	200006ec 	.word	0x200006ec

0800693c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800693c:	b580      	push	{r7, lr}
 800693e:	b084      	sub	sp, #16
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]
 8006944:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	2b00      	cmp	r3, #0
 800694a:	d10a      	bne.n	8006962 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800694c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006950:	f383 8811 	msr	BASEPRI, r3
 8006954:	f3bf 8f6f 	isb	sy
 8006958:	f3bf 8f4f 	dsb	sy
 800695c:	60fb      	str	r3, [r7, #12]
}
 800695e:	bf00      	nop
 8006960:	e7fe      	b.n	8006960 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006962:	4b07      	ldr	r3, [pc, #28]	; (8006980 <vTaskPlaceOnEventList+0x44>)
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	3318      	adds	r3, #24
 8006968:	4619      	mov	r1, r3
 800696a:	6878      	ldr	r0, [r7, #4]
 800696c:	f7fe fe2f 	bl	80055ce <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006970:	2101      	movs	r1, #1
 8006972:	6838      	ldr	r0, [r7, #0]
 8006974:	f000 fb32 	bl	8006fdc <prvAddCurrentTaskToDelayedList>
}
 8006978:	bf00      	nop
 800697a:	3710      	adds	r7, #16
 800697c:	46bd      	mov	sp, r7
 800697e:	bd80      	pop	{r7, pc}
 8006980:	200006ec 	.word	0x200006ec

08006984 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8006984:	b580      	push	{r7, lr}
 8006986:	b086      	sub	sp, #24
 8006988:	af00      	add	r7, sp, #0
 800698a:	60f8      	str	r0, [r7, #12]
 800698c:	60b9      	str	r1, [r7, #8]
 800698e:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	2b00      	cmp	r3, #0
 8006994:	d10a      	bne.n	80069ac <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 8006996:	f04f 0350 	mov.w	r3, #80	; 0x50
 800699a:	f383 8811 	msr	BASEPRI, r3
 800699e:	f3bf 8f6f 	isb	sy
 80069a2:	f3bf 8f4f 	dsb	sy
 80069a6:	617b      	str	r3, [r7, #20]
}
 80069a8:	bf00      	nop
 80069aa:	e7fe      	b.n	80069aa <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 80069ac:	4b11      	ldr	r3, [pc, #68]	; (80069f4 <vTaskPlaceOnUnorderedEventList+0x70>)
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d10a      	bne.n	80069ca <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 80069b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069b8:	f383 8811 	msr	BASEPRI, r3
 80069bc:	f3bf 8f6f 	isb	sy
 80069c0:	f3bf 8f4f 	dsb	sy
 80069c4:	613b      	str	r3, [r7, #16]
}
 80069c6:	bf00      	nop
 80069c8:	e7fe      	b.n	80069c8 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 80069ca:	4b0b      	ldr	r3, [pc, #44]	; (80069f8 <vTaskPlaceOnUnorderedEventList+0x74>)
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	68ba      	ldr	r2, [r7, #8]
 80069d0:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80069d4:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80069d6:	4b08      	ldr	r3, [pc, #32]	; (80069f8 <vTaskPlaceOnUnorderedEventList+0x74>)
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	3318      	adds	r3, #24
 80069dc:	4619      	mov	r1, r3
 80069de:	68f8      	ldr	r0, [r7, #12]
 80069e0:	f7fe fdd1 	bl	8005586 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80069e4:	2101      	movs	r1, #1
 80069e6:	6878      	ldr	r0, [r7, #4]
 80069e8:	f000 faf8 	bl	8006fdc <prvAddCurrentTaskToDelayedList>
}
 80069ec:	bf00      	nop
 80069ee:	3718      	adds	r7, #24
 80069f0:	46bd      	mov	sp, r7
 80069f2:	bd80      	pop	{r7, pc}
 80069f4:	20000be8 	.word	0x20000be8
 80069f8:	200006ec 	.word	0x200006ec

080069fc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80069fc:	b580      	push	{r7, lr}
 80069fe:	b086      	sub	sp, #24
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	60f8      	str	r0, [r7, #12]
 8006a04:	60b9      	str	r1, [r7, #8]
 8006a06:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d10a      	bne.n	8006a24 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8006a0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a12:	f383 8811 	msr	BASEPRI, r3
 8006a16:	f3bf 8f6f 	isb	sy
 8006a1a:	f3bf 8f4f 	dsb	sy
 8006a1e:	617b      	str	r3, [r7, #20]
}
 8006a20:	bf00      	nop
 8006a22:	e7fe      	b.n	8006a22 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006a24:	4b0a      	ldr	r3, [pc, #40]	; (8006a50 <vTaskPlaceOnEventListRestricted+0x54>)
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	3318      	adds	r3, #24
 8006a2a:	4619      	mov	r1, r3
 8006a2c:	68f8      	ldr	r0, [r7, #12]
 8006a2e:	f7fe fdaa 	bl	8005586 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d002      	beq.n	8006a3e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8006a38:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006a3c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006a3e:	6879      	ldr	r1, [r7, #4]
 8006a40:	68b8      	ldr	r0, [r7, #8]
 8006a42:	f000 facb 	bl	8006fdc <prvAddCurrentTaskToDelayedList>
	}
 8006a46:	bf00      	nop
 8006a48:	3718      	adds	r7, #24
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	bd80      	pop	{r7, pc}
 8006a4e:	bf00      	nop
 8006a50:	200006ec 	.word	0x200006ec

08006a54 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	b086      	sub	sp, #24
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	68db      	ldr	r3, [r3, #12]
 8006a60:	68db      	ldr	r3, [r3, #12]
 8006a62:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006a64:	693b      	ldr	r3, [r7, #16]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d10a      	bne.n	8006a80 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006a6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a6e:	f383 8811 	msr	BASEPRI, r3
 8006a72:	f3bf 8f6f 	isb	sy
 8006a76:	f3bf 8f4f 	dsb	sy
 8006a7a:	60fb      	str	r3, [r7, #12]
}
 8006a7c:	bf00      	nop
 8006a7e:	e7fe      	b.n	8006a7e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006a80:	693b      	ldr	r3, [r7, #16]
 8006a82:	3318      	adds	r3, #24
 8006a84:	4618      	mov	r0, r3
 8006a86:	f7fe fddb 	bl	8005640 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006a8a:	4b1e      	ldr	r3, [pc, #120]	; (8006b04 <xTaskRemoveFromEventList+0xb0>)
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d11d      	bne.n	8006ace <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006a92:	693b      	ldr	r3, [r7, #16]
 8006a94:	3304      	adds	r3, #4
 8006a96:	4618      	mov	r0, r3
 8006a98:	f7fe fdd2 	bl	8005640 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006a9c:	693b      	ldr	r3, [r7, #16]
 8006a9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006aa0:	4b19      	ldr	r3, [pc, #100]	; (8006b08 <xTaskRemoveFromEventList+0xb4>)
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	429a      	cmp	r2, r3
 8006aa6:	d903      	bls.n	8006ab0 <xTaskRemoveFromEventList+0x5c>
 8006aa8:	693b      	ldr	r3, [r7, #16]
 8006aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aac:	4a16      	ldr	r2, [pc, #88]	; (8006b08 <xTaskRemoveFromEventList+0xb4>)
 8006aae:	6013      	str	r3, [r2, #0]
 8006ab0:	693b      	ldr	r3, [r7, #16]
 8006ab2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ab4:	4613      	mov	r3, r2
 8006ab6:	009b      	lsls	r3, r3, #2
 8006ab8:	4413      	add	r3, r2
 8006aba:	009b      	lsls	r3, r3, #2
 8006abc:	4a13      	ldr	r2, [pc, #76]	; (8006b0c <xTaskRemoveFromEventList+0xb8>)
 8006abe:	441a      	add	r2, r3
 8006ac0:	693b      	ldr	r3, [r7, #16]
 8006ac2:	3304      	adds	r3, #4
 8006ac4:	4619      	mov	r1, r3
 8006ac6:	4610      	mov	r0, r2
 8006ac8:	f7fe fd5d 	bl	8005586 <vListInsertEnd>
 8006acc:	e005      	b.n	8006ada <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006ace:	693b      	ldr	r3, [r7, #16]
 8006ad0:	3318      	adds	r3, #24
 8006ad2:	4619      	mov	r1, r3
 8006ad4:	480e      	ldr	r0, [pc, #56]	; (8006b10 <xTaskRemoveFromEventList+0xbc>)
 8006ad6:	f7fe fd56 	bl	8005586 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006ada:	693b      	ldr	r3, [r7, #16]
 8006adc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ade:	4b0d      	ldr	r3, [pc, #52]	; (8006b14 <xTaskRemoveFromEventList+0xc0>)
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ae4:	429a      	cmp	r2, r3
 8006ae6:	d905      	bls.n	8006af4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006ae8:	2301      	movs	r3, #1
 8006aea:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006aec:	4b0a      	ldr	r3, [pc, #40]	; (8006b18 <xTaskRemoveFromEventList+0xc4>)
 8006aee:	2201      	movs	r2, #1
 8006af0:	601a      	str	r2, [r3, #0]
 8006af2:	e001      	b.n	8006af8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8006af4:	2300      	movs	r3, #0
 8006af6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006af8:	697b      	ldr	r3, [r7, #20]
}
 8006afa:	4618      	mov	r0, r3
 8006afc:	3718      	adds	r7, #24
 8006afe:	46bd      	mov	sp, r7
 8006b00:	bd80      	pop	{r7, pc}
 8006b02:	bf00      	nop
 8006b04:	20000be8 	.word	0x20000be8
 8006b08:	20000bc8 	.word	0x20000bc8
 8006b0c:	200006f0 	.word	0x200006f0
 8006b10:	20000b80 	.word	0x20000b80
 8006b14:	200006ec 	.word	0x200006ec
 8006b18:	20000bd4 	.word	0x20000bd4

08006b1c <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8006b1c:	b580      	push	{r7, lr}
 8006b1e:	b086      	sub	sp, #24
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]
 8006b24:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8006b26:	4b29      	ldr	r3, [pc, #164]	; (8006bcc <vTaskRemoveFromUnorderedEventList+0xb0>)
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d10a      	bne.n	8006b44 <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 8006b2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b32:	f383 8811 	msr	BASEPRI, r3
 8006b36:	f3bf 8f6f 	isb	sy
 8006b3a:	f3bf 8f4f 	dsb	sy
 8006b3e:	613b      	str	r3, [r7, #16]
}
 8006b40:	bf00      	nop
 8006b42:	e7fe      	b.n	8006b42 <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	68db      	ldr	r3, [r3, #12]
 8006b52:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8006b54:	697b      	ldr	r3, [r7, #20]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d10a      	bne.n	8006b70 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 8006b5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b5e:	f383 8811 	msr	BASEPRI, r3
 8006b62:	f3bf 8f6f 	isb	sy
 8006b66:	f3bf 8f4f 	dsb	sy
 8006b6a:	60fb      	str	r3, [r7, #12]
}
 8006b6c:	bf00      	nop
 8006b6e:	e7fe      	b.n	8006b6e <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 8006b70:	6878      	ldr	r0, [r7, #4]
 8006b72:	f7fe fd65 	bl	8005640 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006b76:	697b      	ldr	r3, [r7, #20]
 8006b78:	3304      	adds	r3, #4
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	f7fe fd60 	bl	8005640 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8006b80:	697b      	ldr	r3, [r7, #20]
 8006b82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b84:	4b12      	ldr	r3, [pc, #72]	; (8006bd0 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	429a      	cmp	r2, r3
 8006b8a:	d903      	bls.n	8006b94 <vTaskRemoveFromUnorderedEventList+0x78>
 8006b8c:	697b      	ldr	r3, [r7, #20]
 8006b8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b90:	4a0f      	ldr	r2, [pc, #60]	; (8006bd0 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8006b92:	6013      	str	r3, [r2, #0]
 8006b94:	697b      	ldr	r3, [r7, #20]
 8006b96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b98:	4613      	mov	r3, r2
 8006b9a:	009b      	lsls	r3, r3, #2
 8006b9c:	4413      	add	r3, r2
 8006b9e:	009b      	lsls	r3, r3, #2
 8006ba0:	4a0c      	ldr	r2, [pc, #48]	; (8006bd4 <vTaskRemoveFromUnorderedEventList+0xb8>)
 8006ba2:	441a      	add	r2, r3
 8006ba4:	697b      	ldr	r3, [r7, #20]
 8006ba6:	3304      	adds	r3, #4
 8006ba8:	4619      	mov	r1, r3
 8006baa:	4610      	mov	r0, r2
 8006bac:	f7fe fceb 	bl	8005586 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006bb0:	697b      	ldr	r3, [r7, #20]
 8006bb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bb4:	4b08      	ldr	r3, [pc, #32]	; (8006bd8 <vTaskRemoveFromUnorderedEventList+0xbc>)
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bba:	429a      	cmp	r2, r3
 8006bbc:	d902      	bls.n	8006bc4 <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8006bbe:	4b07      	ldr	r3, [pc, #28]	; (8006bdc <vTaskRemoveFromUnorderedEventList+0xc0>)
 8006bc0:	2201      	movs	r2, #1
 8006bc2:	601a      	str	r2, [r3, #0]
	}
}
 8006bc4:	bf00      	nop
 8006bc6:	3718      	adds	r7, #24
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	bd80      	pop	{r7, pc}
 8006bcc:	20000be8 	.word	0x20000be8
 8006bd0:	20000bc8 	.word	0x20000bc8
 8006bd4:	200006f0 	.word	0x200006f0
 8006bd8:	200006ec 	.word	0x200006ec
 8006bdc:	20000bd4 	.word	0x20000bd4

08006be0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006be0:	b480      	push	{r7}
 8006be2:	b083      	sub	sp, #12
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006be8:	4b06      	ldr	r3, [pc, #24]	; (8006c04 <vTaskInternalSetTimeOutState+0x24>)
 8006bea:	681a      	ldr	r2, [r3, #0]
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006bf0:	4b05      	ldr	r3, [pc, #20]	; (8006c08 <vTaskInternalSetTimeOutState+0x28>)
 8006bf2:	681a      	ldr	r2, [r3, #0]
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	605a      	str	r2, [r3, #4]
}
 8006bf8:	bf00      	nop
 8006bfa:	370c      	adds	r7, #12
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c02:	4770      	bx	lr
 8006c04:	20000bd8 	.word	0x20000bd8
 8006c08:	20000bc4 	.word	0x20000bc4

08006c0c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006c0c:	b580      	push	{r7, lr}
 8006c0e:	b088      	sub	sp, #32
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
 8006c14:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d10a      	bne.n	8006c32 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006c1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c20:	f383 8811 	msr	BASEPRI, r3
 8006c24:	f3bf 8f6f 	isb	sy
 8006c28:	f3bf 8f4f 	dsb	sy
 8006c2c:	613b      	str	r3, [r7, #16]
}
 8006c2e:	bf00      	nop
 8006c30:	e7fe      	b.n	8006c30 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d10a      	bne.n	8006c4e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006c38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c3c:	f383 8811 	msr	BASEPRI, r3
 8006c40:	f3bf 8f6f 	isb	sy
 8006c44:	f3bf 8f4f 	dsb	sy
 8006c48:	60fb      	str	r3, [r7, #12]
}
 8006c4a:	bf00      	nop
 8006c4c:	e7fe      	b.n	8006c4c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006c4e:	f000 feb1 	bl	80079b4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006c52:	4b1d      	ldr	r3, [pc, #116]	; (8006cc8 <xTaskCheckForTimeOut+0xbc>)
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	685b      	ldr	r3, [r3, #4]
 8006c5c:	69ba      	ldr	r2, [r7, #24]
 8006c5e:	1ad3      	subs	r3, r2, r3
 8006c60:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006c62:	683b      	ldr	r3, [r7, #0]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006c6a:	d102      	bne.n	8006c72 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	61fb      	str	r3, [r7, #28]
 8006c70:	e023      	b.n	8006cba <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681a      	ldr	r2, [r3, #0]
 8006c76:	4b15      	ldr	r3, [pc, #84]	; (8006ccc <xTaskCheckForTimeOut+0xc0>)
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	429a      	cmp	r2, r3
 8006c7c:	d007      	beq.n	8006c8e <xTaskCheckForTimeOut+0x82>
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	685b      	ldr	r3, [r3, #4]
 8006c82:	69ba      	ldr	r2, [r7, #24]
 8006c84:	429a      	cmp	r2, r3
 8006c86:	d302      	bcc.n	8006c8e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006c88:	2301      	movs	r3, #1
 8006c8a:	61fb      	str	r3, [r7, #28]
 8006c8c:	e015      	b.n	8006cba <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006c8e:	683b      	ldr	r3, [r7, #0]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	697a      	ldr	r2, [r7, #20]
 8006c94:	429a      	cmp	r2, r3
 8006c96:	d20b      	bcs.n	8006cb0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006c98:	683b      	ldr	r3, [r7, #0]
 8006c9a:	681a      	ldr	r2, [r3, #0]
 8006c9c:	697b      	ldr	r3, [r7, #20]
 8006c9e:	1ad2      	subs	r2, r2, r3
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006ca4:	6878      	ldr	r0, [r7, #4]
 8006ca6:	f7ff ff9b 	bl	8006be0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006caa:	2300      	movs	r3, #0
 8006cac:	61fb      	str	r3, [r7, #28]
 8006cae:	e004      	b.n	8006cba <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006cb0:	683b      	ldr	r3, [r7, #0]
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006cb6:	2301      	movs	r3, #1
 8006cb8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006cba:	f000 feab 	bl	8007a14 <vPortExitCritical>

	return xReturn;
 8006cbe:	69fb      	ldr	r3, [r7, #28]
}
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	3720      	adds	r7, #32
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	bd80      	pop	{r7, pc}
 8006cc8:	20000bc4 	.word	0x20000bc4
 8006ccc:	20000bd8 	.word	0x20000bd8

08006cd0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006cd0:	b480      	push	{r7}
 8006cd2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006cd4:	4b03      	ldr	r3, [pc, #12]	; (8006ce4 <vTaskMissedYield+0x14>)
 8006cd6:	2201      	movs	r2, #1
 8006cd8:	601a      	str	r2, [r3, #0]
}
 8006cda:	bf00      	nop
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce2:	4770      	bx	lr
 8006ce4:	20000bd4 	.word	0x20000bd4

08006ce8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b082      	sub	sp, #8
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006cf0:	f000 f852 	bl	8006d98 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006cf4:	4b06      	ldr	r3, [pc, #24]	; (8006d10 <prvIdleTask+0x28>)
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	2b01      	cmp	r3, #1
 8006cfa:	d9f9      	bls.n	8006cf0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006cfc:	4b05      	ldr	r3, [pc, #20]	; (8006d14 <prvIdleTask+0x2c>)
 8006cfe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d02:	601a      	str	r2, [r3, #0]
 8006d04:	f3bf 8f4f 	dsb	sy
 8006d08:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006d0c:	e7f0      	b.n	8006cf0 <prvIdleTask+0x8>
 8006d0e:	bf00      	nop
 8006d10:	200006f0 	.word	0x200006f0
 8006d14:	e000ed04 	.word	0xe000ed04

08006d18 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	b082      	sub	sp, #8
 8006d1c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006d1e:	2300      	movs	r3, #0
 8006d20:	607b      	str	r3, [r7, #4]
 8006d22:	e00c      	b.n	8006d3e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006d24:	687a      	ldr	r2, [r7, #4]
 8006d26:	4613      	mov	r3, r2
 8006d28:	009b      	lsls	r3, r3, #2
 8006d2a:	4413      	add	r3, r2
 8006d2c:	009b      	lsls	r3, r3, #2
 8006d2e:	4a12      	ldr	r2, [pc, #72]	; (8006d78 <prvInitialiseTaskLists+0x60>)
 8006d30:	4413      	add	r3, r2
 8006d32:	4618      	mov	r0, r3
 8006d34:	f7fe fbfa 	bl	800552c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	3301      	adds	r3, #1
 8006d3c:	607b      	str	r3, [r7, #4]
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	2b37      	cmp	r3, #55	; 0x37
 8006d42:	d9ef      	bls.n	8006d24 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006d44:	480d      	ldr	r0, [pc, #52]	; (8006d7c <prvInitialiseTaskLists+0x64>)
 8006d46:	f7fe fbf1 	bl	800552c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006d4a:	480d      	ldr	r0, [pc, #52]	; (8006d80 <prvInitialiseTaskLists+0x68>)
 8006d4c:	f7fe fbee 	bl	800552c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006d50:	480c      	ldr	r0, [pc, #48]	; (8006d84 <prvInitialiseTaskLists+0x6c>)
 8006d52:	f7fe fbeb 	bl	800552c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006d56:	480c      	ldr	r0, [pc, #48]	; (8006d88 <prvInitialiseTaskLists+0x70>)
 8006d58:	f7fe fbe8 	bl	800552c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006d5c:	480b      	ldr	r0, [pc, #44]	; (8006d8c <prvInitialiseTaskLists+0x74>)
 8006d5e:	f7fe fbe5 	bl	800552c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006d62:	4b0b      	ldr	r3, [pc, #44]	; (8006d90 <prvInitialiseTaskLists+0x78>)
 8006d64:	4a05      	ldr	r2, [pc, #20]	; (8006d7c <prvInitialiseTaskLists+0x64>)
 8006d66:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006d68:	4b0a      	ldr	r3, [pc, #40]	; (8006d94 <prvInitialiseTaskLists+0x7c>)
 8006d6a:	4a05      	ldr	r2, [pc, #20]	; (8006d80 <prvInitialiseTaskLists+0x68>)
 8006d6c:	601a      	str	r2, [r3, #0]
}
 8006d6e:	bf00      	nop
 8006d70:	3708      	adds	r7, #8
 8006d72:	46bd      	mov	sp, r7
 8006d74:	bd80      	pop	{r7, pc}
 8006d76:	bf00      	nop
 8006d78:	200006f0 	.word	0x200006f0
 8006d7c:	20000b50 	.word	0x20000b50
 8006d80:	20000b64 	.word	0x20000b64
 8006d84:	20000b80 	.word	0x20000b80
 8006d88:	20000b94 	.word	0x20000b94
 8006d8c:	20000bac 	.word	0x20000bac
 8006d90:	20000b78 	.word	0x20000b78
 8006d94:	20000b7c 	.word	0x20000b7c

08006d98 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006d98:	b580      	push	{r7, lr}
 8006d9a:	b082      	sub	sp, #8
 8006d9c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006d9e:	e019      	b.n	8006dd4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006da0:	f000 fe08 	bl	80079b4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006da4:	4b10      	ldr	r3, [pc, #64]	; (8006de8 <prvCheckTasksWaitingTermination+0x50>)
 8006da6:	68db      	ldr	r3, [r3, #12]
 8006da8:	68db      	ldr	r3, [r3, #12]
 8006daa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	3304      	adds	r3, #4
 8006db0:	4618      	mov	r0, r3
 8006db2:	f7fe fc45 	bl	8005640 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006db6:	4b0d      	ldr	r3, [pc, #52]	; (8006dec <prvCheckTasksWaitingTermination+0x54>)
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	3b01      	subs	r3, #1
 8006dbc:	4a0b      	ldr	r2, [pc, #44]	; (8006dec <prvCheckTasksWaitingTermination+0x54>)
 8006dbe:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006dc0:	4b0b      	ldr	r3, [pc, #44]	; (8006df0 <prvCheckTasksWaitingTermination+0x58>)
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	3b01      	subs	r3, #1
 8006dc6:	4a0a      	ldr	r2, [pc, #40]	; (8006df0 <prvCheckTasksWaitingTermination+0x58>)
 8006dc8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006dca:	f000 fe23 	bl	8007a14 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006dce:	6878      	ldr	r0, [r7, #4]
 8006dd0:	f000 f810 	bl	8006df4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006dd4:	4b06      	ldr	r3, [pc, #24]	; (8006df0 <prvCheckTasksWaitingTermination+0x58>)
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d1e1      	bne.n	8006da0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006ddc:	bf00      	nop
 8006dde:	bf00      	nop
 8006de0:	3708      	adds	r7, #8
 8006de2:	46bd      	mov	sp, r7
 8006de4:	bd80      	pop	{r7, pc}
 8006de6:	bf00      	nop
 8006de8:	20000b94 	.word	0x20000b94
 8006dec:	20000bc0 	.word	0x20000bc0
 8006df0:	20000ba8 	.word	0x20000ba8

08006df4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006df4:	b580      	push	{r7, lr}
 8006df6:	b084      	sub	sp, #16
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d108      	bne.n	8006e18 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	f000 ffc0 	bl	8007d90 <vPortFree>
				vPortFree( pxTCB );
 8006e10:	6878      	ldr	r0, [r7, #4]
 8006e12:	f000 ffbd 	bl	8007d90 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006e16:	e018      	b.n	8006e4a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006e1e:	2b01      	cmp	r3, #1
 8006e20:	d103      	bne.n	8006e2a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006e22:	6878      	ldr	r0, [r7, #4]
 8006e24:	f000 ffb4 	bl	8007d90 <vPortFree>
	}
 8006e28:	e00f      	b.n	8006e4a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006e30:	2b02      	cmp	r3, #2
 8006e32:	d00a      	beq.n	8006e4a <prvDeleteTCB+0x56>
	__asm volatile
 8006e34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e38:	f383 8811 	msr	BASEPRI, r3
 8006e3c:	f3bf 8f6f 	isb	sy
 8006e40:	f3bf 8f4f 	dsb	sy
 8006e44:	60fb      	str	r3, [r7, #12]
}
 8006e46:	bf00      	nop
 8006e48:	e7fe      	b.n	8006e48 <prvDeleteTCB+0x54>
	}
 8006e4a:	bf00      	nop
 8006e4c:	3710      	adds	r7, #16
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	bd80      	pop	{r7, pc}
	...

08006e54 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006e54:	b480      	push	{r7}
 8006e56:	b083      	sub	sp, #12
 8006e58:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006e5a:	4b0c      	ldr	r3, [pc, #48]	; (8006e8c <prvResetNextTaskUnblockTime+0x38>)
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d104      	bne.n	8006e6e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006e64:	4b0a      	ldr	r3, [pc, #40]	; (8006e90 <prvResetNextTaskUnblockTime+0x3c>)
 8006e66:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006e6a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006e6c:	e008      	b.n	8006e80 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e6e:	4b07      	ldr	r3, [pc, #28]	; (8006e8c <prvResetNextTaskUnblockTime+0x38>)
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	68db      	ldr	r3, [r3, #12]
 8006e74:	68db      	ldr	r3, [r3, #12]
 8006e76:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	685b      	ldr	r3, [r3, #4]
 8006e7c:	4a04      	ldr	r2, [pc, #16]	; (8006e90 <prvResetNextTaskUnblockTime+0x3c>)
 8006e7e:	6013      	str	r3, [r2, #0]
}
 8006e80:	bf00      	nop
 8006e82:	370c      	adds	r7, #12
 8006e84:	46bd      	mov	sp, r7
 8006e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8a:	4770      	bx	lr
 8006e8c:	20000b78 	.word	0x20000b78
 8006e90:	20000be0 	.word	0x20000be0

08006e94 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006e94:	b480      	push	{r7}
 8006e96:	b083      	sub	sp, #12
 8006e98:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006e9a:	4b0b      	ldr	r3, [pc, #44]	; (8006ec8 <xTaskGetSchedulerState+0x34>)
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d102      	bne.n	8006ea8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006ea2:	2301      	movs	r3, #1
 8006ea4:	607b      	str	r3, [r7, #4]
 8006ea6:	e008      	b.n	8006eba <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006ea8:	4b08      	ldr	r3, [pc, #32]	; (8006ecc <xTaskGetSchedulerState+0x38>)
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d102      	bne.n	8006eb6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006eb0:	2302      	movs	r3, #2
 8006eb2:	607b      	str	r3, [r7, #4]
 8006eb4:	e001      	b.n	8006eba <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006eb6:	2300      	movs	r3, #0
 8006eb8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006eba:	687b      	ldr	r3, [r7, #4]
	}
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	370c      	adds	r7, #12
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec6:	4770      	bx	lr
 8006ec8:	20000bcc 	.word	0x20000bcc
 8006ecc:	20000be8 	.word	0x20000be8

08006ed0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	b086      	sub	sp, #24
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006edc:	2300      	movs	r3, #0
 8006ede:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d056      	beq.n	8006f94 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006ee6:	4b2e      	ldr	r3, [pc, #184]	; (8006fa0 <xTaskPriorityDisinherit+0xd0>)
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	693a      	ldr	r2, [r7, #16]
 8006eec:	429a      	cmp	r2, r3
 8006eee:	d00a      	beq.n	8006f06 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006ef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ef4:	f383 8811 	msr	BASEPRI, r3
 8006ef8:	f3bf 8f6f 	isb	sy
 8006efc:	f3bf 8f4f 	dsb	sy
 8006f00:	60fb      	str	r3, [r7, #12]
}
 8006f02:	bf00      	nop
 8006f04:	e7fe      	b.n	8006f04 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006f06:	693b      	ldr	r3, [r7, #16]
 8006f08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d10a      	bne.n	8006f24 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006f0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f12:	f383 8811 	msr	BASEPRI, r3
 8006f16:	f3bf 8f6f 	isb	sy
 8006f1a:	f3bf 8f4f 	dsb	sy
 8006f1e:	60bb      	str	r3, [r7, #8]
}
 8006f20:	bf00      	nop
 8006f22:	e7fe      	b.n	8006f22 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006f24:	693b      	ldr	r3, [r7, #16]
 8006f26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f28:	1e5a      	subs	r2, r3, #1
 8006f2a:	693b      	ldr	r3, [r7, #16]
 8006f2c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006f2e:	693b      	ldr	r3, [r7, #16]
 8006f30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f32:	693b      	ldr	r3, [r7, #16]
 8006f34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f36:	429a      	cmp	r2, r3
 8006f38:	d02c      	beq.n	8006f94 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006f3a:	693b      	ldr	r3, [r7, #16]
 8006f3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d128      	bne.n	8006f94 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006f42:	693b      	ldr	r3, [r7, #16]
 8006f44:	3304      	adds	r3, #4
 8006f46:	4618      	mov	r0, r3
 8006f48:	f7fe fb7a 	bl	8005640 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006f4c:	693b      	ldr	r3, [r7, #16]
 8006f4e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006f50:	693b      	ldr	r3, [r7, #16]
 8006f52:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006f54:	693b      	ldr	r3, [r7, #16]
 8006f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f58:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006f5c:	693b      	ldr	r3, [r7, #16]
 8006f5e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006f60:	693b      	ldr	r3, [r7, #16]
 8006f62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f64:	4b0f      	ldr	r3, [pc, #60]	; (8006fa4 <xTaskPriorityDisinherit+0xd4>)
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	429a      	cmp	r2, r3
 8006f6a:	d903      	bls.n	8006f74 <xTaskPriorityDisinherit+0xa4>
 8006f6c:	693b      	ldr	r3, [r7, #16]
 8006f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f70:	4a0c      	ldr	r2, [pc, #48]	; (8006fa4 <xTaskPriorityDisinherit+0xd4>)
 8006f72:	6013      	str	r3, [r2, #0]
 8006f74:	693b      	ldr	r3, [r7, #16]
 8006f76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f78:	4613      	mov	r3, r2
 8006f7a:	009b      	lsls	r3, r3, #2
 8006f7c:	4413      	add	r3, r2
 8006f7e:	009b      	lsls	r3, r3, #2
 8006f80:	4a09      	ldr	r2, [pc, #36]	; (8006fa8 <xTaskPriorityDisinherit+0xd8>)
 8006f82:	441a      	add	r2, r3
 8006f84:	693b      	ldr	r3, [r7, #16]
 8006f86:	3304      	adds	r3, #4
 8006f88:	4619      	mov	r1, r3
 8006f8a:	4610      	mov	r0, r2
 8006f8c:	f7fe fafb 	bl	8005586 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006f90:	2301      	movs	r3, #1
 8006f92:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006f94:	697b      	ldr	r3, [r7, #20]
	}
 8006f96:	4618      	mov	r0, r3
 8006f98:	3718      	adds	r7, #24
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	bd80      	pop	{r7, pc}
 8006f9e:	bf00      	nop
 8006fa0:	200006ec 	.word	0x200006ec
 8006fa4:	20000bc8 	.word	0x20000bc8
 8006fa8:	200006f0 	.word	0x200006f0

08006fac <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8006fac:	b480      	push	{r7}
 8006fae:	b083      	sub	sp, #12
 8006fb0:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8006fb2:	4b09      	ldr	r3, [pc, #36]	; (8006fd8 <uxTaskResetEventItemValue+0x2c>)
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	699b      	ldr	r3, [r3, #24]
 8006fb8:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006fba:	4b07      	ldr	r3, [pc, #28]	; (8006fd8 <uxTaskResetEventItemValue+0x2c>)
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fc0:	4b05      	ldr	r3, [pc, #20]	; (8006fd8 <uxTaskResetEventItemValue+0x2c>)
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 8006fc8:	619a      	str	r2, [r3, #24]

	return uxReturn;
 8006fca:	687b      	ldr	r3, [r7, #4]
}
 8006fcc:	4618      	mov	r0, r3
 8006fce:	370c      	adds	r7, #12
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd6:	4770      	bx	lr
 8006fd8:	200006ec 	.word	0x200006ec

08006fdc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	b084      	sub	sp, #16
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
 8006fe4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006fe6:	4b21      	ldr	r3, [pc, #132]	; (800706c <prvAddCurrentTaskToDelayedList+0x90>)
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006fec:	4b20      	ldr	r3, [pc, #128]	; (8007070 <prvAddCurrentTaskToDelayedList+0x94>)
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	3304      	adds	r3, #4
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	f7fe fb24 	bl	8005640 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006ffe:	d10a      	bne.n	8007016 <prvAddCurrentTaskToDelayedList+0x3a>
 8007000:	683b      	ldr	r3, [r7, #0]
 8007002:	2b00      	cmp	r3, #0
 8007004:	d007      	beq.n	8007016 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007006:	4b1a      	ldr	r3, [pc, #104]	; (8007070 <prvAddCurrentTaskToDelayedList+0x94>)
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	3304      	adds	r3, #4
 800700c:	4619      	mov	r1, r3
 800700e:	4819      	ldr	r0, [pc, #100]	; (8007074 <prvAddCurrentTaskToDelayedList+0x98>)
 8007010:	f7fe fab9 	bl	8005586 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007014:	e026      	b.n	8007064 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007016:	68fa      	ldr	r2, [r7, #12]
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	4413      	add	r3, r2
 800701c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800701e:	4b14      	ldr	r3, [pc, #80]	; (8007070 <prvAddCurrentTaskToDelayedList+0x94>)
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	68ba      	ldr	r2, [r7, #8]
 8007024:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007026:	68ba      	ldr	r2, [r7, #8]
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	429a      	cmp	r2, r3
 800702c:	d209      	bcs.n	8007042 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800702e:	4b12      	ldr	r3, [pc, #72]	; (8007078 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007030:	681a      	ldr	r2, [r3, #0]
 8007032:	4b0f      	ldr	r3, [pc, #60]	; (8007070 <prvAddCurrentTaskToDelayedList+0x94>)
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	3304      	adds	r3, #4
 8007038:	4619      	mov	r1, r3
 800703a:	4610      	mov	r0, r2
 800703c:	f7fe fac7 	bl	80055ce <vListInsert>
}
 8007040:	e010      	b.n	8007064 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007042:	4b0e      	ldr	r3, [pc, #56]	; (800707c <prvAddCurrentTaskToDelayedList+0xa0>)
 8007044:	681a      	ldr	r2, [r3, #0]
 8007046:	4b0a      	ldr	r3, [pc, #40]	; (8007070 <prvAddCurrentTaskToDelayedList+0x94>)
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	3304      	adds	r3, #4
 800704c:	4619      	mov	r1, r3
 800704e:	4610      	mov	r0, r2
 8007050:	f7fe fabd 	bl	80055ce <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007054:	4b0a      	ldr	r3, [pc, #40]	; (8007080 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	68ba      	ldr	r2, [r7, #8]
 800705a:	429a      	cmp	r2, r3
 800705c:	d202      	bcs.n	8007064 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800705e:	4a08      	ldr	r2, [pc, #32]	; (8007080 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007060:	68bb      	ldr	r3, [r7, #8]
 8007062:	6013      	str	r3, [r2, #0]
}
 8007064:	bf00      	nop
 8007066:	3710      	adds	r7, #16
 8007068:	46bd      	mov	sp, r7
 800706a:	bd80      	pop	{r7, pc}
 800706c:	20000bc4 	.word	0x20000bc4
 8007070:	200006ec 	.word	0x200006ec
 8007074:	20000bac 	.word	0x20000bac
 8007078:	20000b7c 	.word	0x20000b7c
 800707c:	20000b78 	.word	0x20000b78
 8007080:	20000be0 	.word	0x20000be0

08007084 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007084:	b580      	push	{r7, lr}
 8007086:	b08a      	sub	sp, #40	; 0x28
 8007088:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800708a:	2300      	movs	r3, #0
 800708c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800708e:	f000 fb07 	bl	80076a0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007092:	4b1c      	ldr	r3, [pc, #112]	; (8007104 <xTimerCreateTimerTask+0x80>)
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	2b00      	cmp	r3, #0
 8007098:	d021      	beq.n	80070de <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800709a:	2300      	movs	r3, #0
 800709c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800709e:	2300      	movs	r3, #0
 80070a0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80070a2:	1d3a      	adds	r2, r7, #4
 80070a4:	f107 0108 	add.w	r1, r7, #8
 80070a8:	f107 030c 	add.w	r3, r7, #12
 80070ac:	4618      	mov	r0, r3
 80070ae:	f7fd ffb7 	bl	8005020 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80070b2:	6879      	ldr	r1, [r7, #4]
 80070b4:	68bb      	ldr	r3, [r7, #8]
 80070b6:	68fa      	ldr	r2, [r7, #12]
 80070b8:	9202      	str	r2, [sp, #8]
 80070ba:	9301      	str	r3, [sp, #4]
 80070bc:	2302      	movs	r3, #2
 80070be:	9300      	str	r3, [sp, #0]
 80070c0:	2300      	movs	r3, #0
 80070c2:	460a      	mov	r2, r1
 80070c4:	4910      	ldr	r1, [pc, #64]	; (8007108 <xTimerCreateTimerTask+0x84>)
 80070c6:	4811      	ldr	r0, [pc, #68]	; (800710c <xTimerCreateTimerTask+0x88>)
 80070c8:	f7ff f828 	bl	800611c <xTaskCreateStatic>
 80070cc:	4603      	mov	r3, r0
 80070ce:	4a10      	ldr	r2, [pc, #64]	; (8007110 <xTimerCreateTimerTask+0x8c>)
 80070d0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80070d2:	4b0f      	ldr	r3, [pc, #60]	; (8007110 <xTimerCreateTimerTask+0x8c>)
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d001      	beq.n	80070de <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80070da:	2301      	movs	r3, #1
 80070dc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80070de:	697b      	ldr	r3, [r7, #20]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d10a      	bne.n	80070fa <xTimerCreateTimerTask+0x76>
	__asm volatile
 80070e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070e8:	f383 8811 	msr	BASEPRI, r3
 80070ec:	f3bf 8f6f 	isb	sy
 80070f0:	f3bf 8f4f 	dsb	sy
 80070f4:	613b      	str	r3, [r7, #16]
}
 80070f6:	bf00      	nop
 80070f8:	e7fe      	b.n	80070f8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80070fa:	697b      	ldr	r3, [r7, #20]
}
 80070fc:	4618      	mov	r0, r3
 80070fe:	3718      	adds	r7, #24
 8007100:	46bd      	mov	sp, r7
 8007102:	bd80      	pop	{r7, pc}
 8007104:	20000c1c 	.word	0x20000c1c
 8007108:	080080e4 	.word	0x080080e4
 800710c:	08007249 	.word	0x08007249
 8007110:	20000c20 	.word	0x20000c20

08007114 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007114:	b580      	push	{r7, lr}
 8007116:	b08a      	sub	sp, #40	; 0x28
 8007118:	af00      	add	r7, sp, #0
 800711a:	60f8      	str	r0, [r7, #12]
 800711c:	60b9      	str	r1, [r7, #8]
 800711e:	607a      	str	r2, [r7, #4]
 8007120:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007122:	2300      	movs	r3, #0
 8007124:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d10a      	bne.n	8007142 <xTimerGenericCommand+0x2e>
	__asm volatile
 800712c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007130:	f383 8811 	msr	BASEPRI, r3
 8007134:	f3bf 8f6f 	isb	sy
 8007138:	f3bf 8f4f 	dsb	sy
 800713c:	623b      	str	r3, [r7, #32]
}
 800713e:	bf00      	nop
 8007140:	e7fe      	b.n	8007140 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007142:	4b1a      	ldr	r3, [pc, #104]	; (80071ac <xTimerGenericCommand+0x98>)
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	2b00      	cmp	r3, #0
 8007148:	d02a      	beq.n	80071a0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800714a:	68bb      	ldr	r3, [r7, #8]
 800714c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007156:	68bb      	ldr	r3, [r7, #8]
 8007158:	2b05      	cmp	r3, #5
 800715a:	dc18      	bgt.n	800718e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800715c:	f7ff fe9a 	bl	8006e94 <xTaskGetSchedulerState>
 8007160:	4603      	mov	r3, r0
 8007162:	2b02      	cmp	r3, #2
 8007164:	d109      	bne.n	800717a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007166:	4b11      	ldr	r3, [pc, #68]	; (80071ac <xTimerGenericCommand+0x98>)
 8007168:	6818      	ldr	r0, [r3, #0]
 800716a:	f107 0110 	add.w	r1, r7, #16
 800716e:	2300      	movs	r3, #0
 8007170:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007172:	f7fe fbcd 	bl	8005910 <xQueueGenericSend>
 8007176:	6278      	str	r0, [r7, #36]	; 0x24
 8007178:	e012      	b.n	80071a0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800717a:	4b0c      	ldr	r3, [pc, #48]	; (80071ac <xTimerGenericCommand+0x98>)
 800717c:	6818      	ldr	r0, [r3, #0]
 800717e:	f107 0110 	add.w	r1, r7, #16
 8007182:	2300      	movs	r3, #0
 8007184:	2200      	movs	r2, #0
 8007186:	f7fe fbc3 	bl	8005910 <xQueueGenericSend>
 800718a:	6278      	str	r0, [r7, #36]	; 0x24
 800718c:	e008      	b.n	80071a0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800718e:	4b07      	ldr	r3, [pc, #28]	; (80071ac <xTimerGenericCommand+0x98>)
 8007190:	6818      	ldr	r0, [r3, #0]
 8007192:	f107 0110 	add.w	r1, r7, #16
 8007196:	2300      	movs	r3, #0
 8007198:	683a      	ldr	r2, [r7, #0]
 800719a:	f7fe fcb7 	bl	8005b0c <xQueueGenericSendFromISR>
 800719e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80071a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80071a2:	4618      	mov	r0, r3
 80071a4:	3728      	adds	r7, #40	; 0x28
 80071a6:	46bd      	mov	sp, r7
 80071a8:	bd80      	pop	{r7, pc}
 80071aa:	bf00      	nop
 80071ac:	20000c1c 	.word	0x20000c1c

080071b0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80071b0:	b580      	push	{r7, lr}
 80071b2:	b088      	sub	sp, #32
 80071b4:	af02      	add	r7, sp, #8
 80071b6:	6078      	str	r0, [r7, #4]
 80071b8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80071ba:	4b22      	ldr	r3, [pc, #136]	; (8007244 <prvProcessExpiredTimer+0x94>)
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	68db      	ldr	r3, [r3, #12]
 80071c0:	68db      	ldr	r3, [r3, #12]
 80071c2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80071c4:	697b      	ldr	r3, [r7, #20]
 80071c6:	3304      	adds	r3, #4
 80071c8:	4618      	mov	r0, r3
 80071ca:	f7fe fa39 	bl	8005640 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80071ce:	697b      	ldr	r3, [r7, #20]
 80071d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80071d4:	f003 0304 	and.w	r3, r3, #4
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d022      	beq.n	8007222 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80071dc:	697b      	ldr	r3, [r7, #20]
 80071de:	699a      	ldr	r2, [r3, #24]
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	18d1      	adds	r1, r2, r3
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	683a      	ldr	r2, [r7, #0]
 80071e8:	6978      	ldr	r0, [r7, #20]
 80071ea:	f000 f8d1 	bl	8007390 <prvInsertTimerInActiveList>
 80071ee:	4603      	mov	r3, r0
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d01f      	beq.n	8007234 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80071f4:	2300      	movs	r3, #0
 80071f6:	9300      	str	r3, [sp, #0]
 80071f8:	2300      	movs	r3, #0
 80071fa:	687a      	ldr	r2, [r7, #4]
 80071fc:	2100      	movs	r1, #0
 80071fe:	6978      	ldr	r0, [r7, #20]
 8007200:	f7ff ff88 	bl	8007114 <xTimerGenericCommand>
 8007204:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007206:	693b      	ldr	r3, [r7, #16]
 8007208:	2b00      	cmp	r3, #0
 800720a:	d113      	bne.n	8007234 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800720c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007210:	f383 8811 	msr	BASEPRI, r3
 8007214:	f3bf 8f6f 	isb	sy
 8007218:	f3bf 8f4f 	dsb	sy
 800721c:	60fb      	str	r3, [r7, #12]
}
 800721e:	bf00      	nop
 8007220:	e7fe      	b.n	8007220 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007222:	697b      	ldr	r3, [r7, #20]
 8007224:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007228:	f023 0301 	bic.w	r3, r3, #1
 800722c:	b2da      	uxtb	r2, r3
 800722e:	697b      	ldr	r3, [r7, #20]
 8007230:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007234:	697b      	ldr	r3, [r7, #20]
 8007236:	6a1b      	ldr	r3, [r3, #32]
 8007238:	6978      	ldr	r0, [r7, #20]
 800723a:	4798      	blx	r3
}
 800723c:	bf00      	nop
 800723e:	3718      	adds	r7, #24
 8007240:	46bd      	mov	sp, r7
 8007242:	bd80      	pop	{r7, pc}
 8007244:	20000c14 	.word	0x20000c14

08007248 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007248:	b580      	push	{r7, lr}
 800724a:	b084      	sub	sp, #16
 800724c:	af00      	add	r7, sp, #0
 800724e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007250:	f107 0308 	add.w	r3, r7, #8
 8007254:	4618      	mov	r0, r3
 8007256:	f000 f857 	bl	8007308 <prvGetNextExpireTime>
 800725a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800725c:	68bb      	ldr	r3, [r7, #8]
 800725e:	4619      	mov	r1, r3
 8007260:	68f8      	ldr	r0, [r7, #12]
 8007262:	f000 f803 	bl	800726c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007266:	f000 f8d5 	bl	8007414 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800726a:	e7f1      	b.n	8007250 <prvTimerTask+0x8>

0800726c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800726c:	b580      	push	{r7, lr}
 800726e:	b084      	sub	sp, #16
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]
 8007274:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007276:	f7ff f98d 	bl	8006594 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800727a:	f107 0308 	add.w	r3, r7, #8
 800727e:	4618      	mov	r0, r3
 8007280:	f000 f866 	bl	8007350 <prvSampleTimeNow>
 8007284:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007286:	68bb      	ldr	r3, [r7, #8]
 8007288:	2b00      	cmp	r3, #0
 800728a:	d130      	bne.n	80072ee <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800728c:	683b      	ldr	r3, [r7, #0]
 800728e:	2b00      	cmp	r3, #0
 8007290:	d10a      	bne.n	80072a8 <prvProcessTimerOrBlockTask+0x3c>
 8007292:	687a      	ldr	r2, [r7, #4]
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	429a      	cmp	r2, r3
 8007298:	d806      	bhi.n	80072a8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800729a:	f7ff f989 	bl	80065b0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800729e:	68f9      	ldr	r1, [r7, #12]
 80072a0:	6878      	ldr	r0, [r7, #4]
 80072a2:	f7ff ff85 	bl	80071b0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80072a6:	e024      	b.n	80072f2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80072a8:	683b      	ldr	r3, [r7, #0]
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d008      	beq.n	80072c0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80072ae:	4b13      	ldr	r3, [pc, #76]	; (80072fc <prvProcessTimerOrBlockTask+0x90>)
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d101      	bne.n	80072bc <prvProcessTimerOrBlockTask+0x50>
 80072b8:	2301      	movs	r3, #1
 80072ba:	e000      	b.n	80072be <prvProcessTimerOrBlockTask+0x52>
 80072bc:	2300      	movs	r3, #0
 80072be:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80072c0:	4b0f      	ldr	r3, [pc, #60]	; (8007300 <prvProcessTimerOrBlockTask+0x94>)
 80072c2:	6818      	ldr	r0, [r3, #0]
 80072c4:	687a      	ldr	r2, [r7, #4]
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	1ad3      	subs	r3, r2, r3
 80072ca:	683a      	ldr	r2, [r7, #0]
 80072cc:	4619      	mov	r1, r3
 80072ce:	f7fe fef1 	bl	80060b4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80072d2:	f7ff f96d 	bl	80065b0 <xTaskResumeAll>
 80072d6:	4603      	mov	r3, r0
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d10a      	bne.n	80072f2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80072dc:	4b09      	ldr	r3, [pc, #36]	; (8007304 <prvProcessTimerOrBlockTask+0x98>)
 80072de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80072e2:	601a      	str	r2, [r3, #0]
 80072e4:	f3bf 8f4f 	dsb	sy
 80072e8:	f3bf 8f6f 	isb	sy
}
 80072ec:	e001      	b.n	80072f2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80072ee:	f7ff f95f 	bl	80065b0 <xTaskResumeAll>
}
 80072f2:	bf00      	nop
 80072f4:	3710      	adds	r7, #16
 80072f6:	46bd      	mov	sp, r7
 80072f8:	bd80      	pop	{r7, pc}
 80072fa:	bf00      	nop
 80072fc:	20000c18 	.word	0x20000c18
 8007300:	20000c1c 	.word	0x20000c1c
 8007304:	e000ed04 	.word	0xe000ed04

08007308 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007308:	b480      	push	{r7}
 800730a:	b085      	sub	sp, #20
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007310:	4b0e      	ldr	r3, [pc, #56]	; (800734c <prvGetNextExpireTime+0x44>)
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	2b00      	cmp	r3, #0
 8007318:	d101      	bne.n	800731e <prvGetNextExpireTime+0x16>
 800731a:	2201      	movs	r2, #1
 800731c:	e000      	b.n	8007320 <prvGetNextExpireTime+0x18>
 800731e:	2200      	movs	r2, #0
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	2b00      	cmp	r3, #0
 800732a:	d105      	bne.n	8007338 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800732c:	4b07      	ldr	r3, [pc, #28]	; (800734c <prvGetNextExpireTime+0x44>)
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	68db      	ldr	r3, [r3, #12]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	60fb      	str	r3, [r7, #12]
 8007336:	e001      	b.n	800733c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007338:	2300      	movs	r3, #0
 800733a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800733c:	68fb      	ldr	r3, [r7, #12]
}
 800733e:	4618      	mov	r0, r3
 8007340:	3714      	adds	r7, #20
 8007342:	46bd      	mov	sp, r7
 8007344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007348:	4770      	bx	lr
 800734a:	bf00      	nop
 800734c:	20000c14 	.word	0x20000c14

08007350 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007350:	b580      	push	{r7, lr}
 8007352:	b084      	sub	sp, #16
 8007354:	af00      	add	r7, sp, #0
 8007356:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007358:	f7ff f9c8 	bl	80066ec <xTaskGetTickCount>
 800735c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800735e:	4b0b      	ldr	r3, [pc, #44]	; (800738c <prvSampleTimeNow+0x3c>)
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	68fa      	ldr	r2, [r7, #12]
 8007364:	429a      	cmp	r2, r3
 8007366:	d205      	bcs.n	8007374 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007368:	f000 f936 	bl	80075d8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2201      	movs	r2, #1
 8007370:	601a      	str	r2, [r3, #0]
 8007372:	e002      	b.n	800737a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	2200      	movs	r2, #0
 8007378:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800737a:	4a04      	ldr	r2, [pc, #16]	; (800738c <prvSampleTimeNow+0x3c>)
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007380:	68fb      	ldr	r3, [r7, #12]
}
 8007382:	4618      	mov	r0, r3
 8007384:	3710      	adds	r7, #16
 8007386:	46bd      	mov	sp, r7
 8007388:	bd80      	pop	{r7, pc}
 800738a:	bf00      	nop
 800738c:	20000c24 	.word	0x20000c24

08007390 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007390:	b580      	push	{r7, lr}
 8007392:	b086      	sub	sp, #24
 8007394:	af00      	add	r7, sp, #0
 8007396:	60f8      	str	r0, [r7, #12]
 8007398:	60b9      	str	r1, [r7, #8]
 800739a:	607a      	str	r2, [r7, #4]
 800739c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800739e:	2300      	movs	r3, #0
 80073a0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	68ba      	ldr	r2, [r7, #8]
 80073a6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	68fa      	ldr	r2, [r7, #12]
 80073ac:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80073ae:	68ba      	ldr	r2, [r7, #8]
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	429a      	cmp	r2, r3
 80073b4:	d812      	bhi.n	80073dc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80073b6:	687a      	ldr	r2, [r7, #4]
 80073b8:	683b      	ldr	r3, [r7, #0]
 80073ba:	1ad2      	subs	r2, r2, r3
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	699b      	ldr	r3, [r3, #24]
 80073c0:	429a      	cmp	r2, r3
 80073c2:	d302      	bcc.n	80073ca <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80073c4:	2301      	movs	r3, #1
 80073c6:	617b      	str	r3, [r7, #20]
 80073c8:	e01b      	b.n	8007402 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80073ca:	4b10      	ldr	r3, [pc, #64]	; (800740c <prvInsertTimerInActiveList+0x7c>)
 80073cc:	681a      	ldr	r2, [r3, #0]
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	3304      	adds	r3, #4
 80073d2:	4619      	mov	r1, r3
 80073d4:	4610      	mov	r0, r2
 80073d6:	f7fe f8fa 	bl	80055ce <vListInsert>
 80073da:	e012      	b.n	8007402 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80073dc:	687a      	ldr	r2, [r7, #4]
 80073de:	683b      	ldr	r3, [r7, #0]
 80073e0:	429a      	cmp	r2, r3
 80073e2:	d206      	bcs.n	80073f2 <prvInsertTimerInActiveList+0x62>
 80073e4:	68ba      	ldr	r2, [r7, #8]
 80073e6:	683b      	ldr	r3, [r7, #0]
 80073e8:	429a      	cmp	r2, r3
 80073ea:	d302      	bcc.n	80073f2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80073ec:	2301      	movs	r3, #1
 80073ee:	617b      	str	r3, [r7, #20]
 80073f0:	e007      	b.n	8007402 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80073f2:	4b07      	ldr	r3, [pc, #28]	; (8007410 <prvInsertTimerInActiveList+0x80>)
 80073f4:	681a      	ldr	r2, [r3, #0]
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	3304      	adds	r3, #4
 80073fa:	4619      	mov	r1, r3
 80073fc:	4610      	mov	r0, r2
 80073fe:	f7fe f8e6 	bl	80055ce <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007402:	697b      	ldr	r3, [r7, #20]
}
 8007404:	4618      	mov	r0, r3
 8007406:	3718      	adds	r7, #24
 8007408:	46bd      	mov	sp, r7
 800740a:	bd80      	pop	{r7, pc}
 800740c:	20000c18 	.word	0x20000c18
 8007410:	20000c14 	.word	0x20000c14

08007414 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007414:	b580      	push	{r7, lr}
 8007416:	b08e      	sub	sp, #56	; 0x38
 8007418:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800741a:	e0ca      	b.n	80075b2 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	2b00      	cmp	r3, #0
 8007420:	da18      	bge.n	8007454 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007422:	1d3b      	adds	r3, r7, #4
 8007424:	3304      	adds	r3, #4
 8007426:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007428:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800742a:	2b00      	cmp	r3, #0
 800742c:	d10a      	bne.n	8007444 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800742e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007432:	f383 8811 	msr	BASEPRI, r3
 8007436:	f3bf 8f6f 	isb	sy
 800743a:	f3bf 8f4f 	dsb	sy
 800743e:	61fb      	str	r3, [r7, #28]
}
 8007440:	bf00      	nop
 8007442:	e7fe      	b.n	8007442 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007444:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800744a:	6850      	ldr	r0, [r2, #4]
 800744c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800744e:	6892      	ldr	r2, [r2, #8]
 8007450:	4611      	mov	r1, r2
 8007452:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2b00      	cmp	r3, #0
 8007458:	f2c0 80aa 	blt.w	80075b0 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007462:	695b      	ldr	r3, [r3, #20]
 8007464:	2b00      	cmp	r3, #0
 8007466:	d004      	beq.n	8007472 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800746a:	3304      	adds	r3, #4
 800746c:	4618      	mov	r0, r3
 800746e:	f7fe f8e7 	bl	8005640 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007472:	463b      	mov	r3, r7
 8007474:	4618      	mov	r0, r3
 8007476:	f7ff ff6b 	bl	8007350 <prvSampleTimeNow>
 800747a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2b09      	cmp	r3, #9
 8007480:	f200 8097 	bhi.w	80075b2 <prvProcessReceivedCommands+0x19e>
 8007484:	a201      	add	r2, pc, #4	; (adr r2, 800748c <prvProcessReceivedCommands+0x78>)
 8007486:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800748a:	bf00      	nop
 800748c:	080074b5 	.word	0x080074b5
 8007490:	080074b5 	.word	0x080074b5
 8007494:	080074b5 	.word	0x080074b5
 8007498:	08007529 	.word	0x08007529
 800749c:	0800753d 	.word	0x0800753d
 80074a0:	08007587 	.word	0x08007587
 80074a4:	080074b5 	.word	0x080074b5
 80074a8:	080074b5 	.word	0x080074b5
 80074ac:	08007529 	.word	0x08007529
 80074b0:	0800753d 	.word	0x0800753d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80074b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074b6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80074ba:	f043 0301 	orr.w	r3, r3, #1
 80074be:	b2da      	uxtb	r2, r3
 80074c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074c2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80074c6:	68ba      	ldr	r2, [r7, #8]
 80074c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074ca:	699b      	ldr	r3, [r3, #24]
 80074cc:	18d1      	adds	r1, r2, r3
 80074ce:	68bb      	ldr	r3, [r7, #8]
 80074d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80074d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80074d4:	f7ff ff5c 	bl	8007390 <prvInsertTimerInActiveList>
 80074d8:	4603      	mov	r3, r0
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d069      	beq.n	80075b2 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80074de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074e0:	6a1b      	ldr	r3, [r3, #32]
 80074e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80074e4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80074e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80074ec:	f003 0304 	and.w	r3, r3, #4
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d05e      	beq.n	80075b2 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80074f4:	68ba      	ldr	r2, [r7, #8]
 80074f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074f8:	699b      	ldr	r3, [r3, #24]
 80074fa:	441a      	add	r2, r3
 80074fc:	2300      	movs	r3, #0
 80074fe:	9300      	str	r3, [sp, #0]
 8007500:	2300      	movs	r3, #0
 8007502:	2100      	movs	r1, #0
 8007504:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007506:	f7ff fe05 	bl	8007114 <xTimerGenericCommand>
 800750a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800750c:	6a3b      	ldr	r3, [r7, #32]
 800750e:	2b00      	cmp	r3, #0
 8007510:	d14f      	bne.n	80075b2 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8007512:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007516:	f383 8811 	msr	BASEPRI, r3
 800751a:	f3bf 8f6f 	isb	sy
 800751e:	f3bf 8f4f 	dsb	sy
 8007522:	61bb      	str	r3, [r7, #24]
}
 8007524:	bf00      	nop
 8007526:	e7fe      	b.n	8007526 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800752a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800752e:	f023 0301 	bic.w	r3, r3, #1
 8007532:	b2da      	uxtb	r2, r3
 8007534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007536:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800753a:	e03a      	b.n	80075b2 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800753c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800753e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007542:	f043 0301 	orr.w	r3, r3, #1
 8007546:	b2da      	uxtb	r2, r3
 8007548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800754a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800754e:	68ba      	ldr	r2, [r7, #8]
 8007550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007552:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007556:	699b      	ldr	r3, [r3, #24]
 8007558:	2b00      	cmp	r3, #0
 800755a:	d10a      	bne.n	8007572 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800755c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007560:	f383 8811 	msr	BASEPRI, r3
 8007564:	f3bf 8f6f 	isb	sy
 8007568:	f3bf 8f4f 	dsb	sy
 800756c:	617b      	str	r3, [r7, #20]
}
 800756e:	bf00      	nop
 8007570:	e7fe      	b.n	8007570 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007574:	699a      	ldr	r2, [r3, #24]
 8007576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007578:	18d1      	adds	r1, r2, r3
 800757a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800757c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800757e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007580:	f7ff ff06 	bl	8007390 <prvInsertTimerInActiveList>
					break;
 8007584:	e015      	b.n	80075b2 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007588:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800758c:	f003 0302 	and.w	r3, r3, #2
 8007590:	2b00      	cmp	r3, #0
 8007592:	d103      	bne.n	800759c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8007594:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007596:	f000 fbfb 	bl	8007d90 <vPortFree>
 800759a:	e00a      	b.n	80075b2 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800759c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800759e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80075a2:	f023 0301 	bic.w	r3, r3, #1
 80075a6:	b2da      	uxtb	r2, r3
 80075a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075aa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80075ae:	e000      	b.n	80075b2 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80075b0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80075b2:	4b08      	ldr	r3, [pc, #32]	; (80075d4 <prvProcessReceivedCommands+0x1c0>)
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	1d39      	adds	r1, r7, #4
 80075b8:	2200      	movs	r2, #0
 80075ba:	4618      	mov	r0, r3
 80075bc:	f7fe fb42 	bl	8005c44 <xQueueReceive>
 80075c0:	4603      	mov	r3, r0
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	f47f af2a 	bne.w	800741c <prvProcessReceivedCommands+0x8>
	}
}
 80075c8:	bf00      	nop
 80075ca:	bf00      	nop
 80075cc:	3730      	adds	r7, #48	; 0x30
 80075ce:	46bd      	mov	sp, r7
 80075d0:	bd80      	pop	{r7, pc}
 80075d2:	bf00      	nop
 80075d4:	20000c1c 	.word	0x20000c1c

080075d8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80075d8:	b580      	push	{r7, lr}
 80075da:	b088      	sub	sp, #32
 80075dc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80075de:	e048      	b.n	8007672 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80075e0:	4b2d      	ldr	r3, [pc, #180]	; (8007698 <prvSwitchTimerLists+0xc0>)
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	68db      	ldr	r3, [r3, #12]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80075ea:	4b2b      	ldr	r3, [pc, #172]	; (8007698 <prvSwitchTimerLists+0xc0>)
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	68db      	ldr	r3, [r3, #12]
 80075f0:	68db      	ldr	r3, [r3, #12]
 80075f2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	3304      	adds	r3, #4
 80075f8:	4618      	mov	r0, r3
 80075fa:	f7fe f821 	bl	8005640 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	6a1b      	ldr	r3, [r3, #32]
 8007602:	68f8      	ldr	r0, [r7, #12]
 8007604:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800760c:	f003 0304 	and.w	r3, r3, #4
 8007610:	2b00      	cmp	r3, #0
 8007612:	d02e      	beq.n	8007672 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	699b      	ldr	r3, [r3, #24]
 8007618:	693a      	ldr	r2, [r7, #16]
 800761a:	4413      	add	r3, r2
 800761c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800761e:	68ba      	ldr	r2, [r7, #8]
 8007620:	693b      	ldr	r3, [r7, #16]
 8007622:	429a      	cmp	r2, r3
 8007624:	d90e      	bls.n	8007644 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	68ba      	ldr	r2, [r7, #8]
 800762a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	68fa      	ldr	r2, [r7, #12]
 8007630:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007632:	4b19      	ldr	r3, [pc, #100]	; (8007698 <prvSwitchTimerLists+0xc0>)
 8007634:	681a      	ldr	r2, [r3, #0]
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	3304      	adds	r3, #4
 800763a:	4619      	mov	r1, r3
 800763c:	4610      	mov	r0, r2
 800763e:	f7fd ffc6 	bl	80055ce <vListInsert>
 8007642:	e016      	b.n	8007672 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007644:	2300      	movs	r3, #0
 8007646:	9300      	str	r3, [sp, #0]
 8007648:	2300      	movs	r3, #0
 800764a:	693a      	ldr	r2, [r7, #16]
 800764c:	2100      	movs	r1, #0
 800764e:	68f8      	ldr	r0, [r7, #12]
 8007650:	f7ff fd60 	bl	8007114 <xTimerGenericCommand>
 8007654:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	2b00      	cmp	r3, #0
 800765a:	d10a      	bne.n	8007672 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800765c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007660:	f383 8811 	msr	BASEPRI, r3
 8007664:	f3bf 8f6f 	isb	sy
 8007668:	f3bf 8f4f 	dsb	sy
 800766c:	603b      	str	r3, [r7, #0]
}
 800766e:	bf00      	nop
 8007670:	e7fe      	b.n	8007670 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007672:	4b09      	ldr	r3, [pc, #36]	; (8007698 <prvSwitchTimerLists+0xc0>)
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	2b00      	cmp	r3, #0
 800767a:	d1b1      	bne.n	80075e0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800767c:	4b06      	ldr	r3, [pc, #24]	; (8007698 <prvSwitchTimerLists+0xc0>)
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007682:	4b06      	ldr	r3, [pc, #24]	; (800769c <prvSwitchTimerLists+0xc4>)
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	4a04      	ldr	r2, [pc, #16]	; (8007698 <prvSwitchTimerLists+0xc0>)
 8007688:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800768a:	4a04      	ldr	r2, [pc, #16]	; (800769c <prvSwitchTimerLists+0xc4>)
 800768c:	697b      	ldr	r3, [r7, #20]
 800768e:	6013      	str	r3, [r2, #0]
}
 8007690:	bf00      	nop
 8007692:	3718      	adds	r7, #24
 8007694:	46bd      	mov	sp, r7
 8007696:	bd80      	pop	{r7, pc}
 8007698:	20000c14 	.word	0x20000c14
 800769c:	20000c18 	.word	0x20000c18

080076a0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80076a0:	b580      	push	{r7, lr}
 80076a2:	b082      	sub	sp, #8
 80076a4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80076a6:	f000 f985 	bl	80079b4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80076aa:	4b15      	ldr	r3, [pc, #84]	; (8007700 <prvCheckForValidListAndQueue+0x60>)
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d120      	bne.n	80076f4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80076b2:	4814      	ldr	r0, [pc, #80]	; (8007704 <prvCheckForValidListAndQueue+0x64>)
 80076b4:	f7fd ff3a 	bl	800552c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80076b8:	4813      	ldr	r0, [pc, #76]	; (8007708 <prvCheckForValidListAndQueue+0x68>)
 80076ba:	f7fd ff37 	bl	800552c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80076be:	4b13      	ldr	r3, [pc, #76]	; (800770c <prvCheckForValidListAndQueue+0x6c>)
 80076c0:	4a10      	ldr	r2, [pc, #64]	; (8007704 <prvCheckForValidListAndQueue+0x64>)
 80076c2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80076c4:	4b12      	ldr	r3, [pc, #72]	; (8007710 <prvCheckForValidListAndQueue+0x70>)
 80076c6:	4a10      	ldr	r2, [pc, #64]	; (8007708 <prvCheckForValidListAndQueue+0x68>)
 80076c8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80076ca:	2300      	movs	r3, #0
 80076cc:	9300      	str	r3, [sp, #0]
 80076ce:	4b11      	ldr	r3, [pc, #68]	; (8007714 <prvCheckForValidListAndQueue+0x74>)
 80076d0:	4a11      	ldr	r2, [pc, #68]	; (8007718 <prvCheckForValidListAndQueue+0x78>)
 80076d2:	2110      	movs	r1, #16
 80076d4:	200a      	movs	r0, #10
 80076d6:	f7fe f845 	bl	8005764 <xQueueGenericCreateStatic>
 80076da:	4603      	mov	r3, r0
 80076dc:	4a08      	ldr	r2, [pc, #32]	; (8007700 <prvCheckForValidListAndQueue+0x60>)
 80076de:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80076e0:	4b07      	ldr	r3, [pc, #28]	; (8007700 <prvCheckForValidListAndQueue+0x60>)
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d005      	beq.n	80076f4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80076e8:	4b05      	ldr	r3, [pc, #20]	; (8007700 <prvCheckForValidListAndQueue+0x60>)
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	490b      	ldr	r1, [pc, #44]	; (800771c <prvCheckForValidListAndQueue+0x7c>)
 80076ee:	4618      	mov	r0, r3
 80076f0:	f7fe fcb6 	bl	8006060 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80076f4:	f000 f98e 	bl	8007a14 <vPortExitCritical>
}
 80076f8:	bf00      	nop
 80076fa:	46bd      	mov	sp, r7
 80076fc:	bd80      	pop	{r7, pc}
 80076fe:	bf00      	nop
 8007700:	20000c1c 	.word	0x20000c1c
 8007704:	20000bec 	.word	0x20000bec
 8007708:	20000c00 	.word	0x20000c00
 800770c:	20000c14 	.word	0x20000c14
 8007710:	20000c18 	.word	0x20000c18
 8007714:	20000cc8 	.word	0x20000cc8
 8007718:	20000c28 	.word	0x20000c28
 800771c:	080080ec 	.word	0x080080ec

08007720 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8007720:	b580      	push	{r7, lr}
 8007722:	b08a      	sub	sp, #40	; 0x28
 8007724:	af00      	add	r7, sp, #0
 8007726:	60f8      	str	r0, [r7, #12]
 8007728:	60b9      	str	r1, [r7, #8]
 800772a:	607a      	str	r2, [r7, #4]
 800772c:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 800772e:	f06f 0301 	mvn.w	r3, #1
 8007732:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8007738:	68bb      	ldr	r3, [r7, #8]
 800773a:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007740:	4b06      	ldr	r3, [pc, #24]	; (800775c <xTimerPendFunctionCallFromISR+0x3c>)
 8007742:	6818      	ldr	r0, [r3, #0]
 8007744:	f107 0114 	add.w	r1, r7, #20
 8007748:	2300      	movs	r3, #0
 800774a:	683a      	ldr	r2, [r7, #0]
 800774c:	f7fe f9de 	bl	8005b0c <xQueueGenericSendFromISR>
 8007750:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 8007752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8007754:	4618      	mov	r0, r3
 8007756:	3728      	adds	r7, #40	; 0x28
 8007758:	46bd      	mov	sp, r7
 800775a:	bd80      	pop	{r7, pc}
 800775c:	20000c1c 	.word	0x20000c1c

08007760 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007760:	b480      	push	{r7}
 8007762:	b085      	sub	sp, #20
 8007764:	af00      	add	r7, sp, #0
 8007766:	60f8      	str	r0, [r7, #12]
 8007768:	60b9      	str	r1, [r7, #8]
 800776a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	3b04      	subs	r3, #4
 8007770:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007778:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	3b04      	subs	r3, #4
 800777e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007780:	68bb      	ldr	r3, [r7, #8]
 8007782:	f023 0201 	bic.w	r2, r3, #1
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	3b04      	subs	r3, #4
 800778e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007790:	4a0c      	ldr	r2, [pc, #48]	; (80077c4 <pxPortInitialiseStack+0x64>)
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	3b14      	subs	r3, #20
 800779a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800779c:	687a      	ldr	r2, [r7, #4]
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	3b04      	subs	r3, #4
 80077a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	f06f 0202 	mvn.w	r2, #2
 80077ae:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	3b20      	subs	r3, #32
 80077b4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80077b6:	68fb      	ldr	r3, [r7, #12]
}
 80077b8:	4618      	mov	r0, r3
 80077ba:	3714      	adds	r7, #20
 80077bc:	46bd      	mov	sp, r7
 80077be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c2:	4770      	bx	lr
 80077c4:	080077c9 	.word	0x080077c9

080077c8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80077c8:	b480      	push	{r7}
 80077ca:	b085      	sub	sp, #20
 80077cc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80077ce:	2300      	movs	r3, #0
 80077d0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80077d2:	4b12      	ldr	r3, [pc, #72]	; (800781c <prvTaskExitError+0x54>)
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80077da:	d00a      	beq.n	80077f2 <prvTaskExitError+0x2a>
	__asm volatile
 80077dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077e0:	f383 8811 	msr	BASEPRI, r3
 80077e4:	f3bf 8f6f 	isb	sy
 80077e8:	f3bf 8f4f 	dsb	sy
 80077ec:	60fb      	str	r3, [r7, #12]
}
 80077ee:	bf00      	nop
 80077f0:	e7fe      	b.n	80077f0 <prvTaskExitError+0x28>
	__asm volatile
 80077f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077f6:	f383 8811 	msr	BASEPRI, r3
 80077fa:	f3bf 8f6f 	isb	sy
 80077fe:	f3bf 8f4f 	dsb	sy
 8007802:	60bb      	str	r3, [r7, #8]
}
 8007804:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007806:	bf00      	nop
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2b00      	cmp	r3, #0
 800780c:	d0fc      	beq.n	8007808 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800780e:	bf00      	nop
 8007810:	bf00      	nop
 8007812:	3714      	adds	r7, #20
 8007814:	46bd      	mov	sp, r7
 8007816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781a:	4770      	bx	lr
 800781c:	20000010 	.word	0x20000010

08007820 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007820:	4b07      	ldr	r3, [pc, #28]	; (8007840 <pxCurrentTCBConst2>)
 8007822:	6819      	ldr	r1, [r3, #0]
 8007824:	6808      	ldr	r0, [r1, #0]
 8007826:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800782a:	f380 8809 	msr	PSP, r0
 800782e:	f3bf 8f6f 	isb	sy
 8007832:	f04f 0000 	mov.w	r0, #0
 8007836:	f380 8811 	msr	BASEPRI, r0
 800783a:	4770      	bx	lr
 800783c:	f3af 8000 	nop.w

08007840 <pxCurrentTCBConst2>:
 8007840:	200006ec 	.word	0x200006ec
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007844:	bf00      	nop
 8007846:	bf00      	nop

08007848 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007848:	4808      	ldr	r0, [pc, #32]	; (800786c <prvPortStartFirstTask+0x24>)
 800784a:	6800      	ldr	r0, [r0, #0]
 800784c:	6800      	ldr	r0, [r0, #0]
 800784e:	f380 8808 	msr	MSP, r0
 8007852:	f04f 0000 	mov.w	r0, #0
 8007856:	f380 8814 	msr	CONTROL, r0
 800785a:	b662      	cpsie	i
 800785c:	b661      	cpsie	f
 800785e:	f3bf 8f4f 	dsb	sy
 8007862:	f3bf 8f6f 	isb	sy
 8007866:	df00      	svc	0
 8007868:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800786a:	bf00      	nop
 800786c:	e000ed08 	.word	0xe000ed08

08007870 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007870:	b580      	push	{r7, lr}
 8007872:	b086      	sub	sp, #24
 8007874:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007876:	4b46      	ldr	r3, [pc, #280]	; (8007990 <xPortStartScheduler+0x120>)
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	4a46      	ldr	r2, [pc, #280]	; (8007994 <xPortStartScheduler+0x124>)
 800787c:	4293      	cmp	r3, r2
 800787e:	d10a      	bne.n	8007896 <xPortStartScheduler+0x26>
	__asm volatile
 8007880:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007884:	f383 8811 	msr	BASEPRI, r3
 8007888:	f3bf 8f6f 	isb	sy
 800788c:	f3bf 8f4f 	dsb	sy
 8007890:	613b      	str	r3, [r7, #16]
}
 8007892:	bf00      	nop
 8007894:	e7fe      	b.n	8007894 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007896:	4b3e      	ldr	r3, [pc, #248]	; (8007990 <xPortStartScheduler+0x120>)
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	4a3f      	ldr	r2, [pc, #252]	; (8007998 <xPortStartScheduler+0x128>)
 800789c:	4293      	cmp	r3, r2
 800789e:	d10a      	bne.n	80078b6 <xPortStartScheduler+0x46>
	__asm volatile
 80078a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078a4:	f383 8811 	msr	BASEPRI, r3
 80078a8:	f3bf 8f6f 	isb	sy
 80078ac:	f3bf 8f4f 	dsb	sy
 80078b0:	60fb      	str	r3, [r7, #12]
}
 80078b2:	bf00      	nop
 80078b4:	e7fe      	b.n	80078b4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80078b6:	4b39      	ldr	r3, [pc, #228]	; (800799c <xPortStartScheduler+0x12c>)
 80078b8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80078ba:	697b      	ldr	r3, [r7, #20]
 80078bc:	781b      	ldrb	r3, [r3, #0]
 80078be:	b2db      	uxtb	r3, r3
 80078c0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80078c2:	697b      	ldr	r3, [r7, #20]
 80078c4:	22ff      	movs	r2, #255	; 0xff
 80078c6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80078c8:	697b      	ldr	r3, [r7, #20]
 80078ca:	781b      	ldrb	r3, [r3, #0]
 80078cc:	b2db      	uxtb	r3, r3
 80078ce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80078d0:	78fb      	ldrb	r3, [r7, #3]
 80078d2:	b2db      	uxtb	r3, r3
 80078d4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80078d8:	b2da      	uxtb	r2, r3
 80078da:	4b31      	ldr	r3, [pc, #196]	; (80079a0 <xPortStartScheduler+0x130>)
 80078dc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80078de:	4b31      	ldr	r3, [pc, #196]	; (80079a4 <xPortStartScheduler+0x134>)
 80078e0:	2207      	movs	r2, #7
 80078e2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80078e4:	e009      	b.n	80078fa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80078e6:	4b2f      	ldr	r3, [pc, #188]	; (80079a4 <xPortStartScheduler+0x134>)
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	3b01      	subs	r3, #1
 80078ec:	4a2d      	ldr	r2, [pc, #180]	; (80079a4 <xPortStartScheduler+0x134>)
 80078ee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80078f0:	78fb      	ldrb	r3, [r7, #3]
 80078f2:	b2db      	uxtb	r3, r3
 80078f4:	005b      	lsls	r3, r3, #1
 80078f6:	b2db      	uxtb	r3, r3
 80078f8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80078fa:	78fb      	ldrb	r3, [r7, #3]
 80078fc:	b2db      	uxtb	r3, r3
 80078fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007902:	2b80      	cmp	r3, #128	; 0x80
 8007904:	d0ef      	beq.n	80078e6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007906:	4b27      	ldr	r3, [pc, #156]	; (80079a4 <xPortStartScheduler+0x134>)
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	f1c3 0307 	rsb	r3, r3, #7
 800790e:	2b04      	cmp	r3, #4
 8007910:	d00a      	beq.n	8007928 <xPortStartScheduler+0xb8>
	__asm volatile
 8007912:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007916:	f383 8811 	msr	BASEPRI, r3
 800791a:	f3bf 8f6f 	isb	sy
 800791e:	f3bf 8f4f 	dsb	sy
 8007922:	60bb      	str	r3, [r7, #8]
}
 8007924:	bf00      	nop
 8007926:	e7fe      	b.n	8007926 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007928:	4b1e      	ldr	r3, [pc, #120]	; (80079a4 <xPortStartScheduler+0x134>)
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	021b      	lsls	r3, r3, #8
 800792e:	4a1d      	ldr	r2, [pc, #116]	; (80079a4 <xPortStartScheduler+0x134>)
 8007930:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007932:	4b1c      	ldr	r3, [pc, #112]	; (80079a4 <xPortStartScheduler+0x134>)
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800793a:	4a1a      	ldr	r2, [pc, #104]	; (80079a4 <xPortStartScheduler+0x134>)
 800793c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	b2da      	uxtb	r2, r3
 8007942:	697b      	ldr	r3, [r7, #20]
 8007944:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007946:	4b18      	ldr	r3, [pc, #96]	; (80079a8 <xPortStartScheduler+0x138>)
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	4a17      	ldr	r2, [pc, #92]	; (80079a8 <xPortStartScheduler+0x138>)
 800794c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007950:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007952:	4b15      	ldr	r3, [pc, #84]	; (80079a8 <xPortStartScheduler+0x138>)
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	4a14      	ldr	r2, [pc, #80]	; (80079a8 <xPortStartScheduler+0x138>)
 8007958:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800795c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800795e:	f000 f8dd 	bl	8007b1c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007962:	4b12      	ldr	r3, [pc, #72]	; (80079ac <xPortStartScheduler+0x13c>)
 8007964:	2200      	movs	r2, #0
 8007966:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007968:	f000 f8fc 	bl	8007b64 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800796c:	4b10      	ldr	r3, [pc, #64]	; (80079b0 <xPortStartScheduler+0x140>)
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	4a0f      	ldr	r2, [pc, #60]	; (80079b0 <xPortStartScheduler+0x140>)
 8007972:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007976:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007978:	f7ff ff66 	bl	8007848 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800797c:	f7fe ff80 	bl	8006880 <vTaskSwitchContext>
	prvTaskExitError();
 8007980:	f7ff ff22 	bl	80077c8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007984:	2300      	movs	r3, #0
}
 8007986:	4618      	mov	r0, r3
 8007988:	3718      	adds	r7, #24
 800798a:	46bd      	mov	sp, r7
 800798c:	bd80      	pop	{r7, pc}
 800798e:	bf00      	nop
 8007990:	e000ed00 	.word	0xe000ed00
 8007994:	410fc271 	.word	0x410fc271
 8007998:	410fc270 	.word	0x410fc270
 800799c:	e000e400 	.word	0xe000e400
 80079a0:	20000d18 	.word	0x20000d18
 80079a4:	20000d1c 	.word	0x20000d1c
 80079a8:	e000ed20 	.word	0xe000ed20
 80079ac:	20000010 	.word	0x20000010
 80079b0:	e000ef34 	.word	0xe000ef34

080079b4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80079b4:	b480      	push	{r7}
 80079b6:	b083      	sub	sp, #12
 80079b8:	af00      	add	r7, sp, #0
	__asm volatile
 80079ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079be:	f383 8811 	msr	BASEPRI, r3
 80079c2:	f3bf 8f6f 	isb	sy
 80079c6:	f3bf 8f4f 	dsb	sy
 80079ca:	607b      	str	r3, [r7, #4]
}
 80079cc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80079ce:	4b0f      	ldr	r3, [pc, #60]	; (8007a0c <vPortEnterCritical+0x58>)
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	3301      	adds	r3, #1
 80079d4:	4a0d      	ldr	r2, [pc, #52]	; (8007a0c <vPortEnterCritical+0x58>)
 80079d6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80079d8:	4b0c      	ldr	r3, [pc, #48]	; (8007a0c <vPortEnterCritical+0x58>)
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	2b01      	cmp	r3, #1
 80079de:	d10f      	bne.n	8007a00 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80079e0:	4b0b      	ldr	r3, [pc, #44]	; (8007a10 <vPortEnterCritical+0x5c>)
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	b2db      	uxtb	r3, r3
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d00a      	beq.n	8007a00 <vPortEnterCritical+0x4c>
	__asm volatile
 80079ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079ee:	f383 8811 	msr	BASEPRI, r3
 80079f2:	f3bf 8f6f 	isb	sy
 80079f6:	f3bf 8f4f 	dsb	sy
 80079fa:	603b      	str	r3, [r7, #0]
}
 80079fc:	bf00      	nop
 80079fe:	e7fe      	b.n	80079fe <vPortEnterCritical+0x4a>
	}
}
 8007a00:	bf00      	nop
 8007a02:	370c      	adds	r7, #12
 8007a04:	46bd      	mov	sp, r7
 8007a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a0a:	4770      	bx	lr
 8007a0c:	20000010 	.word	0x20000010
 8007a10:	e000ed04 	.word	0xe000ed04

08007a14 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007a14:	b480      	push	{r7}
 8007a16:	b083      	sub	sp, #12
 8007a18:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007a1a:	4b12      	ldr	r3, [pc, #72]	; (8007a64 <vPortExitCritical+0x50>)
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d10a      	bne.n	8007a38 <vPortExitCritical+0x24>
	__asm volatile
 8007a22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a26:	f383 8811 	msr	BASEPRI, r3
 8007a2a:	f3bf 8f6f 	isb	sy
 8007a2e:	f3bf 8f4f 	dsb	sy
 8007a32:	607b      	str	r3, [r7, #4]
}
 8007a34:	bf00      	nop
 8007a36:	e7fe      	b.n	8007a36 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007a38:	4b0a      	ldr	r3, [pc, #40]	; (8007a64 <vPortExitCritical+0x50>)
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	3b01      	subs	r3, #1
 8007a3e:	4a09      	ldr	r2, [pc, #36]	; (8007a64 <vPortExitCritical+0x50>)
 8007a40:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007a42:	4b08      	ldr	r3, [pc, #32]	; (8007a64 <vPortExitCritical+0x50>)
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d105      	bne.n	8007a56 <vPortExitCritical+0x42>
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007a4e:	683b      	ldr	r3, [r7, #0]
 8007a50:	f383 8811 	msr	BASEPRI, r3
}
 8007a54:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007a56:	bf00      	nop
 8007a58:	370c      	adds	r7, #12
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a60:	4770      	bx	lr
 8007a62:	bf00      	nop
 8007a64:	20000010 	.word	0x20000010
	...

08007a70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007a70:	f3ef 8009 	mrs	r0, PSP
 8007a74:	f3bf 8f6f 	isb	sy
 8007a78:	4b15      	ldr	r3, [pc, #84]	; (8007ad0 <pxCurrentTCBConst>)
 8007a7a:	681a      	ldr	r2, [r3, #0]
 8007a7c:	f01e 0f10 	tst.w	lr, #16
 8007a80:	bf08      	it	eq
 8007a82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007a86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a8a:	6010      	str	r0, [r2, #0]
 8007a8c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007a90:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007a94:	f380 8811 	msr	BASEPRI, r0
 8007a98:	f3bf 8f4f 	dsb	sy
 8007a9c:	f3bf 8f6f 	isb	sy
 8007aa0:	f7fe feee 	bl	8006880 <vTaskSwitchContext>
 8007aa4:	f04f 0000 	mov.w	r0, #0
 8007aa8:	f380 8811 	msr	BASEPRI, r0
 8007aac:	bc09      	pop	{r0, r3}
 8007aae:	6819      	ldr	r1, [r3, #0]
 8007ab0:	6808      	ldr	r0, [r1, #0]
 8007ab2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ab6:	f01e 0f10 	tst.w	lr, #16
 8007aba:	bf08      	it	eq
 8007abc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007ac0:	f380 8809 	msr	PSP, r0
 8007ac4:	f3bf 8f6f 	isb	sy
 8007ac8:	4770      	bx	lr
 8007aca:	bf00      	nop
 8007acc:	f3af 8000 	nop.w

08007ad0 <pxCurrentTCBConst>:
 8007ad0:	200006ec 	.word	0x200006ec
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007ad4:	bf00      	nop
 8007ad6:	bf00      	nop

08007ad8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	b082      	sub	sp, #8
 8007adc:	af00      	add	r7, sp, #0
	__asm volatile
 8007ade:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ae2:	f383 8811 	msr	BASEPRI, r3
 8007ae6:	f3bf 8f6f 	isb	sy
 8007aea:	f3bf 8f4f 	dsb	sy
 8007aee:	607b      	str	r3, [r7, #4]
}
 8007af0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007af2:	f7fe fe0b 	bl	800670c <xTaskIncrementTick>
 8007af6:	4603      	mov	r3, r0
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d003      	beq.n	8007b04 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007afc:	4b06      	ldr	r3, [pc, #24]	; (8007b18 <xPortSysTickHandler+0x40>)
 8007afe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b02:	601a      	str	r2, [r3, #0]
 8007b04:	2300      	movs	r3, #0
 8007b06:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007b08:	683b      	ldr	r3, [r7, #0]
 8007b0a:	f383 8811 	msr	BASEPRI, r3
}
 8007b0e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007b10:	bf00      	nop
 8007b12:	3708      	adds	r7, #8
 8007b14:	46bd      	mov	sp, r7
 8007b16:	bd80      	pop	{r7, pc}
 8007b18:	e000ed04 	.word	0xe000ed04

08007b1c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007b1c:	b480      	push	{r7}
 8007b1e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007b20:	4b0b      	ldr	r3, [pc, #44]	; (8007b50 <vPortSetupTimerInterrupt+0x34>)
 8007b22:	2200      	movs	r2, #0
 8007b24:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007b26:	4b0b      	ldr	r3, [pc, #44]	; (8007b54 <vPortSetupTimerInterrupt+0x38>)
 8007b28:	2200      	movs	r2, #0
 8007b2a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007b2c:	4b0a      	ldr	r3, [pc, #40]	; (8007b58 <vPortSetupTimerInterrupt+0x3c>)
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	4a0a      	ldr	r2, [pc, #40]	; (8007b5c <vPortSetupTimerInterrupt+0x40>)
 8007b32:	fba2 2303 	umull	r2, r3, r2, r3
 8007b36:	099b      	lsrs	r3, r3, #6
 8007b38:	4a09      	ldr	r2, [pc, #36]	; (8007b60 <vPortSetupTimerInterrupt+0x44>)
 8007b3a:	3b01      	subs	r3, #1
 8007b3c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007b3e:	4b04      	ldr	r3, [pc, #16]	; (8007b50 <vPortSetupTimerInterrupt+0x34>)
 8007b40:	2207      	movs	r2, #7
 8007b42:	601a      	str	r2, [r3, #0]
}
 8007b44:	bf00      	nop
 8007b46:	46bd      	mov	sp, r7
 8007b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4c:	4770      	bx	lr
 8007b4e:	bf00      	nop
 8007b50:	e000e010 	.word	0xe000e010
 8007b54:	e000e018 	.word	0xe000e018
 8007b58:	20000004 	.word	0x20000004
 8007b5c:	10624dd3 	.word	0x10624dd3
 8007b60:	e000e014 	.word	0xe000e014

08007b64 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007b64:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007b74 <vPortEnableVFP+0x10>
 8007b68:	6801      	ldr	r1, [r0, #0]
 8007b6a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007b6e:	6001      	str	r1, [r0, #0]
 8007b70:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007b72:	bf00      	nop
 8007b74:	e000ed88 	.word	0xe000ed88

08007b78 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007b78:	b480      	push	{r7}
 8007b7a:	b085      	sub	sp, #20
 8007b7c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007b7e:	f3ef 8305 	mrs	r3, IPSR
 8007b82:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	2b0f      	cmp	r3, #15
 8007b88:	d914      	bls.n	8007bb4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007b8a:	4a17      	ldr	r2, [pc, #92]	; (8007be8 <vPortValidateInterruptPriority+0x70>)
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	4413      	add	r3, r2
 8007b90:	781b      	ldrb	r3, [r3, #0]
 8007b92:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007b94:	4b15      	ldr	r3, [pc, #84]	; (8007bec <vPortValidateInterruptPriority+0x74>)
 8007b96:	781b      	ldrb	r3, [r3, #0]
 8007b98:	7afa      	ldrb	r2, [r7, #11]
 8007b9a:	429a      	cmp	r2, r3
 8007b9c:	d20a      	bcs.n	8007bb4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8007b9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ba2:	f383 8811 	msr	BASEPRI, r3
 8007ba6:	f3bf 8f6f 	isb	sy
 8007baa:	f3bf 8f4f 	dsb	sy
 8007bae:	607b      	str	r3, [r7, #4]
}
 8007bb0:	bf00      	nop
 8007bb2:	e7fe      	b.n	8007bb2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007bb4:	4b0e      	ldr	r3, [pc, #56]	; (8007bf0 <vPortValidateInterruptPriority+0x78>)
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007bbc:	4b0d      	ldr	r3, [pc, #52]	; (8007bf4 <vPortValidateInterruptPriority+0x7c>)
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	429a      	cmp	r2, r3
 8007bc2:	d90a      	bls.n	8007bda <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007bc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bc8:	f383 8811 	msr	BASEPRI, r3
 8007bcc:	f3bf 8f6f 	isb	sy
 8007bd0:	f3bf 8f4f 	dsb	sy
 8007bd4:	603b      	str	r3, [r7, #0]
}
 8007bd6:	bf00      	nop
 8007bd8:	e7fe      	b.n	8007bd8 <vPortValidateInterruptPriority+0x60>
	}
 8007bda:	bf00      	nop
 8007bdc:	3714      	adds	r7, #20
 8007bde:	46bd      	mov	sp, r7
 8007be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be4:	4770      	bx	lr
 8007be6:	bf00      	nop
 8007be8:	e000e3f0 	.word	0xe000e3f0
 8007bec:	20000d18 	.word	0x20000d18
 8007bf0:	e000ed0c 	.word	0xe000ed0c
 8007bf4:	20000d1c 	.word	0x20000d1c

08007bf8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007bf8:	b580      	push	{r7, lr}
 8007bfa:	b08a      	sub	sp, #40	; 0x28
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007c00:	2300      	movs	r3, #0
 8007c02:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007c04:	f7fe fcc6 	bl	8006594 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007c08:	4b5b      	ldr	r3, [pc, #364]	; (8007d78 <pvPortMalloc+0x180>)
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d101      	bne.n	8007c14 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007c10:	f000 f920 	bl	8007e54 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007c14:	4b59      	ldr	r3, [pc, #356]	; (8007d7c <pvPortMalloc+0x184>)
 8007c16:	681a      	ldr	r2, [r3, #0]
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	4013      	ands	r3, r2
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	f040 8093 	bne.w	8007d48 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d01d      	beq.n	8007c64 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007c28:	2208      	movs	r2, #8
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	4413      	add	r3, r2
 8007c2e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	f003 0307 	and.w	r3, r3, #7
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d014      	beq.n	8007c64 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	f023 0307 	bic.w	r3, r3, #7
 8007c40:	3308      	adds	r3, #8
 8007c42:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	f003 0307 	and.w	r3, r3, #7
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d00a      	beq.n	8007c64 <pvPortMalloc+0x6c>
	__asm volatile
 8007c4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c52:	f383 8811 	msr	BASEPRI, r3
 8007c56:	f3bf 8f6f 	isb	sy
 8007c5a:	f3bf 8f4f 	dsb	sy
 8007c5e:	617b      	str	r3, [r7, #20]
}
 8007c60:	bf00      	nop
 8007c62:	e7fe      	b.n	8007c62 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d06e      	beq.n	8007d48 <pvPortMalloc+0x150>
 8007c6a:	4b45      	ldr	r3, [pc, #276]	; (8007d80 <pvPortMalloc+0x188>)
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	687a      	ldr	r2, [r7, #4]
 8007c70:	429a      	cmp	r2, r3
 8007c72:	d869      	bhi.n	8007d48 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007c74:	4b43      	ldr	r3, [pc, #268]	; (8007d84 <pvPortMalloc+0x18c>)
 8007c76:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007c78:	4b42      	ldr	r3, [pc, #264]	; (8007d84 <pvPortMalloc+0x18c>)
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007c7e:	e004      	b.n	8007c8a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c82:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c8c:	685b      	ldr	r3, [r3, #4]
 8007c8e:	687a      	ldr	r2, [r7, #4]
 8007c90:	429a      	cmp	r2, r3
 8007c92:	d903      	bls.n	8007c9c <pvPortMalloc+0xa4>
 8007c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d1f1      	bne.n	8007c80 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007c9c:	4b36      	ldr	r3, [pc, #216]	; (8007d78 <pvPortMalloc+0x180>)
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ca2:	429a      	cmp	r2, r3
 8007ca4:	d050      	beq.n	8007d48 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007ca6:	6a3b      	ldr	r3, [r7, #32]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	2208      	movs	r2, #8
 8007cac:	4413      	add	r3, r2
 8007cae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cb2:	681a      	ldr	r2, [r3, #0]
 8007cb4:	6a3b      	ldr	r3, [r7, #32]
 8007cb6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cba:	685a      	ldr	r2, [r3, #4]
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	1ad2      	subs	r2, r2, r3
 8007cc0:	2308      	movs	r3, #8
 8007cc2:	005b      	lsls	r3, r3, #1
 8007cc4:	429a      	cmp	r2, r3
 8007cc6:	d91f      	bls.n	8007d08 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007cc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	4413      	add	r3, r2
 8007cce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007cd0:	69bb      	ldr	r3, [r7, #24]
 8007cd2:	f003 0307 	and.w	r3, r3, #7
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d00a      	beq.n	8007cf0 <pvPortMalloc+0xf8>
	__asm volatile
 8007cda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cde:	f383 8811 	msr	BASEPRI, r3
 8007ce2:	f3bf 8f6f 	isb	sy
 8007ce6:	f3bf 8f4f 	dsb	sy
 8007cea:	613b      	str	r3, [r7, #16]
}
 8007cec:	bf00      	nop
 8007cee:	e7fe      	b.n	8007cee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cf2:	685a      	ldr	r2, [r3, #4]
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	1ad2      	subs	r2, r2, r3
 8007cf8:	69bb      	ldr	r3, [r7, #24]
 8007cfa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cfe:	687a      	ldr	r2, [r7, #4]
 8007d00:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007d02:	69b8      	ldr	r0, [r7, #24]
 8007d04:	f000 f908 	bl	8007f18 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007d08:	4b1d      	ldr	r3, [pc, #116]	; (8007d80 <pvPortMalloc+0x188>)
 8007d0a:	681a      	ldr	r2, [r3, #0]
 8007d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d0e:	685b      	ldr	r3, [r3, #4]
 8007d10:	1ad3      	subs	r3, r2, r3
 8007d12:	4a1b      	ldr	r2, [pc, #108]	; (8007d80 <pvPortMalloc+0x188>)
 8007d14:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007d16:	4b1a      	ldr	r3, [pc, #104]	; (8007d80 <pvPortMalloc+0x188>)
 8007d18:	681a      	ldr	r2, [r3, #0]
 8007d1a:	4b1b      	ldr	r3, [pc, #108]	; (8007d88 <pvPortMalloc+0x190>)
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	429a      	cmp	r2, r3
 8007d20:	d203      	bcs.n	8007d2a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007d22:	4b17      	ldr	r3, [pc, #92]	; (8007d80 <pvPortMalloc+0x188>)
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	4a18      	ldr	r2, [pc, #96]	; (8007d88 <pvPortMalloc+0x190>)
 8007d28:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d2c:	685a      	ldr	r2, [r3, #4]
 8007d2e:	4b13      	ldr	r3, [pc, #76]	; (8007d7c <pvPortMalloc+0x184>)
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	431a      	orrs	r2, r3
 8007d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d36:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d3a:	2200      	movs	r2, #0
 8007d3c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007d3e:	4b13      	ldr	r3, [pc, #76]	; (8007d8c <pvPortMalloc+0x194>)
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	3301      	adds	r3, #1
 8007d44:	4a11      	ldr	r2, [pc, #68]	; (8007d8c <pvPortMalloc+0x194>)
 8007d46:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007d48:	f7fe fc32 	bl	80065b0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007d4c:	69fb      	ldr	r3, [r7, #28]
 8007d4e:	f003 0307 	and.w	r3, r3, #7
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d00a      	beq.n	8007d6c <pvPortMalloc+0x174>
	__asm volatile
 8007d56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d5a:	f383 8811 	msr	BASEPRI, r3
 8007d5e:	f3bf 8f6f 	isb	sy
 8007d62:	f3bf 8f4f 	dsb	sy
 8007d66:	60fb      	str	r3, [r7, #12]
}
 8007d68:	bf00      	nop
 8007d6a:	e7fe      	b.n	8007d6a <pvPortMalloc+0x172>
	return pvReturn;
 8007d6c:	69fb      	ldr	r3, [r7, #28]
}
 8007d6e:	4618      	mov	r0, r3
 8007d70:	3728      	adds	r7, #40	; 0x28
 8007d72:	46bd      	mov	sp, r7
 8007d74:	bd80      	pop	{r7, pc}
 8007d76:	bf00      	nop
 8007d78:	20004928 	.word	0x20004928
 8007d7c:	2000493c 	.word	0x2000493c
 8007d80:	2000492c 	.word	0x2000492c
 8007d84:	20004920 	.word	0x20004920
 8007d88:	20004930 	.word	0x20004930
 8007d8c:	20004934 	.word	0x20004934

08007d90 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007d90:	b580      	push	{r7, lr}
 8007d92:	b086      	sub	sp, #24
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d04d      	beq.n	8007e3e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007da2:	2308      	movs	r3, #8
 8007da4:	425b      	negs	r3, r3
 8007da6:	697a      	ldr	r2, [r7, #20]
 8007da8:	4413      	add	r3, r2
 8007daa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007dac:	697b      	ldr	r3, [r7, #20]
 8007dae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007db0:	693b      	ldr	r3, [r7, #16]
 8007db2:	685a      	ldr	r2, [r3, #4]
 8007db4:	4b24      	ldr	r3, [pc, #144]	; (8007e48 <vPortFree+0xb8>)
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	4013      	ands	r3, r2
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d10a      	bne.n	8007dd4 <vPortFree+0x44>
	__asm volatile
 8007dbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dc2:	f383 8811 	msr	BASEPRI, r3
 8007dc6:	f3bf 8f6f 	isb	sy
 8007dca:	f3bf 8f4f 	dsb	sy
 8007dce:	60fb      	str	r3, [r7, #12]
}
 8007dd0:	bf00      	nop
 8007dd2:	e7fe      	b.n	8007dd2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007dd4:	693b      	ldr	r3, [r7, #16]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d00a      	beq.n	8007df2 <vPortFree+0x62>
	__asm volatile
 8007ddc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007de0:	f383 8811 	msr	BASEPRI, r3
 8007de4:	f3bf 8f6f 	isb	sy
 8007de8:	f3bf 8f4f 	dsb	sy
 8007dec:	60bb      	str	r3, [r7, #8]
}
 8007dee:	bf00      	nop
 8007df0:	e7fe      	b.n	8007df0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007df2:	693b      	ldr	r3, [r7, #16]
 8007df4:	685a      	ldr	r2, [r3, #4]
 8007df6:	4b14      	ldr	r3, [pc, #80]	; (8007e48 <vPortFree+0xb8>)
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	4013      	ands	r3, r2
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d01e      	beq.n	8007e3e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007e00:	693b      	ldr	r3, [r7, #16]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d11a      	bne.n	8007e3e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007e08:	693b      	ldr	r3, [r7, #16]
 8007e0a:	685a      	ldr	r2, [r3, #4]
 8007e0c:	4b0e      	ldr	r3, [pc, #56]	; (8007e48 <vPortFree+0xb8>)
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	43db      	mvns	r3, r3
 8007e12:	401a      	ands	r2, r3
 8007e14:	693b      	ldr	r3, [r7, #16]
 8007e16:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007e18:	f7fe fbbc 	bl	8006594 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007e1c:	693b      	ldr	r3, [r7, #16]
 8007e1e:	685a      	ldr	r2, [r3, #4]
 8007e20:	4b0a      	ldr	r3, [pc, #40]	; (8007e4c <vPortFree+0xbc>)
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	4413      	add	r3, r2
 8007e26:	4a09      	ldr	r2, [pc, #36]	; (8007e4c <vPortFree+0xbc>)
 8007e28:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007e2a:	6938      	ldr	r0, [r7, #16]
 8007e2c:	f000 f874 	bl	8007f18 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007e30:	4b07      	ldr	r3, [pc, #28]	; (8007e50 <vPortFree+0xc0>)
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	3301      	adds	r3, #1
 8007e36:	4a06      	ldr	r2, [pc, #24]	; (8007e50 <vPortFree+0xc0>)
 8007e38:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007e3a:	f7fe fbb9 	bl	80065b0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007e3e:	bf00      	nop
 8007e40:	3718      	adds	r7, #24
 8007e42:	46bd      	mov	sp, r7
 8007e44:	bd80      	pop	{r7, pc}
 8007e46:	bf00      	nop
 8007e48:	2000493c 	.word	0x2000493c
 8007e4c:	2000492c 	.word	0x2000492c
 8007e50:	20004938 	.word	0x20004938

08007e54 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007e54:	b480      	push	{r7}
 8007e56:	b085      	sub	sp, #20
 8007e58:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007e5a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8007e5e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007e60:	4b27      	ldr	r3, [pc, #156]	; (8007f00 <prvHeapInit+0xac>)
 8007e62:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	f003 0307 	and.w	r3, r3, #7
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d00c      	beq.n	8007e88 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	3307      	adds	r3, #7
 8007e72:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	f023 0307 	bic.w	r3, r3, #7
 8007e7a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007e7c:	68ba      	ldr	r2, [r7, #8]
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	1ad3      	subs	r3, r2, r3
 8007e82:	4a1f      	ldr	r2, [pc, #124]	; (8007f00 <prvHeapInit+0xac>)
 8007e84:	4413      	add	r3, r2
 8007e86:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007e8c:	4a1d      	ldr	r2, [pc, #116]	; (8007f04 <prvHeapInit+0xb0>)
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007e92:	4b1c      	ldr	r3, [pc, #112]	; (8007f04 <prvHeapInit+0xb0>)
 8007e94:	2200      	movs	r2, #0
 8007e96:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	68ba      	ldr	r2, [r7, #8]
 8007e9c:	4413      	add	r3, r2
 8007e9e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007ea0:	2208      	movs	r2, #8
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	1a9b      	subs	r3, r3, r2
 8007ea6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	f023 0307 	bic.w	r3, r3, #7
 8007eae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	4a15      	ldr	r2, [pc, #84]	; (8007f08 <prvHeapInit+0xb4>)
 8007eb4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007eb6:	4b14      	ldr	r3, [pc, #80]	; (8007f08 <prvHeapInit+0xb4>)
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	2200      	movs	r2, #0
 8007ebc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007ebe:	4b12      	ldr	r3, [pc, #72]	; (8007f08 <prvHeapInit+0xb4>)
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	2200      	movs	r2, #0
 8007ec4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007eca:	683b      	ldr	r3, [r7, #0]
 8007ecc:	68fa      	ldr	r2, [r7, #12]
 8007ece:	1ad2      	subs	r2, r2, r3
 8007ed0:	683b      	ldr	r3, [r7, #0]
 8007ed2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007ed4:	4b0c      	ldr	r3, [pc, #48]	; (8007f08 <prvHeapInit+0xb4>)
 8007ed6:	681a      	ldr	r2, [r3, #0]
 8007ed8:	683b      	ldr	r3, [r7, #0]
 8007eda:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007edc:	683b      	ldr	r3, [r7, #0]
 8007ede:	685b      	ldr	r3, [r3, #4]
 8007ee0:	4a0a      	ldr	r2, [pc, #40]	; (8007f0c <prvHeapInit+0xb8>)
 8007ee2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007ee4:	683b      	ldr	r3, [r7, #0]
 8007ee6:	685b      	ldr	r3, [r3, #4]
 8007ee8:	4a09      	ldr	r2, [pc, #36]	; (8007f10 <prvHeapInit+0xbc>)
 8007eea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007eec:	4b09      	ldr	r3, [pc, #36]	; (8007f14 <prvHeapInit+0xc0>)
 8007eee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007ef2:	601a      	str	r2, [r3, #0]
}
 8007ef4:	bf00      	nop
 8007ef6:	3714      	adds	r7, #20
 8007ef8:	46bd      	mov	sp, r7
 8007efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efe:	4770      	bx	lr
 8007f00:	20000d20 	.word	0x20000d20
 8007f04:	20004920 	.word	0x20004920
 8007f08:	20004928 	.word	0x20004928
 8007f0c:	20004930 	.word	0x20004930
 8007f10:	2000492c 	.word	0x2000492c
 8007f14:	2000493c 	.word	0x2000493c

08007f18 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007f18:	b480      	push	{r7}
 8007f1a:	b085      	sub	sp, #20
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007f20:	4b28      	ldr	r3, [pc, #160]	; (8007fc4 <prvInsertBlockIntoFreeList+0xac>)
 8007f22:	60fb      	str	r3, [r7, #12]
 8007f24:	e002      	b.n	8007f2c <prvInsertBlockIntoFreeList+0x14>
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	60fb      	str	r3, [r7, #12]
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	687a      	ldr	r2, [r7, #4]
 8007f32:	429a      	cmp	r2, r3
 8007f34:	d8f7      	bhi.n	8007f26 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	685b      	ldr	r3, [r3, #4]
 8007f3e:	68ba      	ldr	r2, [r7, #8]
 8007f40:	4413      	add	r3, r2
 8007f42:	687a      	ldr	r2, [r7, #4]
 8007f44:	429a      	cmp	r2, r3
 8007f46:	d108      	bne.n	8007f5a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	685a      	ldr	r2, [r3, #4]
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	685b      	ldr	r3, [r3, #4]
 8007f50:	441a      	add	r2, r3
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	685b      	ldr	r3, [r3, #4]
 8007f62:	68ba      	ldr	r2, [r7, #8]
 8007f64:	441a      	add	r2, r3
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	429a      	cmp	r2, r3
 8007f6c:	d118      	bne.n	8007fa0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	681a      	ldr	r2, [r3, #0]
 8007f72:	4b15      	ldr	r3, [pc, #84]	; (8007fc8 <prvInsertBlockIntoFreeList+0xb0>)
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	429a      	cmp	r2, r3
 8007f78:	d00d      	beq.n	8007f96 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	685a      	ldr	r2, [r3, #4]
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	685b      	ldr	r3, [r3, #4]
 8007f84:	441a      	add	r2, r3
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	681a      	ldr	r2, [r3, #0]
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	601a      	str	r2, [r3, #0]
 8007f94:	e008      	b.n	8007fa8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007f96:	4b0c      	ldr	r3, [pc, #48]	; (8007fc8 <prvInsertBlockIntoFreeList+0xb0>)
 8007f98:	681a      	ldr	r2, [r3, #0]
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	601a      	str	r2, [r3, #0]
 8007f9e:	e003      	b.n	8007fa8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	681a      	ldr	r2, [r3, #0]
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007fa8:	68fa      	ldr	r2, [r7, #12]
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	429a      	cmp	r2, r3
 8007fae:	d002      	beq.n	8007fb6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	687a      	ldr	r2, [r7, #4]
 8007fb4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007fb6:	bf00      	nop
 8007fb8:	3714      	adds	r7, #20
 8007fba:	46bd      	mov	sp, r7
 8007fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc0:	4770      	bx	lr
 8007fc2:	bf00      	nop
 8007fc4:	20004920 	.word	0x20004920
 8007fc8:	20004928 	.word	0x20004928

08007fcc <__libc_init_array>:
 8007fcc:	b570      	push	{r4, r5, r6, lr}
 8007fce:	4d0d      	ldr	r5, [pc, #52]	; (8008004 <__libc_init_array+0x38>)
 8007fd0:	4c0d      	ldr	r4, [pc, #52]	; (8008008 <__libc_init_array+0x3c>)
 8007fd2:	1b64      	subs	r4, r4, r5
 8007fd4:	10a4      	asrs	r4, r4, #2
 8007fd6:	2600      	movs	r6, #0
 8007fd8:	42a6      	cmp	r6, r4
 8007fda:	d109      	bne.n	8007ff0 <__libc_init_array+0x24>
 8007fdc:	4d0b      	ldr	r5, [pc, #44]	; (800800c <__libc_init_array+0x40>)
 8007fde:	4c0c      	ldr	r4, [pc, #48]	; (8008010 <__libc_init_array+0x44>)
 8007fe0:	f000 f82e 	bl	8008040 <_init>
 8007fe4:	1b64      	subs	r4, r4, r5
 8007fe6:	10a4      	asrs	r4, r4, #2
 8007fe8:	2600      	movs	r6, #0
 8007fea:	42a6      	cmp	r6, r4
 8007fec:	d105      	bne.n	8007ffa <__libc_init_array+0x2e>
 8007fee:	bd70      	pop	{r4, r5, r6, pc}
 8007ff0:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ff4:	4798      	blx	r3
 8007ff6:	3601      	adds	r6, #1
 8007ff8:	e7ee      	b.n	8007fd8 <__libc_init_array+0xc>
 8007ffa:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ffe:	4798      	blx	r3
 8008000:	3601      	adds	r6, #1
 8008002:	e7f2      	b.n	8007fea <__libc_init_array+0x1e>
 8008004:	08008228 	.word	0x08008228
 8008008:	08008228 	.word	0x08008228
 800800c:	08008228 	.word	0x08008228
 8008010:	0800822c 	.word	0x0800822c

08008014 <memcpy>:
 8008014:	440a      	add	r2, r1
 8008016:	4291      	cmp	r1, r2
 8008018:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800801c:	d100      	bne.n	8008020 <memcpy+0xc>
 800801e:	4770      	bx	lr
 8008020:	b510      	push	{r4, lr}
 8008022:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008026:	f803 4f01 	strb.w	r4, [r3, #1]!
 800802a:	4291      	cmp	r1, r2
 800802c:	d1f9      	bne.n	8008022 <memcpy+0xe>
 800802e:	bd10      	pop	{r4, pc}

08008030 <memset>:
 8008030:	4402      	add	r2, r0
 8008032:	4603      	mov	r3, r0
 8008034:	4293      	cmp	r3, r2
 8008036:	d100      	bne.n	800803a <memset+0xa>
 8008038:	4770      	bx	lr
 800803a:	f803 1b01 	strb.w	r1, [r3], #1
 800803e:	e7f9      	b.n	8008034 <memset+0x4>

08008040 <_init>:
 8008040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008042:	bf00      	nop
 8008044:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008046:	bc08      	pop	{r3}
 8008048:	469e      	mov	lr, r3
 800804a:	4770      	bx	lr

0800804c <_fini>:
 800804c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800804e:	bf00      	nop
 8008050:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008052:	bc08      	pop	{r3}
 8008054:	469e      	mov	lr, r3
 8008056:	4770      	bx	lr
