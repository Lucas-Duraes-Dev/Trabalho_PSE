
Projeto6_FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007098  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000124  08007268  08007268  00017268  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800738c  0800738c  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  0800738c  0800738c  0001738c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007394  08007394  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007394  08007394  00017394  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007398  08007398  00017398  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  0800739c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004af8  20000014  080073b0  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004b0c  080073b0  00024b0c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021eb5  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003d08  00000000  00000000  00041ef9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017f0  00000000  00000000  00045c08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000016c0  00000000  00000000  000473f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024bc4  00000000  00000000  00048ab8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001bcc0  00000000  00000000  0006d67c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000de9fc  00000000  00000000  0008933c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00167d38  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000065f8  00000000  00000000  00167d8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000014 	.word	0x20000014
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007250 	.word	0x08007250

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000018 	.word	0x20000018
 800020c:	08007250 	.word	0x08007250

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000220:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000224:	f000 b96e 	b.w	8000504 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	4604      	mov	r4, r0
 8000248:	468c      	mov	ip, r1
 800024a:	2b00      	cmp	r3, #0
 800024c:	f040 8083 	bne.w	8000356 <__udivmoddi4+0x116>
 8000250:	428a      	cmp	r2, r1
 8000252:	4617      	mov	r7, r2
 8000254:	d947      	bls.n	80002e6 <__udivmoddi4+0xa6>
 8000256:	fab2 f282 	clz	r2, r2
 800025a:	b142      	cbz	r2, 800026e <__udivmoddi4+0x2e>
 800025c:	f1c2 0020 	rsb	r0, r2, #32
 8000260:	fa24 f000 	lsr.w	r0, r4, r0
 8000264:	4091      	lsls	r1, r2
 8000266:	4097      	lsls	r7, r2
 8000268:	ea40 0c01 	orr.w	ip, r0, r1
 800026c:	4094      	lsls	r4, r2
 800026e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000272:	0c23      	lsrs	r3, r4, #16
 8000274:	fbbc f6f8 	udiv	r6, ip, r8
 8000278:	fa1f fe87 	uxth.w	lr, r7
 800027c:	fb08 c116 	mls	r1, r8, r6, ip
 8000280:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000284:	fb06 f10e 	mul.w	r1, r6, lr
 8000288:	4299      	cmp	r1, r3
 800028a:	d909      	bls.n	80002a0 <__udivmoddi4+0x60>
 800028c:	18fb      	adds	r3, r7, r3
 800028e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000292:	f080 8119 	bcs.w	80004c8 <__udivmoddi4+0x288>
 8000296:	4299      	cmp	r1, r3
 8000298:	f240 8116 	bls.w	80004c8 <__udivmoddi4+0x288>
 800029c:	3e02      	subs	r6, #2
 800029e:	443b      	add	r3, r7
 80002a0:	1a5b      	subs	r3, r3, r1
 80002a2:	b2a4      	uxth	r4, r4
 80002a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a8:	fb08 3310 	mls	r3, r8, r0, r3
 80002ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b0:	fb00 fe0e 	mul.w	lr, r0, lr
 80002b4:	45a6      	cmp	lr, r4
 80002b6:	d909      	bls.n	80002cc <__udivmoddi4+0x8c>
 80002b8:	193c      	adds	r4, r7, r4
 80002ba:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002be:	f080 8105 	bcs.w	80004cc <__udivmoddi4+0x28c>
 80002c2:	45a6      	cmp	lr, r4
 80002c4:	f240 8102 	bls.w	80004cc <__udivmoddi4+0x28c>
 80002c8:	3802      	subs	r0, #2
 80002ca:	443c      	add	r4, r7
 80002cc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002d0:	eba4 040e 	sub.w	r4, r4, lr
 80002d4:	2600      	movs	r6, #0
 80002d6:	b11d      	cbz	r5, 80002e0 <__udivmoddi4+0xa0>
 80002d8:	40d4      	lsrs	r4, r2
 80002da:	2300      	movs	r3, #0
 80002dc:	e9c5 4300 	strd	r4, r3, [r5]
 80002e0:	4631      	mov	r1, r6
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	b902      	cbnz	r2, 80002ea <__udivmoddi4+0xaa>
 80002e8:	deff      	udf	#255	; 0xff
 80002ea:	fab2 f282 	clz	r2, r2
 80002ee:	2a00      	cmp	r2, #0
 80002f0:	d150      	bne.n	8000394 <__udivmoddi4+0x154>
 80002f2:	1bcb      	subs	r3, r1, r7
 80002f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f8:	fa1f f887 	uxth.w	r8, r7
 80002fc:	2601      	movs	r6, #1
 80002fe:	fbb3 fcfe 	udiv	ip, r3, lr
 8000302:	0c21      	lsrs	r1, r4, #16
 8000304:	fb0e 331c 	mls	r3, lr, ip, r3
 8000308:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800030c:	fb08 f30c 	mul.w	r3, r8, ip
 8000310:	428b      	cmp	r3, r1
 8000312:	d907      	bls.n	8000324 <__udivmoddi4+0xe4>
 8000314:	1879      	adds	r1, r7, r1
 8000316:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0xe2>
 800031c:	428b      	cmp	r3, r1
 800031e:	f200 80e9 	bhi.w	80004f4 <__udivmoddi4+0x2b4>
 8000322:	4684      	mov	ip, r0
 8000324:	1ac9      	subs	r1, r1, r3
 8000326:	b2a3      	uxth	r3, r4
 8000328:	fbb1 f0fe 	udiv	r0, r1, lr
 800032c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000330:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000334:	fb08 f800 	mul.w	r8, r8, r0
 8000338:	45a0      	cmp	r8, r4
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x10c>
 800033c:	193c      	adds	r4, r7, r4
 800033e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x10a>
 8000344:	45a0      	cmp	r8, r4
 8000346:	f200 80d9 	bhi.w	80004fc <__udivmoddi4+0x2bc>
 800034a:	4618      	mov	r0, r3
 800034c:	eba4 0408 	sub.w	r4, r4, r8
 8000350:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000354:	e7bf      	b.n	80002d6 <__udivmoddi4+0x96>
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0x12e>
 800035a:	2d00      	cmp	r5, #0
 800035c:	f000 80b1 	beq.w	80004c2 <__udivmoddi4+0x282>
 8000360:	2600      	movs	r6, #0
 8000362:	e9c5 0100 	strd	r0, r1, [r5]
 8000366:	4630      	mov	r0, r6
 8000368:	4631      	mov	r1, r6
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f683 	clz	r6, r3
 8000372:	2e00      	cmp	r6, #0
 8000374:	d14a      	bne.n	800040c <__udivmoddi4+0x1cc>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0x140>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80b8 	bhi.w	80004f0 <__udivmoddi4+0x2b0>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0103 	sbc.w	r1, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	468c      	mov	ip, r1
 800038a:	2d00      	cmp	r5, #0
 800038c:	d0a8      	beq.n	80002e0 <__udivmoddi4+0xa0>
 800038e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000392:	e7a5      	b.n	80002e0 <__udivmoddi4+0xa0>
 8000394:	f1c2 0320 	rsb	r3, r2, #32
 8000398:	fa20 f603 	lsr.w	r6, r0, r3
 800039c:	4097      	lsls	r7, r2
 800039e:	fa01 f002 	lsl.w	r0, r1, r2
 80003a2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a6:	40d9      	lsrs	r1, r3
 80003a8:	4330      	orrs	r0, r6
 80003aa:	0c03      	lsrs	r3, r0, #16
 80003ac:	fbb1 f6fe 	udiv	r6, r1, lr
 80003b0:	fa1f f887 	uxth.w	r8, r7
 80003b4:	fb0e 1116 	mls	r1, lr, r6, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb06 f108 	mul.w	r1, r6, r8
 80003c0:	4299      	cmp	r1, r3
 80003c2:	fa04 f402 	lsl.w	r4, r4, r2
 80003c6:	d909      	bls.n	80003dc <__udivmoddi4+0x19c>
 80003c8:	18fb      	adds	r3, r7, r3
 80003ca:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 80003ce:	f080 808d 	bcs.w	80004ec <__udivmoddi4+0x2ac>
 80003d2:	4299      	cmp	r1, r3
 80003d4:	f240 808a 	bls.w	80004ec <__udivmoddi4+0x2ac>
 80003d8:	3e02      	subs	r6, #2
 80003da:	443b      	add	r3, r7
 80003dc:	1a5b      	subs	r3, r3, r1
 80003de:	b281      	uxth	r1, r0
 80003e0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003e4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ec:	fb00 f308 	mul.w	r3, r0, r8
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x1c4>
 80003f4:	1879      	adds	r1, r7, r1
 80003f6:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003fa:	d273      	bcs.n	80004e4 <__udivmoddi4+0x2a4>
 80003fc:	428b      	cmp	r3, r1
 80003fe:	d971      	bls.n	80004e4 <__udivmoddi4+0x2a4>
 8000400:	3802      	subs	r0, #2
 8000402:	4439      	add	r1, r7
 8000404:	1acb      	subs	r3, r1, r3
 8000406:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800040a:	e778      	b.n	80002fe <__udivmoddi4+0xbe>
 800040c:	f1c6 0c20 	rsb	ip, r6, #32
 8000410:	fa03 f406 	lsl.w	r4, r3, r6
 8000414:	fa22 f30c 	lsr.w	r3, r2, ip
 8000418:	431c      	orrs	r4, r3
 800041a:	fa20 f70c 	lsr.w	r7, r0, ip
 800041e:	fa01 f306 	lsl.w	r3, r1, r6
 8000422:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000426:	fa21 f10c 	lsr.w	r1, r1, ip
 800042a:	431f      	orrs	r7, r3
 800042c:	0c3b      	lsrs	r3, r7, #16
 800042e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000432:	fa1f f884 	uxth.w	r8, r4
 8000436:	fb0e 1119 	mls	r1, lr, r9, r1
 800043a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800043e:	fb09 fa08 	mul.w	sl, r9, r8
 8000442:	458a      	cmp	sl, r1
 8000444:	fa02 f206 	lsl.w	r2, r2, r6
 8000448:	fa00 f306 	lsl.w	r3, r0, r6
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x220>
 800044e:	1861      	adds	r1, r4, r1
 8000450:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000454:	d248      	bcs.n	80004e8 <__udivmoddi4+0x2a8>
 8000456:	458a      	cmp	sl, r1
 8000458:	d946      	bls.n	80004e8 <__udivmoddi4+0x2a8>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4421      	add	r1, r4
 8000460:	eba1 010a 	sub.w	r1, r1, sl
 8000464:	b2bf      	uxth	r7, r7
 8000466:	fbb1 f0fe 	udiv	r0, r1, lr
 800046a:	fb0e 1110 	mls	r1, lr, r0, r1
 800046e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000472:	fb00 f808 	mul.w	r8, r0, r8
 8000476:	45b8      	cmp	r8, r7
 8000478:	d907      	bls.n	800048a <__udivmoddi4+0x24a>
 800047a:	19e7      	adds	r7, r4, r7
 800047c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000480:	d22e      	bcs.n	80004e0 <__udivmoddi4+0x2a0>
 8000482:	45b8      	cmp	r8, r7
 8000484:	d92c      	bls.n	80004e0 <__udivmoddi4+0x2a0>
 8000486:	3802      	subs	r0, #2
 8000488:	4427      	add	r7, r4
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	eba7 0708 	sub.w	r7, r7, r8
 8000492:	fba0 8902 	umull	r8, r9, r0, r2
 8000496:	454f      	cmp	r7, r9
 8000498:	46c6      	mov	lr, r8
 800049a:	4649      	mov	r1, r9
 800049c:	d31a      	bcc.n	80004d4 <__udivmoddi4+0x294>
 800049e:	d017      	beq.n	80004d0 <__udivmoddi4+0x290>
 80004a0:	b15d      	cbz	r5, 80004ba <__udivmoddi4+0x27a>
 80004a2:	ebb3 020e 	subs.w	r2, r3, lr
 80004a6:	eb67 0701 	sbc.w	r7, r7, r1
 80004aa:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004ae:	40f2      	lsrs	r2, r6
 80004b0:	ea4c 0202 	orr.w	r2, ip, r2
 80004b4:	40f7      	lsrs	r7, r6
 80004b6:	e9c5 2700 	strd	r2, r7, [r5]
 80004ba:	2600      	movs	r6, #0
 80004bc:	4631      	mov	r1, r6
 80004be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c2:	462e      	mov	r6, r5
 80004c4:	4628      	mov	r0, r5
 80004c6:	e70b      	b.n	80002e0 <__udivmoddi4+0xa0>
 80004c8:	4606      	mov	r6, r0
 80004ca:	e6e9      	b.n	80002a0 <__udivmoddi4+0x60>
 80004cc:	4618      	mov	r0, r3
 80004ce:	e6fd      	b.n	80002cc <__udivmoddi4+0x8c>
 80004d0:	4543      	cmp	r3, r8
 80004d2:	d2e5      	bcs.n	80004a0 <__udivmoddi4+0x260>
 80004d4:	ebb8 0e02 	subs.w	lr, r8, r2
 80004d8:	eb69 0104 	sbc.w	r1, r9, r4
 80004dc:	3801      	subs	r0, #1
 80004de:	e7df      	b.n	80004a0 <__udivmoddi4+0x260>
 80004e0:	4608      	mov	r0, r1
 80004e2:	e7d2      	b.n	800048a <__udivmoddi4+0x24a>
 80004e4:	4660      	mov	r0, ip
 80004e6:	e78d      	b.n	8000404 <__udivmoddi4+0x1c4>
 80004e8:	4681      	mov	r9, r0
 80004ea:	e7b9      	b.n	8000460 <__udivmoddi4+0x220>
 80004ec:	4666      	mov	r6, ip
 80004ee:	e775      	b.n	80003dc <__udivmoddi4+0x19c>
 80004f0:	4630      	mov	r0, r6
 80004f2:	e74a      	b.n	800038a <__udivmoddi4+0x14a>
 80004f4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f8:	4439      	add	r1, r7
 80004fa:	e713      	b.n	8000324 <__udivmoddi4+0xe4>
 80004fc:	3802      	subs	r0, #2
 80004fe:	443c      	add	r4, r7
 8000500:	e724      	b.n	800034c <__udivmoddi4+0x10c>
 8000502:	bf00      	nop

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <configMotor>:

#include <L293D.h>


void configMotor(motor_dc* motor, TIM_HandleTypeDef timer, uint32_t timerChannel)
{
 8000508:	b084      	sub	sp, #16
 800050a:	b580      	push	{r7, lr}
 800050c:	b082      	sub	sp, #8
 800050e:	af00      	add	r7, sp, #0
 8000510:	6078      	str	r0, [r7, #4]
 8000512:	f107 0014 	add.w	r0, r7, #20
 8000516:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	motor->timer = timer;
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	3304      	adds	r3, #4
 800051e:	f107 0114 	add.w	r1, r7, #20
 8000522:	2248      	movs	r2, #72	; 0x48
 8000524:	4618      	mov	r0, r3
 8000526:	f006 fe7d 	bl	8007224 <memcpy>
	motor->timerChannel = timerChannel;
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800052e:	64da      	str	r2, [r3, #76]	; 0x4c
	motor->configured = 1;
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	2201      	movs	r2, #1
 8000534:	701a      	strb	r2, [r3, #0]
}
 8000536:	bf00      	nop
 8000538:	3708      	adds	r7, #8
 800053a:	46bd      	mov	sp, r7
 800053c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000540:	b004      	add	sp, #16
 8000542:	4770      	bx	lr

08000544 <configHC595>:

void configHC595(HC595* hc595, GPIO_TypeDef* SRCLK_port, uint16_t SRCLK_pin, GPIO_TypeDef* RCLK_port, uint16_t RCLK_pin, GPIO_TypeDef* SER_DATA_port, uint16_t SER_DATA_pin)
{
 8000544:	b480      	push	{r7}
 8000546:	b085      	sub	sp, #20
 8000548:	af00      	add	r7, sp, #0
 800054a:	60f8      	str	r0, [r7, #12]
 800054c:	60b9      	str	r1, [r7, #8]
 800054e:	603b      	str	r3, [r7, #0]
 8000550:	4613      	mov	r3, r2
 8000552:	80fb      	strh	r3, [r7, #6]
	hc595->SRCLK.port = SRCLK_port;
 8000554:	68fb      	ldr	r3, [r7, #12]
 8000556:	68ba      	ldr	r2, [r7, #8]
 8000558:	605a      	str	r2, [r3, #4]
	hc595->SRCLK.pin = SRCLK_pin;
 800055a:	88fa      	ldrh	r2, [r7, #6]
 800055c:	68fb      	ldr	r3, [r7, #12]
 800055e:	601a      	str	r2, [r3, #0]
	hc595->RCLK.port = RCLK_port;
 8000560:	68fb      	ldr	r3, [r7, #12]
 8000562:	683a      	ldr	r2, [r7, #0]
 8000564:	60da      	str	r2, [r3, #12]
	hc595->RCLK.pin = RCLK_pin;
 8000566:	8b3a      	ldrh	r2, [r7, #24]
 8000568:	68fb      	ldr	r3, [r7, #12]
 800056a:	609a      	str	r2, [r3, #8]
	hc595->SER_DATA.port = SER_DATA_port;
 800056c:	68fb      	ldr	r3, [r7, #12]
 800056e:	69fa      	ldr	r2, [r7, #28]
 8000570:	615a      	str	r2, [r3, #20]
	hc595->SER_DATA.pin = SER_DATA_pin;
 8000572:	8c3a      	ldrh	r2, [r7, #32]
 8000574:	68fb      	ldr	r3, [r7, #12]
 8000576:	611a      	str	r2, [r3, #16]
	hc595->currentConfiguration = 0;
 8000578:	68fb      	ldr	r3, [r7, #12]
 800057a:	2200      	movs	r2, #0
 800057c:	761a      	strb	r2, [r3, #24]
	hc595->configured = 1;
 800057e:	68fb      	ldr	r3, [r7, #12]
 8000580:	2201      	movs	r2, #1
 8000582:	765a      	strb	r2, [r3, #25]
}
 8000584:	bf00      	nop
 8000586:	3714      	adds	r7, #20
 8000588:	46bd      	mov	sp, r7
 800058a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058e:	4770      	bx	lr

08000590 <configuraMagnetometro>:
/*
 * Configura os registradores de taxa de aquisição, ganho e modo de operação.
 *
*/
void configuraMagnetometro(I2C_HandleTypeDef i2c, uint8_t taxaAquisicao, uint8_t ganho, uint8_t modoOperacao)
{
 8000590:	b084      	sub	sp, #16
 8000592:	b580      	push	{r7, lr}
 8000594:	b084      	sub	sp, #16
 8000596:	af04      	add	r7, sp, #16
 8000598:	f107 0c08 	add.w	ip, r7, #8
 800059c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	  // Configuração do ganho, taxa de aquisição e modo de operação do magnetômetro
	  HAL_I2C_Mem_Write(&i2c, HMC5883l_ADDRESS, CONFIG_A_REGISTER , 1, &taxaAquisicao , 1, 100);
 80005a0:	2364      	movs	r3, #100	; 0x64
 80005a2:	9302      	str	r3, [sp, #8]
 80005a4:	2301      	movs	r3, #1
 80005a6:	9301      	str	r3, [sp, #4]
 80005a8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80005ac:	9300      	str	r3, [sp, #0]
 80005ae:	2301      	movs	r3, #1
 80005b0:	2200      	movs	r2, #0
 80005b2:	213c      	movs	r1, #60	; 0x3c
 80005b4:	f107 0008 	add.w	r0, r7, #8
 80005b8:	f001 f9e4 	bl	8001984 <HAL_I2C_Mem_Write>
	  HAL_I2C_Mem_Write(&i2c, HMC5883l_ADDRESS, CONFIG_B_REGISTER , 1, &ganho, 1, 100);
 80005bc:	2364      	movs	r3, #100	; 0x64
 80005be:	9302      	str	r3, [sp, #8]
 80005c0:	2301      	movs	r3, #1
 80005c2:	9301      	str	r3, [sp, #4]
 80005c4:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80005c8:	9300      	str	r3, [sp, #0]
 80005ca:	2301      	movs	r3, #1
 80005cc:	2201      	movs	r2, #1
 80005ce:	213c      	movs	r1, #60	; 0x3c
 80005d0:	f107 0008 	add.w	r0, r7, #8
 80005d4:	f001 f9d6 	bl	8001984 <HAL_I2C_Mem_Write>
	  HAL_I2C_Mem_Write(&i2c, HMC5883l_ADDRESS, MODE_REGISTER, 1, &modoOperacao, 1, 100);
 80005d8:	2364      	movs	r3, #100	; 0x64
 80005da:	9302      	str	r3, [sp, #8]
 80005dc:	2301      	movs	r3, #1
 80005de:	9301      	str	r3, [sp, #4]
 80005e0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80005e4:	9300      	str	r3, [sp, #0]
 80005e6:	2301      	movs	r3, #1
 80005e8:	2202      	movs	r2, #2
 80005ea:	213c      	movs	r1, #60	; 0x3c
 80005ec:	f107 0008 	add.w	r0, r7, #8
 80005f0:	f001 f9c8 	bl	8001984 <HAL_I2C_Mem_Write>
}
 80005f4:	bf00      	nop
 80005f6:	46bd      	mov	sp, r7
 80005f8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80005fc:	b004      	add	sp, #16
 80005fe:	4770      	bx	lr

08000600 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000604:	f000 fda8 	bl	8001158 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000608:	f000 f85e 	bl	80006c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800060c:	f000 f9e4 	bl	80009d8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000610:	f000 f8c6 	bl	80007a0 <MX_I2C1_Init>
  MX_TIM4_Init();
 8000614:	f000 f8f2 	bl	80007fc <MX_TIM4_Init>
  MX_TIM14_Init();
 8000618:	f000 f966 	bl	80008e8 <MX_TIM14_Init>
  MX_USART3_UART_Init();
 800061c:	f000 f9b2 	bl	8000984 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000620:	f003 fc0c 	bl	8003e3c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of controlador */
  controladorHandle = osThreadNew(startControlador, NULL, &controlador_attributes);
 8000624:	4a18      	ldr	r2, [pc, #96]	; (8000688 <main+0x88>)
 8000626:	2100      	movs	r1, #0
 8000628:	4818      	ldr	r0, [pc, #96]	; (800068c <main+0x8c>)
 800062a:	f003 fc51 	bl	8003ed0 <osThreadNew>
 800062e:	4603      	mov	r3, r0
 8000630:	4a17      	ldr	r2, [pc, #92]	; (8000690 <main+0x90>)
 8000632:	6013      	str	r3, [r2, #0]

  /* creation of magnetometro */
  magnetometroHandle = osThreadNew(startMagnetometro, NULL, &magnetometro_attributes);
 8000634:	4a17      	ldr	r2, [pc, #92]	; (8000694 <main+0x94>)
 8000636:	2100      	movs	r1, #0
 8000638:	4817      	ldr	r0, [pc, #92]	; (8000698 <main+0x98>)
 800063a:	f003 fc49 	bl	8003ed0 <osThreadNew>
 800063e:	4603      	mov	r3, r0
 8000640:	4a16      	ldr	r2, [pc, #88]	; (800069c <main+0x9c>)
 8000642:	6013      	str	r3, [r2, #0]

  /* creation of servoMotor */
  servoMotorHandle = osThreadNew(startServoMotor, NULL, &servoMotor_attributes);
 8000644:	4a16      	ldr	r2, [pc, #88]	; (80006a0 <main+0xa0>)
 8000646:	2100      	movs	r1, #0
 8000648:	4816      	ldr	r0, [pc, #88]	; (80006a4 <main+0xa4>)
 800064a:	f003 fc41 	bl	8003ed0 <osThreadNew>
 800064e:	4603      	mov	r3, r0
 8000650:	4a15      	ldr	r2, [pc, #84]	; (80006a8 <main+0xa8>)
 8000652:	6013      	str	r3, [r2, #0]

  /* creation of bluetooth */
  bluetoothHandle = osThreadNew(startBluetooth, NULL, &bluetooth_attributes);
 8000654:	4a15      	ldr	r2, [pc, #84]	; (80006ac <main+0xac>)
 8000656:	2100      	movs	r1, #0
 8000658:	4815      	ldr	r0, [pc, #84]	; (80006b0 <main+0xb0>)
 800065a:	f003 fc39 	bl	8003ed0 <osThreadNew>
 800065e:	4603      	mov	r3, r0
 8000660:	4a14      	ldr	r2, [pc, #80]	; (80006b4 <main+0xb4>)
 8000662:	6013      	str	r3, [r2, #0]

  /* creation of motorDC */
  motorDCHandle = osThreadNew(startMotorDC, NULL, &motorDC_attributes);
 8000664:	4a14      	ldr	r2, [pc, #80]	; (80006b8 <main+0xb8>)
 8000666:	2100      	movs	r1, #0
 8000668:	4814      	ldr	r0, [pc, #80]	; (80006bc <main+0xbc>)
 800066a:	f003 fc31 	bl	8003ed0 <osThreadNew>
 800066e:	4603      	mov	r3, r0
 8000670:	4a13      	ldr	r2, [pc, #76]	; (80006c0 <main+0xc0>)
 8000672:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  // Declara grupo de eventos utilizado
  grupoEventosBarco = osEventFlagsNew(NULL);
 8000674:	2000      	movs	r0, #0
 8000676:	f003 fcd8 	bl	800402a <osEventFlagsNew>
 800067a:	4603      	mov	r3, r0
 800067c:	4a11      	ldr	r2, [pc, #68]	; (80006c4 <main+0xc4>)
 800067e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000680:	f003 fc00 	bl	8003e84 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000684:	e7fe      	b.n	8000684 <main+0x84>
 8000686:	bf00      	nop
 8000688:	080072c0 	.word	0x080072c0
 800068c:	08000ac9 	.word	0x08000ac9
 8000690:	20004a24 	.word	0x20004a24
 8000694:	080072e4 	.word	0x080072e4
 8000698:	08000b55 	.word	0x08000b55
 800069c:	20004a28 	.word	0x20004a28
 80006a0:	08007308 	.word	0x08007308
 80006a4:	08000bd5 	.word	0x08000bd5
 80006a8:	20004a30 	.word	0x20004a30
 80006ac:	0800732c 	.word	0x0800732c
 80006b0:	08000bf9 	.word	0x08000bf9
 80006b4:	20004a2c 	.word	0x20004a2c
 80006b8:	08007350 	.word	0x08007350
 80006bc:	08000c3d 	.word	0x08000c3d
 80006c0:	20004a34 	.word	0x20004a34
 80006c4:	20004a20 	.word	0x20004a20

080006c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b094      	sub	sp, #80	; 0x50
 80006cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ce:	f107 031c 	add.w	r3, r7, #28
 80006d2:	2234      	movs	r2, #52	; 0x34
 80006d4:	2100      	movs	r1, #0
 80006d6:	4618      	mov	r0, r3
 80006d8:	f006 fdb2 	bl	8007240 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006dc:	f107 0308 	add.w	r3, r7, #8
 80006e0:	2200      	movs	r2, #0
 80006e2:	601a      	str	r2, [r3, #0]
 80006e4:	605a      	str	r2, [r3, #4]
 80006e6:	609a      	str	r2, [r3, #8]
 80006e8:	60da      	str	r2, [r3, #12]
 80006ea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006ec:	2300      	movs	r3, #0
 80006ee:	607b      	str	r3, [r7, #4]
 80006f0:	4b29      	ldr	r3, [pc, #164]	; (8000798 <SystemClock_Config+0xd0>)
 80006f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f4:	4a28      	ldr	r2, [pc, #160]	; (8000798 <SystemClock_Config+0xd0>)
 80006f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006fa:	6413      	str	r3, [r2, #64]	; 0x40
 80006fc:	4b26      	ldr	r3, [pc, #152]	; (8000798 <SystemClock_Config+0xd0>)
 80006fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000700:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000704:	607b      	str	r3, [r7, #4]
 8000706:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000708:	2300      	movs	r3, #0
 800070a:	603b      	str	r3, [r7, #0]
 800070c:	4b23      	ldr	r3, [pc, #140]	; (800079c <SystemClock_Config+0xd4>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000714:	4a21      	ldr	r2, [pc, #132]	; (800079c <SystemClock_Config+0xd4>)
 8000716:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800071a:	6013      	str	r3, [r2, #0]
 800071c:	4b1f      	ldr	r3, [pc, #124]	; (800079c <SystemClock_Config+0xd4>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000724:	603b      	str	r3, [r7, #0]
 8000726:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000728:	2302      	movs	r3, #2
 800072a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800072c:	2301      	movs	r3, #1
 800072e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000730:	2310      	movs	r3, #16
 8000732:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000734:	2302      	movs	r3, #2
 8000736:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000738:	2300      	movs	r3, #0
 800073a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 800073c:	2308      	movs	r3, #8
 800073e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 80;
 8000740:	2350      	movs	r3, #80	; 0x50
 8000742:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000744:	2302      	movs	r3, #2
 8000746:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000748:	2302      	movs	r3, #2
 800074a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800074c:	2302      	movs	r3, #2
 800074e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000750:	f107 031c 	add.w	r3, r7, #28
 8000754:	4618      	mov	r0, r3
 8000756:	f001 ff2b 	bl	80025b0 <HAL_RCC_OscConfig>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000760:	f000 faca 	bl	8000cf8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000764:	230f      	movs	r3, #15
 8000766:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000768:	2302      	movs	r3, #2
 800076a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 800076c:	2380      	movs	r3, #128	; 0x80
 800076e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000770:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000774:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000776:	2300      	movs	r3, #0
 8000778:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800077a:	f107 0308 	add.w	r3, r7, #8
 800077e:	2101      	movs	r1, #1
 8000780:	4618      	mov	r0, r3
 8000782:	f001 fc17 	bl	8001fb4 <HAL_RCC_ClockConfig>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 800078c:	f000 fab4 	bl	8000cf8 <Error_Handler>
  }
}
 8000790:	bf00      	nop
 8000792:	3750      	adds	r7, #80	; 0x50
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}
 8000798:	40023800 	.word	0x40023800
 800079c:	40007000 	.word	0x40007000

080007a0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007a4:	4b12      	ldr	r3, [pc, #72]	; (80007f0 <MX_I2C1_Init+0x50>)
 80007a6:	4a13      	ldr	r2, [pc, #76]	; (80007f4 <MX_I2C1_Init+0x54>)
 80007a8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80007aa:	4b11      	ldr	r3, [pc, #68]	; (80007f0 <MX_I2C1_Init+0x50>)
 80007ac:	4a12      	ldr	r2, [pc, #72]	; (80007f8 <MX_I2C1_Init+0x58>)
 80007ae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80007b0:	4b0f      	ldr	r3, [pc, #60]	; (80007f0 <MX_I2C1_Init+0x50>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80007b6:	4b0e      	ldr	r3, [pc, #56]	; (80007f0 <MX_I2C1_Init+0x50>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007bc:	4b0c      	ldr	r3, [pc, #48]	; (80007f0 <MX_I2C1_Init+0x50>)
 80007be:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80007c2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007c4:	4b0a      	ldr	r3, [pc, #40]	; (80007f0 <MX_I2C1_Init+0x50>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80007ca:	4b09      	ldr	r3, [pc, #36]	; (80007f0 <MX_I2C1_Init+0x50>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007d0:	4b07      	ldr	r3, [pc, #28]	; (80007f0 <MX_I2C1_Init+0x50>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007d6:	4b06      	ldr	r3, [pc, #24]	; (80007f0 <MX_I2C1_Init+0x50>)
 80007d8:	2200      	movs	r2, #0
 80007da:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007dc:	4804      	ldr	r0, [pc, #16]	; (80007f0 <MX_I2C1_Init+0x50>)
 80007de:	f000 ff8d 	bl	80016fc <HAL_I2C_Init>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80007e8:	f000 fa86 	bl	8000cf8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007ec:	bf00      	nop
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	200049cc 	.word	0x200049cc
 80007f4:	40005400 	.word	0x40005400
 80007f8:	000186a0 	.word	0x000186a0

080007fc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b08e      	sub	sp, #56	; 0x38
 8000800:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000802:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000806:	2200      	movs	r2, #0
 8000808:	601a      	str	r2, [r3, #0]
 800080a:	605a      	str	r2, [r3, #4]
 800080c:	609a      	str	r2, [r3, #8]
 800080e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000810:	f107 0320 	add.w	r3, r7, #32
 8000814:	2200      	movs	r2, #0
 8000816:	601a      	str	r2, [r3, #0]
 8000818:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800081a:	1d3b      	adds	r3, r7, #4
 800081c:	2200      	movs	r2, #0
 800081e:	601a      	str	r2, [r3, #0]
 8000820:	605a      	str	r2, [r3, #4]
 8000822:	609a      	str	r2, [r3, #8]
 8000824:	60da      	str	r2, [r3, #12]
 8000826:	611a      	str	r2, [r3, #16]
 8000828:	615a      	str	r2, [r3, #20]
 800082a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800082c:	4b2c      	ldr	r3, [pc, #176]	; (80008e0 <MX_TIM4_Init+0xe4>)
 800082e:	4a2d      	ldr	r2, [pc, #180]	; (80008e4 <MX_TIM4_Init+0xe8>)
 8000830:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000832:	4b2b      	ldr	r3, [pc, #172]	; (80008e0 <MX_TIM4_Init+0xe4>)
 8000834:	2200      	movs	r2, #0
 8000836:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000838:	4b29      	ldr	r3, [pc, #164]	; (80008e0 <MX_TIM4_Init+0xe4>)
 800083a:	2200      	movs	r2, #0
 800083c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800083e:	4b28      	ldr	r3, [pc, #160]	; (80008e0 <MX_TIM4_Init+0xe4>)
 8000840:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000844:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000846:	4b26      	ldr	r3, [pc, #152]	; (80008e0 <MX_TIM4_Init+0xe4>)
 8000848:	2200      	movs	r2, #0
 800084a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800084c:	4b24      	ldr	r3, [pc, #144]	; (80008e0 <MX_TIM4_Init+0xe4>)
 800084e:	2200      	movs	r2, #0
 8000850:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000852:	4823      	ldr	r0, [pc, #140]	; (80008e0 <MX_TIM4_Init+0xe4>)
 8000854:	f002 f94a 	bl	8002aec <HAL_TIM_Base_Init>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d001      	beq.n	8000862 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 800085e:	f000 fa4b 	bl	8000cf8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000862:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000866:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000868:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800086c:	4619      	mov	r1, r3
 800086e:	481c      	ldr	r0, [pc, #112]	; (80008e0 <MX_TIM4_Init+0xe4>)
 8000870:	f002 fc20 	bl	80030b4 <HAL_TIM_ConfigClockSource>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d001      	beq.n	800087e <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 800087a:	f000 fa3d 	bl	8000cf8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800087e:	4818      	ldr	r0, [pc, #96]	; (80008e0 <MX_TIM4_Init+0xe4>)
 8000880:	f002 f9f4 	bl	8002c6c <HAL_TIM_PWM_Init>
 8000884:	4603      	mov	r3, r0
 8000886:	2b00      	cmp	r3, #0
 8000888:	d001      	beq.n	800088e <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 800088a:	f000 fa35 	bl	8000cf8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800088e:	2300      	movs	r3, #0
 8000890:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000892:	2300      	movs	r3, #0
 8000894:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000896:	f107 0320 	add.w	r3, r7, #32
 800089a:	4619      	mov	r1, r3
 800089c:	4810      	ldr	r0, [pc, #64]	; (80008e0 <MX_TIM4_Init+0xe4>)
 800089e:	f002 ffe3 	bl	8003868 <HAL_TIMEx_MasterConfigSynchronization>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d001      	beq.n	80008ac <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 80008a8:	f000 fa26 	bl	8000cf8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008ac:	2360      	movs	r3, #96	; 0x60
 80008ae:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80008b0:	2300      	movs	r3, #0
 80008b2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008b4:	2300      	movs	r3, #0
 80008b6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008b8:	2300      	movs	r3, #0
 80008ba:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008bc:	1d3b      	adds	r3, r7, #4
 80008be:	2200      	movs	r2, #0
 80008c0:	4619      	mov	r1, r3
 80008c2:	4807      	ldr	r0, [pc, #28]	; (80008e0 <MX_TIM4_Init+0xe4>)
 80008c4:	f002 fb34 	bl	8002f30 <HAL_TIM_PWM_ConfigChannel>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d001      	beq.n	80008d2 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 80008ce:	f000 fa13 	bl	8000cf8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80008d2:	4803      	ldr	r0, [pc, #12]	; (80008e0 <MX_TIM4_Init+0xe4>)
 80008d4:	f000 fac2 	bl	8000e5c <HAL_TIM_MspPostInit>

}
 80008d8:	bf00      	nop
 80008da:	3738      	adds	r7, #56	; 0x38
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	20004940 	.word	0x20004940
 80008e4:	40000800 	.word	0x40000800

080008e8 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b088      	sub	sp, #32
 80008ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80008ee:	1d3b      	adds	r3, r7, #4
 80008f0:	2200      	movs	r2, #0
 80008f2:	601a      	str	r2, [r3, #0]
 80008f4:	605a      	str	r2, [r3, #4]
 80008f6:	609a      	str	r2, [r3, #8]
 80008f8:	60da      	str	r2, [r3, #12]
 80008fa:	611a      	str	r2, [r3, #16]
 80008fc:	615a      	str	r2, [r3, #20]
 80008fe:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000900:	4b1e      	ldr	r3, [pc, #120]	; (800097c <MX_TIM14_Init+0x94>)
 8000902:	4a1f      	ldr	r2, [pc, #124]	; (8000980 <MX_TIM14_Init+0x98>)
 8000904:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 0;
 8000906:	4b1d      	ldr	r3, [pc, #116]	; (800097c <MX_TIM14_Init+0x94>)
 8000908:	2200      	movs	r2, #0
 800090a:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800090c:	4b1b      	ldr	r3, [pc, #108]	; (800097c <MX_TIM14_Init+0x94>)
 800090e:	2200      	movs	r2, #0
 8000910:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 8000912:	4b1a      	ldr	r3, [pc, #104]	; (800097c <MX_TIM14_Init+0x94>)
 8000914:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000918:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800091a:	4b18      	ldr	r3, [pc, #96]	; (800097c <MX_TIM14_Init+0x94>)
 800091c:	2200      	movs	r2, #0
 800091e:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000920:	4b16      	ldr	r3, [pc, #88]	; (800097c <MX_TIM14_Init+0x94>)
 8000922:	2200      	movs	r2, #0
 8000924:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000926:	4815      	ldr	r0, [pc, #84]	; (800097c <MX_TIM14_Init+0x94>)
 8000928:	f002 f8e0 	bl	8002aec <HAL_TIM_Base_Init>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d001      	beq.n	8000936 <MX_TIM14_Init+0x4e>
  {
    Error_Handler();
 8000932:	f000 f9e1 	bl	8000cf8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 8000936:	4811      	ldr	r0, [pc, #68]	; (800097c <MX_TIM14_Init+0x94>)
 8000938:	f002 f998 	bl	8002c6c <HAL_TIM_PWM_Init>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d001      	beq.n	8000946 <MX_TIM14_Init+0x5e>
  {
    Error_Handler();
 8000942:	f000 f9d9 	bl	8000cf8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000946:	2360      	movs	r3, #96	; 0x60
 8000948:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800094a:	2300      	movs	r3, #0
 800094c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800094e:	2300      	movs	r3, #0
 8000950:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000952:	2300      	movs	r3, #0
 8000954:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000956:	1d3b      	adds	r3, r7, #4
 8000958:	2200      	movs	r2, #0
 800095a:	4619      	mov	r1, r3
 800095c:	4807      	ldr	r0, [pc, #28]	; (800097c <MX_TIM14_Init+0x94>)
 800095e:	f002 fae7 	bl	8002f30 <HAL_TIM_PWM_ConfigChannel>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d001      	beq.n	800096c <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 8000968:	f000 f9c6 	bl	8000cf8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 800096c:	4803      	ldr	r0, [pc, #12]	; (800097c <MX_TIM14_Init+0x94>)
 800096e:	f000 fa75 	bl	8000e5c <HAL_TIM_MspPostInit>

}
 8000972:	bf00      	nop
 8000974:	3720      	adds	r7, #32
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	20004a38 	.word	0x20004a38
 8000980:	40002000 	.word	0x40002000

08000984 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000988:	4b11      	ldr	r3, [pc, #68]	; (80009d0 <MX_USART3_UART_Init+0x4c>)
 800098a:	4a12      	ldr	r2, [pc, #72]	; (80009d4 <MX_USART3_UART_Init+0x50>)
 800098c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800098e:	4b10      	ldr	r3, [pc, #64]	; (80009d0 <MX_USART3_UART_Init+0x4c>)
 8000990:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000994:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000996:	4b0e      	ldr	r3, [pc, #56]	; (80009d0 <MX_USART3_UART_Init+0x4c>)
 8000998:	2200      	movs	r2, #0
 800099a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800099c:	4b0c      	ldr	r3, [pc, #48]	; (80009d0 <MX_USART3_UART_Init+0x4c>)
 800099e:	2200      	movs	r2, #0
 80009a0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80009a2:	4b0b      	ldr	r3, [pc, #44]	; (80009d0 <MX_USART3_UART_Init+0x4c>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80009a8:	4b09      	ldr	r3, [pc, #36]	; (80009d0 <MX_USART3_UART_Init+0x4c>)
 80009aa:	220c      	movs	r2, #12
 80009ac:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009ae:	4b08      	ldr	r3, [pc, #32]	; (80009d0 <MX_USART3_UART_Init+0x4c>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80009b4:	4b06      	ldr	r3, [pc, #24]	; (80009d0 <MX_USART3_UART_Init+0x4c>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80009ba:	4805      	ldr	r0, [pc, #20]	; (80009d0 <MX_USART3_UART_Init+0x4c>)
 80009bc:	f002 ffe4 	bl	8003988 <HAL_UART_Init>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d001      	beq.n	80009ca <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80009c6:	f000 f997 	bl	8000cf8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80009ca:	bf00      	nop
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	20004988 	.word	0x20004988
 80009d4:	40004800 	.word	0x40004800

080009d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b088      	sub	sp, #32
 80009dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009de:	f107 030c 	add.w	r3, r7, #12
 80009e2:	2200      	movs	r2, #0
 80009e4:	601a      	str	r2, [r3, #0]
 80009e6:	605a      	str	r2, [r3, #4]
 80009e8:	609a      	str	r2, [r3, #8]
 80009ea:	60da      	str	r2, [r3, #12]
 80009ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009ee:	2300      	movs	r3, #0
 80009f0:	60bb      	str	r3, [r7, #8]
 80009f2:	4b31      	ldr	r3, [pc, #196]	; (8000ab8 <MX_GPIO_Init+0xe0>)
 80009f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f6:	4a30      	ldr	r2, [pc, #192]	; (8000ab8 <MX_GPIO_Init+0xe0>)
 80009f8:	f043 0304 	orr.w	r3, r3, #4
 80009fc:	6313      	str	r3, [r2, #48]	; 0x30
 80009fe:	4b2e      	ldr	r3, [pc, #184]	; (8000ab8 <MX_GPIO_Init+0xe0>)
 8000a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a02:	f003 0304 	and.w	r3, r3, #4
 8000a06:	60bb      	str	r3, [r7, #8]
 8000a08:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	607b      	str	r3, [r7, #4]
 8000a0e:	4b2a      	ldr	r3, [pc, #168]	; (8000ab8 <MX_GPIO_Init+0xe0>)
 8000a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a12:	4a29      	ldr	r2, [pc, #164]	; (8000ab8 <MX_GPIO_Init+0xe0>)
 8000a14:	f043 0301 	orr.w	r3, r3, #1
 8000a18:	6313      	str	r3, [r2, #48]	; 0x30
 8000a1a:	4b27      	ldr	r3, [pc, #156]	; (8000ab8 <MX_GPIO_Init+0xe0>)
 8000a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1e:	f003 0301 	and.w	r3, r3, #1
 8000a22:	607b      	str	r3, [r7, #4]
 8000a24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a26:	2300      	movs	r3, #0
 8000a28:	603b      	str	r3, [r7, #0]
 8000a2a:	4b23      	ldr	r3, [pc, #140]	; (8000ab8 <MX_GPIO_Init+0xe0>)
 8000a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2e:	4a22      	ldr	r2, [pc, #136]	; (8000ab8 <MX_GPIO_Init+0xe0>)
 8000a30:	f043 0302 	orr.w	r3, r3, #2
 8000a34:	6313      	str	r3, [r2, #48]	; 0x30
 8000a36:	4b20      	ldr	r3, [pc, #128]	; (8000ab8 <MX_GPIO_Init+0xe0>)
 8000a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3a:	f003 0302 	and.w	r3, r3, #2
 8000a3e:	603b      	str	r3, [r7, #0]
 8000a40:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|L293D_LATCH_Pin|L293D_EN_Pin|L293D_SER_Pin, GPIO_PIN_RESET);
 8000a42:	2200      	movs	r2, #0
 8000a44:	f44f 7158 	mov.w	r1, #864	; 0x360
 8000a48:	481c      	ldr	r0, [pc, #112]	; (8000abc <MX_GPIO_Init+0xe4>)
 8000a4a:	f000 fe3d 	bl	80016c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(L293D_CLK_GPIO_Port, L293D_CLK_Pin, GPIO_PIN_RESET);
 8000a4e:	2200      	movs	r2, #0
 8000a50:	2120      	movs	r1, #32
 8000a52:	481b      	ldr	r0, [pc, #108]	; (8000ac0 <MX_GPIO_Init+0xe8>)
 8000a54:	f000 fe38 	bl	80016c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a58:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a5c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a5e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000a62:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a64:	2300      	movs	r3, #0
 8000a66:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a68:	f107 030c 	add.w	r3, r7, #12
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	4815      	ldr	r0, [pc, #84]	; (8000ac4 <MX_GPIO_Init+0xec>)
 8000a70:	f000 fc96 	bl	80013a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin L293D_LATCH_Pin L293D_EN_Pin L293D_SER_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|L293D_LATCH_Pin|L293D_EN_Pin|L293D_SER_Pin;
 8000a74:	f44f 7358 	mov.w	r3, #864	; 0x360
 8000a78:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a7a:	2301      	movs	r3, #1
 8000a7c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a82:	2300      	movs	r3, #0
 8000a84:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a86:	f107 030c 	add.w	r3, r7, #12
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	480b      	ldr	r0, [pc, #44]	; (8000abc <MX_GPIO_Init+0xe4>)
 8000a8e:	f000 fc87 	bl	80013a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : L293D_CLK_Pin */
  GPIO_InitStruct.Pin = L293D_CLK_Pin;
 8000a92:	2320      	movs	r3, #32
 8000a94:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a96:	2301      	movs	r3, #1
 8000a98:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(L293D_CLK_GPIO_Port, &GPIO_InitStruct);
 8000aa2:	f107 030c 	add.w	r3, r7, #12
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	4805      	ldr	r0, [pc, #20]	; (8000ac0 <MX_GPIO_Init+0xe8>)
 8000aaa:	f000 fc79 	bl	80013a0 <HAL_GPIO_Init>

}
 8000aae:	bf00      	nop
 8000ab0:	3720      	adds	r7, #32
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	40023800 	.word	0x40023800
 8000abc:	40020000 	.word	0x40020000
 8000ac0:	40020400 	.word	0x40020400
 8000ac4:	40020800 	.word	0x40020800

08000ac8 <startControlador>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_startControlador */
void startControlador(void *argument)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b084      	sub	sp, #16
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
	uint32_t eventosBarco;

  /* Infinite loop */
  for(;;)
  {
	eventosBarco = osEventFlagsGet(grupoEventosBarco);
 8000ad0:	4b1f      	ldr	r3, [pc, #124]	; (8000b50 <startControlador+0x88>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f003 fb5d 	bl	8004194 <osEventFlagsGet>
 8000ada:	60f8      	str	r0, [r7, #12]
	// Seta as flags do bluetooth e magnetômetro
	osEventFlagsSet(grupoEventosBarco, BIT_MAGNETOMETRO | BIT_BLUETOOTH);
 8000adc:	4b1c      	ldr	r3, [pc, #112]	; (8000b50 <startControlador+0x88>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	2103      	movs	r1, #3
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	f003 fae0 	bl	80040a8 <osEventFlagsSet>

	// Espera até que os bits do bluetooth e magnetômetro sejam iguais a 0
	eventosBarco = osEventFlagsGet(grupoEventosBarco);
 8000ae8:	4b19      	ldr	r3, [pc, #100]	; (8000b50 <startControlador+0x88>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	4618      	mov	r0, r3
 8000aee:	f003 fb51 	bl	8004194 <osEventFlagsGet>
 8000af2:	60f8      	str	r0, [r7, #12]
	while( (eventosBarco & BIT_BLUETOOTH) | (eventosBarco & BIT_MAGNETOMETRO) )
 8000af4:	e008      	b.n	8000b08 <startControlador+0x40>
	{
		eventosBarco = osEventFlagsGet(grupoEventosBarco);
 8000af6:	4b16      	ldr	r3, [pc, #88]	; (8000b50 <startControlador+0x88>)
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	4618      	mov	r0, r3
 8000afc:	f003 fb4a 	bl	8004194 <osEventFlagsGet>
 8000b00:	60f8      	str	r0, [r7, #12]
		osDelay(pdMS_TO_TICKS(10));
 8000b02:	200a      	movs	r0, #10
 8000b04:	f003 fa76 	bl	8003ff4 <osDelay>
	while( (eventosBarco & BIT_BLUETOOTH) | (eventosBarco & BIT_MAGNETOMETRO) )
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	f003 0303 	and.w	r3, r3, #3
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d1f1      	bne.n	8000af6 <startControlador+0x2e>


	// TODO: Adicionar a nova velocidade e ângulo para as filas correspondentes

	// Seta os bits de evento do motor dc e do servomotor após a adição dos elementos à fila
	osEventFlagsSet(grupoEventosBarco, BIT_SERVO_MOTOR | BIT_MOTOR_DC);
 8000b12:	4b0f      	ldr	r3, [pc, #60]	; (8000b50 <startControlador+0x88>)
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	210c      	movs	r1, #12
 8000b18:	4618      	mov	r0, r3
 8000b1a:	f003 fac5 	bl	80040a8 <osEventFlagsSet>

	// Espera até que os bits do servomotor e motor DC sejam iguais a 0
	eventosBarco = osEventFlagsGet(grupoEventosBarco);
 8000b1e:	4b0c      	ldr	r3, [pc, #48]	; (8000b50 <startControlador+0x88>)
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	4618      	mov	r0, r3
 8000b24:	f003 fb36 	bl	8004194 <osEventFlagsGet>
 8000b28:	60f8      	str	r0, [r7, #12]
	while( (eventosBarco & BIT_SERVO_MOTOR) | (eventosBarco & BIT_MOTOR_DC) )
 8000b2a:	e008      	b.n	8000b3e <startControlador+0x76>
	{
		eventosBarco = osEventFlagsGet(grupoEventosBarco);
 8000b2c:	4b08      	ldr	r3, [pc, #32]	; (8000b50 <startControlador+0x88>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	4618      	mov	r0, r3
 8000b32:	f003 fb2f 	bl	8004194 <osEventFlagsGet>
 8000b36:	60f8      	str	r0, [r7, #12]
		osDelay(pdMS_TO_TICKS(10));
 8000b38:	200a      	movs	r0, #10
 8000b3a:	f003 fa5b 	bl	8003ff4 <osDelay>
	while( (eventosBarco & BIT_SERVO_MOTOR) | (eventosBarco & BIT_MOTOR_DC) )
 8000b3e:	68fb      	ldr	r3, [r7, #12]
 8000b40:	f003 030c 	and.w	r3, r3, #12
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d1f1      	bne.n	8000b2c <startControlador+0x64>
	}


	osDelay(pdMS_TO_TICKS(100));
 8000b48:	2064      	movs	r0, #100	; 0x64
 8000b4a:	f003 fa53 	bl	8003ff4 <osDelay>
	eventosBarco = osEventFlagsGet(grupoEventosBarco);
 8000b4e:	e7bf      	b.n	8000ad0 <startControlador+0x8>
 8000b50:	20004a20 	.word	0x20004a20

08000b54 <startMagnetometro>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startMagnetometro */
void startMagnetometro(void *argument)
{
 8000b54:	b590      	push	{r4, r7, lr}
 8000b56:	b099      	sub	sp, #100	; 0x64
 8000b58:	af14      	add	r7, sp, #80	; 0x50
 8000b5a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startMagnetometro */

  // Parâmetros magnetômetro
  uint8_t config[3] = {0x70, 0xA0, 0x00}; // Valores de exemplo para CONTROL REG A, CONTROL REG B e MODE REGISTER
 8000b5c:	4a19      	ldr	r2, [pc, #100]	; (8000bc4 <startMagnetometro+0x70>)
 8000b5e:	f107 030c 	add.w	r3, r7, #12
 8000b62:	6812      	ldr	r2, [r2, #0]
 8000b64:	4611      	mov	r1, r2
 8000b66:	8019      	strh	r1, [r3, #0]
 8000b68:	3302      	adds	r3, #2
 8000b6a:	0c12      	lsrs	r2, r2, #16
 8000b6c:	701a      	strb	r2, [r3, #0]
  // config[0] = 0x70 = 01110000 -> Configuração de medição normal, output de dados de 15 Hz e média de 8 amostras por medição
  // config[1] = 0xA0 = 10100000 -> Ganho de 4.7 GA
  // config[2] = 0x00 = 00000000 -> Modo de leitura contínua
  configuraMagnetometro(hi2c1, config[0], config[1], config[2]);
 8000b6e:	7b3b      	ldrb	r3, [r7, #12]
 8000b70:	7b7a      	ldrb	r2, [r7, #13]
 8000b72:	7bb9      	ldrb	r1, [r7, #14]
 8000b74:	4c14      	ldr	r4, [pc, #80]	; (8000bc8 <startMagnetometro+0x74>)
 8000b76:	9113      	str	r1, [sp, #76]	; 0x4c
 8000b78:	9212      	str	r2, [sp, #72]	; 0x48
 8000b7a:	9311      	str	r3, [sp, #68]	; 0x44
 8000b7c:	4668      	mov	r0, sp
 8000b7e:	f104 0310 	add.w	r3, r4, #16
 8000b82:	2244      	movs	r2, #68	; 0x44
 8000b84:	4619      	mov	r1, r3
 8000b86:	f006 fb4d 	bl	8007224 <memcpy>
 8000b8a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000b8e:	f7ff fcff 	bl	8000590 <configuraMagnetometro>

  /* Infinite loop */
  for(;;)
  {
	// Espera até que a task controlador solicite uma leitura
	osEventFlagsWait(grupoEventosBarco, BIT_MAGNETOMETRO, osFlagsNoClear, osWaitForever);
 8000b92:	4b0e      	ldr	r3, [pc, #56]	; (8000bcc <startMagnetometro+0x78>)
 8000b94:	6818      	ldr	r0, [r3, #0]
 8000b96:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b9a:	2202      	movs	r2, #2
 8000b9c:	2101      	movs	r1, #1
 8000b9e:	f003 fb1a 	bl	80041d6 <osEventFlagsWait>


	teste += 1;
 8000ba2:	4b0b      	ldr	r3, [pc, #44]	; (8000bd0 <startMagnetometro+0x7c>)
 8000ba4:	781b      	ldrb	r3, [r3, #0]
 8000ba6:	3301      	adds	r3, #1
 8000ba8:	b2da      	uxtb	r2, r3
 8000baa:	4b09      	ldr	r3, [pc, #36]	; (8000bd0 <startMagnetometro+0x7c>)
 8000bac:	701a      	strb	r2, [r3, #0]

	// TODO: Enviar informações para a fila


	// Realiza um clear no grupo de eventos após enviar suas informações
    osEventFlagsClear(grupoEventosBarco, BIT_MAGNETOMETRO);
 8000bae:	4b07      	ldr	r3, [pc, #28]	; (8000bcc <startMagnetometro+0x78>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	2101      	movs	r1, #1
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f003 fabb 	bl	8004130 <osEventFlagsClear>
	osDelay(pdMS_TO_TICKS(1));
 8000bba:	2001      	movs	r0, #1
 8000bbc:	f003 fa1a 	bl	8003ff4 <osDelay>
	osEventFlagsWait(grupoEventosBarco, BIT_MAGNETOMETRO, osFlagsNoClear, osWaitForever);
 8000bc0:	e7e7      	b.n	8000b92 <startMagnetometro+0x3e>
 8000bc2:	bf00      	nop
 8000bc4:	080072a4 	.word	0x080072a4
 8000bc8:	200049cc 	.word	0x200049cc
 8000bcc:	20004a20 	.word	0x20004a20
 8000bd0:	20000000 	.word	0x20000000

08000bd4 <startServoMotor>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startServoMotor */
void startServoMotor(void *argument)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b082      	sub	sp, #8
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]

  /* Infinite loop */
  for(;;)
  {
    // Espera até que a task controlador solicite uma mudança de velocidade
	osEventFlagsWait(grupoEventosBarco, BIT_SERVO_MOTOR, osFlagsNoClear, osWaitForever);
 8000bdc:	4b05      	ldr	r3, [pc, #20]	; (8000bf4 <startServoMotor+0x20>)
 8000bde:	6818      	ldr	r0, [r3, #0]
 8000be0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000be4:	2202      	movs	r2, #2
 8000be6:	2104      	movs	r1, #4
 8000be8:	f003 faf5 	bl	80041d6 <osEventFlagsWait>


	// Limpa a flag após mudar o ângulo do barco
    //osEventFlagsClear(grupoEventosBarco, BIT_SERVO_MOTOR);

    osDelay(1);
 8000bec:	2001      	movs	r0, #1
 8000bee:	f003 fa01 	bl	8003ff4 <osDelay>
	osEventFlagsWait(grupoEventosBarco, BIT_SERVO_MOTOR, osFlagsNoClear, osWaitForever);
 8000bf2:	e7f3      	b.n	8000bdc <startServoMotor+0x8>
 8000bf4:	20004a20 	.word	0x20004a20

08000bf8 <startBluetooth>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startBluetooth */
void startBluetooth(void *argument)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b0a2      	sub	sp, #136	; 0x88
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startBluetooth */

	// String que armazena os resultados lidos pelo módulo bluetooth
	char respostaBluetooth[128] = {0};
 8000c00:	2300      	movs	r3, #0
 8000c02:	60bb      	str	r3, [r7, #8]
 8000c04:	f107 030c 	add.w	r3, r7, #12
 8000c08:	227c      	movs	r2, #124	; 0x7c
 8000c0a:	2100      	movs	r1, #0
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f006 fb17 	bl	8007240 <memset>

  /* Infinite loop */
  for(;;)
  {
	// Espera até que a task controlador solicite uma leitura
	osEventFlagsWait(grupoEventosBarco, BIT_BLUETOOTH, osFlagsNoClear, osWaitForever);
 8000c12:	4b09      	ldr	r3, [pc, #36]	; (8000c38 <startBluetooth+0x40>)
 8000c14:	6818      	ldr	r0, [r3, #0]
 8000c16:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c1a:	2202      	movs	r2, #2
 8000c1c:	2102      	movs	r1, #2
 8000c1e:	f003 fada 	bl	80041d6 <osEventFlagsWait>
	// TODO: Realizar leituras

	// TODO: Enviar informações para a fila

	// Após enviar informações para a fila, dá um clear no bit do magnetômetro
	osEventFlagsClear(grupoEventosBarco, BIT_BLUETOOTH);
 8000c22:	4b05      	ldr	r3, [pc, #20]	; (8000c38 <startBluetooth+0x40>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	2102      	movs	r1, #2
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f003 fa81 	bl	8004130 <osEventFlagsClear>
    osDelay(1);
 8000c2e:	2001      	movs	r0, #1
 8000c30:	f003 f9e0 	bl	8003ff4 <osDelay>
	osEventFlagsWait(grupoEventosBarco, BIT_BLUETOOTH, osFlagsNoClear, osWaitForever);
 8000c34:	e7ed      	b.n	8000c12 <startBluetooth+0x1a>
 8000c36:	bf00      	nop
 8000c38:	20004a20 	.word	0x20004a20

08000c3c <startMotorDC>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startMotorDC */
void startMotorDC(void *argument)
{
 8000c3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c3e:	b0af      	sub	sp, #188	; 0xbc
 8000c40:	af10      	add	r7, sp, #64	; 0x40
 8000c42:	6078      	str	r0, [r7, #4]
  // Structs de configuração para o PWM e o HC595
  motor_dc motorTeste;
  HC595 hc595;

  // Configuração das structs de interação com o motor e com o HC595
  configHC595(&hc595, L293D_EN_GPIO_Port, L293D_EN_Pin, L293D_CLK_GPIO_Port, L293D_CLK_Pin, L293D_SER_GPIO_Port, L293D_SER_Pin);
 8000c44:	f107 000c 	add.w	r0, r7, #12
 8000c48:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c4c:	9302      	str	r3, [sp, #8]
 8000c4e:	4b1c      	ldr	r3, [pc, #112]	; (8000cc0 <startMotorDC+0x84>)
 8000c50:	9301      	str	r3, [sp, #4]
 8000c52:	2320      	movs	r3, #32
 8000c54:	9300      	str	r3, [sp, #0]
 8000c56:	4b1b      	ldr	r3, [pc, #108]	; (8000cc4 <startMotorDC+0x88>)
 8000c58:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c5c:	4918      	ldr	r1, [pc, #96]	; (8000cc0 <startMotorDC+0x84>)
 8000c5e:	f7ff fc71 	bl	8000544 <configHC595>
  configMotor(&motorTeste, htim14, TIM_CHANNEL_1);
 8000c62:	4e19      	ldr	r6, [pc, #100]	; (8000cc8 <startMotorDC+0x8c>)
 8000c64:	f107 0c28 	add.w	ip, r7, #40	; 0x28
 8000c68:	2300      	movs	r3, #0
 8000c6a:	930f      	str	r3, [sp, #60]	; 0x3c
 8000c6c:	466d      	mov	r5, sp
 8000c6e:	f106 040c 	add.w	r4, r6, #12
 8000c72:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c74:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c76:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c78:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c7a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c7c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c7e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000c82:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8000c86:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8000c8a:	4660      	mov	r0, ip
 8000c8c:	f7ff fc3c 	bl	8000508 <configMotor>

  /* Infinite loop */
  for(;;)
  {
	// Espera até que a task controlador solicite uma mudança de velocidade
	osEventFlagsWait(grupoEventosBarco, BIT_MOTOR_DC, osFlagsNoClear, osWaitForever);
 8000c90:	4b0e      	ldr	r3, [pc, #56]	; (8000ccc <startMotorDC+0x90>)
 8000c92:	6818      	ldr	r0, [r3, #0]
 8000c94:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c98:	2202      	movs	r2, #2
 8000c9a:	2108      	movs	r1, #8
 8000c9c:	f003 fa9b 	bl	80041d6 <osEventFlagsWait>
	teste += 100;
 8000ca0:	4b0b      	ldr	r3, [pc, #44]	; (8000cd0 <startMotorDC+0x94>)
 8000ca2:	781b      	ldrb	r3, [r3, #0]
 8000ca4:	3364      	adds	r3, #100	; 0x64
 8000ca6:	b2da      	uxtb	r2, r3
 8000ca8:	4b09      	ldr	r3, [pc, #36]	; (8000cd0 <startMotorDC+0x94>)
 8000caa:	701a      	strb	r2, [r3, #0]
    osDelay(1);
 8000cac:	2001      	movs	r0, #1
 8000cae:	f003 f9a1 	bl	8003ff4 <osDelay>

    // Limpa a flag após mudar a velocidade do barco
    osEventFlagsClear(grupoEventosBarco, BIT_MOTOR_DC);
 8000cb2:	4b06      	ldr	r3, [pc, #24]	; (8000ccc <startMotorDC+0x90>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	2108      	movs	r1, #8
 8000cb8:	4618      	mov	r0, r3
 8000cba:	f003 fa39 	bl	8004130 <osEventFlagsClear>
	osEventFlagsWait(grupoEventosBarco, BIT_MOTOR_DC, osFlagsNoClear, osWaitForever);
 8000cbe:	e7e7      	b.n	8000c90 <startMotorDC+0x54>
 8000cc0:	40020000 	.word	0x40020000
 8000cc4:	40020400 	.word	0x40020400
 8000cc8:	20004a38 	.word	0x20004a38
 8000ccc:	20004a20 	.word	0x20004a20
 8000cd0:	20000000 	.word	0x20000000

08000cd4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b082      	sub	sp, #8
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	4a04      	ldr	r2, [pc, #16]	; (8000cf4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ce2:	4293      	cmp	r3, r2
 8000ce4:	d101      	bne.n	8000cea <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000ce6:	f000 fa59 	bl	800119c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000cea:	bf00      	nop
 8000cec:	3708      	adds	r7, #8
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	40010000 	.word	0x40010000

08000cf8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cfc:	b672      	cpsid	i
}
 8000cfe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d00:	e7fe      	b.n	8000d00 <Error_Handler+0x8>
	...

08000d04 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b082      	sub	sp, #8
 8000d08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	607b      	str	r3, [r7, #4]
 8000d0e:	4b12      	ldr	r3, [pc, #72]	; (8000d58 <HAL_MspInit+0x54>)
 8000d10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d12:	4a11      	ldr	r2, [pc, #68]	; (8000d58 <HAL_MspInit+0x54>)
 8000d14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d18:	6453      	str	r3, [r2, #68]	; 0x44
 8000d1a:	4b0f      	ldr	r3, [pc, #60]	; (8000d58 <HAL_MspInit+0x54>)
 8000d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d22:	607b      	str	r3, [r7, #4]
 8000d24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d26:	2300      	movs	r3, #0
 8000d28:	603b      	str	r3, [r7, #0]
 8000d2a:	4b0b      	ldr	r3, [pc, #44]	; (8000d58 <HAL_MspInit+0x54>)
 8000d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d2e:	4a0a      	ldr	r2, [pc, #40]	; (8000d58 <HAL_MspInit+0x54>)
 8000d30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d34:	6413      	str	r3, [r2, #64]	; 0x40
 8000d36:	4b08      	ldr	r3, [pc, #32]	; (8000d58 <HAL_MspInit+0x54>)
 8000d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d3e:	603b      	str	r3, [r7, #0]
 8000d40:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d42:	2200      	movs	r2, #0
 8000d44:	210f      	movs	r1, #15
 8000d46:	f06f 0001 	mvn.w	r0, #1
 8000d4a:	f000 faff 	bl	800134c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d4e:	bf00      	nop
 8000d50:	3708      	adds	r7, #8
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	40023800 	.word	0x40023800

08000d5c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b08a      	sub	sp, #40	; 0x28
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d64:	f107 0314 	add.w	r3, r7, #20
 8000d68:	2200      	movs	r2, #0
 8000d6a:	601a      	str	r2, [r3, #0]
 8000d6c:	605a      	str	r2, [r3, #4]
 8000d6e:	609a      	str	r2, [r3, #8]
 8000d70:	60da      	str	r2, [r3, #12]
 8000d72:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	4a19      	ldr	r2, [pc, #100]	; (8000de0 <HAL_I2C_MspInit+0x84>)
 8000d7a:	4293      	cmp	r3, r2
 8000d7c:	d12c      	bne.n	8000dd8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d7e:	2300      	movs	r3, #0
 8000d80:	613b      	str	r3, [r7, #16]
 8000d82:	4b18      	ldr	r3, [pc, #96]	; (8000de4 <HAL_I2C_MspInit+0x88>)
 8000d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d86:	4a17      	ldr	r2, [pc, #92]	; (8000de4 <HAL_I2C_MspInit+0x88>)
 8000d88:	f043 0302 	orr.w	r3, r3, #2
 8000d8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d8e:	4b15      	ldr	r3, [pc, #84]	; (8000de4 <HAL_I2C_MspInit+0x88>)
 8000d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d92:	f003 0302 	and.w	r3, r3, #2
 8000d96:	613b      	str	r3, [r7, #16]
 8000d98:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8000d9a:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000d9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000da0:	2312      	movs	r3, #18
 8000da2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000da4:	2301      	movs	r3, #1
 8000da6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000da8:	2303      	movs	r3, #3
 8000daa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000dac:	2304      	movs	r3, #4
 8000dae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000db0:	f107 0314 	add.w	r3, r7, #20
 8000db4:	4619      	mov	r1, r3
 8000db6:	480c      	ldr	r0, [pc, #48]	; (8000de8 <HAL_I2C_MspInit+0x8c>)
 8000db8:	f000 faf2 	bl	80013a0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	60fb      	str	r3, [r7, #12]
 8000dc0:	4b08      	ldr	r3, [pc, #32]	; (8000de4 <HAL_I2C_MspInit+0x88>)
 8000dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc4:	4a07      	ldr	r2, [pc, #28]	; (8000de4 <HAL_I2C_MspInit+0x88>)
 8000dc6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000dca:	6413      	str	r3, [r2, #64]	; 0x40
 8000dcc:	4b05      	ldr	r3, [pc, #20]	; (8000de4 <HAL_I2C_MspInit+0x88>)
 8000dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dd0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000dd4:	60fb      	str	r3, [r7, #12]
 8000dd6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000dd8:	bf00      	nop
 8000dda:	3728      	adds	r7, #40	; 0x28
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	40005400 	.word	0x40005400
 8000de4:	40023800 	.word	0x40023800
 8000de8:	40020400 	.word	0x40020400

08000dec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000dec:	b480      	push	{r7}
 8000dee:	b085      	sub	sp, #20
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	4a15      	ldr	r2, [pc, #84]	; (8000e50 <HAL_TIM_Base_MspInit+0x64>)
 8000dfa:	4293      	cmp	r3, r2
 8000dfc:	d10e      	bne.n	8000e1c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000dfe:	2300      	movs	r3, #0
 8000e00:	60fb      	str	r3, [r7, #12]
 8000e02:	4b14      	ldr	r3, [pc, #80]	; (8000e54 <HAL_TIM_Base_MspInit+0x68>)
 8000e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e06:	4a13      	ldr	r2, [pc, #76]	; (8000e54 <HAL_TIM_Base_MspInit+0x68>)
 8000e08:	f043 0304 	orr.w	r3, r3, #4
 8000e0c:	6413      	str	r3, [r2, #64]	; 0x40
 8000e0e:	4b11      	ldr	r3, [pc, #68]	; (8000e54 <HAL_TIM_Base_MspInit+0x68>)
 8000e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e12:	f003 0304 	and.w	r3, r3, #4
 8000e16:	60fb      	str	r3, [r7, #12]
 8000e18:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8000e1a:	e012      	b.n	8000e42 <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM14)
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	4a0d      	ldr	r2, [pc, #52]	; (8000e58 <HAL_TIM_Base_MspInit+0x6c>)
 8000e22:	4293      	cmp	r3, r2
 8000e24:	d10d      	bne.n	8000e42 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8000e26:	2300      	movs	r3, #0
 8000e28:	60bb      	str	r3, [r7, #8]
 8000e2a:	4b0a      	ldr	r3, [pc, #40]	; (8000e54 <HAL_TIM_Base_MspInit+0x68>)
 8000e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e2e:	4a09      	ldr	r2, [pc, #36]	; (8000e54 <HAL_TIM_Base_MspInit+0x68>)
 8000e30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e34:	6413      	str	r3, [r2, #64]	; 0x40
 8000e36:	4b07      	ldr	r3, [pc, #28]	; (8000e54 <HAL_TIM_Base_MspInit+0x68>)
 8000e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e3e:	60bb      	str	r3, [r7, #8]
 8000e40:	68bb      	ldr	r3, [r7, #8]
}
 8000e42:	bf00      	nop
 8000e44:	3714      	adds	r7, #20
 8000e46:	46bd      	mov	sp, r7
 8000e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4c:	4770      	bx	lr
 8000e4e:	bf00      	nop
 8000e50:	40000800 	.word	0x40000800
 8000e54:	40023800 	.word	0x40023800
 8000e58:	40002000 	.word	0x40002000

08000e5c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b08a      	sub	sp, #40	; 0x28
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e64:	f107 0314 	add.w	r3, r7, #20
 8000e68:	2200      	movs	r2, #0
 8000e6a:	601a      	str	r2, [r3, #0]
 8000e6c:	605a      	str	r2, [r3, #4]
 8000e6e:	609a      	str	r2, [r3, #8]
 8000e70:	60da      	str	r2, [r3, #12]
 8000e72:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	4a24      	ldr	r2, [pc, #144]	; (8000f0c <HAL_TIM_MspPostInit+0xb0>)
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	d11e      	bne.n	8000ebc <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e7e:	2300      	movs	r3, #0
 8000e80:	613b      	str	r3, [r7, #16]
 8000e82:	4b23      	ldr	r3, [pc, #140]	; (8000f10 <HAL_TIM_MspPostInit+0xb4>)
 8000e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e86:	4a22      	ldr	r2, [pc, #136]	; (8000f10 <HAL_TIM_MspPostInit+0xb4>)
 8000e88:	f043 0302 	orr.w	r3, r3, #2
 8000e8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e8e:	4b20      	ldr	r3, [pc, #128]	; (8000f10 <HAL_TIM_MspPostInit+0xb4>)
 8000e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e92:	f003 0302 	and.w	r3, r3, #2
 8000e96:	613b      	str	r3, [r7, #16]
 8000e98:	693b      	ldr	r3, [r7, #16]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = SG90_PWM_Pin;
 8000e9a:	2340      	movs	r3, #64	; 0x40
 8000e9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e9e:	2302      	movs	r3, #2
 8000ea0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000eaa:	2302      	movs	r3, #2
 8000eac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SG90_PWM_GPIO_Port, &GPIO_InitStruct);
 8000eae:	f107 0314 	add.w	r3, r7, #20
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	4817      	ldr	r0, [pc, #92]	; (8000f14 <HAL_TIM_MspPostInit+0xb8>)
 8000eb6:	f000 fa73 	bl	80013a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM14_MspPostInit 1 */

  /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 8000eba:	e022      	b.n	8000f02 <HAL_TIM_MspPostInit+0xa6>
  else if(htim->Instance==TIM14)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4a15      	ldr	r2, [pc, #84]	; (8000f18 <HAL_TIM_MspPostInit+0xbc>)
 8000ec2:	4293      	cmp	r3, r2
 8000ec4:	d11d      	bne.n	8000f02 <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	60fb      	str	r3, [r7, #12]
 8000eca:	4b11      	ldr	r3, [pc, #68]	; (8000f10 <HAL_TIM_MspPostInit+0xb4>)
 8000ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ece:	4a10      	ldr	r2, [pc, #64]	; (8000f10 <HAL_TIM_MspPostInit+0xb4>)
 8000ed0:	f043 0301 	orr.w	r3, r3, #1
 8000ed4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ed6:	4b0e      	ldr	r3, [pc, #56]	; (8000f10 <HAL_TIM_MspPostInit+0xb4>)
 8000ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eda:	f003 0301 	and.w	r3, r3, #1
 8000ede:	60fb      	str	r3, [r7, #12]
 8000ee0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = L293D_PWM_Pin;
 8000ee2:	2380      	movs	r3, #128	; 0x80
 8000ee4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee6:	2302      	movs	r3, #2
 8000ee8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eea:	2300      	movs	r3, #0
 8000eec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 8000ef2:	2309      	movs	r3, #9
 8000ef4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(L293D_PWM_GPIO_Port, &GPIO_InitStruct);
 8000ef6:	f107 0314 	add.w	r3, r7, #20
 8000efa:	4619      	mov	r1, r3
 8000efc:	4807      	ldr	r0, [pc, #28]	; (8000f1c <HAL_TIM_MspPostInit+0xc0>)
 8000efe:	f000 fa4f 	bl	80013a0 <HAL_GPIO_Init>
}
 8000f02:	bf00      	nop
 8000f04:	3728      	adds	r7, #40	; 0x28
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	40000800 	.word	0x40000800
 8000f10:	40023800 	.word	0x40023800
 8000f14:	40020400 	.word	0x40020400
 8000f18:	40002000 	.word	0x40002000
 8000f1c:	40020000 	.word	0x40020000

08000f20 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b08a      	sub	sp, #40	; 0x28
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f28:	f107 0314 	add.w	r3, r7, #20
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	601a      	str	r2, [r3, #0]
 8000f30:	605a      	str	r2, [r3, #4]
 8000f32:	609a      	str	r2, [r3, #8]
 8000f34:	60da      	str	r2, [r3, #12]
 8000f36:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	4a28      	ldr	r2, [pc, #160]	; (8000fe0 <HAL_UART_MspInit+0xc0>)
 8000f3e:	4293      	cmp	r3, r2
 8000f40:	d14a      	bne.n	8000fd8 <HAL_UART_MspInit+0xb8>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000f42:	2300      	movs	r3, #0
 8000f44:	613b      	str	r3, [r7, #16]
 8000f46:	4b27      	ldr	r3, [pc, #156]	; (8000fe4 <HAL_UART_MspInit+0xc4>)
 8000f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f4a:	4a26      	ldr	r2, [pc, #152]	; (8000fe4 <HAL_UART_MspInit+0xc4>)
 8000f4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f50:	6413      	str	r3, [r2, #64]	; 0x40
 8000f52:	4b24      	ldr	r3, [pc, #144]	; (8000fe4 <HAL_UART_MspInit+0xc4>)
 8000f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f56:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f5a:	613b      	str	r3, [r7, #16]
 8000f5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f5e:	2300      	movs	r3, #0
 8000f60:	60fb      	str	r3, [r7, #12]
 8000f62:	4b20      	ldr	r3, [pc, #128]	; (8000fe4 <HAL_UART_MspInit+0xc4>)
 8000f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f66:	4a1f      	ldr	r2, [pc, #124]	; (8000fe4 <HAL_UART_MspInit+0xc4>)
 8000f68:	f043 0304 	orr.w	r3, r3, #4
 8000f6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f6e:	4b1d      	ldr	r3, [pc, #116]	; (8000fe4 <HAL_UART_MspInit+0xc4>)
 8000f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f72:	f003 0304 	and.w	r3, r3, #4
 8000f76:	60fb      	str	r3, [r7, #12]
 8000f78:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	60bb      	str	r3, [r7, #8]
 8000f7e:	4b19      	ldr	r3, [pc, #100]	; (8000fe4 <HAL_UART_MspInit+0xc4>)
 8000f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f82:	4a18      	ldr	r2, [pc, #96]	; (8000fe4 <HAL_UART_MspInit+0xc4>)
 8000f84:	f043 0302 	orr.w	r3, r3, #2
 8000f88:	6313      	str	r3, [r2, #48]	; 0x30
 8000f8a:	4b16      	ldr	r3, [pc, #88]	; (8000fe4 <HAL_UART_MspInit+0xc4>)
 8000f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8e:	f003 0302 	and.w	r3, r3, #2
 8000f92:	60bb      	str	r3, [r7, #8]
 8000f94:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PC5     ------> USART3_RX
    PB10     ------> USART3_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000f96:	2320      	movs	r3, #32
 8000f98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f9a:	2302      	movs	r3, #2
 8000f9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fa2:	2303      	movs	r3, #3
 8000fa4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000fa6:	2307      	movs	r3, #7
 8000fa8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000faa:	f107 0314 	add.w	r3, r7, #20
 8000fae:	4619      	mov	r1, r3
 8000fb0:	480d      	ldr	r0, [pc, #52]	; (8000fe8 <HAL_UART_MspInit+0xc8>)
 8000fb2:	f000 f9f5 	bl	80013a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000fb6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fbc:	2302      	movs	r3, #2
 8000fbe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fc4:	2303      	movs	r3, #3
 8000fc6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000fc8:	2307      	movs	r3, #7
 8000fca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fcc:	f107 0314 	add.w	r3, r7, #20
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	4806      	ldr	r0, [pc, #24]	; (8000fec <HAL_UART_MspInit+0xcc>)
 8000fd4:	f000 f9e4 	bl	80013a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000fd8:	bf00      	nop
 8000fda:	3728      	adds	r7, #40	; 0x28
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	40004800 	.word	0x40004800
 8000fe4:	40023800 	.word	0x40023800
 8000fe8:	40020800 	.word	0x40020800
 8000fec:	40020400 	.word	0x40020400

08000ff0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b08c      	sub	sp, #48	; 0x30
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8001000:	2200      	movs	r2, #0
 8001002:	6879      	ldr	r1, [r7, #4]
 8001004:	2019      	movs	r0, #25
 8001006:	f000 f9a1 	bl	800134c <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800100a:	2019      	movs	r0, #25
 800100c:	f000 f9ba 	bl	8001384 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001010:	2300      	movs	r3, #0
 8001012:	60fb      	str	r3, [r7, #12]
 8001014:	4b1e      	ldr	r3, [pc, #120]	; (8001090 <HAL_InitTick+0xa0>)
 8001016:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001018:	4a1d      	ldr	r2, [pc, #116]	; (8001090 <HAL_InitTick+0xa0>)
 800101a:	f043 0301 	orr.w	r3, r3, #1
 800101e:	6453      	str	r3, [r2, #68]	; 0x44
 8001020:	4b1b      	ldr	r3, [pc, #108]	; (8001090 <HAL_InitTick+0xa0>)
 8001022:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001024:	f003 0301 	and.w	r3, r3, #1
 8001028:	60fb      	str	r3, [r7, #12]
 800102a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800102c:	f107 0210 	add.w	r2, r7, #16
 8001030:	f107 0314 	add.w	r3, r7, #20
 8001034:	4611      	mov	r1, r2
 8001036:	4618      	mov	r0, r3
 8001038:	f001 f8d6 	bl	80021e8 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 800103c:	f001 f8c0 	bl	80021c0 <HAL_RCC_GetPCLK2Freq>
 8001040:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001042:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001044:	4a13      	ldr	r2, [pc, #76]	; (8001094 <HAL_InitTick+0xa4>)
 8001046:	fba2 2303 	umull	r2, r3, r2, r3
 800104a:	0c9b      	lsrs	r3, r3, #18
 800104c:	3b01      	subs	r3, #1
 800104e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001050:	4b11      	ldr	r3, [pc, #68]	; (8001098 <HAL_InitTick+0xa8>)
 8001052:	4a12      	ldr	r2, [pc, #72]	; (800109c <HAL_InitTick+0xac>)
 8001054:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001056:	4b10      	ldr	r3, [pc, #64]	; (8001098 <HAL_InitTick+0xa8>)
 8001058:	f240 32e7 	movw	r2, #999	; 0x3e7
 800105c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800105e:	4a0e      	ldr	r2, [pc, #56]	; (8001098 <HAL_InitTick+0xa8>)
 8001060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001062:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001064:	4b0c      	ldr	r3, [pc, #48]	; (8001098 <HAL_InitTick+0xa8>)
 8001066:	2200      	movs	r2, #0
 8001068:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800106a:	4b0b      	ldr	r3, [pc, #44]	; (8001098 <HAL_InitTick+0xa8>)
 800106c:	2200      	movs	r2, #0
 800106e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001070:	4809      	ldr	r0, [pc, #36]	; (8001098 <HAL_InitTick+0xa8>)
 8001072:	f001 fd3b 	bl	8002aec <HAL_TIM_Base_Init>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d104      	bne.n	8001086 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 800107c:	4806      	ldr	r0, [pc, #24]	; (8001098 <HAL_InitTick+0xa8>)
 800107e:	f001 fd85 	bl	8002b8c <HAL_TIM_Base_Start_IT>
 8001082:	4603      	mov	r3, r0
 8001084:	e000      	b.n	8001088 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8001086:	2301      	movs	r3, #1
}
 8001088:	4618      	mov	r0, r3
 800108a:	3730      	adds	r7, #48	; 0x30
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	40023800 	.word	0x40023800
 8001094:	431bde83 	.word	0x431bde83
 8001098:	20004a80 	.word	0x20004a80
 800109c:	40010000 	.word	0x40010000

080010a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010a4:	e7fe      	b.n	80010a4 <NMI_Handler+0x4>

080010a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010a6:	b480      	push	{r7}
 80010a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010aa:	e7fe      	b.n	80010aa <HardFault_Handler+0x4>

080010ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010b0:	e7fe      	b.n	80010b0 <MemManage_Handler+0x4>

080010b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010b2:	b480      	push	{r7}
 80010b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010b6:	e7fe      	b.n	80010b6 <BusFault_Handler+0x4>

080010b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010bc:	e7fe      	b.n	80010bc <UsageFault_Handler+0x4>

080010be <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010be:	b480      	push	{r7}
 80010c0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010c2:	bf00      	nop
 80010c4:	46bd      	mov	sp, r7
 80010c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ca:	4770      	bx	lr

080010cc <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80010d0:	4802      	ldr	r0, [pc, #8]	; (80010dc <TIM1_UP_TIM10_IRQHandler+0x10>)
 80010d2:	f001 fe24 	bl	8002d1e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80010d6:	bf00      	nop
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	20004a80 	.word	0x20004a80

080010e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010e4:	4b06      	ldr	r3, [pc, #24]	; (8001100 <SystemInit+0x20>)
 80010e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010ea:	4a05      	ldr	r2, [pc, #20]	; (8001100 <SystemInit+0x20>)
 80010ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010f4:	bf00      	nop
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr
 80010fe:	bf00      	nop
 8001100:	e000ed00 	.word	0xe000ed00

08001104 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001104:	f8df d034 	ldr.w	sp, [pc, #52]	; 800113c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001108:	480d      	ldr	r0, [pc, #52]	; (8001140 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800110a:	490e      	ldr	r1, [pc, #56]	; (8001144 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800110c:	4a0e      	ldr	r2, [pc, #56]	; (8001148 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800110e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001110:	e002      	b.n	8001118 <LoopCopyDataInit>

08001112 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001112:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001114:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001116:	3304      	adds	r3, #4

08001118 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001118:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800111a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800111c:	d3f9      	bcc.n	8001112 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800111e:	4a0b      	ldr	r2, [pc, #44]	; (800114c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001120:	4c0b      	ldr	r4, [pc, #44]	; (8001150 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001122:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001124:	e001      	b.n	800112a <LoopFillZerobss>

08001126 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001126:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001128:	3204      	adds	r2, #4

0800112a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800112a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800112c:	d3fb      	bcc.n	8001126 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800112e:	f7ff ffd7 	bl	80010e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001132:	f006 f853 	bl	80071dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001136:	f7ff fa63 	bl	8000600 <main>
  bx  lr    
 800113a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800113c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001140:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001144:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8001148:	0800739c 	.word	0x0800739c
  ldr r2, =_sbss
 800114c:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8001150:	20004b0c 	.word	0x20004b0c

08001154 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001154:	e7fe      	b.n	8001154 <ADC_IRQHandler>
	...

08001158 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800115c:	4b0e      	ldr	r3, [pc, #56]	; (8001198 <HAL_Init+0x40>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4a0d      	ldr	r2, [pc, #52]	; (8001198 <HAL_Init+0x40>)
 8001162:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001166:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001168:	4b0b      	ldr	r3, [pc, #44]	; (8001198 <HAL_Init+0x40>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4a0a      	ldr	r2, [pc, #40]	; (8001198 <HAL_Init+0x40>)
 800116e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001172:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001174:	4b08      	ldr	r3, [pc, #32]	; (8001198 <HAL_Init+0x40>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4a07      	ldr	r2, [pc, #28]	; (8001198 <HAL_Init+0x40>)
 800117a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800117e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001180:	2003      	movs	r0, #3
 8001182:	f000 f8d8 	bl	8001336 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001186:	2000      	movs	r0, #0
 8001188:	f7ff ff32 	bl	8000ff0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800118c:	f7ff fdba 	bl	8000d04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001190:	2300      	movs	r3, #0
}
 8001192:	4618      	mov	r0, r3
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	40023c00 	.word	0x40023c00

0800119c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011a0:	4b06      	ldr	r3, [pc, #24]	; (80011bc <HAL_IncTick+0x20>)
 80011a2:	781b      	ldrb	r3, [r3, #0]
 80011a4:	461a      	mov	r2, r3
 80011a6:	4b06      	ldr	r3, [pc, #24]	; (80011c0 <HAL_IncTick+0x24>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	4413      	add	r3, r2
 80011ac:	4a04      	ldr	r2, [pc, #16]	; (80011c0 <HAL_IncTick+0x24>)
 80011ae:	6013      	str	r3, [r2, #0]
}
 80011b0:	bf00      	nop
 80011b2:	46bd      	mov	sp, r7
 80011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b8:	4770      	bx	lr
 80011ba:	bf00      	nop
 80011bc:	2000000c 	.word	0x2000000c
 80011c0:	20004ac8 	.word	0x20004ac8

080011c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
  return uwTick;
 80011c8:	4b03      	ldr	r3, [pc, #12]	; (80011d8 <HAL_GetTick+0x14>)
 80011ca:	681b      	ldr	r3, [r3, #0]
}
 80011cc:	4618      	mov	r0, r3
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr
 80011d6:	bf00      	nop
 80011d8:	20004ac8 	.word	0x20004ac8

080011dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011dc:	b480      	push	{r7}
 80011de:	b085      	sub	sp, #20
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	f003 0307 	and.w	r3, r3, #7
 80011ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011ec:	4b0c      	ldr	r3, [pc, #48]	; (8001220 <__NVIC_SetPriorityGrouping+0x44>)
 80011ee:	68db      	ldr	r3, [r3, #12]
 80011f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011f2:	68ba      	ldr	r2, [r7, #8]
 80011f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011f8:	4013      	ands	r3, r2
 80011fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001200:	68bb      	ldr	r3, [r7, #8]
 8001202:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001204:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001208:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800120c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800120e:	4a04      	ldr	r2, [pc, #16]	; (8001220 <__NVIC_SetPriorityGrouping+0x44>)
 8001210:	68bb      	ldr	r3, [r7, #8]
 8001212:	60d3      	str	r3, [r2, #12]
}
 8001214:	bf00      	nop
 8001216:	3714      	adds	r7, #20
 8001218:	46bd      	mov	sp, r7
 800121a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121e:	4770      	bx	lr
 8001220:	e000ed00 	.word	0xe000ed00

08001224 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001228:	4b04      	ldr	r3, [pc, #16]	; (800123c <__NVIC_GetPriorityGrouping+0x18>)
 800122a:	68db      	ldr	r3, [r3, #12]
 800122c:	0a1b      	lsrs	r3, r3, #8
 800122e:	f003 0307 	and.w	r3, r3, #7
}
 8001232:	4618      	mov	r0, r3
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr
 800123c:	e000ed00 	.word	0xe000ed00

08001240 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001240:	b480      	push	{r7}
 8001242:	b083      	sub	sp, #12
 8001244:	af00      	add	r7, sp, #0
 8001246:	4603      	mov	r3, r0
 8001248:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800124a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800124e:	2b00      	cmp	r3, #0
 8001250:	db0b      	blt.n	800126a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001252:	79fb      	ldrb	r3, [r7, #7]
 8001254:	f003 021f 	and.w	r2, r3, #31
 8001258:	4907      	ldr	r1, [pc, #28]	; (8001278 <__NVIC_EnableIRQ+0x38>)
 800125a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800125e:	095b      	lsrs	r3, r3, #5
 8001260:	2001      	movs	r0, #1
 8001262:	fa00 f202 	lsl.w	r2, r0, r2
 8001266:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800126a:	bf00      	nop
 800126c:	370c      	adds	r7, #12
 800126e:	46bd      	mov	sp, r7
 8001270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001274:	4770      	bx	lr
 8001276:	bf00      	nop
 8001278:	e000e100 	.word	0xe000e100

0800127c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800127c:	b480      	push	{r7}
 800127e:	b083      	sub	sp, #12
 8001280:	af00      	add	r7, sp, #0
 8001282:	4603      	mov	r3, r0
 8001284:	6039      	str	r1, [r7, #0]
 8001286:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001288:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800128c:	2b00      	cmp	r3, #0
 800128e:	db0a      	blt.n	80012a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	b2da      	uxtb	r2, r3
 8001294:	490c      	ldr	r1, [pc, #48]	; (80012c8 <__NVIC_SetPriority+0x4c>)
 8001296:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800129a:	0112      	lsls	r2, r2, #4
 800129c:	b2d2      	uxtb	r2, r2
 800129e:	440b      	add	r3, r1
 80012a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012a4:	e00a      	b.n	80012bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	b2da      	uxtb	r2, r3
 80012aa:	4908      	ldr	r1, [pc, #32]	; (80012cc <__NVIC_SetPriority+0x50>)
 80012ac:	79fb      	ldrb	r3, [r7, #7]
 80012ae:	f003 030f 	and.w	r3, r3, #15
 80012b2:	3b04      	subs	r3, #4
 80012b4:	0112      	lsls	r2, r2, #4
 80012b6:	b2d2      	uxtb	r2, r2
 80012b8:	440b      	add	r3, r1
 80012ba:	761a      	strb	r2, [r3, #24]
}
 80012bc:	bf00      	nop
 80012be:	370c      	adds	r7, #12
 80012c0:	46bd      	mov	sp, r7
 80012c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c6:	4770      	bx	lr
 80012c8:	e000e100 	.word	0xe000e100
 80012cc:	e000ed00 	.word	0xe000ed00

080012d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b089      	sub	sp, #36	; 0x24
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	60f8      	str	r0, [r7, #12]
 80012d8:	60b9      	str	r1, [r7, #8]
 80012da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	f003 0307 	and.w	r3, r3, #7
 80012e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012e4:	69fb      	ldr	r3, [r7, #28]
 80012e6:	f1c3 0307 	rsb	r3, r3, #7
 80012ea:	2b04      	cmp	r3, #4
 80012ec:	bf28      	it	cs
 80012ee:	2304      	movcs	r3, #4
 80012f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012f2:	69fb      	ldr	r3, [r7, #28]
 80012f4:	3304      	adds	r3, #4
 80012f6:	2b06      	cmp	r3, #6
 80012f8:	d902      	bls.n	8001300 <NVIC_EncodePriority+0x30>
 80012fa:	69fb      	ldr	r3, [r7, #28]
 80012fc:	3b03      	subs	r3, #3
 80012fe:	e000      	b.n	8001302 <NVIC_EncodePriority+0x32>
 8001300:	2300      	movs	r3, #0
 8001302:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001304:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001308:	69bb      	ldr	r3, [r7, #24]
 800130a:	fa02 f303 	lsl.w	r3, r2, r3
 800130e:	43da      	mvns	r2, r3
 8001310:	68bb      	ldr	r3, [r7, #8]
 8001312:	401a      	ands	r2, r3
 8001314:	697b      	ldr	r3, [r7, #20]
 8001316:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001318:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800131c:	697b      	ldr	r3, [r7, #20]
 800131e:	fa01 f303 	lsl.w	r3, r1, r3
 8001322:	43d9      	mvns	r1, r3
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001328:	4313      	orrs	r3, r2
         );
}
 800132a:	4618      	mov	r0, r3
 800132c:	3724      	adds	r7, #36	; 0x24
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr

08001336 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001336:	b580      	push	{r7, lr}
 8001338:	b082      	sub	sp, #8
 800133a:	af00      	add	r7, sp, #0
 800133c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800133e:	6878      	ldr	r0, [r7, #4]
 8001340:	f7ff ff4c 	bl	80011dc <__NVIC_SetPriorityGrouping>
}
 8001344:	bf00      	nop
 8001346:	3708      	adds	r7, #8
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}

0800134c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800134c:	b580      	push	{r7, lr}
 800134e:	b086      	sub	sp, #24
 8001350:	af00      	add	r7, sp, #0
 8001352:	4603      	mov	r3, r0
 8001354:	60b9      	str	r1, [r7, #8]
 8001356:	607a      	str	r2, [r7, #4]
 8001358:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800135a:	2300      	movs	r3, #0
 800135c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800135e:	f7ff ff61 	bl	8001224 <__NVIC_GetPriorityGrouping>
 8001362:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001364:	687a      	ldr	r2, [r7, #4]
 8001366:	68b9      	ldr	r1, [r7, #8]
 8001368:	6978      	ldr	r0, [r7, #20]
 800136a:	f7ff ffb1 	bl	80012d0 <NVIC_EncodePriority>
 800136e:	4602      	mov	r2, r0
 8001370:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001374:	4611      	mov	r1, r2
 8001376:	4618      	mov	r0, r3
 8001378:	f7ff ff80 	bl	800127c <__NVIC_SetPriority>
}
 800137c:	bf00      	nop
 800137e:	3718      	adds	r7, #24
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}

08001384 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b082      	sub	sp, #8
 8001388:	af00      	add	r7, sp, #0
 800138a:	4603      	mov	r3, r0
 800138c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800138e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001392:	4618      	mov	r0, r3
 8001394:	f7ff ff54 	bl	8001240 <__NVIC_EnableIRQ>
}
 8001398:	bf00      	nop
 800139a:	3708      	adds	r7, #8
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}

080013a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b089      	sub	sp, #36	; 0x24
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
 80013a8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80013aa:	2300      	movs	r3, #0
 80013ac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80013ae:	2300      	movs	r3, #0
 80013b0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80013b2:	2300      	movs	r3, #0
 80013b4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013b6:	2300      	movs	r3, #0
 80013b8:	61fb      	str	r3, [r7, #28]
 80013ba:	e165      	b.n	8001688 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80013bc:	2201      	movs	r2, #1
 80013be:	69fb      	ldr	r3, [r7, #28]
 80013c0:	fa02 f303 	lsl.w	r3, r2, r3
 80013c4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	697a      	ldr	r2, [r7, #20]
 80013cc:	4013      	ands	r3, r2
 80013ce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80013d0:	693a      	ldr	r2, [r7, #16]
 80013d2:	697b      	ldr	r3, [r7, #20]
 80013d4:	429a      	cmp	r2, r3
 80013d6:	f040 8154 	bne.w	8001682 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	f003 0303 	and.w	r3, r3, #3
 80013e2:	2b01      	cmp	r3, #1
 80013e4:	d005      	beq.n	80013f2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013ee:	2b02      	cmp	r3, #2
 80013f0:	d130      	bne.n	8001454 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	689b      	ldr	r3, [r3, #8]
 80013f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80013f8:	69fb      	ldr	r3, [r7, #28]
 80013fa:	005b      	lsls	r3, r3, #1
 80013fc:	2203      	movs	r2, #3
 80013fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001402:	43db      	mvns	r3, r3
 8001404:	69ba      	ldr	r2, [r7, #24]
 8001406:	4013      	ands	r3, r2
 8001408:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	68da      	ldr	r2, [r3, #12]
 800140e:	69fb      	ldr	r3, [r7, #28]
 8001410:	005b      	lsls	r3, r3, #1
 8001412:	fa02 f303 	lsl.w	r3, r2, r3
 8001416:	69ba      	ldr	r2, [r7, #24]
 8001418:	4313      	orrs	r3, r2
 800141a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	69ba      	ldr	r2, [r7, #24]
 8001420:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001428:	2201      	movs	r2, #1
 800142a:	69fb      	ldr	r3, [r7, #28]
 800142c:	fa02 f303 	lsl.w	r3, r2, r3
 8001430:	43db      	mvns	r3, r3
 8001432:	69ba      	ldr	r2, [r7, #24]
 8001434:	4013      	ands	r3, r2
 8001436:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	091b      	lsrs	r3, r3, #4
 800143e:	f003 0201 	and.w	r2, r3, #1
 8001442:	69fb      	ldr	r3, [r7, #28]
 8001444:	fa02 f303 	lsl.w	r3, r2, r3
 8001448:	69ba      	ldr	r2, [r7, #24]
 800144a:	4313      	orrs	r3, r2
 800144c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	69ba      	ldr	r2, [r7, #24]
 8001452:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	f003 0303 	and.w	r3, r3, #3
 800145c:	2b03      	cmp	r3, #3
 800145e:	d017      	beq.n	8001490 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	68db      	ldr	r3, [r3, #12]
 8001464:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001466:	69fb      	ldr	r3, [r7, #28]
 8001468:	005b      	lsls	r3, r3, #1
 800146a:	2203      	movs	r2, #3
 800146c:	fa02 f303 	lsl.w	r3, r2, r3
 8001470:	43db      	mvns	r3, r3
 8001472:	69ba      	ldr	r2, [r7, #24]
 8001474:	4013      	ands	r3, r2
 8001476:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	689a      	ldr	r2, [r3, #8]
 800147c:	69fb      	ldr	r3, [r7, #28]
 800147e:	005b      	lsls	r3, r3, #1
 8001480:	fa02 f303 	lsl.w	r3, r2, r3
 8001484:	69ba      	ldr	r2, [r7, #24]
 8001486:	4313      	orrs	r3, r2
 8001488:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	69ba      	ldr	r2, [r7, #24]
 800148e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	f003 0303 	and.w	r3, r3, #3
 8001498:	2b02      	cmp	r3, #2
 800149a:	d123      	bne.n	80014e4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800149c:	69fb      	ldr	r3, [r7, #28]
 800149e:	08da      	lsrs	r2, r3, #3
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	3208      	adds	r2, #8
 80014a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80014aa:	69fb      	ldr	r3, [r7, #28]
 80014ac:	f003 0307 	and.w	r3, r3, #7
 80014b0:	009b      	lsls	r3, r3, #2
 80014b2:	220f      	movs	r2, #15
 80014b4:	fa02 f303 	lsl.w	r3, r2, r3
 80014b8:	43db      	mvns	r3, r3
 80014ba:	69ba      	ldr	r2, [r7, #24]
 80014bc:	4013      	ands	r3, r2
 80014be:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	691a      	ldr	r2, [r3, #16]
 80014c4:	69fb      	ldr	r3, [r7, #28]
 80014c6:	f003 0307 	and.w	r3, r3, #7
 80014ca:	009b      	lsls	r3, r3, #2
 80014cc:	fa02 f303 	lsl.w	r3, r2, r3
 80014d0:	69ba      	ldr	r2, [r7, #24]
 80014d2:	4313      	orrs	r3, r2
 80014d4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80014d6:	69fb      	ldr	r3, [r7, #28]
 80014d8:	08da      	lsrs	r2, r3, #3
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	3208      	adds	r2, #8
 80014de:	69b9      	ldr	r1, [r7, #24]
 80014e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80014ea:	69fb      	ldr	r3, [r7, #28]
 80014ec:	005b      	lsls	r3, r3, #1
 80014ee:	2203      	movs	r2, #3
 80014f0:	fa02 f303 	lsl.w	r3, r2, r3
 80014f4:	43db      	mvns	r3, r3
 80014f6:	69ba      	ldr	r2, [r7, #24]
 80014f8:	4013      	ands	r3, r2
 80014fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	f003 0203 	and.w	r2, r3, #3
 8001504:	69fb      	ldr	r3, [r7, #28]
 8001506:	005b      	lsls	r3, r3, #1
 8001508:	fa02 f303 	lsl.w	r3, r2, r3
 800150c:	69ba      	ldr	r2, [r7, #24]
 800150e:	4313      	orrs	r3, r2
 8001510:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	69ba      	ldr	r2, [r7, #24]
 8001516:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001520:	2b00      	cmp	r3, #0
 8001522:	f000 80ae 	beq.w	8001682 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001526:	2300      	movs	r3, #0
 8001528:	60fb      	str	r3, [r7, #12]
 800152a:	4b5d      	ldr	r3, [pc, #372]	; (80016a0 <HAL_GPIO_Init+0x300>)
 800152c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800152e:	4a5c      	ldr	r2, [pc, #368]	; (80016a0 <HAL_GPIO_Init+0x300>)
 8001530:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001534:	6453      	str	r3, [r2, #68]	; 0x44
 8001536:	4b5a      	ldr	r3, [pc, #360]	; (80016a0 <HAL_GPIO_Init+0x300>)
 8001538:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800153a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800153e:	60fb      	str	r3, [r7, #12]
 8001540:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001542:	4a58      	ldr	r2, [pc, #352]	; (80016a4 <HAL_GPIO_Init+0x304>)
 8001544:	69fb      	ldr	r3, [r7, #28]
 8001546:	089b      	lsrs	r3, r3, #2
 8001548:	3302      	adds	r3, #2
 800154a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800154e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001550:	69fb      	ldr	r3, [r7, #28]
 8001552:	f003 0303 	and.w	r3, r3, #3
 8001556:	009b      	lsls	r3, r3, #2
 8001558:	220f      	movs	r2, #15
 800155a:	fa02 f303 	lsl.w	r3, r2, r3
 800155e:	43db      	mvns	r3, r3
 8001560:	69ba      	ldr	r2, [r7, #24]
 8001562:	4013      	ands	r3, r2
 8001564:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	4a4f      	ldr	r2, [pc, #316]	; (80016a8 <HAL_GPIO_Init+0x308>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d025      	beq.n	80015ba <HAL_GPIO_Init+0x21a>
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	4a4e      	ldr	r2, [pc, #312]	; (80016ac <HAL_GPIO_Init+0x30c>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d01f      	beq.n	80015b6 <HAL_GPIO_Init+0x216>
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	4a4d      	ldr	r2, [pc, #308]	; (80016b0 <HAL_GPIO_Init+0x310>)
 800157a:	4293      	cmp	r3, r2
 800157c:	d019      	beq.n	80015b2 <HAL_GPIO_Init+0x212>
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	4a4c      	ldr	r2, [pc, #304]	; (80016b4 <HAL_GPIO_Init+0x314>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d013      	beq.n	80015ae <HAL_GPIO_Init+0x20e>
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	4a4b      	ldr	r2, [pc, #300]	; (80016b8 <HAL_GPIO_Init+0x318>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d00d      	beq.n	80015aa <HAL_GPIO_Init+0x20a>
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	4a4a      	ldr	r2, [pc, #296]	; (80016bc <HAL_GPIO_Init+0x31c>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d007      	beq.n	80015a6 <HAL_GPIO_Init+0x206>
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	4a49      	ldr	r2, [pc, #292]	; (80016c0 <HAL_GPIO_Init+0x320>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d101      	bne.n	80015a2 <HAL_GPIO_Init+0x202>
 800159e:	2306      	movs	r3, #6
 80015a0:	e00c      	b.n	80015bc <HAL_GPIO_Init+0x21c>
 80015a2:	2307      	movs	r3, #7
 80015a4:	e00a      	b.n	80015bc <HAL_GPIO_Init+0x21c>
 80015a6:	2305      	movs	r3, #5
 80015a8:	e008      	b.n	80015bc <HAL_GPIO_Init+0x21c>
 80015aa:	2304      	movs	r3, #4
 80015ac:	e006      	b.n	80015bc <HAL_GPIO_Init+0x21c>
 80015ae:	2303      	movs	r3, #3
 80015b0:	e004      	b.n	80015bc <HAL_GPIO_Init+0x21c>
 80015b2:	2302      	movs	r3, #2
 80015b4:	e002      	b.n	80015bc <HAL_GPIO_Init+0x21c>
 80015b6:	2301      	movs	r3, #1
 80015b8:	e000      	b.n	80015bc <HAL_GPIO_Init+0x21c>
 80015ba:	2300      	movs	r3, #0
 80015bc:	69fa      	ldr	r2, [r7, #28]
 80015be:	f002 0203 	and.w	r2, r2, #3
 80015c2:	0092      	lsls	r2, r2, #2
 80015c4:	4093      	lsls	r3, r2
 80015c6:	69ba      	ldr	r2, [r7, #24]
 80015c8:	4313      	orrs	r3, r2
 80015ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80015cc:	4935      	ldr	r1, [pc, #212]	; (80016a4 <HAL_GPIO_Init+0x304>)
 80015ce:	69fb      	ldr	r3, [r7, #28]
 80015d0:	089b      	lsrs	r3, r3, #2
 80015d2:	3302      	adds	r3, #2
 80015d4:	69ba      	ldr	r2, [r7, #24]
 80015d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80015da:	4b3a      	ldr	r3, [pc, #232]	; (80016c4 <HAL_GPIO_Init+0x324>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015e0:	693b      	ldr	r3, [r7, #16]
 80015e2:	43db      	mvns	r3, r3
 80015e4:	69ba      	ldr	r2, [r7, #24]
 80015e6:	4013      	ands	r3, r2
 80015e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d003      	beq.n	80015fe <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80015f6:	69ba      	ldr	r2, [r7, #24]
 80015f8:	693b      	ldr	r3, [r7, #16]
 80015fa:	4313      	orrs	r3, r2
 80015fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80015fe:	4a31      	ldr	r2, [pc, #196]	; (80016c4 <HAL_GPIO_Init+0x324>)
 8001600:	69bb      	ldr	r3, [r7, #24]
 8001602:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001604:	4b2f      	ldr	r3, [pc, #188]	; (80016c4 <HAL_GPIO_Init+0x324>)
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800160a:	693b      	ldr	r3, [r7, #16]
 800160c:	43db      	mvns	r3, r3
 800160e:	69ba      	ldr	r2, [r7, #24]
 8001610:	4013      	ands	r3, r2
 8001612:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800161c:	2b00      	cmp	r3, #0
 800161e:	d003      	beq.n	8001628 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001620:	69ba      	ldr	r2, [r7, #24]
 8001622:	693b      	ldr	r3, [r7, #16]
 8001624:	4313      	orrs	r3, r2
 8001626:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001628:	4a26      	ldr	r2, [pc, #152]	; (80016c4 <HAL_GPIO_Init+0x324>)
 800162a:	69bb      	ldr	r3, [r7, #24]
 800162c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800162e:	4b25      	ldr	r3, [pc, #148]	; (80016c4 <HAL_GPIO_Init+0x324>)
 8001630:	689b      	ldr	r3, [r3, #8]
 8001632:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001634:	693b      	ldr	r3, [r7, #16]
 8001636:	43db      	mvns	r3, r3
 8001638:	69ba      	ldr	r2, [r7, #24]
 800163a:	4013      	ands	r3, r2
 800163c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001646:	2b00      	cmp	r3, #0
 8001648:	d003      	beq.n	8001652 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800164a:	69ba      	ldr	r2, [r7, #24]
 800164c:	693b      	ldr	r3, [r7, #16]
 800164e:	4313      	orrs	r3, r2
 8001650:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001652:	4a1c      	ldr	r2, [pc, #112]	; (80016c4 <HAL_GPIO_Init+0x324>)
 8001654:	69bb      	ldr	r3, [r7, #24]
 8001656:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001658:	4b1a      	ldr	r3, [pc, #104]	; (80016c4 <HAL_GPIO_Init+0x324>)
 800165a:	68db      	ldr	r3, [r3, #12]
 800165c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800165e:	693b      	ldr	r3, [r7, #16]
 8001660:	43db      	mvns	r3, r3
 8001662:	69ba      	ldr	r2, [r7, #24]
 8001664:	4013      	ands	r3, r2
 8001666:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001670:	2b00      	cmp	r3, #0
 8001672:	d003      	beq.n	800167c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001674:	69ba      	ldr	r2, [r7, #24]
 8001676:	693b      	ldr	r3, [r7, #16]
 8001678:	4313      	orrs	r3, r2
 800167a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800167c:	4a11      	ldr	r2, [pc, #68]	; (80016c4 <HAL_GPIO_Init+0x324>)
 800167e:	69bb      	ldr	r3, [r7, #24]
 8001680:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001682:	69fb      	ldr	r3, [r7, #28]
 8001684:	3301      	adds	r3, #1
 8001686:	61fb      	str	r3, [r7, #28]
 8001688:	69fb      	ldr	r3, [r7, #28]
 800168a:	2b0f      	cmp	r3, #15
 800168c:	f67f ae96 	bls.w	80013bc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001690:	bf00      	nop
 8001692:	bf00      	nop
 8001694:	3724      	adds	r7, #36	; 0x24
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr
 800169e:	bf00      	nop
 80016a0:	40023800 	.word	0x40023800
 80016a4:	40013800 	.word	0x40013800
 80016a8:	40020000 	.word	0x40020000
 80016ac:	40020400 	.word	0x40020400
 80016b0:	40020800 	.word	0x40020800
 80016b4:	40020c00 	.word	0x40020c00
 80016b8:	40021000 	.word	0x40021000
 80016bc:	40021400 	.word	0x40021400
 80016c0:	40021800 	.word	0x40021800
 80016c4:	40013c00 	.word	0x40013c00

080016c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b083      	sub	sp, #12
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
 80016d0:	460b      	mov	r3, r1
 80016d2:	807b      	strh	r3, [r7, #2]
 80016d4:	4613      	mov	r3, r2
 80016d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80016d8:	787b      	ldrb	r3, [r7, #1]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d003      	beq.n	80016e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016de:	887a      	ldrh	r2, [r7, #2]
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80016e4:	e003      	b.n	80016ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80016e6:	887b      	ldrh	r3, [r7, #2]
 80016e8:	041a      	lsls	r2, r3, #16
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	619a      	str	r2, [r3, #24]
}
 80016ee:	bf00      	nop
 80016f0:	370c      	adds	r7, #12
 80016f2:	46bd      	mov	sp, r7
 80016f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f8:	4770      	bx	lr
	...

080016fc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b084      	sub	sp, #16
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d101      	bne.n	800170e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800170a:	2301      	movs	r3, #1
 800170c:	e12b      	b.n	8001966 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001714:	b2db      	uxtb	r3, r3
 8001716:	2b00      	cmp	r3, #0
 8001718:	d106      	bne.n	8001728 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2200      	movs	r2, #0
 800171e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001722:	6878      	ldr	r0, [r7, #4]
 8001724:	f7ff fb1a 	bl	8000d5c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2224      	movs	r2, #36	; 0x24
 800172c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	681a      	ldr	r2, [r3, #0]
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f022 0201 	bic.w	r2, r2, #1
 800173e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	681a      	ldr	r2, [r3, #0]
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800174e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	681a      	ldr	r2, [r3, #0]
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800175e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001760:	f000 fd1a 	bl	8002198 <HAL_RCC_GetPCLK1Freq>
 8001764:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	4a81      	ldr	r2, [pc, #516]	; (8001970 <HAL_I2C_Init+0x274>)
 800176c:	4293      	cmp	r3, r2
 800176e:	d807      	bhi.n	8001780 <HAL_I2C_Init+0x84>
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	4a80      	ldr	r2, [pc, #512]	; (8001974 <HAL_I2C_Init+0x278>)
 8001774:	4293      	cmp	r3, r2
 8001776:	bf94      	ite	ls
 8001778:	2301      	movls	r3, #1
 800177a:	2300      	movhi	r3, #0
 800177c:	b2db      	uxtb	r3, r3
 800177e:	e006      	b.n	800178e <HAL_I2C_Init+0x92>
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	4a7d      	ldr	r2, [pc, #500]	; (8001978 <HAL_I2C_Init+0x27c>)
 8001784:	4293      	cmp	r3, r2
 8001786:	bf94      	ite	ls
 8001788:	2301      	movls	r3, #1
 800178a:	2300      	movhi	r3, #0
 800178c:	b2db      	uxtb	r3, r3
 800178e:	2b00      	cmp	r3, #0
 8001790:	d001      	beq.n	8001796 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001792:	2301      	movs	r3, #1
 8001794:	e0e7      	b.n	8001966 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	4a78      	ldr	r2, [pc, #480]	; (800197c <HAL_I2C_Init+0x280>)
 800179a:	fba2 2303 	umull	r2, r3, r2, r3
 800179e:	0c9b      	lsrs	r3, r3, #18
 80017a0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	68ba      	ldr	r2, [r7, #8]
 80017b2:	430a      	orrs	r2, r1
 80017b4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	6a1b      	ldr	r3, [r3, #32]
 80017bc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	4a6a      	ldr	r2, [pc, #424]	; (8001970 <HAL_I2C_Init+0x274>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d802      	bhi.n	80017d0 <HAL_I2C_Init+0xd4>
 80017ca:	68bb      	ldr	r3, [r7, #8]
 80017cc:	3301      	adds	r3, #1
 80017ce:	e009      	b.n	80017e4 <HAL_I2C_Init+0xe8>
 80017d0:	68bb      	ldr	r3, [r7, #8]
 80017d2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80017d6:	fb02 f303 	mul.w	r3, r2, r3
 80017da:	4a69      	ldr	r2, [pc, #420]	; (8001980 <HAL_I2C_Init+0x284>)
 80017dc:	fba2 2303 	umull	r2, r3, r2, r3
 80017e0:	099b      	lsrs	r3, r3, #6
 80017e2:	3301      	adds	r3, #1
 80017e4:	687a      	ldr	r2, [r7, #4]
 80017e6:	6812      	ldr	r2, [r2, #0]
 80017e8:	430b      	orrs	r3, r1
 80017ea:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	69db      	ldr	r3, [r3, #28]
 80017f2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80017f6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	495c      	ldr	r1, [pc, #368]	; (8001970 <HAL_I2C_Init+0x274>)
 8001800:	428b      	cmp	r3, r1
 8001802:	d819      	bhi.n	8001838 <HAL_I2C_Init+0x13c>
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	1e59      	subs	r1, r3, #1
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	005b      	lsls	r3, r3, #1
 800180e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001812:	1c59      	adds	r1, r3, #1
 8001814:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001818:	400b      	ands	r3, r1
 800181a:	2b00      	cmp	r3, #0
 800181c:	d00a      	beq.n	8001834 <HAL_I2C_Init+0x138>
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	1e59      	subs	r1, r3, #1
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	005b      	lsls	r3, r3, #1
 8001828:	fbb1 f3f3 	udiv	r3, r1, r3
 800182c:	3301      	adds	r3, #1
 800182e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001832:	e051      	b.n	80018d8 <HAL_I2C_Init+0x1dc>
 8001834:	2304      	movs	r3, #4
 8001836:	e04f      	b.n	80018d8 <HAL_I2C_Init+0x1dc>
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	689b      	ldr	r3, [r3, #8]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d111      	bne.n	8001864 <HAL_I2C_Init+0x168>
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	1e58      	subs	r0, r3, #1
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6859      	ldr	r1, [r3, #4]
 8001848:	460b      	mov	r3, r1
 800184a:	005b      	lsls	r3, r3, #1
 800184c:	440b      	add	r3, r1
 800184e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001852:	3301      	adds	r3, #1
 8001854:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001858:	2b00      	cmp	r3, #0
 800185a:	bf0c      	ite	eq
 800185c:	2301      	moveq	r3, #1
 800185e:	2300      	movne	r3, #0
 8001860:	b2db      	uxtb	r3, r3
 8001862:	e012      	b.n	800188a <HAL_I2C_Init+0x18e>
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	1e58      	subs	r0, r3, #1
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6859      	ldr	r1, [r3, #4]
 800186c:	460b      	mov	r3, r1
 800186e:	009b      	lsls	r3, r3, #2
 8001870:	440b      	add	r3, r1
 8001872:	0099      	lsls	r1, r3, #2
 8001874:	440b      	add	r3, r1
 8001876:	fbb0 f3f3 	udiv	r3, r0, r3
 800187a:	3301      	adds	r3, #1
 800187c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001880:	2b00      	cmp	r3, #0
 8001882:	bf0c      	ite	eq
 8001884:	2301      	moveq	r3, #1
 8001886:	2300      	movne	r3, #0
 8001888:	b2db      	uxtb	r3, r3
 800188a:	2b00      	cmp	r3, #0
 800188c:	d001      	beq.n	8001892 <HAL_I2C_Init+0x196>
 800188e:	2301      	movs	r3, #1
 8001890:	e022      	b.n	80018d8 <HAL_I2C_Init+0x1dc>
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	689b      	ldr	r3, [r3, #8]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d10e      	bne.n	80018b8 <HAL_I2C_Init+0x1bc>
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	1e58      	subs	r0, r3, #1
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6859      	ldr	r1, [r3, #4]
 80018a2:	460b      	mov	r3, r1
 80018a4:	005b      	lsls	r3, r3, #1
 80018a6:	440b      	add	r3, r1
 80018a8:	fbb0 f3f3 	udiv	r3, r0, r3
 80018ac:	3301      	adds	r3, #1
 80018ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80018b6:	e00f      	b.n	80018d8 <HAL_I2C_Init+0x1dc>
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	1e58      	subs	r0, r3, #1
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6859      	ldr	r1, [r3, #4]
 80018c0:	460b      	mov	r3, r1
 80018c2:	009b      	lsls	r3, r3, #2
 80018c4:	440b      	add	r3, r1
 80018c6:	0099      	lsls	r1, r3, #2
 80018c8:	440b      	add	r3, r1
 80018ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80018ce:	3301      	adds	r3, #1
 80018d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018d4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80018d8:	6879      	ldr	r1, [r7, #4]
 80018da:	6809      	ldr	r1, [r1, #0]
 80018dc:	4313      	orrs	r3, r2
 80018de:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	69da      	ldr	r2, [r3, #28]
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6a1b      	ldr	r3, [r3, #32]
 80018f2:	431a      	orrs	r2, r3
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	430a      	orrs	r2, r1
 80018fa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	689b      	ldr	r3, [r3, #8]
 8001902:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001906:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800190a:	687a      	ldr	r2, [r7, #4]
 800190c:	6911      	ldr	r1, [r2, #16]
 800190e:	687a      	ldr	r2, [r7, #4]
 8001910:	68d2      	ldr	r2, [r2, #12]
 8001912:	4311      	orrs	r1, r2
 8001914:	687a      	ldr	r2, [r7, #4]
 8001916:	6812      	ldr	r2, [r2, #0]
 8001918:	430b      	orrs	r3, r1
 800191a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	68db      	ldr	r3, [r3, #12]
 8001922:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	695a      	ldr	r2, [r3, #20]
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	699b      	ldr	r3, [r3, #24]
 800192e:	431a      	orrs	r2, r3
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	430a      	orrs	r2, r1
 8001936:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	681a      	ldr	r2, [r3, #0]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f042 0201 	orr.w	r2, r2, #1
 8001946:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2200      	movs	r2, #0
 800194c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	2220      	movs	r2, #32
 8001952:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	2200      	movs	r2, #0
 800195a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2200      	movs	r2, #0
 8001960:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001964:	2300      	movs	r3, #0
}
 8001966:	4618      	mov	r0, r3
 8001968:	3710      	adds	r7, #16
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	000186a0 	.word	0x000186a0
 8001974:	001e847f 	.word	0x001e847f
 8001978:	003d08ff 	.word	0x003d08ff
 800197c:	431bde83 	.word	0x431bde83
 8001980:	10624dd3 	.word	0x10624dd3

08001984 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b088      	sub	sp, #32
 8001988:	af02      	add	r7, sp, #8
 800198a:	60f8      	str	r0, [r7, #12]
 800198c:	4608      	mov	r0, r1
 800198e:	4611      	mov	r1, r2
 8001990:	461a      	mov	r2, r3
 8001992:	4603      	mov	r3, r0
 8001994:	817b      	strh	r3, [r7, #10]
 8001996:	460b      	mov	r3, r1
 8001998:	813b      	strh	r3, [r7, #8]
 800199a:	4613      	mov	r3, r2
 800199c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800199e:	f7ff fc11 	bl	80011c4 <HAL_GetTick>
 80019a2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019aa:	b2db      	uxtb	r3, r3
 80019ac:	2b20      	cmp	r3, #32
 80019ae:	f040 80d9 	bne.w	8001b64 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80019b2:	697b      	ldr	r3, [r7, #20]
 80019b4:	9300      	str	r3, [sp, #0]
 80019b6:	2319      	movs	r3, #25
 80019b8:	2201      	movs	r2, #1
 80019ba:	496d      	ldr	r1, [pc, #436]	; (8001b70 <HAL_I2C_Mem_Write+0x1ec>)
 80019bc:	68f8      	ldr	r0, [r7, #12]
 80019be:	f000 f971 	bl	8001ca4 <I2C_WaitOnFlagUntilTimeout>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d001      	beq.n	80019cc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80019c8:	2302      	movs	r3, #2
 80019ca:	e0cc      	b.n	8001b66 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80019d2:	2b01      	cmp	r3, #1
 80019d4:	d101      	bne.n	80019da <HAL_I2C_Mem_Write+0x56>
 80019d6:	2302      	movs	r3, #2
 80019d8:	e0c5      	b.n	8001b66 <HAL_I2C_Mem_Write+0x1e2>
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	2201      	movs	r2, #1
 80019de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f003 0301 	and.w	r3, r3, #1
 80019ec:	2b01      	cmp	r3, #1
 80019ee:	d007      	beq.n	8001a00 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	681a      	ldr	r2, [r3, #0]
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f042 0201 	orr.w	r2, r2, #1
 80019fe:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	681a      	ldr	r2, [r3, #0]
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a0e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	2221      	movs	r2, #33	; 0x21
 8001a14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	2240      	movs	r2, #64	; 0x40
 8001a1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	2200      	movs	r2, #0
 8001a24:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	6a3a      	ldr	r2, [r7, #32]
 8001a2a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001a30:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a36:	b29a      	uxth	r2, r3
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	4a4d      	ldr	r2, [pc, #308]	; (8001b74 <HAL_I2C_Mem_Write+0x1f0>)
 8001a40:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001a42:	88f8      	ldrh	r0, [r7, #6]
 8001a44:	893a      	ldrh	r2, [r7, #8]
 8001a46:	8979      	ldrh	r1, [r7, #10]
 8001a48:	697b      	ldr	r3, [r7, #20]
 8001a4a:	9301      	str	r3, [sp, #4]
 8001a4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a4e:	9300      	str	r3, [sp, #0]
 8001a50:	4603      	mov	r3, r0
 8001a52:	68f8      	ldr	r0, [r7, #12]
 8001a54:	f000 f890 	bl	8001b78 <I2C_RequestMemoryWrite>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d052      	beq.n	8001b04 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	e081      	b.n	8001b66 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a62:	697a      	ldr	r2, [r7, #20]
 8001a64:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001a66:	68f8      	ldr	r0, [r7, #12]
 8001a68:	f000 f9f2 	bl	8001e50 <I2C_WaitOnTXEFlagUntilTimeout>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d00d      	beq.n	8001a8e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a76:	2b04      	cmp	r3, #4
 8001a78:	d107      	bne.n	8001a8a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	681a      	ldr	r2, [r3, #0]
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a88:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	e06b      	b.n	8001b66 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a92:	781a      	ldrb	r2, [r3, #0]
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a9e:	1c5a      	adds	r2, r3, #1
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001aa8:	3b01      	subs	r3, #1
 8001aaa:	b29a      	uxth	r2, r3
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ab4:	b29b      	uxth	r3, r3
 8001ab6:	3b01      	subs	r3, #1
 8001ab8:	b29a      	uxth	r2, r3
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	695b      	ldr	r3, [r3, #20]
 8001ac4:	f003 0304 	and.w	r3, r3, #4
 8001ac8:	2b04      	cmp	r3, #4
 8001aca:	d11b      	bne.n	8001b04 <HAL_I2C_Mem_Write+0x180>
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d017      	beq.n	8001b04 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ad8:	781a      	ldrb	r2, [r3, #0]
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ae4:	1c5a      	adds	r2, r3, #1
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001aee:	3b01      	subs	r3, #1
 8001af0:	b29a      	uxth	r2, r3
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001afa:	b29b      	uxth	r3, r3
 8001afc:	3b01      	subs	r3, #1
 8001afe:	b29a      	uxth	r2, r3
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d1aa      	bne.n	8001a62 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b0c:	697a      	ldr	r2, [r7, #20]
 8001b0e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001b10:	68f8      	ldr	r0, [r7, #12]
 8001b12:	f000 f9de 	bl	8001ed2 <I2C_WaitOnBTFFlagUntilTimeout>
 8001b16:	4603      	mov	r3, r0
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d00d      	beq.n	8001b38 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b20:	2b04      	cmp	r3, #4
 8001b22:	d107      	bne.n	8001b34 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	681a      	ldr	r2, [r3, #0]
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b32:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001b34:	2301      	movs	r3, #1
 8001b36:	e016      	b.n	8001b66 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	681a      	ldr	r2, [r3, #0]
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b46:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	2220      	movs	r2, #32
 8001b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	2200      	movs	r2, #0
 8001b54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001b60:	2300      	movs	r3, #0
 8001b62:	e000      	b.n	8001b66 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001b64:	2302      	movs	r3, #2
  }
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	3718      	adds	r7, #24
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	00100002 	.word	0x00100002
 8001b74:	ffff0000 	.word	0xffff0000

08001b78 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b088      	sub	sp, #32
 8001b7c:	af02      	add	r7, sp, #8
 8001b7e:	60f8      	str	r0, [r7, #12]
 8001b80:	4608      	mov	r0, r1
 8001b82:	4611      	mov	r1, r2
 8001b84:	461a      	mov	r2, r3
 8001b86:	4603      	mov	r3, r0
 8001b88:	817b      	strh	r3, [r7, #10]
 8001b8a:	460b      	mov	r3, r1
 8001b8c:	813b      	strh	r3, [r7, #8]
 8001b8e:	4613      	mov	r3, r2
 8001b90:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	681a      	ldr	r2, [r3, #0]
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001ba0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba4:	9300      	str	r3, [sp, #0]
 8001ba6:	6a3b      	ldr	r3, [r7, #32]
 8001ba8:	2200      	movs	r2, #0
 8001baa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001bae:	68f8      	ldr	r0, [r7, #12]
 8001bb0:	f000 f878 	bl	8001ca4 <I2C_WaitOnFlagUntilTimeout>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d00d      	beq.n	8001bd6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bc4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001bc8:	d103      	bne.n	8001bd2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001bd0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001bd2:	2303      	movs	r3, #3
 8001bd4:	e05f      	b.n	8001c96 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001bd6:	897b      	ldrh	r3, [r7, #10]
 8001bd8:	b2db      	uxtb	r3, r3
 8001bda:	461a      	mov	r2, r3
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001be4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be8:	6a3a      	ldr	r2, [r7, #32]
 8001bea:	492d      	ldr	r1, [pc, #180]	; (8001ca0 <I2C_RequestMemoryWrite+0x128>)
 8001bec:	68f8      	ldr	r0, [r7, #12]
 8001bee:	f000 f8b0 	bl	8001d52 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d001      	beq.n	8001bfc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	e04c      	b.n	8001c96 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	617b      	str	r3, [r7, #20]
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	695b      	ldr	r3, [r3, #20]
 8001c06:	617b      	str	r3, [r7, #20]
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	699b      	ldr	r3, [r3, #24]
 8001c0e:	617b      	str	r3, [r7, #20]
 8001c10:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c14:	6a39      	ldr	r1, [r7, #32]
 8001c16:	68f8      	ldr	r0, [r7, #12]
 8001c18:	f000 f91a 	bl	8001e50 <I2C_WaitOnTXEFlagUntilTimeout>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d00d      	beq.n	8001c3e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c26:	2b04      	cmp	r3, #4
 8001c28:	d107      	bne.n	8001c3a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	681a      	ldr	r2, [r3, #0]
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c38:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	e02b      	b.n	8001c96 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001c3e:	88fb      	ldrh	r3, [r7, #6]
 8001c40:	2b01      	cmp	r3, #1
 8001c42:	d105      	bne.n	8001c50 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001c44:	893b      	ldrh	r3, [r7, #8]
 8001c46:	b2da      	uxtb	r2, r3
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	611a      	str	r2, [r3, #16]
 8001c4e:	e021      	b.n	8001c94 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001c50:	893b      	ldrh	r3, [r7, #8]
 8001c52:	0a1b      	lsrs	r3, r3, #8
 8001c54:	b29b      	uxth	r3, r3
 8001c56:	b2da      	uxtb	r2, r3
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c60:	6a39      	ldr	r1, [r7, #32]
 8001c62:	68f8      	ldr	r0, [r7, #12]
 8001c64:	f000 f8f4 	bl	8001e50 <I2C_WaitOnTXEFlagUntilTimeout>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d00d      	beq.n	8001c8a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c72:	2b04      	cmp	r3, #4
 8001c74:	d107      	bne.n	8001c86 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	681a      	ldr	r2, [r3, #0]
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c84:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001c86:	2301      	movs	r3, #1
 8001c88:	e005      	b.n	8001c96 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001c8a:	893b      	ldrh	r3, [r7, #8]
 8001c8c:	b2da      	uxtb	r2, r3
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8001c94:	2300      	movs	r3, #0
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	3718      	adds	r7, #24
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	00010002 	.word	0x00010002

08001ca4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b084      	sub	sp, #16
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	60f8      	str	r0, [r7, #12]
 8001cac:	60b9      	str	r1, [r7, #8]
 8001cae:	603b      	str	r3, [r7, #0]
 8001cb0:	4613      	mov	r3, r2
 8001cb2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001cb4:	e025      	b.n	8001d02 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001cbc:	d021      	beq.n	8001d02 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001cbe:	f7ff fa81 	bl	80011c4 <HAL_GetTick>
 8001cc2:	4602      	mov	r2, r0
 8001cc4:	69bb      	ldr	r3, [r7, #24]
 8001cc6:	1ad3      	subs	r3, r2, r3
 8001cc8:	683a      	ldr	r2, [r7, #0]
 8001cca:	429a      	cmp	r2, r3
 8001ccc:	d302      	bcc.n	8001cd4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d116      	bne.n	8001d02 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	2220      	movs	r2, #32
 8001cde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cee:	f043 0220 	orr.w	r2, r3, #32
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	e023      	b.n	8001d4a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001d02:	68bb      	ldr	r3, [r7, #8]
 8001d04:	0c1b      	lsrs	r3, r3, #16
 8001d06:	b2db      	uxtb	r3, r3
 8001d08:	2b01      	cmp	r3, #1
 8001d0a:	d10d      	bne.n	8001d28 <I2C_WaitOnFlagUntilTimeout+0x84>
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	695b      	ldr	r3, [r3, #20]
 8001d12:	43da      	mvns	r2, r3
 8001d14:	68bb      	ldr	r3, [r7, #8]
 8001d16:	4013      	ands	r3, r2
 8001d18:	b29b      	uxth	r3, r3
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	bf0c      	ite	eq
 8001d1e:	2301      	moveq	r3, #1
 8001d20:	2300      	movne	r3, #0
 8001d22:	b2db      	uxtb	r3, r3
 8001d24:	461a      	mov	r2, r3
 8001d26:	e00c      	b.n	8001d42 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	699b      	ldr	r3, [r3, #24]
 8001d2e:	43da      	mvns	r2, r3
 8001d30:	68bb      	ldr	r3, [r7, #8]
 8001d32:	4013      	ands	r3, r2
 8001d34:	b29b      	uxth	r3, r3
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	bf0c      	ite	eq
 8001d3a:	2301      	moveq	r3, #1
 8001d3c:	2300      	movne	r3, #0
 8001d3e:	b2db      	uxtb	r3, r3
 8001d40:	461a      	mov	r2, r3
 8001d42:	79fb      	ldrb	r3, [r7, #7]
 8001d44:	429a      	cmp	r2, r3
 8001d46:	d0b6      	beq.n	8001cb6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001d48:	2300      	movs	r3, #0
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	3710      	adds	r7, #16
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}

08001d52 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001d52:	b580      	push	{r7, lr}
 8001d54:	b084      	sub	sp, #16
 8001d56:	af00      	add	r7, sp, #0
 8001d58:	60f8      	str	r0, [r7, #12]
 8001d5a:	60b9      	str	r1, [r7, #8]
 8001d5c:	607a      	str	r2, [r7, #4]
 8001d5e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001d60:	e051      	b.n	8001e06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	695b      	ldr	r3, [r3, #20]
 8001d68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d70:	d123      	bne.n	8001dba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	681a      	ldr	r2, [r3, #0]
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d80:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001d8a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	2200      	movs	r2, #0
 8001d90:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	2220      	movs	r2, #32
 8001d96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da6:	f043 0204 	orr.w	r2, r3, #4
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	2200      	movs	r2, #0
 8001db2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001db6:	2301      	movs	r3, #1
 8001db8:	e046      	b.n	8001e48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001dc0:	d021      	beq.n	8001e06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001dc2:	f7ff f9ff 	bl	80011c4 <HAL_GetTick>
 8001dc6:	4602      	mov	r2, r0
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	1ad3      	subs	r3, r2, r3
 8001dcc:	687a      	ldr	r2, [r7, #4]
 8001dce:	429a      	cmp	r2, r3
 8001dd0:	d302      	bcc.n	8001dd8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d116      	bne.n	8001e06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	2200      	movs	r2, #0
 8001ddc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	2220      	movs	r2, #32
 8001de2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	2200      	movs	r2, #0
 8001dea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df2:	f043 0220 	orr.w	r2, r3, #32
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
 8001e04:	e020      	b.n	8001e48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001e06:	68bb      	ldr	r3, [r7, #8]
 8001e08:	0c1b      	lsrs	r3, r3, #16
 8001e0a:	b2db      	uxtb	r3, r3
 8001e0c:	2b01      	cmp	r3, #1
 8001e0e:	d10c      	bne.n	8001e2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	695b      	ldr	r3, [r3, #20]
 8001e16:	43da      	mvns	r2, r3
 8001e18:	68bb      	ldr	r3, [r7, #8]
 8001e1a:	4013      	ands	r3, r2
 8001e1c:	b29b      	uxth	r3, r3
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	bf14      	ite	ne
 8001e22:	2301      	movne	r3, #1
 8001e24:	2300      	moveq	r3, #0
 8001e26:	b2db      	uxtb	r3, r3
 8001e28:	e00b      	b.n	8001e42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	699b      	ldr	r3, [r3, #24]
 8001e30:	43da      	mvns	r2, r3
 8001e32:	68bb      	ldr	r3, [r7, #8]
 8001e34:	4013      	ands	r3, r2
 8001e36:	b29b      	uxth	r3, r3
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	bf14      	ite	ne
 8001e3c:	2301      	movne	r3, #1
 8001e3e:	2300      	moveq	r3, #0
 8001e40:	b2db      	uxtb	r3, r3
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d18d      	bne.n	8001d62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8001e46:	2300      	movs	r3, #0
}
 8001e48:	4618      	mov	r0, r3
 8001e4a:	3710      	adds	r7, #16
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd80      	pop	{r7, pc}

08001e50 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b084      	sub	sp, #16
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	60f8      	str	r0, [r7, #12]
 8001e58:	60b9      	str	r1, [r7, #8]
 8001e5a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001e5c:	e02d      	b.n	8001eba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001e5e:	68f8      	ldr	r0, [r7, #12]
 8001e60:	f000 f878 	bl	8001f54 <I2C_IsAcknowledgeFailed>
 8001e64:	4603      	mov	r3, r0
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d001      	beq.n	8001e6e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e02d      	b.n	8001eca <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e6e:	68bb      	ldr	r3, [r7, #8]
 8001e70:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001e74:	d021      	beq.n	8001eba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e76:	f7ff f9a5 	bl	80011c4 <HAL_GetTick>
 8001e7a:	4602      	mov	r2, r0
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	1ad3      	subs	r3, r2, r3
 8001e80:	68ba      	ldr	r2, [r7, #8]
 8001e82:	429a      	cmp	r2, r3
 8001e84:	d302      	bcc.n	8001e8c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001e86:	68bb      	ldr	r3, [r7, #8]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d116      	bne.n	8001eba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	2200      	movs	r2, #0
 8001e90:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	2220      	movs	r2, #32
 8001e96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea6:	f043 0220 	orr.w	r2, r3, #32
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	e007      	b.n	8001eca <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	695b      	ldr	r3, [r3, #20]
 8001ec0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ec4:	2b80      	cmp	r3, #128	; 0x80
 8001ec6:	d1ca      	bne.n	8001e5e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001ec8:	2300      	movs	r3, #0
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	3710      	adds	r7, #16
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}

08001ed2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001ed2:	b580      	push	{r7, lr}
 8001ed4:	b084      	sub	sp, #16
 8001ed6:	af00      	add	r7, sp, #0
 8001ed8:	60f8      	str	r0, [r7, #12]
 8001eda:	60b9      	str	r1, [r7, #8]
 8001edc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001ede:	e02d      	b.n	8001f3c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001ee0:	68f8      	ldr	r0, [r7, #12]
 8001ee2:	f000 f837 	bl	8001f54 <I2C_IsAcknowledgeFailed>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d001      	beq.n	8001ef0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001eec:	2301      	movs	r3, #1
 8001eee:	e02d      	b.n	8001f4c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001ef0:	68bb      	ldr	r3, [r7, #8]
 8001ef2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001ef6:	d021      	beq.n	8001f3c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ef8:	f7ff f964 	bl	80011c4 <HAL_GetTick>
 8001efc:	4602      	mov	r2, r0
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	1ad3      	subs	r3, r2, r3
 8001f02:	68ba      	ldr	r2, [r7, #8]
 8001f04:	429a      	cmp	r2, r3
 8001f06:	d302      	bcc.n	8001f0e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001f08:	68bb      	ldr	r3, [r7, #8]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d116      	bne.n	8001f3c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	2200      	movs	r2, #0
 8001f12:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	2220      	movs	r2, #32
 8001f18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	2200      	movs	r2, #0
 8001f20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f28:	f043 0220 	orr.w	r2, r3, #32
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	2200      	movs	r2, #0
 8001f34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	e007      	b.n	8001f4c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	695b      	ldr	r3, [r3, #20]
 8001f42:	f003 0304 	and.w	r3, r3, #4
 8001f46:	2b04      	cmp	r3, #4
 8001f48:	d1ca      	bne.n	8001ee0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001f4a:	2300      	movs	r3, #0
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	3710      	adds	r7, #16
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}

08001f54 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b083      	sub	sp, #12
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	695b      	ldr	r3, [r3, #20]
 8001f62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f6a:	d11b      	bne.n	8001fa4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001f74:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2200      	movs	r2, #0
 8001f7a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2220      	movs	r2, #32
 8001f80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2200      	movs	r2, #0
 8001f88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f90:	f043 0204 	orr.w	r2, r3, #4
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	e000      	b.n	8001fa6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001fa4:	2300      	movs	r3, #0
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	370c      	adds	r7, #12
 8001faa:	46bd      	mov	sp, r7
 8001fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb0:	4770      	bx	lr
	...

08001fb4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b084      	sub	sp, #16
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
 8001fbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d101      	bne.n	8001fc8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	e0cc      	b.n	8002162 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001fc8:	4b68      	ldr	r3, [pc, #416]	; (800216c <HAL_RCC_ClockConfig+0x1b8>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f003 030f 	and.w	r3, r3, #15
 8001fd0:	683a      	ldr	r2, [r7, #0]
 8001fd2:	429a      	cmp	r2, r3
 8001fd4:	d90c      	bls.n	8001ff0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fd6:	4b65      	ldr	r3, [pc, #404]	; (800216c <HAL_RCC_ClockConfig+0x1b8>)
 8001fd8:	683a      	ldr	r2, [r7, #0]
 8001fda:	b2d2      	uxtb	r2, r2
 8001fdc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fde:	4b63      	ldr	r3, [pc, #396]	; (800216c <HAL_RCC_ClockConfig+0x1b8>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f003 030f 	and.w	r3, r3, #15
 8001fe6:	683a      	ldr	r2, [r7, #0]
 8001fe8:	429a      	cmp	r2, r3
 8001fea:	d001      	beq.n	8001ff0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001fec:	2301      	movs	r3, #1
 8001fee:	e0b8      	b.n	8002162 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f003 0302 	and.w	r3, r3, #2
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d020      	beq.n	800203e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f003 0304 	and.w	r3, r3, #4
 8002004:	2b00      	cmp	r3, #0
 8002006:	d005      	beq.n	8002014 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002008:	4b59      	ldr	r3, [pc, #356]	; (8002170 <HAL_RCC_ClockConfig+0x1bc>)
 800200a:	689b      	ldr	r3, [r3, #8]
 800200c:	4a58      	ldr	r2, [pc, #352]	; (8002170 <HAL_RCC_ClockConfig+0x1bc>)
 800200e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002012:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f003 0308 	and.w	r3, r3, #8
 800201c:	2b00      	cmp	r3, #0
 800201e:	d005      	beq.n	800202c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002020:	4b53      	ldr	r3, [pc, #332]	; (8002170 <HAL_RCC_ClockConfig+0x1bc>)
 8002022:	689b      	ldr	r3, [r3, #8]
 8002024:	4a52      	ldr	r2, [pc, #328]	; (8002170 <HAL_RCC_ClockConfig+0x1bc>)
 8002026:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800202a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800202c:	4b50      	ldr	r3, [pc, #320]	; (8002170 <HAL_RCC_ClockConfig+0x1bc>)
 800202e:	689b      	ldr	r3, [r3, #8]
 8002030:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	689b      	ldr	r3, [r3, #8]
 8002038:	494d      	ldr	r1, [pc, #308]	; (8002170 <HAL_RCC_ClockConfig+0x1bc>)
 800203a:	4313      	orrs	r3, r2
 800203c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f003 0301 	and.w	r3, r3, #1
 8002046:	2b00      	cmp	r3, #0
 8002048:	d044      	beq.n	80020d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	2b01      	cmp	r3, #1
 8002050:	d107      	bne.n	8002062 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002052:	4b47      	ldr	r3, [pc, #284]	; (8002170 <HAL_RCC_ClockConfig+0x1bc>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800205a:	2b00      	cmp	r3, #0
 800205c:	d119      	bne.n	8002092 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800205e:	2301      	movs	r3, #1
 8002060:	e07f      	b.n	8002162 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	2b02      	cmp	r3, #2
 8002068:	d003      	beq.n	8002072 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800206e:	2b03      	cmp	r3, #3
 8002070:	d107      	bne.n	8002082 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002072:	4b3f      	ldr	r3, [pc, #252]	; (8002170 <HAL_RCC_ClockConfig+0x1bc>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800207a:	2b00      	cmp	r3, #0
 800207c:	d109      	bne.n	8002092 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800207e:	2301      	movs	r3, #1
 8002080:	e06f      	b.n	8002162 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002082:	4b3b      	ldr	r3, [pc, #236]	; (8002170 <HAL_RCC_ClockConfig+0x1bc>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f003 0302 	and.w	r3, r3, #2
 800208a:	2b00      	cmp	r3, #0
 800208c:	d101      	bne.n	8002092 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800208e:	2301      	movs	r3, #1
 8002090:	e067      	b.n	8002162 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002092:	4b37      	ldr	r3, [pc, #220]	; (8002170 <HAL_RCC_ClockConfig+0x1bc>)
 8002094:	689b      	ldr	r3, [r3, #8]
 8002096:	f023 0203 	bic.w	r2, r3, #3
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	4934      	ldr	r1, [pc, #208]	; (8002170 <HAL_RCC_ClockConfig+0x1bc>)
 80020a0:	4313      	orrs	r3, r2
 80020a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020a4:	f7ff f88e 	bl	80011c4 <HAL_GetTick>
 80020a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020aa:	e00a      	b.n	80020c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020ac:	f7ff f88a 	bl	80011c4 <HAL_GetTick>
 80020b0:	4602      	mov	r2, r0
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	1ad3      	subs	r3, r2, r3
 80020b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d901      	bls.n	80020c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80020be:	2303      	movs	r3, #3
 80020c0:	e04f      	b.n	8002162 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020c2:	4b2b      	ldr	r3, [pc, #172]	; (8002170 <HAL_RCC_ClockConfig+0x1bc>)
 80020c4:	689b      	ldr	r3, [r3, #8]
 80020c6:	f003 020c 	and.w	r2, r3, #12
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	009b      	lsls	r3, r3, #2
 80020d0:	429a      	cmp	r2, r3
 80020d2:	d1eb      	bne.n	80020ac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80020d4:	4b25      	ldr	r3, [pc, #148]	; (800216c <HAL_RCC_ClockConfig+0x1b8>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f003 030f 	and.w	r3, r3, #15
 80020dc:	683a      	ldr	r2, [r7, #0]
 80020de:	429a      	cmp	r2, r3
 80020e0:	d20c      	bcs.n	80020fc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020e2:	4b22      	ldr	r3, [pc, #136]	; (800216c <HAL_RCC_ClockConfig+0x1b8>)
 80020e4:	683a      	ldr	r2, [r7, #0]
 80020e6:	b2d2      	uxtb	r2, r2
 80020e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020ea:	4b20      	ldr	r3, [pc, #128]	; (800216c <HAL_RCC_ClockConfig+0x1b8>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f003 030f 	and.w	r3, r3, #15
 80020f2:	683a      	ldr	r2, [r7, #0]
 80020f4:	429a      	cmp	r2, r3
 80020f6:	d001      	beq.n	80020fc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80020f8:	2301      	movs	r3, #1
 80020fa:	e032      	b.n	8002162 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f003 0304 	and.w	r3, r3, #4
 8002104:	2b00      	cmp	r3, #0
 8002106:	d008      	beq.n	800211a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002108:	4b19      	ldr	r3, [pc, #100]	; (8002170 <HAL_RCC_ClockConfig+0x1bc>)
 800210a:	689b      	ldr	r3, [r3, #8]
 800210c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	68db      	ldr	r3, [r3, #12]
 8002114:	4916      	ldr	r1, [pc, #88]	; (8002170 <HAL_RCC_ClockConfig+0x1bc>)
 8002116:	4313      	orrs	r3, r2
 8002118:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f003 0308 	and.w	r3, r3, #8
 8002122:	2b00      	cmp	r3, #0
 8002124:	d009      	beq.n	800213a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002126:	4b12      	ldr	r3, [pc, #72]	; (8002170 <HAL_RCC_ClockConfig+0x1bc>)
 8002128:	689b      	ldr	r3, [r3, #8]
 800212a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	691b      	ldr	r3, [r3, #16]
 8002132:	00db      	lsls	r3, r3, #3
 8002134:	490e      	ldr	r1, [pc, #56]	; (8002170 <HAL_RCC_ClockConfig+0x1bc>)
 8002136:	4313      	orrs	r3, r2
 8002138:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800213a:	f000 f887 	bl	800224c <HAL_RCC_GetSysClockFreq>
 800213e:	4602      	mov	r2, r0
 8002140:	4b0b      	ldr	r3, [pc, #44]	; (8002170 <HAL_RCC_ClockConfig+0x1bc>)
 8002142:	689b      	ldr	r3, [r3, #8]
 8002144:	091b      	lsrs	r3, r3, #4
 8002146:	f003 030f 	and.w	r3, r3, #15
 800214a:	490a      	ldr	r1, [pc, #40]	; (8002174 <HAL_RCC_ClockConfig+0x1c0>)
 800214c:	5ccb      	ldrb	r3, [r1, r3]
 800214e:	fa22 f303 	lsr.w	r3, r2, r3
 8002152:	4a09      	ldr	r2, [pc, #36]	; (8002178 <HAL_RCC_ClockConfig+0x1c4>)
 8002154:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002156:	4b09      	ldr	r3, [pc, #36]	; (800217c <HAL_RCC_ClockConfig+0x1c8>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4618      	mov	r0, r3
 800215c:	f7fe ff48 	bl	8000ff0 <HAL_InitTick>

  return HAL_OK;
 8002160:	2300      	movs	r3, #0
}
 8002162:	4618      	mov	r0, r3
 8002164:	3710      	adds	r7, #16
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}
 800216a:	bf00      	nop
 800216c:	40023c00 	.word	0x40023c00
 8002170:	40023800 	.word	0x40023800
 8002174:	08007374 	.word	0x08007374
 8002178:	20000004 	.word	0x20000004
 800217c:	20000008 	.word	0x20000008

08002180 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002180:	b480      	push	{r7}
 8002182:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002184:	4b03      	ldr	r3, [pc, #12]	; (8002194 <HAL_RCC_GetHCLKFreq+0x14>)
 8002186:	681b      	ldr	r3, [r3, #0]
}
 8002188:	4618      	mov	r0, r3
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr
 8002192:	bf00      	nop
 8002194:	20000004 	.word	0x20000004

08002198 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800219c:	f7ff fff0 	bl	8002180 <HAL_RCC_GetHCLKFreq>
 80021a0:	4602      	mov	r2, r0
 80021a2:	4b05      	ldr	r3, [pc, #20]	; (80021b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80021a4:	689b      	ldr	r3, [r3, #8]
 80021a6:	0a9b      	lsrs	r3, r3, #10
 80021a8:	f003 0307 	and.w	r3, r3, #7
 80021ac:	4903      	ldr	r1, [pc, #12]	; (80021bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80021ae:	5ccb      	ldrb	r3, [r1, r3]
 80021b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021b4:	4618      	mov	r0, r3
 80021b6:	bd80      	pop	{r7, pc}
 80021b8:	40023800 	.word	0x40023800
 80021bc:	08007384 	.word	0x08007384

080021c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80021c4:	f7ff ffdc 	bl	8002180 <HAL_RCC_GetHCLKFreq>
 80021c8:	4602      	mov	r2, r0
 80021ca:	4b05      	ldr	r3, [pc, #20]	; (80021e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80021cc:	689b      	ldr	r3, [r3, #8]
 80021ce:	0b5b      	lsrs	r3, r3, #13
 80021d0:	f003 0307 	and.w	r3, r3, #7
 80021d4:	4903      	ldr	r1, [pc, #12]	; (80021e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80021d6:	5ccb      	ldrb	r3, [r1, r3]
 80021d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021dc:	4618      	mov	r0, r3
 80021de:	bd80      	pop	{r7, pc}
 80021e0:	40023800 	.word	0x40023800
 80021e4:	08007384 	.word	0x08007384

080021e8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b083      	sub	sp, #12
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
 80021f0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	220f      	movs	r2, #15
 80021f6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80021f8:	4b12      	ldr	r3, [pc, #72]	; (8002244 <HAL_RCC_GetClockConfig+0x5c>)
 80021fa:	689b      	ldr	r3, [r3, #8]
 80021fc:	f003 0203 	and.w	r2, r3, #3
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002204:	4b0f      	ldr	r3, [pc, #60]	; (8002244 <HAL_RCC_GetClockConfig+0x5c>)
 8002206:	689b      	ldr	r3, [r3, #8]
 8002208:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002210:	4b0c      	ldr	r3, [pc, #48]	; (8002244 <HAL_RCC_GetClockConfig+0x5c>)
 8002212:	689b      	ldr	r3, [r3, #8]
 8002214:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800221c:	4b09      	ldr	r3, [pc, #36]	; (8002244 <HAL_RCC_GetClockConfig+0x5c>)
 800221e:	689b      	ldr	r3, [r3, #8]
 8002220:	08db      	lsrs	r3, r3, #3
 8002222:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800222a:	4b07      	ldr	r3, [pc, #28]	; (8002248 <HAL_RCC_GetClockConfig+0x60>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f003 020f 	and.w	r2, r3, #15
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	601a      	str	r2, [r3, #0]
}
 8002236:	bf00      	nop
 8002238:	370c      	adds	r7, #12
 800223a:	46bd      	mov	sp, r7
 800223c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002240:	4770      	bx	lr
 8002242:	bf00      	nop
 8002244:	40023800 	.word	0x40023800
 8002248:	40023c00 	.word	0x40023c00

0800224c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800224c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002250:	b088      	sub	sp, #32
 8002252:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002254:	2300      	movs	r3, #0
 8002256:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8002258:	2300      	movs	r3, #0
 800225a:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 800225c:	2300      	movs	r3, #0
 800225e:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8002260:	2300      	movs	r3, #0
 8002262:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8002264:	2300      	movs	r3, #0
 8002266:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002268:	4bce      	ldr	r3, [pc, #824]	; (80025a4 <HAL_RCC_GetSysClockFreq+0x358>)
 800226a:	689b      	ldr	r3, [r3, #8]
 800226c:	f003 030c 	and.w	r3, r3, #12
 8002270:	2b0c      	cmp	r3, #12
 8002272:	f200 818d 	bhi.w	8002590 <HAL_RCC_GetSysClockFreq+0x344>
 8002276:	a201      	add	r2, pc, #4	; (adr r2, 800227c <HAL_RCC_GetSysClockFreq+0x30>)
 8002278:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800227c:	080022b1 	.word	0x080022b1
 8002280:	08002591 	.word	0x08002591
 8002284:	08002591 	.word	0x08002591
 8002288:	08002591 	.word	0x08002591
 800228c:	080022b7 	.word	0x080022b7
 8002290:	08002591 	.word	0x08002591
 8002294:	08002591 	.word	0x08002591
 8002298:	08002591 	.word	0x08002591
 800229c:	080022bd 	.word	0x080022bd
 80022a0:	08002591 	.word	0x08002591
 80022a4:	08002591 	.word	0x08002591
 80022a8:	08002591 	.word	0x08002591
 80022ac:	08002431 	.word	0x08002431
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80022b0:	4bbd      	ldr	r3, [pc, #756]	; (80025a8 <HAL_RCC_GetSysClockFreq+0x35c>)
 80022b2:	61bb      	str	r3, [r7, #24]
       break;
 80022b4:	e16f      	b.n	8002596 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80022b6:	4bbd      	ldr	r3, [pc, #756]	; (80025ac <HAL_RCC_GetSysClockFreq+0x360>)
 80022b8:	61bb      	str	r3, [r7, #24]
      break;
 80022ba:	e16c      	b.n	8002596 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80022bc:	4bb9      	ldr	r3, [pc, #740]	; (80025a4 <HAL_RCC_GetSysClockFreq+0x358>)
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80022c4:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80022c6:	4bb7      	ldr	r3, [pc, #732]	; (80025a4 <HAL_RCC_GetSysClockFreq+0x358>)
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d053      	beq.n	800237a <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022d2:	4bb4      	ldr	r3, [pc, #720]	; (80025a4 <HAL_RCC_GetSysClockFreq+0x358>)
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	099b      	lsrs	r3, r3, #6
 80022d8:	461a      	mov	r2, r3
 80022da:	f04f 0300 	mov.w	r3, #0
 80022de:	f240 10ff 	movw	r0, #511	; 0x1ff
 80022e2:	f04f 0100 	mov.w	r1, #0
 80022e6:	ea02 0400 	and.w	r4, r2, r0
 80022ea:	603c      	str	r4, [r7, #0]
 80022ec:	400b      	ands	r3, r1
 80022ee:	607b      	str	r3, [r7, #4]
 80022f0:	e9d7 4500 	ldrd	r4, r5, [r7]
 80022f4:	4620      	mov	r0, r4
 80022f6:	4629      	mov	r1, r5
 80022f8:	f04f 0200 	mov.w	r2, #0
 80022fc:	f04f 0300 	mov.w	r3, #0
 8002300:	014b      	lsls	r3, r1, #5
 8002302:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002306:	0142      	lsls	r2, r0, #5
 8002308:	4610      	mov	r0, r2
 800230a:	4619      	mov	r1, r3
 800230c:	4623      	mov	r3, r4
 800230e:	1ac0      	subs	r0, r0, r3
 8002310:	462b      	mov	r3, r5
 8002312:	eb61 0103 	sbc.w	r1, r1, r3
 8002316:	f04f 0200 	mov.w	r2, #0
 800231a:	f04f 0300 	mov.w	r3, #0
 800231e:	018b      	lsls	r3, r1, #6
 8002320:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002324:	0182      	lsls	r2, r0, #6
 8002326:	1a12      	subs	r2, r2, r0
 8002328:	eb63 0301 	sbc.w	r3, r3, r1
 800232c:	f04f 0000 	mov.w	r0, #0
 8002330:	f04f 0100 	mov.w	r1, #0
 8002334:	00d9      	lsls	r1, r3, #3
 8002336:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800233a:	00d0      	lsls	r0, r2, #3
 800233c:	4602      	mov	r2, r0
 800233e:	460b      	mov	r3, r1
 8002340:	4621      	mov	r1, r4
 8002342:	1852      	adds	r2, r2, r1
 8002344:	4629      	mov	r1, r5
 8002346:	eb43 0101 	adc.w	r1, r3, r1
 800234a:	460b      	mov	r3, r1
 800234c:	f04f 0000 	mov.w	r0, #0
 8002350:	f04f 0100 	mov.w	r1, #0
 8002354:	0259      	lsls	r1, r3, #9
 8002356:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800235a:	0250      	lsls	r0, r2, #9
 800235c:	4602      	mov	r2, r0
 800235e:	460b      	mov	r3, r1
 8002360:	4610      	mov	r0, r2
 8002362:	4619      	mov	r1, r3
 8002364:	697b      	ldr	r3, [r7, #20]
 8002366:	461a      	mov	r2, r3
 8002368:	f04f 0300 	mov.w	r3, #0
 800236c:	f7fd ff50 	bl	8000210 <__aeabi_uldivmod>
 8002370:	4602      	mov	r2, r0
 8002372:	460b      	mov	r3, r1
 8002374:	4613      	mov	r3, r2
 8002376:	61fb      	str	r3, [r7, #28]
 8002378:	e04c      	b.n	8002414 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800237a:	4b8a      	ldr	r3, [pc, #552]	; (80025a4 <HAL_RCC_GetSysClockFreq+0x358>)
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	099b      	lsrs	r3, r3, #6
 8002380:	461a      	mov	r2, r3
 8002382:	f04f 0300 	mov.w	r3, #0
 8002386:	f240 10ff 	movw	r0, #511	; 0x1ff
 800238a:	f04f 0100 	mov.w	r1, #0
 800238e:	ea02 0a00 	and.w	sl, r2, r0
 8002392:	ea03 0b01 	and.w	fp, r3, r1
 8002396:	4650      	mov	r0, sl
 8002398:	4659      	mov	r1, fp
 800239a:	f04f 0200 	mov.w	r2, #0
 800239e:	f04f 0300 	mov.w	r3, #0
 80023a2:	014b      	lsls	r3, r1, #5
 80023a4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80023a8:	0142      	lsls	r2, r0, #5
 80023aa:	4610      	mov	r0, r2
 80023ac:	4619      	mov	r1, r3
 80023ae:	ebb0 000a 	subs.w	r0, r0, sl
 80023b2:	eb61 010b 	sbc.w	r1, r1, fp
 80023b6:	f04f 0200 	mov.w	r2, #0
 80023ba:	f04f 0300 	mov.w	r3, #0
 80023be:	018b      	lsls	r3, r1, #6
 80023c0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80023c4:	0182      	lsls	r2, r0, #6
 80023c6:	1a12      	subs	r2, r2, r0
 80023c8:	eb63 0301 	sbc.w	r3, r3, r1
 80023cc:	f04f 0000 	mov.w	r0, #0
 80023d0:	f04f 0100 	mov.w	r1, #0
 80023d4:	00d9      	lsls	r1, r3, #3
 80023d6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80023da:	00d0      	lsls	r0, r2, #3
 80023dc:	4602      	mov	r2, r0
 80023de:	460b      	mov	r3, r1
 80023e0:	eb12 020a 	adds.w	r2, r2, sl
 80023e4:	eb43 030b 	adc.w	r3, r3, fp
 80023e8:	f04f 0000 	mov.w	r0, #0
 80023ec:	f04f 0100 	mov.w	r1, #0
 80023f0:	0299      	lsls	r1, r3, #10
 80023f2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80023f6:	0290      	lsls	r0, r2, #10
 80023f8:	4602      	mov	r2, r0
 80023fa:	460b      	mov	r3, r1
 80023fc:	4610      	mov	r0, r2
 80023fe:	4619      	mov	r1, r3
 8002400:	697b      	ldr	r3, [r7, #20]
 8002402:	461a      	mov	r2, r3
 8002404:	f04f 0300 	mov.w	r3, #0
 8002408:	f7fd ff02 	bl	8000210 <__aeabi_uldivmod>
 800240c:	4602      	mov	r2, r0
 800240e:	460b      	mov	r3, r1
 8002410:	4613      	mov	r3, r2
 8002412:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002414:	4b63      	ldr	r3, [pc, #396]	; (80025a4 <HAL_RCC_GetSysClockFreq+0x358>)
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	0c1b      	lsrs	r3, r3, #16
 800241a:	f003 0303 	and.w	r3, r3, #3
 800241e:	3301      	adds	r3, #1
 8002420:	005b      	lsls	r3, r3, #1
 8002422:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 8002424:	69fa      	ldr	r2, [r7, #28]
 8002426:	693b      	ldr	r3, [r7, #16]
 8002428:	fbb2 f3f3 	udiv	r3, r2, r3
 800242c:	61bb      	str	r3, [r7, #24]
      break;
 800242e:	e0b2      	b.n	8002596 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002430:	4b5c      	ldr	r3, [pc, #368]	; (80025a4 <HAL_RCC_GetSysClockFreq+0x358>)
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002438:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800243a:	4b5a      	ldr	r3, [pc, #360]	; (80025a4 <HAL_RCC_GetSysClockFreq+0x358>)
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002442:	2b00      	cmp	r3, #0
 8002444:	d04d      	beq.n	80024e2 <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002446:	4b57      	ldr	r3, [pc, #348]	; (80025a4 <HAL_RCC_GetSysClockFreq+0x358>)
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	099b      	lsrs	r3, r3, #6
 800244c:	461a      	mov	r2, r3
 800244e:	f04f 0300 	mov.w	r3, #0
 8002452:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002456:	f04f 0100 	mov.w	r1, #0
 800245a:	ea02 0800 	and.w	r8, r2, r0
 800245e:	ea03 0901 	and.w	r9, r3, r1
 8002462:	4640      	mov	r0, r8
 8002464:	4649      	mov	r1, r9
 8002466:	f04f 0200 	mov.w	r2, #0
 800246a:	f04f 0300 	mov.w	r3, #0
 800246e:	014b      	lsls	r3, r1, #5
 8002470:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002474:	0142      	lsls	r2, r0, #5
 8002476:	4610      	mov	r0, r2
 8002478:	4619      	mov	r1, r3
 800247a:	ebb0 0008 	subs.w	r0, r0, r8
 800247e:	eb61 0109 	sbc.w	r1, r1, r9
 8002482:	f04f 0200 	mov.w	r2, #0
 8002486:	f04f 0300 	mov.w	r3, #0
 800248a:	018b      	lsls	r3, r1, #6
 800248c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002490:	0182      	lsls	r2, r0, #6
 8002492:	1a12      	subs	r2, r2, r0
 8002494:	eb63 0301 	sbc.w	r3, r3, r1
 8002498:	f04f 0000 	mov.w	r0, #0
 800249c:	f04f 0100 	mov.w	r1, #0
 80024a0:	00d9      	lsls	r1, r3, #3
 80024a2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80024a6:	00d0      	lsls	r0, r2, #3
 80024a8:	4602      	mov	r2, r0
 80024aa:	460b      	mov	r3, r1
 80024ac:	eb12 0208 	adds.w	r2, r2, r8
 80024b0:	eb43 0309 	adc.w	r3, r3, r9
 80024b4:	f04f 0000 	mov.w	r0, #0
 80024b8:	f04f 0100 	mov.w	r1, #0
 80024bc:	0259      	lsls	r1, r3, #9
 80024be:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80024c2:	0250      	lsls	r0, r2, #9
 80024c4:	4602      	mov	r2, r0
 80024c6:	460b      	mov	r3, r1
 80024c8:	4610      	mov	r0, r2
 80024ca:	4619      	mov	r1, r3
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	461a      	mov	r2, r3
 80024d0:	f04f 0300 	mov.w	r3, #0
 80024d4:	f7fd fe9c 	bl	8000210 <__aeabi_uldivmod>
 80024d8:	4602      	mov	r2, r0
 80024da:	460b      	mov	r3, r1
 80024dc:	4613      	mov	r3, r2
 80024de:	61fb      	str	r3, [r7, #28]
 80024e0:	e04a      	b.n	8002578 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024e2:	4b30      	ldr	r3, [pc, #192]	; (80025a4 <HAL_RCC_GetSysClockFreq+0x358>)
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	099b      	lsrs	r3, r3, #6
 80024e8:	461a      	mov	r2, r3
 80024ea:	f04f 0300 	mov.w	r3, #0
 80024ee:	f240 10ff 	movw	r0, #511	; 0x1ff
 80024f2:	f04f 0100 	mov.w	r1, #0
 80024f6:	ea02 0400 	and.w	r4, r2, r0
 80024fa:	ea03 0501 	and.w	r5, r3, r1
 80024fe:	4620      	mov	r0, r4
 8002500:	4629      	mov	r1, r5
 8002502:	f04f 0200 	mov.w	r2, #0
 8002506:	f04f 0300 	mov.w	r3, #0
 800250a:	014b      	lsls	r3, r1, #5
 800250c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002510:	0142      	lsls	r2, r0, #5
 8002512:	4610      	mov	r0, r2
 8002514:	4619      	mov	r1, r3
 8002516:	1b00      	subs	r0, r0, r4
 8002518:	eb61 0105 	sbc.w	r1, r1, r5
 800251c:	f04f 0200 	mov.w	r2, #0
 8002520:	f04f 0300 	mov.w	r3, #0
 8002524:	018b      	lsls	r3, r1, #6
 8002526:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800252a:	0182      	lsls	r2, r0, #6
 800252c:	1a12      	subs	r2, r2, r0
 800252e:	eb63 0301 	sbc.w	r3, r3, r1
 8002532:	f04f 0000 	mov.w	r0, #0
 8002536:	f04f 0100 	mov.w	r1, #0
 800253a:	00d9      	lsls	r1, r3, #3
 800253c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002540:	00d0      	lsls	r0, r2, #3
 8002542:	4602      	mov	r2, r0
 8002544:	460b      	mov	r3, r1
 8002546:	1912      	adds	r2, r2, r4
 8002548:	eb45 0303 	adc.w	r3, r5, r3
 800254c:	f04f 0000 	mov.w	r0, #0
 8002550:	f04f 0100 	mov.w	r1, #0
 8002554:	0299      	lsls	r1, r3, #10
 8002556:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800255a:	0290      	lsls	r0, r2, #10
 800255c:	4602      	mov	r2, r0
 800255e:	460b      	mov	r3, r1
 8002560:	4610      	mov	r0, r2
 8002562:	4619      	mov	r1, r3
 8002564:	697b      	ldr	r3, [r7, #20]
 8002566:	461a      	mov	r2, r3
 8002568:	f04f 0300 	mov.w	r3, #0
 800256c:	f7fd fe50 	bl	8000210 <__aeabi_uldivmod>
 8002570:	4602      	mov	r2, r0
 8002572:	460b      	mov	r3, r1
 8002574:	4613      	mov	r3, r2
 8002576:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002578:	4b0a      	ldr	r3, [pc, #40]	; (80025a4 <HAL_RCC_GetSysClockFreq+0x358>)
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	0f1b      	lsrs	r3, r3, #28
 800257e:	f003 0307 	and.w	r3, r3, #7
 8002582:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 8002584:	69fa      	ldr	r2, [r7, #28]
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	fbb2 f3f3 	udiv	r3, r2, r3
 800258c:	61bb      	str	r3, [r7, #24]
      break;
 800258e:	e002      	b.n	8002596 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002590:	4b05      	ldr	r3, [pc, #20]	; (80025a8 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002592:	61bb      	str	r3, [r7, #24]
      break;
 8002594:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002596:	69bb      	ldr	r3, [r7, #24]
}
 8002598:	4618      	mov	r0, r3
 800259a:	3720      	adds	r7, #32
 800259c:	46bd      	mov	sp, r7
 800259e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80025a2:	bf00      	nop
 80025a4:	40023800 	.word	0x40023800
 80025a8:	00f42400 	.word	0x00f42400
 80025ac:	007a1200 	.word	0x007a1200

080025b0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b086      	sub	sp, #24
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d101      	bne.n	80025c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80025be:	2301      	movs	r3, #1
 80025c0:	e28d      	b.n	8002ade <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f003 0301 	and.w	r3, r3, #1
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	f000 8083 	beq.w	80026d6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80025d0:	4b94      	ldr	r3, [pc, #592]	; (8002824 <HAL_RCC_OscConfig+0x274>)
 80025d2:	689b      	ldr	r3, [r3, #8]
 80025d4:	f003 030c 	and.w	r3, r3, #12
 80025d8:	2b04      	cmp	r3, #4
 80025da:	d019      	beq.n	8002610 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80025dc:	4b91      	ldr	r3, [pc, #580]	; (8002824 <HAL_RCC_OscConfig+0x274>)
 80025de:	689b      	ldr	r3, [r3, #8]
 80025e0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80025e4:	2b08      	cmp	r3, #8
 80025e6:	d106      	bne.n	80025f6 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80025e8:	4b8e      	ldr	r3, [pc, #568]	; (8002824 <HAL_RCC_OscConfig+0x274>)
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025f0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80025f4:	d00c      	beq.n	8002610 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80025f6:	4b8b      	ldr	r3, [pc, #556]	; (8002824 <HAL_RCC_OscConfig+0x274>)
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80025fe:	2b0c      	cmp	r3, #12
 8002600:	d112      	bne.n	8002628 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002602:	4b88      	ldr	r3, [pc, #544]	; (8002824 <HAL_RCC_OscConfig+0x274>)
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800260a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800260e:	d10b      	bne.n	8002628 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002610:	4b84      	ldr	r3, [pc, #528]	; (8002824 <HAL_RCC_OscConfig+0x274>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002618:	2b00      	cmp	r3, #0
 800261a:	d05b      	beq.n	80026d4 <HAL_RCC_OscConfig+0x124>
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d157      	bne.n	80026d4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002624:	2301      	movs	r3, #1
 8002626:	e25a      	b.n	8002ade <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002630:	d106      	bne.n	8002640 <HAL_RCC_OscConfig+0x90>
 8002632:	4b7c      	ldr	r3, [pc, #496]	; (8002824 <HAL_RCC_OscConfig+0x274>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4a7b      	ldr	r2, [pc, #492]	; (8002824 <HAL_RCC_OscConfig+0x274>)
 8002638:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800263c:	6013      	str	r3, [r2, #0]
 800263e:	e01d      	b.n	800267c <HAL_RCC_OscConfig+0xcc>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002648:	d10c      	bne.n	8002664 <HAL_RCC_OscConfig+0xb4>
 800264a:	4b76      	ldr	r3, [pc, #472]	; (8002824 <HAL_RCC_OscConfig+0x274>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a75      	ldr	r2, [pc, #468]	; (8002824 <HAL_RCC_OscConfig+0x274>)
 8002650:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002654:	6013      	str	r3, [r2, #0]
 8002656:	4b73      	ldr	r3, [pc, #460]	; (8002824 <HAL_RCC_OscConfig+0x274>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4a72      	ldr	r2, [pc, #456]	; (8002824 <HAL_RCC_OscConfig+0x274>)
 800265c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002660:	6013      	str	r3, [r2, #0]
 8002662:	e00b      	b.n	800267c <HAL_RCC_OscConfig+0xcc>
 8002664:	4b6f      	ldr	r3, [pc, #444]	; (8002824 <HAL_RCC_OscConfig+0x274>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a6e      	ldr	r2, [pc, #440]	; (8002824 <HAL_RCC_OscConfig+0x274>)
 800266a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800266e:	6013      	str	r3, [r2, #0]
 8002670:	4b6c      	ldr	r3, [pc, #432]	; (8002824 <HAL_RCC_OscConfig+0x274>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a6b      	ldr	r2, [pc, #428]	; (8002824 <HAL_RCC_OscConfig+0x274>)
 8002676:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800267a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d013      	beq.n	80026ac <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002684:	f7fe fd9e 	bl	80011c4 <HAL_GetTick>
 8002688:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800268a:	e008      	b.n	800269e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800268c:	f7fe fd9a 	bl	80011c4 <HAL_GetTick>
 8002690:	4602      	mov	r2, r0
 8002692:	693b      	ldr	r3, [r7, #16]
 8002694:	1ad3      	subs	r3, r2, r3
 8002696:	2b64      	cmp	r3, #100	; 0x64
 8002698:	d901      	bls.n	800269e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800269a:	2303      	movs	r3, #3
 800269c:	e21f      	b.n	8002ade <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800269e:	4b61      	ldr	r3, [pc, #388]	; (8002824 <HAL_RCC_OscConfig+0x274>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d0f0      	beq.n	800268c <HAL_RCC_OscConfig+0xdc>
 80026aa:	e014      	b.n	80026d6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026ac:	f7fe fd8a 	bl	80011c4 <HAL_GetTick>
 80026b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026b2:	e008      	b.n	80026c6 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026b4:	f7fe fd86 	bl	80011c4 <HAL_GetTick>
 80026b8:	4602      	mov	r2, r0
 80026ba:	693b      	ldr	r3, [r7, #16]
 80026bc:	1ad3      	subs	r3, r2, r3
 80026be:	2b64      	cmp	r3, #100	; 0x64
 80026c0:	d901      	bls.n	80026c6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80026c2:	2303      	movs	r3, #3
 80026c4:	e20b      	b.n	8002ade <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026c6:	4b57      	ldr	r3, [pc, #348]	; (8002824 <HAL_RCC_OscConfig+0x274>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d1f0      	bne.n	80026b4 <HAL_RCC_OscConfig+0x104>
 80026d2:	e000      	b.n	80026d6 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f003 0302 	and.w	r3, r3, #2
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d06f      	beq.n	80027c2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80026e2:	4b50      	ldr	r3, [pc, #320]	; (8002824 <HAL_RCC_OscConfig+0x274>)
 80026e4:	689b      	ldr	r3, [r3, #8]
 80026e6:	f003 030c 	and.w	r3, r3, #12
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d017      	beq.n	800271e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80026ee:	4b4d      	ldr	r3, [pc, #308]	; (8002824 <HAL_RCC_OscConfig+0x274>)
 80026f0:	689b      	ldr	r3, [r3, #8]
 80026f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80026f6:	2b08      	cmp	r3, #8
 80026f8:	d105      	bne.n	8002706 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80026fa:	4b4a      	ldr	r3, [pc, #296]	; (8002824 <HAL_RCC_OscConfig+0x274>)
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002702:	2b00      	cmp	r3, #0
 8002704:	d00b      	beq.n	800271e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002706:	4b47      	ldr	r3, [pc, #284]	; (8002824 <HAL_RCC_OscConfig+0x274>)
 8002708:	689b      	ldr	r3, [r3, #8]
 800270a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800270e:	2b0c      	cmp	r3, #12
 8002710:	d11c      	bne.n	800274c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002712:	4b44      	ldr	r3, [pc, #272]	; (8002824 <HAL_RCC_OscConfig+0x274>)
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800271a:	2b00      	cmp	r3, #0
 800271c:	d116      	bne.n	800274c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800271e:	4b41      	ldr	r3, [pc, #260]	; (8002824 <HAL_RCC_OscConfig+0x274>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f003 0302 	and.w	r3, r3, #2
 8002726:	2b00      	cmp	r3, #0
 8002728:	d005      	beq.n	8002736 <HAL_RCC_OscConfig+0x186>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	68db      	ldr	r3, [r3, #12]
 800272e:	2b01      	cmp	r3, #1
 8002730:	d001      	beq.n	8002736 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002732:	2301      	movs	r3, #1
 8002734:	e1d3      	b.n	8002ade <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002736:	4b3b      	ldr	r3, [pc, #236]	; (8002824 <HAL_RCC_OscConfig+0x274>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	691b      	ldr	r3, [r3, #16]
 8002742:	00db      	lsls	r3, r3, #3
 8002744:	4937      	ldr	r1, [pc, #220]	; (8002824 <HAL_RCC_OscConfig+0x274>)
 8002746:	4313      	orrs	r3, r2
 8002748:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800274a:	e03a      	b.n	80027c2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	68db      	ldr	r3, [r3, #12]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d020      	beq.n	8002796 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002754:	4b34      	ldr	r3, [pc, #208]	; (8002828 <HAL_RCC_OscConfig+0x278>)
 8002756:	2201      	movs	r2, #1
 8002758:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800275a:	f7fe fd33 	bl	80011c4 <HAL_GetTick>
 800275e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002760:	e008      	b.n	8002774 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002762:	f7fe fd2f 	bl	80011c4 <HAL_GetTick>
 8002766:	4602      	mov	r2, r0
 8002768:	693b      	ldr	r3, [r7, #16]
 800276a:	1ad3      	subs	r3, r2, r3
 800276c:	2b02      	cmp	r3, #2
 800276e:	d901      	bls.n	8002774 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002770:	2303      	movs	r3, #3
 8002772:	e1b4      	b.n	8002ade <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002774:	4b2b      	ldr	r3, [pc, #172]	; (8002824 <HAL_RCC_OscConfig+0x274>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f003 0302 	and.w	r3, r3, #2
 800277c:	2b00      	cmp	r3, #0
 800277e:	d0f0      	beq.n	8002762 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002780:	4b28      	ldr	r3, [pc, #160]	; (8002824 <HAL_RCC_OscConfig+0x274>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	691b      	ldr	r3, [r3, #16]
 800278c:	00db      	lsls	r3, r3, #3
 800278e:	4925      	ldr	r1, [pc, #148]	; (8002824 <HAL_RCC_OscConfig+0x274>)
 8002790:	4313      	orrs	r3, r2
 8002792:	600b      	str	r3, [r1, #0]
 8002794:	e015      	b.n	80027c2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002796:	4b24      	ldr	r3, [pc, #144]	; (8002828 <HAL_RCC_OscConfig+0x278>)
 8002798:	2200      	movs	r2, #0
 800279a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800279c:	f7fe fd12 	bl	80011c4 <HAL_GetTick>
 80027a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027a2:	e008      	b.n	80027b6 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027a4:	f7fe fd0e 	bl	80011c4 <HAL_GetTick>
 80027a8:	4602      	mov	r2, r0
 80027aa:	693b      	ldr	r3, [r7, #16]
 80027ac:	1ad3      	subs	r3, r2, r3
 80027ae:	2b02      	cmp	r3, #2
 80027b0:	d901      	bls.n	80027b6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80027b2:	2303      	movs	r3, #3
 80027b4:	e193      	b.n	8002ade <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027b6:	4b1b      	ldr	r3, [pc, #108]	; (8002824 <HAL_RCC_OscConfig+0x274>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f003 0302 	and.w	r3, r3, #2
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d1f0      	bne.n	80027a4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f003 0308 	and.w	r3, r3, #8
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d036      	beq.n	800283c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	695b      	ldr	r3, [r3, #20]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d016      	beq.n	8002804 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027d6:	4b15      	ldr	r3, [pc, #84]	; (800282c <HAL_RCC_OscConfig+0x27c>)
 80027d8:	2201      	movs	r2, #1
 80027da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027dc:	f7fe fcf2 	bl	80011c4 <HAL_GetTick>
 80027e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027e2:	e008      	b.n	80027f6 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027e4:	f7fe fcee 	bl	80011c4 <HAL_GetTick>
 80027e8:	4602      	mov	r2, r0
 80027ea:	693b      	ldr	r3, [r7, #16]
 80027ec:	1ad3      	subs	r3, r2, r3
 80027ee:	2b02      	cmp	r3, #2
 80027f0:	d901      	bls.n	80027f6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80027f2:	2303      	movs	r3, #3
 80027f4:	e173      	b.n	8002ade <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027f6:	4b0b      	ldr	r3, [pc, #44]	; (8002824 <HAL_RCC_OscConfig+0x274>)
 80027f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027fa:	f003 0302 	and.w	r3, r3, #2
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d0f0      	beq.n	80027e4 <HAL_RCC_OscConfig+0x234>
 8002802:	e01b      	b.n	800283c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002804:	4b09      	ldr	r3, [pc, #36]	; (800282c <HAL_RCC_OscConfig+0x27c>)
 8002806:	2200      	movs	r2, #0
 8002808:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800280a:	f7fe fcdb 	bl	80011c4 <HAL_GetTick>
 800280e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002810:	e00e      	b.n	8002830 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002812:	f7fe fcd7 	bl	80011c4 <HAL_GetTick>
 8002816:	4602      	mov	r2, r0
 8002818:	693b      	ldr	r3, [r7, #16]
 800281a:	1ad3      	subs	r3, r2, r3
 800281c:	2b02      	cmp	r3, #2
 800281e:	d907      	bls.n	8002830 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002820:	2303      	movs	r3, #3
 8002822:	e15c      	b.n	8002ade <HAL_RCC_OscConfig+0x52e>
 8002824:	40023800 	.word	0x40023800
 8002828:	42470000 	.word	0x42470000
 800282c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002830:	4b8a      	ldr	r3, [pc, #552]	; (8002a5c <HAL_RCC_OscConfig+0x4ac>)
 8002832:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002834:	f003 0302 	and.w	r3, r3, #2
 8002838:	2b00      	cmp	r3, #0
 800283a:	d1ea      	bne.n	8002812 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f003 0304 	and.w	r3, r3, #4
 8002844:	2b00      	cmp	r3, #0
 8002846:	f000 8097 	beq.w	8002978 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800284a:	2300      	movs	r3, #0
 800284c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800284e:	4b83      	ldr	r3, [pc, #524]	; (8002a5c <HAL_RCC_OscConfig+0x4ac>)
 8002850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002852:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002856:	2b00      	cmp	r3, #0
 8002858:	d10f      	bne.n	800287a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800285a:	2300      	movs	r3, #0
 800285c:	60bb      	str	r3, [r7, #8]
 800285e:	4b7f      	ldr	r3, [pc, #508]	; (8002a5c <HAL_RCC_OscConfig+0x4ac>)
 8002860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002862:	4a7e      	ldr	r2, [pc, #504]	; (8002a5c <HAL_RCC_OscConfig+0x4ac>)
 8002864:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002868:	6413      	str	r3, [r2, #64]	; 0x40
 800286a:	4b7c      	ldr	r3, [pc, #496]	; (8002a5c <HAL_RCC_OscConfig+0x4ac>)
 800286c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800286e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002872:	60bb      	str	r3, [r7, #8]
 8002874:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002876:	2301      	movs	r3, #1
 8002878:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800287a:	4b79      	ldr	r3, [pc, #484]	; (8002a60 <HAL_RCC_OscConfig+0x4b0>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002882:	2b00      	cmp	r3, #0
 8002884:	d118      	bne.n	80028b8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002886:	4b76      	ldr	r3, [pc, #472]	; (8002a60 <HAL_RCC_OscConfig+0x4b0>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a75      	ldr	r2, [pc, #468]	; (8002a60 <HAL_RCC_OscConfig+0x4b0>)
 800288c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002890:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002892:	f7fe fc97 	bl	80011c4 <HAL_GetTick>
 8002896:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002898:	e008      	b.n	80028ac <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800289a:	f7fe fc93 	bl	80011c4 <HAL_GetTick>
 800289e:	4602      	mov	r2, r0
 80028a0:	693b      	ldr	r3, [r7, #16]
 80028a2:	1ad3      	subs	r3, r2, r3
 80028a4:	2b02      	cmp	r3, #2
 80028a6:	d901      	bls.n	80028ac <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80028a8:	2303      	movs	r3, #3
 80028aa:	e118      	b.n	8002ade <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028ac:	4b6c      	ldr	r3, [pc, #432]	; (8002a60 <HAL_RCC_OscConfig+0x4b0>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d0f0      	beq.n	800289a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	689b      	ldr	r3, [r3, #8]
 80028bc:	2b01      	cmp	r3, #1
 80028be:	d106      	bne.n	80028ce <HAL_RCC_OscConfig+0x31e>
 80028c0:	4b66      	ldr	r3, [pc, #408]	; (8002a5c <HAL_RCC_OscConfig+0x4ac>)
 80028c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028c4:	4a65      	ldr	r2, [pc, #404]	; (8002a5c <HAL_RCC_OscConfig+0x4ac>)
 80028c6:	f043 0301 	orr.w	r3, r3, #1
 80028ca:	6713      	str	r3, [r2, #112]	; 0x70
 80028cc:	e01c      	b.n	8002908 <HAL_RCC_OscConfig+0x358>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	689b      	ldr	r3, [r3, #8]
 80028d2:	2b05      	cmp	r3, #5
 80028d4:	d10c      	bne.n	80028f0 <HAL_RCC_OscConfig+0x340>
 80028d6:	4b61      	ldr	r3, [pc, #388]	; (8002a5c <HAL_RCC_OscConfig+0x4ac>)
 80028d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028da:	4a60      	ldr	r2, [pc, #384]	; (8002a5c <HAL_RCC_OscConfig+0x4ac>)
 80028dc:	f043 0304 	orr.w	r3, r3, #4
 80028e0:	6713      	str	r3, [r2, #112]	; 0x70
 80028e2:	4b5e      	ldr	r3, [pc, #376]	; (8002a5c <HAL_RCC_OscConfig+0x4ac>)
 80028e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028e6:	4a5d      	ldr	r2, [pc, #372]	; (8002a5c <HAL_RCC_OscConfig+0x4ac>)
 80028e8:	f043 0301 	orr.w	r3, r3, #1
 80028ec:	6713      	str	r3, [r2, #112]	; 0x70
 80028ee:	e00b      	b.n	8002908 <HAL_RCC_OscConfig+0x358>
 80028f0:	4b5a      	ldr	r3, [pc, #360]	; (8002a5c <HAL_RCC_OscConfig+0x4ac>)
 80028f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028f4:	4a59      	ldr	r2, [pc, #356]	; (8002a5c <HAL_RCC_OscConfig+0x4ac>)
 80028f6:	f023 0301 	bic.w	r3, r3, #1
 80028fa:	6713      	str	r3, [r2, #112]	; 0x70
 80028fc:	4b57      	ldr	r3, [pc, #348]	; (8002a5c <HAL_RCC_OscConfig+0x4ac>)
 80028fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002900:	4a56      	ldr	r2, [pc, #344]	; (8002a5c <HAL_RCC_OscConfig+0x4ac>)
 8002902:	f023 0304 	bic.w	r3, r3, #4
 8002906:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	689b      	ldr	r3, [r3, #8]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d015      	beq.n	800293c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002910:	f7fe fc58 	bl	80011c4 <HAL_GetTick>
 8002914:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002916:	e00a      	b.n	800292e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002918:	f7fe fc54 	bl	80011c4 <HAL_GetTick>
 800291c:	4602      	mov	r2, r0
 800291e:	693b      	ldr	r3, [r7, #16]
 8002920:	1ad3      	subs	r3, r2, r3
 8002922:	f241 3288 	movw	r2, #5000	; 0x1388
 8002926:	4293      	cmp	r3, r2
 8002928:	d901      	bls.n	800292e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800292a:	2303      	movs	r3, #3
 800292c:	e0d7      	b.n	8002ade <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800292e:	4b4b      	ldr	r3, [pc, #300]	; (8002a5c <HAL_RCC_OscConfig+0x4ac>)
 8002930:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002932:	f003 0302 	and.w	r3, r3, #2
 8002936:	2b00      	cmp	r3, #0
 8002938:	d0ee      	beq.n	8002918 <HAL_RCC_OscConfig+0x368>
 800293a:	e014      	b.n	8002966 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800293c:	f7fe fc42 	bl	80011c4 <HAL_GetTick>
 8002940:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002942:	e00a      	b.n	800295a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002944:	f7fe fc3e 	bl	80011c4 <HAL_GetTick>
 8002948:	4602      	mov	r2, r0
 800294a:	693b      	ldr	r3, [r7, #16]
 800294c:	1ad3      	subs	r3, r2, r3
 800294e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002952:	4293      	cmp	r3, r2
 8002954:	d901      	bls.n	800295a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002956:	2303      	movs	r3, #3
 8002958:	e0c1      	b.n	8002ade <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800295a:	4b40      	ldr	r3, [pc, #256]	; (8002a5c <HAL_RCC_OscConfig+0x4ac>)
 800295c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800295e:	f003 0302 	and.w	r3, r3, #2
 8002962:	2b00      	cmp	r3, #0
 8002964:	d1ee      	bne.n	8002944 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002966:	7dfb      	ldrb	r3, [r7, #23]
 8002968:	2b01      	cmp	r3, #1
 800296a:	d105      	bne.n	8002978 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800296c:	4b3b      	ldr	r3, [pc, #236]	; (8002a5c <HAL_RCC_OscConfig+0x4ac>)
 800296e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002970:	4a3a      	ldr	r2, [pc, #232]	; (8002a5c <HAL_RCC_OscConfig+0x4ac>)
 8002972:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002976:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	699b      	ldr	r3, [r3, #24]
 800297c:	2b00      	cmp	r3, #0
 800297e:	f000 80ad 	beq.w	8002adc <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002982:	4b36      	ldr	r3, [pc, #216]	; (8002a5c <HAL_RCC_OscConfig+0x4ac>)
 8002984:	689b      	ldr	r3, [r3, #8]
 8002986:	f003 030c 	and.w	r3, r3, #12
 800298a:	2b08      	cmp	r3, #8
 800298c:	d060      	beq.n	8002a50 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	699b      	ldr	r3, [r3, #24]
 8002992:	2b02      	cmp	r3, #2
 8002994:	d145      	bne.n	8002a22 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002996:	4b33      	ldr	r3, [pc, #204]	; (8002a64 <HAL_RCC_OscConfig+0x4b4>)
 8002998:	2200      	movs	r2, #0
 800299a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800299c:	f7fe fc12 	bl	80011c4 <HAL_GetTick>
 80029a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029a2:	e008      	b.n	80029b6 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029a4:	f7fe fc0e 	bl	80011c4 <HAL_GetTick>
 80029a8:	4602      	mov	r2, r0
 80029aa:	693b      	ldr	r3, [r7, #16]
 80029ac:	1ad3      	subs	r3, r2, r3
 80029ae:	2b02      	cmp	r3, #2
 80029b0:	d901      	bls.n	80029b6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80029b2:	2303      	movs	r3, #3
 80029b4:	e093      	b.n	8002ade <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029b6:	4b29      	ldr	r3, [pc, #164]	; (8002a5c <HAL_RCC_OscConfig+0x4ac>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d1f0      	bne.n	80029a4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	69da      	ldr	r2, [r3, #28]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6a1b      	ldr	r3, [r3, #32]
 80029ca:	431a      	orrs	r2, r3
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029d0:	019b      	lsls	r3, r3, #6
 80029d2:	431a      	orrs	r2, r3
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029d8:	085b      	lsrs	r3, r3, #1
 80029da:	3b01      	subs	r3, #1
 80029dc:	041b      	lsls	r3, r3, #16
 80029de:	431a      	orrs	r2, r3
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029e4:	061b      	lsls	r3, r3, #24
 80029e6:	431a      	orrs	r2, r3
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ec:	071b      	lsls	r3, r3, #28
 80029ee:	491b      	ldr	r1, [pc, #108]	; (8002a5c <HAL_RCC_OscConfig+0x4ac>)
 80029f0:	4313      	orrs	r3, r2
 80029f2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029f4:	4b1b      	ldr	r3, [pc, #108]	; (8002a64 <HAL_RCC_OscConfig+0x4b4>)
 80029f6:	2201      	movs	r2, #1
 80029f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029fa:	f7fe fbe3 	bl	80011c4 <HAL_GetTick>
 80029fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a00:	e008      	b.n	8002a14 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a02:	f7fe fbdf 	bl	80011c4 <HAL_GetTick>
 8002a06:	4602      	mov	r2, r0
 8002a08:	693b      	ldr	r3, [r7, #16]
 8002a0a:	1ad3      	subs	r3, r2, r3
 8002a0c:	2b02      	cmp	r3, #2
 8002a0e:	d901      	bls.n	8002a14 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002a10:	2303      	movs	r3, #3
 8002a12:	e064      	b.n	8002ade <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a14:	4b11      	ldr	r3, [pc, #68]	; (8002a5c <HAL_RCC_OscConfig+0x4ac>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d0f0      	beq.n	8002a02 <HAL_RCC_OscConfig+0x452>
 8002a20:	e05c      	b.n	8002adc <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a22:	4b10      	ldr	r3, [pc, #64]	; (8002a64 <HAL_RCC_OscConfig+0x4b4>)
 8002a24:	2200      	movs	r2, #0
 8002a26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a28:	f7fe fbcc 	bl	80011c4 <HAL_GetTick>
 8002a2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a2e:	e008      	b.n	8002a42 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a30:	f7fe fbc8 	bl	80011c4 <HAL_GetTick>
 8002a34:	4602      	mov	r2, r0
 8002a36:	693b      	ldr	r3, [r7, #16]
 8002a38:	1ad3      	subs	r3, r2, r3
 8002a3a:	2b02      	cmp	r3, #2
 8002a3c:	d901      	bls.n	8002a42 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002a3e:	2303      	movs	r3, #3
 8002a40:	e04d      	b.n	8002ade <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a42:	4b06      	ldr	r3, [pc, #24]	; (8002a5c <HAL_RCC_OscConfig+0x4ac>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d1f0      	bne.n	8002a30 <HAL_RCC_OscConfig+0x480>
 8002a4e:	e045      	b.n	8002adc <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	699b      	ldr	r3, [r3, #24]
 8002a54:	2b01      	cmp	r3, #1
 8002a56:	d107      	bne.n	8002a68 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	e040      	b.n	8002ade <HAL_RCC_OscConfig+0x52e>
 8002a5c:	40023800 	.word	0x40023800
 8002a60:	40007000 	.word	0x40007000
 8002a64:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002a68:	4b1f      	ldr	r3, [pc, #124]	; (8002ae8 <HAL_RCC_OscConfig+0x538>)
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	699b      	ldr	r3, [r3, #24]
 8002a72:	2b01      	cmp	r3, #1
 8002a74:	d030      	beq.n	8002ad8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a80:	429a      	cmp	r2, r3
 8002a82:	d129      	bne.n	8002ad8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a8e:	429a      	cmp	r2, r3
 8002a90:	d122      	bne.n	8002ad8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a92:	68fa      	ldr	r2, [r7, #12]
 8002a94:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002a98:	4013      	ands	r3, r2
 8002a9a:	687a      	ldr	r2, [r7, #4]
 8002a9c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002a9e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d119      	bne.n	8002ad8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aae:	085b      	lsrs	r3, r3, #1
 8002ab0:	3b01      	subs	r3, #1
 8002ab2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ab4:	429a      	cmp	r2, r3
 8002ab6:	d10f      	bne.n	8002ad8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ac2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ac4:	429a      	cmp	r2, r3
 8002ac6:	d107      	bne.n	8002ad8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ad2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ad4:	429a      	cmp	r2, r3
 8002ad6:	d001      	beq.n	8002adc <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	e000      	b.n	8002ade <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002adc:	2300      	movs	r3, #0
}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	3718      	adds	r7, #24
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}
 8002ae6:	bf00      	nop
 8002ae8:	40023800 	.word	0x40023800

08002aec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b082      	sub	sp, #8
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d101      	bne.n	8002afe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002afa:	2301      	movs	r3, #1
 8002afc:	e041      	b.n	8002b82 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b04:	b2db      	uxtb	r3, r3
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d106      	bne.n	8002b18 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002b12:	6878      	ldr	r0, [r7, #4]
 8002b14:	f7fe f96a 	bl	8000dec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2202      	movs	r2, #2
 8002b1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681a      	ldr	r2, [r3, #0]
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	3304      	adds	r3, #4
 8002b28:	4619      	mov	r1, r3
 8002b2a:	4610      	mov	r0, r2
 8002b2c:	f000 fbb2 	bl	8003294 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2201      	movs	r2, #1
 8002b34:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2201      	movs	r2, #1
 8002b3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2201      	movs	r2, #1
 8002b44:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2201      	movs	r2, #1
 8002b4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2201      	movs	r2, #1
 8002b54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2201      	movs	r2, #1
 8002b5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2201      	movs	r2, #1
 8002b64:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2201      	movs	r2, #1
 8002b74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b80:	2300      	movs	r3, #0
}
 8002b82:	4618      	mov	r0, r3
 8002b84:	3708      	adds	r7, #8
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}
	...

08002b8c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b085      	sub	sp, #20
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b9a:	b2db      	uxtb	r3, r3
 8002b9c:	2b01      	cmp	r3, #1
 8002b9e:	d001      	beq.n	8002ba4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	e04e      	b.n	8002c42 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2202      	movs	r2, #2
 8002ba8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	68da      	ldr	r2, [r3, #12]
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f042 0201 	orr.w	r2, r2, #1
 8002bba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a23      	ldr	r2, [pc, #140]	; (8002c50 <HAL_TIM_Base_Start_IT+0xc4>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d022      	beq.n	8002c0c <HAL_TIM_Base_Start_IT+0x80>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bce:	d01d      	beq.n	8002c0c <HAL_TIM_Base_Start_IT+0x80>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a1f      	ldr	r2, [pc, #124]	; (8002c54 <HAL_TIM_Base_Start_IT+0xc8>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d018      	beq.n	8002c0c <HAL_TIM_Base_Start_IT+0x80>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a1e      	ldr	r2, [pc, #120]	; (8002c58 <HAL_TIM_Base_Start_IT+0xcc>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d013      	beq.n	8002c0c <HAL_TIM_Base_Start_IT+0x80>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a1c      	ldr	r2, [pc, #112]	; (8002c5c <HAL_TIM_Base_Start_IT+0xd0>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d00e      	beq.n	8002c0c <HAL_TIM_Base_Start_IT+0x80>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a1b      	ldr	r2, [pc, #108]	; (8002c60 <HAL_TIM_Base_Start_IT+0xd4>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d009      	beq.n	8002c0c <HAL_TIM_Base_Start_IT+0x80>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a19      	ldr	r2, [pc, #100]	; (8002c64 <HAL_TIM_Base_Start_IT+0xd8>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d004      	beq.n	8002c0c <HAL_TIM_Base_Start_IT+0x80>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a18      	ldr	r2, [pc, #96]	; (8002c68 <HAL_TIM_Base_Start_IT+0xdc>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d111      	bne.n	8002c30 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	689b      	ldr	r3, [r3, #8]
 8002c12:	f003 0307 	and.w	r3, r3, #7
 8002c16:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	2b06      	cmp	r3, #6
 8002c1c:	d010      	beq.n	8002c40 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	681a      	ldr	r2, [r3, #0]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f042 0201 	orr.w	r2, r2, #1
 8002c2c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c2e:	e007      	b.n	8002c40 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	681a      	ldr	r2, [r3, #0]
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f042 0201 	orr.w	r2, r2, #1
 8002c3e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c40:	2300      	movs	r3, #0
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	3714      	adds	r7, #20
 8002c46:	46bd      	mov	sp, r7
 8002c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4c:	4770      	bx	lr
 8002c4e:	bf00      	nop
 8002c50:	40010000 	.word	0x40010000
 8002c54:	40000400 	.word	0x40000400
 8002c58:	40000800 	.word	0x40000800
 8002c5c:	40000c00 	.word	0x40000c00
 8002c60:	40010400 	.word	0x40010400
 8002c64:	40014000 	.word	0x40014000
 8002c68:	40001800 	.word	0x40001800

08002c6c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b082      	sub	sp, #8
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d101      	bne.n	8002c7e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	e041      	b.n	8002d02 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c84:	b2db      	uxtb	r3, r3
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d106      	bne.n	8002c98 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002c92:	6878      	ldr	r0, [r7, #4]
 8002c94:	f000 f839 	bl	8002d0a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2202      	movs	r2, #2
 8002c9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681a      	ldr	r2, [r3, #0]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	3304      	adds	r3, #4
 8002ca8:	4619      	mov	r1, r3
 8002caa:	4610      	mov	r0, r2
 8002cac:	f000 faf2 	bl	8003294 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2201      	movs	r2, #1
 8002cb4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2201      	movs	r2, #1
 8002cbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2201      	movs	r2, #1
 8002ccc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2201      	movs	r2, #1
 8002cdc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2201      	movs	r2, #1
 8002cec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2201      	movs	r2, #1
 8002cfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002d00:	2300      	movs	r3, #0
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	3708      	adds	r7, #8
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}

08002d0a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002d0a:	b480      	push	{r7}
 8002d0c:	b083      	sub	sp, #12
 8002d0e:	af00      	add	r7, sp, #0
 8002d10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002d12:	bf00      	nop
 8002d14:	370c      	adds	r7, #12
 8002d16:	46bd      	mov	sp, r7
 8002d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1c:	4770      	bx	lr

08002d1e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002d1e:	b580      	push	{r7, lr}
 8002d20:	b082      	sub	sp, #8
 8002d22:	af00      	add	r7, sp, #0
 8002d24:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	691b      	ldr	r3, [r3, #16]
 8002d2c:	f003 0302 	and.w	r3, r3, #2
 8002d30:	2b02      	cmp	r3, #2
 8002d32:	d122      	bne.n	8002d7a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	68db      	ldr	r3, [r3, #12]
 8002d3a:	f003 0302 	and.w	r3, r3, #2
 8002d3e:	2b02      	cmp	r3, #2
 8002d40:	d11b      	bne.n	8002d7a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f06f 0202 	mvn.w	r2, #2
 8002d4a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2201      	movs	r2, #1
 8002d50:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	699b      	ldr	r3, [r3, #24]
 8002d58:	f003 0303 	and.w	r3, r3, #3
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d003      	beq.n	8002d68 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002d60:	6878      	ldr	r0, [r7, #4]
 8002d62:	f000 fa78 	bl	8003256 <HAL_TIM_IC_CaptureCallback>
 8002d66:	e005      	b.n	8002d74 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d68:	6878      	ldr	r0, [r7, #4]
 8002d6a:	f000 fa6a 	bl	8003242 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d6e:	6878      	ldr	r0, [r7, #4]
 8002d70:	f000 fa7b 	bl	800326a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2200      	movs	r2, #0
 8002d78:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	691b      	ldr	r3, [r3, #16]
 8002d80:	f003 0304 	and.w	r3, r3, #4
 8002d84:	2b04      	cmp	r3, #4
 8002d86:	d122      	bne.n	8002dce <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	68db      	ldr	r3, [r3, #12]
 8002d8e:	f003 0304 	and.w	r3, r3, #4
 8002d92:	2b04      	cmp	r3, #4
 8002d94:	d11b      	bne.n	8002dce <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f06f 0204 	mvn.w	r2, #4
 8002d9e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2202      	movs	r2, #2
 8002da4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	699b      	ldr	r3, [r3, #24]
 8002dac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d003      	beq.n	8002dbc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002db4:	6878      	ldr	r0, [r7, #4]
 8002db6:	f000 fa4e 	bl	8003256 <HAL_TIM_IC_CaptureCallback>
 8002dba:	e005      	b.n	8002dc8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002dbc:	6878      	ldr	r0, [r7, #4]
 8002dbe:	f000 fa40 	bl	8003242 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002dc2:	6878      	ldr	r0, [r7, #4]
 8002dc4:	f000 fa51 	bl	800326a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2200      	movs	r2, #0
 8002dcc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	691b      	ldr	r3, [r3, #16]
 8002dd4:	f003 0308 	and.w	r3, r3, #8
 8002dd8:	2b08      	cmp	r3, #8
 8002dda:	d122      	bne.n	8002e22 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	68db      	ldr	r3, [r3, #12]
 8002de2:	f003 0308 	and.w	r3, r3, #8
 8002de6:	2b08      	cmp	r3, #8
 8002de8:	d11b      	bne.n	8002e22 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f06f 0208 	mvn.w	r2, #8
 8002df2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2204      	movs	r2, #4
 8002df8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	69db      	ldr	r3, [r3, #28]
 8002e00:	f003 0303 	and.w	r3, r3, #3
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d003      	beq.n	8002e10 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e08:	6878      	ldr	r0, [r7, #4]
 8002e0a:	f000 fa24 	bl	8003256 <HAL_TIM_IC_CaptureCallback>
 8002e0e:	e005      	b.n	8002e1c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e10:	6878      	ldr	r0, [r7, #4]
 8002e12:	f000 fa16 	bl	8003242 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e16:	6878      	ldr	r0, [r7, #4]
 8002e18:	f000 fa27 	bl	800326a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	691b      	ldr	r3, [r3, #16]
 8002e28:	f003 0310 	and.w	r3, r3, #16
 8002e2c:	2b10      	cmp	r3, #16
 8002e2e:	d122      	bne.n	8002e76 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	68db      	ldr	r3, [r3, #12]
 8002e36:	f003 0310 	and.w	r3, r3, #16
 8002e3a:	2b10      	cmp	r3, #16
 8002e3c:	d11b      	bne.n	8002e76 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f06f 0210 	mvn.w	r2, #16
 8002e46:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2208      	movs	r2, #8
 8002e4c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	69db      	ldr	r3, [r3, #28]
 8002e54:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d003      	beq.n	8002e64 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e5c:	6878      	ldr	r0, [r7, #4]
 8002e5e:	f000 f9fa 	bl	8003256 <HAL_TIM_IC_CaptureCallback>
 8002e62:	e005      	b.n	8002e70 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e64:	6878      	ldr	r0, [r7, #4]
 8002e66:	f000 f9ec 	bl	8003242 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e6a:	6878      	ldr	r0, [r7, #4]
 8002e6c:	f000 f9fd 	bl	800326a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2200      	movs	r2, #0
 8002e74:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	691b      	ldr	r3, [r3, #16]
 8002e7c:	f003 0301 	and.w	r3, r3, #1
 8002e80:	2b01      	cmp	r3, #1
 8002e82:	d10e      	bne.n	8002ea2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	68db      	ldr	r3, [r3, #12]
 8002e8a:	f003 0301 	and.w	r3, r3, #1
 8002e8e:	2b01      	cmp	r3, #1
 8002e90:	d107      	bne.n	8002ea2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f06f 0201 	mvn.w	r2, #1
 8002e9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002e9c:	6878      	ldr	r0, [r7, #4]
 8002e9e:	f7fd ff19 	bl	8000cd4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	691b      	ldr	r3, [r3, #16]
 8002ea8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002eac:	2b80      	cmp	r3, #128	; 0x80
 8002eae:	d10e      	bne.n	8002ece <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	68db      	ldr	r3, [r3, #12]
 8002eb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002eba:	2b80      	cmp	r3, #128	; 0x80
 8002ebc:	d107      	bne.n	8002ece <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002ec6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002ec8:	6878      	ldr	r0, [r7, #4]
 8002eca:	f000 fd53 	bl	8003974 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	691b      	ldr	r3, [r3, #16]
 8002ed4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ed8:	2b40      	cmp	r3, #64	; 0x40
 8002eda:	d10e      	bne.n	8002efa <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	68db      	ldr	r3, [r3, #12]
 8002ee2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ee6:	2b40      	cmp	r3, #64	; 0x40
 8002ee8:	d107      	bne.n	8002efa <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002ef2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002ef4:	6878      	ldr	r0, [r7, #4]
 8002ef6:	f000 f9c2 	bl	800327e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	691b      	ldr	r3, [r3, #16]
 8002f00:	f003 0320 	and.w	r3, r3, #32
 8002f04:	2b20      	cmp	r3, #32
 8002f06:	d10e      	bne.n	8002f26 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	68db      	ldr	r3, [r3, #12]
 8002f0e:	f003 0320 	and.w	r3, r3, #32
 8002f12:	2b20      	cmp	r3, #32
 8002f14:	d107      	bne.n	8002f26 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f06f 0220 	mvn.w	r2, #32
 8002f1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002f20:	6878      	ldr	r0, [r7, #4]
 8002f22:	f000 fd1d 	bl	8003960 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002f26:	bf00      	nop
 8002f28:	3708      	adds	r7, #8
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}
	...

08002f30 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b086      	sub	sp, #24
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	60f8      	str	r0, [r7, #12]
 8002f38:	60b9      	str	r1, [r7, #8]
 8002f3a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f46:	2b01      	cmp	r3, #1
 8002f48:	d101      	bne.n	8002f4e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002f4a:	2302      	movs	r3, #2
 8002f4c:	e0ae      	b.n	80030ac <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	2201      	movs	r2, #1
 8002f52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2b0c      	cmp	r3, #12
 8002f5a:	f200 809f 	bhi.w	800309c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002f5e:	a201      	add	r2, pc, #4	; (adr r2, 8002f64 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002f60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f64:	08002f99 	.word	0x08002f99
 8002f68:	0800309d 	.word	0x0800309d
 8002f6c:	0800309d 	.word	0x0800309d
 8002f70:	0800309d 	.word	0x0800309d
 8002f74:	08002fd9 	.word	0x08002fd9
 8002f78:	0800309d 	.word	0x0800309d
 8002f7c:	0800309d 	.word	0x0800309d
 8002f80:	0800309d 	.word	0x0800309d
 8002f84:	0800301b 	.word	0x0800301b
 8002f88:	0800309d 	.word	0x0800309d
 8002f8c:	0800309d 	.word	0x0800309d
 8002f90:	0800309d 	.word	0x0800309d
 8002f94:	0800305b 	.word	0x0800305b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	68b9      	ldr	r1, [r7, #8]
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f000 fa18 	bl	80033d4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	699a      	ldr	r2, [r3, #24]
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f042 0208 	orr.w	r2, r2, #8
 8002fb2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	699a      	ldr	r2, [r3, #24]
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f022 0204 	bic.w	r2, r2, #4
 8002fc2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	6999      	ldr	r1, [r3, #24]
 8002fca:	68bb      	ldr	r3, [r7, #8]
 8002fcc:	691a      	ldr	r2, [r3, #16]
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	430a      	orrs	r2, r1
 8002fd4:	619a      	str	r2, [r3, #24]
      break;
 8002fd6:	e064      	b.n	80030a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	68b9      	ldr	r1, [r7, #8]
 8002fde:	4618      	mov	r0, r3
 8002fe0:	f000 fa68 	bl	80034b4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	699a      	ldr	r2, [r3, #24]
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ff2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	699a      	ldr	r2, [r3, #24]
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003002:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	6999      	ldr	r1, [r3, #24]
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	691b      	ldr	r3, [r3, #16]
 800300e:	021a      	lsls	r2, r3, #8
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	430a      	orrs	r2, r1
 8003016:	619a      	str	r2, [r3, #24]
      break;
 8003018:	e043      	b.n	80030a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	68b9      	ldr	r1, [r7, #8]
 8003020:	4618      	mov	r0, r3
 8003022:	f000 fabd 	bl	80035a0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	69da      	ldr	r2, [r3, #28]
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f042 0208 	orr.w	r2, r2, #8
 8003034:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	69da      	ldr	r2, [r3, #28]
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f022 0204 	bic.w	r2, r2, #4
 8003044:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	69d9      	ldr	r1, [r3, #28]
 800304c:	68bb      	ldr	r3, [r7, #8]
 800304e:	691a      	ldr	r2, [r3, #16]
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	430a      	orrs	r2, r1
 8003056:	61da      	str	r2, [r3, #28]
      break;
 8003058:	e023      	b.n	80030a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	68b9      	ldr	r1, [r7, #8]
 8003060:	4618      	mov	r0, r3
 8003062:	f000 fb11 	bl	8003688 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	69da      	ldr	r2, [r3, #28]
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003074:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	69da      	ldr	r2, [r3, #28]
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003084:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	69d9      	ldr	r1, [r3, #28]
 800308c:	68bb      	ldr	r3, [r7, #8]
 800308e:	691b      	ldr	r3, [r3, #16]
 8003090:	021a      	lsls	r2, r3, #8
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	430a      	orrs	r2, r1
 8003098:	61da      	str	r2, [r3, #28]
      break;
 800309a:	e002      	b.n	80030a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800309c:	2301      	movs	r3, #1
 800309e:	75fb      	strb	r3, [r7, #23]
      break;
 80030a0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	2200      	movs	r2, #0
 80030a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80030aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80030ac:	4618      	mov	r0, r3
 80030ae:	3718      	adds	r7, #24
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bd80      	pop	{r7, pc}

080030b4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b084      	sub	sp, #16
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
 80030bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80030be:	2300      	movs	r3, #0
 80030c0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030c8:	2b01      	cmp	r3, #1
 80030ca:	d101      	bne.n	80030d0 <HAL_TIM_ConfigClockSource+0x1c>
 80030cc:	2302      	movs	r3, #2
 80030ce:	e0b4      	b.n	800323a <HAL_TIM_ConfigClockSource+0x186>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2201      	movs	r2, #1
 80030d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2202      	movs	r2, #2
 80030dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	689b      	ldr	r3, [r3, #8]
 80030e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80030ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80030f6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	68ba      	ldr	r2, [r7, #8]
 80030fe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003108:	d03e      	beq.n	8003188 <HAL_TIM_ConfigClockSource+0xd4>
 800310a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800310e:	f200 8087 	bhi.w	8003220 <HAL_TIM_ConfigClockSource+0x16c>
 8003112:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003116:	f000 8086 	beq.w	8003226 <HAL_TIM_ConfigClockSource+0x172>
 800311a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800311e:	d87f      	bhi.n	8003220 <HAL_TIM_ConfigClockSource+0x16c>
 8003120:	2b70      	cmp	r3, #112	; 0x70
 8003122:	d01a      	beq.n	800315a <HAL_TIM_ConfigClockSource+0xa6>
 8003124:	2b70      	cmp	r3, #112	; 0x70
 8003126:	d87b      	bhi.n	8003220 <HAL_TIM_ConfigClockSource+0x16c>
 8003128:	2b60      	cmp	r3, #96	; 0x60
 800312a:	d050      	beq.n	80031ce <HAL_TIM_ConfigClockSource+0x11a>
 800312c:	2b60      	cmp	r3, #96	; 0x60
 800312e:	d877      	bhi.n	8003220 <HAL_TIM_ConfigClockSource+0x16c>
 8003130:	2b50      	cmp	r3, #80	; 0x50
 8003132:	d03c      	beq.n	80031ae <HAL_TIM_ConfigClockSource+0xfa>
 8003134:	2b50      	cmp	r3, #80	; 0x50
 8003136:	d873      	bhi.n	8003220 <HAL_TIM_ConfigClockSource+0x16c>
 8003138:	2b40      	cmp	r3, #64	; 0x40
 800313a:	d058      	beq.n	80031ee <HAL_TIM_ConfigClockSource+0x13a>
 800313c:	2b40      	cmp	r3, #64	; 0x40
 800313e:	d86f      	bhi.n	8003220 <HAL_TIM_ConfigClockSource+0x16c>
 8003140:	2b30      	cmp	r3, #48	; 0x30
 8003142:	d064      	beq.n	800320e <HAL_TIM_ConfigClockSource+0x15a>
 8003144:	2b30      	cmp	r3, #48	; 0x30
 8003146:	d86b      	bhi.n	8003220 <HAL_TIM_ConfigClockSource+0x16c>
 8003148:	2b20      	cmp	r3, #32
 800314a:	d060      	beq.n	800320e <HAL_TIM_ConfigClockSource+0x15a>
 800314c:	2b20      	cmp	r3, #32
 800314e:	d867      	bhi.n	8003220 <HAL_TIM_ConfigClockSource+0x16c>
 8003150:	2b00      	cmp	r3, #0
 8003152:	d05c      	beq.n	800320e <HAL_TIM_ConfigClockSource+0x15a>
 8003154:	2b10      	cmp	r3, #16
 8003156:	d05a      	beq.n	800320e <HAL_TIM_ConfigClockSource+0x15a>
 8003158:	e062      	b.n	8003220 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6818      	ldr	r0, [r3, #0]
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	6899      	ldr	r1, [r3, #8]
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	685a      	ldr	r2, [r3, #4]
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	68db      	ldr	r3, [r3, #12]
 800316a:	f000 fb5d 	bl	8003828 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	689b      	ldr	r3, [r3, #8]
 8003174:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003176:	68bb      	ldr	r3, [r7, #8]
 8003178:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800317c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	68ba      	ldr	r2, [r7, #8]
 8003184:	609a      	str	r2, [r3, #8]
      break;
 8003186:	e04f      	b.n	8003228 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6818      	ldr	r0, [r3, #0]
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	6899      	ldr	r1, [r3, #8]
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	685a      	ldr	r2, [r3, #4]
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	68db      	ldr	r3, [r3, #12]
 8003198:	f000 fb46 	bl	8003828 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	689a      	ldr	r2, [r3, #8]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80031aa:	609a      	str	r2, [r3, #8]
      break;
 80031ac:	e03c      	b.n	8003228 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6818      	ldr	r0, [r3, #0]
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	6859      	ldr	r1, [r3, #4]
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	68db      	ldr	r3, [r3, #12]
 80031ba:	461a      	mov	r2, r3
 80031bc:	f000 faba 	bl	8003734 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	2150      	movs	r1, #80	; 0x50
 80031c6:	4618      	mov	r0, r3
 80031c8:	f000 fb13 	bl	80037f2 <TIM_ITRx_SetConfig>
      break;
 80031cc:	e02c      	b.n	8003228 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6818      	ldr	r0, [r3, #0]
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	6859      	ldr	r1, [r3, #4]
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	68db      	ldr	r3, [r3, #12]
 80031da:	461a      	mov	r2, r3
 80031dc:	f000 fad9 	bl	8003792 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	2160      	movs	r1, #96	; 0x60
 80031e6:	4618      	mov	r0, r3
 80031e8:	f000 fb03 	bl	80037f2 <TIM_ITRx_SetConfig>
      break;
 80031ec:	e01c      	b.n	8003228 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6818      	ldr	r0, [r3, #0]
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	6859      	ldr	r1, [r3, #4]
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	68db      	ldr	r3, [r3, #12]
 80031fa:	461a      	mov	r2, r3
 80031fc:	f000 fa9a 	bl	8003734 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	2140      	movs	r1, #64	; 0x40
 8003206:	4618      	mov	r0, r3
 8003208:	f000 faf3 	bl	80037f2 <TIM_ITRx_SetConfig>
      break;
 800320c:	e00c      	b.n	8003228 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681a      	ldr	r2, [r3, #0]
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4619      	mov	r1, r3
 8003218:	4610      	mov	r0, r2
 800321a:	f000 faea 	bl	80037f2 <TIM_ITRx_SetConfig>
      break;
 800321e:	e003      	b.n	8003228 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003220:	2301      	movs	r3, #1
 8003222:	73fb      	strb	r3, [r7, #15]
      break;
 8003224:	e000      	b.n	8003228 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003226:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2201      	movs	r2, #1
 800322c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2200      	movs	r2, #0
 8003234:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003238:	7bfb      	ldrb	r3, [r7, #15]
}
 800323a:	4618      	mov	r0, r3
 800323c:	3710      	adds	r7, #16
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}

08003242 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003242:	b480      	push	{r7}
 8003244:	b083      	sub	sp, #12
 8003246:	af00      	add	r7, sp, #0
 8003248:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800324a:	bf00      	nop
 800324c:	370c      	adds	r7, #12
 800324e:	46bd      	mov	sp, r7
 8003250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003254:	4770      	bx	lr

08003256 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003256:	b480      	push	{r7}
 8003258:	b083      	sub	sp, #12
 800325a:	af00      	add	r7, sp, #0
 800325c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800325e:	bf00      	nop
 8003260:	370c      	adds	r7, #12
 8003262:	46bd      	mov	sp, r7
 8003264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003268:	4770      	bx	lr

0800326a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800326a:	b480      	push	{r7}
 800326c:	b083      	sub	sp, #12
 800326e:	af00      	add	r7, sp, #0
 8003270:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003272:	bf00      	nop
 8003274:	370c      	adds	r7, #12
 8003276:	46bd      	mov	sp, r7
 8003278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327c:	4770      	bx	lr

0800327e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800327e:	b480      	push	{r7}
 8003280:	b083      	sub	sp, #12
 8003282:	af00      	add	r7, sp, #0
 8003284:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003286:	bf00      	nop
 8003288:	370c      	adds	r7, #12
 800328a:	46bd      	mov	sp, r7
 800328c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003290:	4770      	bx	lr
	...

08003294 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003294:	b480      	push	{r7}
 8003296:	b085      	sub	sp, #20
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
 800329c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	4a40      	ldr	r2, [pc, #256]	; (80033a8 <TIM_Base_SetConfig+0x114>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d013      	beq.n	80032d4 <TIM_Base_SetConfig+0x40>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032b2:	d00f      	beq.n	80032d4 <TIM_Base_SetConfig+0x40>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	4a3d      	ldr	r2, [pc, #244]	; (80033ac <TIM_Base_SetConfig+0x118>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d00b      	beq.n	80032d4 <TIM_Base_SetConfig+0x40>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	4a3c      	ldr	r2, [pc, #240]	; (80033b0 <TIM_Base_SetConfig+0x11c>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d007      	beq.n	80032d4 <TIM_Base_SetConfig+0x40>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	4a3b      	ldr	r2, [pc, #236]	; (80033b4 <TIM_Base_SetConfig+0x120>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d003      	beq.n	80032d4 <TIM_Base_SetConfig+0x40>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	4a3a      	ldr	r2, [pc, #232]	; (80033b8 <TIM_Base_SetConfig+0x124>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d108      	bne.n	80032e6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	68fa      	ldr	r2, [r7, #12]
 80032e2:	4313      	orrs	r3, r2
 80032e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	4a2f      	ldr	r2, [pc, #188]	; (80033a8 <TIM_Base_SetConfig+0x114>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d02b      	beq.n	8003346 <TIM_Base_SetConfig+0xb2>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032f4:	d027      	beq.n	8003346 <TIM_Base_SetConfig+0xb2>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	4a2c      	ldr	r2, [pc, #176]	; (80033ac <TIM_Base_SetConfig+0x118>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d023      	beq.n	8003346 <TIM_Base_SetConfig+0xb2>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	4a2b      	ldr	r2, [pc, #172]	; (80033b0 <TIM_Base_SetConfig+0x11c>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d01f      	beq.n	8003346 <TIM_Base_SetConfig+0xb2>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	4a2a      	ldr	r2, [pc, #168]	; (80033b4 <TIM_Base_SetConfig+0x120>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d01b      	beq.n	8003346 <TIM_Base_SetConfig+0xb2>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	4a29      	ldr	r2, [pc, #164]	; (80033b8 <TIM_Base_SetConfig+0x124>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d017      	beq.n	8003346 <TIM_Base_SetConfig+0xb2>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	4a28      	ldr	r2, [pc, #160]	; (80033bc <TIM_Base_SetConfig+0x128>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d013      	beq.n	8003346 <TIM_Base_SetConfig+0xb2>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	4a27      	ldr	r2, [pc, #156]	; (80033c0 <TIM_Base_SetConfig+0x12c>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d00f      	beq.n	8003346 <TIM_Base_SetConfig+0xb2>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	4a26      	ldr	r2, [pc, #152]	; (80033c4 <TIM_Base_SetConfig+0x130>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d00b      	beq.n	8003346 <TIM_Base_SetConfig+0xb2>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	4a25      	ldr	r2, [pc, #148]	; (80033c8 <TIM_Base_SetConfig+0x134>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d007      	beq.n	8003346 <TIM_Base_SetConfig+0xb2>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	4a24      	ldr	r2, [pc, #144]	; (80033cc <TIM_Base_SetConfig+0x138>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d003      	beq.n	8003346 <TIM_Base_SetConfig+0xb2>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	4a23      	ldr	r2, [pc, #140]	; (80033d0 <TIM_Base_SetConfig+0x13c>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d108      	bne.n	8003358 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800334c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	68db      	ldr	r3, [r3, #12]
 8003352:	68fa      	ldr	r2, [r7, #12]
 8003354:	4313      	orrs	r3, r2
 8003356:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	695b      	ldr	r3, [r3, #20]
 8003362:	4313      	orrs	r3, r2
 8003364:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	68fa      	ldr	r2, [r7, #12]
 800336a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	689a      	ldr	r2, [r3, #8]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	681a      	ldr	r2, [r3, #0]
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	4a0a      	ldr	r2, [pc, #40]	; (80033a8 <TIM_Base_SetConfig+0x114>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d003      	beq.n	800338c <TIM_Base_SetConfig+0xf8>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	4a0c      	ldr	r2, [pc, #48]	; (80033b8 <TIM_Base_SetConfig+0x124>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d103      	bne.n	8003394 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	691a      	ldr	r2, [r3, #16]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2201      	movs	r2, #1
 8003398:	615a      	str	r2, [r3, #20]
}
 800339a:	bf00      	nop
 800339c:	3714      	adds	r7, #20
 800339e:	46bd      	mov	sp, r7
 80033a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a4:	4770      	bx	lr
 80033a6:	bf00      	nop
 80033a8:	40010000 	.word	0x40010000
 80033ac:	40000400 	.word	0x40000400
 80033b0:	40000800 	.word	0x40000800
 80033b4:	40000c00 	.word	0x40000c00
 80033b8:	40010400 	.word	0x40010400
 80033bc:	40014000 	.word	0x40014000
 80033c0:	40014400 	.word	0x40014400
 80033c4:	40014800 	.word	0x40014800
 80033c8:	40001800 	.word	0x40001800
 80033cc:	40001c00 	.word	0x40001c00
 80033d0:	40002000 	.word	0x40002000

080033d4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80033d4:	b480      	push	{r7}
 80033d6:	b087      	sub	sp, #28
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
 80033dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6a1b      	ldr	r3, [r3, #32]
 80033e2:	f023 0201 	bic.w	r2, r3, #1
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6a1b      	ldr	r3, [r3, #32]
 80033ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	699b      	ldr	r3, [r3, #24]
 80033fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003402:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	f023 0303 	bic.w	r3, r3, #3
 800340a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	68fa      	ldr	r2, [r7, #12]
 8003412:	4313      	orrs	r3, r2
 8003414:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003416:	697b      	ldr	r3, [r7, #20]
 8003418:	f023 0302 	bic.w	r3, r3, #2
 800341c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	697a      	ldr	r2, [r7, #20]
 8003424:	4313      	orrs	r3, r2
 8003426:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	4a20      	ldr	r2, [pc, #128]	; (80034ac <TIM_OC1_SetConfig+0xd8>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d003      	beq.n	8003438 <TIM_OC1_SetConfig+0x64>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	4a1f      	ldr	r2, [pc, #124]	; (80034b0 <TIM_OC1_SetConfig+0xdc>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d10c      	bne.n	8003452 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003438:	697b      	ldr	r3, [r7, #20]
 800343a:	f023 0308 	bic.w	r3, r3, #8
 800343e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	68db      	ldr	r3, [r3, #12]
 8003444:	697a      	ldr	r2, [r7, #20]
 8003446:	4313      	orrs	r3, r2
 8003448:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	f023 0304 	bic.w	r3, r3, #4
 8003450:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	4a15      	ldr	r2, [pc, #84]	; (80034ac <TIM_OC1_SetConfig+0xd8>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d003      	beq.n	8003462 <TIM_OC1_SetConfig+0x8e>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	4a14      	ldr	r2, [pc, #80]	; (80034b0 <TIM_OC1_SetConfig+0xdc>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d111      	bne.n	8003486 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003462:	693b      	ldr	r3, [r7, #16]
 8003464:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003468:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800346a:	693b      	ldr	r3, [r7, #16]
 800346c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003470:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	695b      	ldr	r3, [r3, #20]
 8003476:	693a      	ldr	r2, [r7, #16]
 8003478:	4313      	orrs	r3, r2
 800347a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	699b      	ldr	r3, [r3, #24]
 8003480:	693a      	ldr	r2, [r7, #16]
 8003482:	4313      	orrs	r3, r2
 8003484:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	693a      	ldr	r2, [r7, #16]
 800348a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	68fa      	ldr	r2, [r7, #12]
 8003490:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	685a      	ldr	r2, [r3, #4]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	697a      	ldr	r2, [r7, #20]
 800349e:	621a      	str	r2, [r3, #32]
}
 80034a0:	bf00      	nop
 80034a2:	371c      	adds	r7, #28
 80034a4:	46bd      	mov	sp, r7
 80034a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034aa:	4770      	bx	lr
 80034ac:	40010000 	.word	0x40010000
 80034b0:	40010400 	.word	0x40010400

080034b4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80034b4:	b480      	push	{r7}
 80034b6:	b087      	sub	sp, #28
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
 80034bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6a1b      	ldr	r3, [r3, #32]
 80034c2:	f023 0210 	bic.w	r2, r3, #16
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6a1b      	ldr	r3, [r3, #32]
 80034ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	699b      	ldr	r3, [r3, #24]
 80034da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80034e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	021b      	lsls	r3, r3, #8
 80034f2:	68fa      	ldr	r2, [r7, #12]
 80034f4:	4313      	orrs	r3, r2
 80034f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80034f8:	697b      	ldr	r3, [r7, #20]
 80034fa:	f023 0320 	bic.w	r3, r3, #32
 80034fe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	689b      	ldr	r3, [r3, #8]
 8003504:	011b      	lsls	r3, r3, #4
 8003506:	697a      	ldr	r2, [r7, #20]
 8003508:	4313      	orrs	r3, r2
 800350a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	4a22      	ldr	r2, [pc, #136]	; (8003598 <TIM_OC2_SetConfig+0xe4>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d003      	beq.n	800351c <TIM_OC2_SetConfig+0x68>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	4a21      	ldr	r2, [pc, #132]	; (800359c <TIM_OC2_SetConfig+0xe8>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d10d      	bne.n	8003538 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800351c:	697b      	ldr	r3, [r7, #20]
 800351e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003522:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	68db      	ldr	r3, [r3, #12]
 8003528:	011b      	lsls	r3, r3, #4
 800352a:	697a      	ldr	r2, [r7, #20]
 800352c:	4313      	orrs	r3, r2
 800352e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003530:	697b      	ldr	r3, [r7, #20]
 8003532:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003536:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	4a17      	ldr	r2, [pc, #92]	; (8003598 <TIM_OC2_SetConfig+0xe4>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d003      	beq.n	8003548 <TIM_OC2_SetConfig+0x94>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	4a16      	ldr	r2, [pc, #88]	; (800359c <TIM_OC2_SetConfig+0xe8>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d113      	bne.n	8003570 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003548:	693b      	ldr	r3, [r7, #16]
 800354a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800354e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003550:	693b      	ldr	r3, [r7, #16]
 8003552:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003556:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	695b      	ldr	r3, [r3, #20]
 800355c:	009b      	lsls	r3, r3, #2
 800355e:	693a      	ldr	r2, [r7, #16]
 8003560:	4313      	orrs	r3, r2
 8003562:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	699b      	ldr	r3, [r3, #24]
 8003568:	009b      	lsls	r3, r3, #2
 800356a:	693a      	ldr	r2, [r7, #16]
 800356c:	4313      	orrs	r3, r2
 800356e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	693a      	ldr	r2, [r7, #16]
 8003574:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	68fa      	ldr	r2, [r7, #12]
 800357a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	685a      	ldr	r2, [r3, #4]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	697a      	ldr	r2, [r7, #20]
 8003588:	621a      	str	r2, [r3, #32]
}
 800358a:	bf00      	nop
 800358c:	371c      	adds	r7, #28
 800358e:	46bd      	mov	sp, r7
 8003590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003594:	4770      	bx	lr
 8003596:	bf00      	nop
 8003598:	40010000 	.word	0x40010000
 800359c:	40010400 	.word	0x40010400

080035a0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80035a0:	b480      	push	{r7}
 80035a2:	b087      	sub	sp, #28
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
 80035a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6a1b      	ldr	r3, [r3, #32]
 80035ae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6a1b      	ldr	r3, [r3, #32]
 80035ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	69db      	ldr	r3, [r3, #28]
 80035c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	f023 0303 	bic.w	r3, r3, #3
 80035d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	68fa      	ldr	r2, [r7, #12]
 80035de:	4313      	orrs	r3, r2
 80035e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80035e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	689b      	ldr	r3, [r3, #8]
 80035ee:	021b      	lsls	r3, r3, #8
 80035f0:	697a      	ldr	r2, [r7, #20]
 80035f2:	4313      	orrs	r3, r2
 80035f4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	4a21      	ldr	r2, [pc, #132]	; (8003680 <TIM_OC3_SetConfig+0xe0>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d003      	beq.n	8003606 <TIM_OC3_SetConfig+0x66>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	4a20      	ldr	r2, [pc, #128]	; (8003684 <TIM_OC3_SetConfig+0xe4>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d10d      	bne.n	8003622 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800360c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	68db      	ldr	r3, [r3, #12]
 8003612:	021b      	lsls	r3, r3, #8
 8003614:	697a      	ldr	r2, [r7, #20]
 8003616:	4313      	orrs	r3, r2
 8003618:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800361a:	697b      	ldr	r3, [r7, #20]
 800361c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003620:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	4a16      	ldr	r2, [pc, #88]	; (8003680 <TIM_OC3_SetConfig+0xe0>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d003      	beq.n	8003632 <TIM_OC3_SetConfig+0x92>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	4a15      	ldr	r2, [pc, #84]	; (8003684 <TIM_OC3_SetConfig+0xe4>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d113      	bne.n	800365a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003632:	693b      	ldr	r3, [r7, #16]
 8003634:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003638:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800363a:	693b      	ldr	r3, [r7, #16]
 800363c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003640:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	695b      	ldr	r3, [r3, #20]
 8003646:	011b      	lsls	r3, r3, #4
 8003648:	693a      	ldr	r2, [r7, #16]
 800364a:	4313      	orrs	r3, r2
 800364c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	699b      	ldr	r3, [r3, #24]
 8003652:	011b      	lsls	r3, r3, #4
 8003654:	693a      	ldr	r2, [r7, #16]
 8003656:	4313      	orrs	r3, r2
 8003658:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	693a      	ldr	r2, [r7, #16]
 800365e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	68fa      	ldr	r2, [r7, #12]
 8003664:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	685a      	ldr	r2, [r3, #4]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	697a      	ldr	r2, [r7, #20]
 8003672:	621a      	str	r2, [r3, #32]
}
 8003674:	bf00      	nop
 8003676:	371c      	adds	r7, #28
 8003678:	46bd      	mov	sp, r7
 800367a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367e:	4770      	bx	lr
 8003680:	40010000 	.word	0x40010000
 8003684:	40010400 	.word	0x40010400

08003688 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003688:	b480      	push	{r7}
 800368a:	b087      	sub	sp, #28
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
 8003690:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6a1b      	ldr	r3, [r3, #32]
 8003696:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6a1b      	ldr	r3, [r3, #32]
 80036a2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	69db      	ldr	r3, [r3, #28]
 80036ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80036b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	021b      	lsls	r3, r3, #8
 80036c6:	68fa      	ldr	r2, [r7, #12]
 80036c8:	4313      	orrs	r3, r2
 80036ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80036cc:	693b      	ldr	r3, [r7, #16]
 80036ce:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80036d2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	689b      	ldr	r3, [r3, #8]
 80036d8:	031b      	lsls	r3, r3, #12
 80036da:	693a      	ldr	r2, [r7, #16]
 80036dc:	4313      	orrs	r3, r2
 80036de:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	4a12      	ldr	r2, [pc, #72]	; (800372c <TIM_OC4_SetConfig+0xa4>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d003      	beq.n	80036f0 <TIM_OC4_SetConfig+0x68>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	4a11      	ldr	r2, [pc, #68]	; (8003730 <TIM_OC4_SetConfig+0xa8>)
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d109      	bne.n	8003704 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80036f0:	697b      	ldr	r3, [r7, #20]
 80036f2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80036f6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	695b      	ldr	r3, [r3, #20]
 80036fc:	019b      	lsls	r3, r3, #6
 80036fe:	697a      	ldr	r2, [r7, #20]
 8003700:	4313      	orrs	r3, r2
 8003702:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	697a      	ldr	r2, [r7, #20]
 8003708:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	68fa      	ldr	r2, [r7, #12]
 800370e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	685a      	ldr	r2, [r3, #4]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	693a      	ldr	r2, [r7, #16]
 800371c:	621a      	str	r2, [r3, #32]
}
 800371e:	bf00      	nop
 8003720:	371c      	adds	r7, #28
 8003722:	46bd      	mov	sp, r7
 8003724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003728:	4770      	bx	lr
 800372a:	bf00      	nop
 800372c:	40010000 	.word	0x40010000
 8003730:	40010400 	.word	0x40010400

08003734 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003734:	b480      	push	{r7}
 8003736:	b087      	sub	sp, #28
 8003738:	af00      	add	r7, sp, #0
 800373a:	60f8      	str	r0, [r7, #12]
 800373c:	60b9      	str	r1, [r7, #8]
 800373e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	6a1b      	ldr	r3, [r3, #32]
 8003744:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	6a1b      	ldr	r3, [r3, #32]
 800374a:	f023 0201 	bic.w	r2, r3, #1
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	699b      	ldr	r3, [r3, #24]
 8003756:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003758:	693b      	ldr	r3, [r7, #16]
 800375a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800375e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	011b      	lsls	r3, r3, #4
 8003764:	693a      	ldr	r2, [r7, #16]
 8003766:	4313      	orrs	r3, r2
 8003768:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800376a:	697b      	ldr	r3, [r7, #20]
 800376c:	f023 030a 	bic.w	r3, r3, #10
 8003770:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003772:	697a      	ldr	r2, [r7, #20]
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	4313      	orrs	r3, r2
 8003778:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	693a      	ldr	r2, [r7, #16]
 800377e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	697a      	ldr	r2, [r7, #20]
 8003784:	621a      	str	r2, [r3, #32]
}
 8003786:	bf00      	nop
 8003788:	371c      	adds	r7, #28
 800378a:	46bd      	mov	sp, r7
 800378c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003790:	4770      	bx	lr

08003792 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003792:	b480      	push	{r7}
 8003794:	b087      	sub	sp, #28
 8003796:	af00      	add	r7, sp, #0
 8003798:	60f8      	str	r0, [r7, #12]
 800379a:	60b9      	str	r1, [r7, #8]
 800379c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	6a1b      	ldr	r3, [r3, #32]
 80037a2:	f023 0210 	bic.w	r2, r3, #16
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	699b      	ldr	r3, [r3, #24]
 80037ae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	6a1b      	ldr	r3, [r3, #32]
 80037b4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80037b6:	697b      	ldr	r3, [r7, #20]
 80037b8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80037bc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	031b      	lsls	r3, r3, #12
 80037c2:	697a      	ldr	r2, [r7, #20]
 80037c4:	4313      	orrs	r3, r2
 80037c6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80037c8:	693b      	ldr	r3, [r7, #16]
 80037ca:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80037ce:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80037d0:	68bb      	ldr	r3, [r7, #8]
 80037d2:	011b      	lsls	r3, r3, #4
 80037d4:	693a      	ldr	r2, [r7, #16]
 80037d6:	4313      	orrs	r3, r2
 80037d8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	697a      	ldr	r2, [r7, #20]
 80037de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	693a      	ldr	r2, [r7, #16]
 80037e4:	621a      	str	r2, [r3, #32]
}
 80037e6:	bf00      	nop
 80037e8:	371c      	adds	r7, #28
 80037ea:	46bd      	mov	sp, r7
 80037ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f0:	4770      	bx	lr

080037f2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80037f2:	b480      	push	{r7}
 80037f4:	b085      	sub	sp, #20
 80037f6:	af00      	add	r7, sp, #0
 80037f8:	6078      	str	r0, [r7, #4]
 80037fa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	689b      	ldr	r3, [r3, #8]
 8003800:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003808:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800380a:	683a      	ldr	r2, [r7, #0]
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	4313      	orrs	r3, r2
 8003810:	f043 0307 	orr.w	r3, r3, #7
 8003814:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	68fa      	ldr	r2, [r7, #12]
 800381a:	609a      	str	r2, [r3, #8]
}
 800381c:	bf00      	nop
 800381e:	3714      	adds	r7, #20
 8003820:	46bd      	mov	sp, r7
 8003822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003826:	4770      	bx	lr

08003828 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003828:	b480      	push	{r7}
 800382a:	b087      	sub	sp, #28
 800382c:	af00      	add	r7, sp, #0
 800382e:	60f8      	str	r0, [r7, #12]
 8003830:	60b9      	str	r1, [r7, #8]
 8003832:	607a      	str	r2, [r7, #4]
 8003834:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	689b      	ldr	r3, [r3, #8]
 800383a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800383c:	697b      	ldr	r3, [r7, #20]
 800383e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003842:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	021a      	lsls	r2, r3, #8
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	431a      	orrs	r2, r3
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	4313      	orrs	r3, r2
 8003850:	697a      	ldr	r2, [r7, #20]
 8003852:	4313      	orrs	r3, r2
 8003854:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	697a      	ldr	r2, [r7, #20]
 800385a:	609a      	str	r2, [r3, #8]
}
 800385c:	bf00      	nop
 800385e:	371c      	adds	r7, #28
 8003860:	46bd      	mov	sp, r7
 8003862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003866:	4770      	bx	lr

08003868 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003868:	b480      	push	{r7}
 800386a:	b085      	sub	sp, #20
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
 8003870:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003878:	2b01      	cmp	r3, #1
 800387a:	d101      	bne.n	8003880 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800387c:	2302      	movs	r3, #2
 800387e:	e05a      	b.n	8003936 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2201      	movs	r2, #1
 8003884:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2202      	movs	r2, #2
 800388c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	689b      	ldr	r3, [r3, #8]
 800389e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	68fa      	ldr	r2, [r7, #12]
 80038ae:	4313      	orrs	r3, r2
 80038b0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	68fa      	ldr	r2, [r7, #12]
 80038b8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4a21      	ldr	r2, [pc, #132]	; (8003944 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d022      	beq.n	800390a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038cc:	d01d      	beq.n	800390a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a1d      	ldr	r2, [pc, #116]	; (8003948 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d018      	beq.n	800390a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a1b      	ldr	r2, [pc, #108]	; (800394c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d013      	beq.n	800390a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4a1a      	ldr	r2, [pc, #104]	; (8003950 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d00e      	beq.n	800390a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a18      	ldr	r2, [pc, #96]	; (8003954 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d009      	beq.n	800390a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4a17      	ldr	r2, [pc, #92]	; (8003958 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d004      	beq.n	800390a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a15      	ldr	r2, [pc, #84]	; (800395c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d10c      	bne.n	8003924 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800390a:	68bb      	ldr	r3, [r7, #8]
 800390c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003910:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	68ba      	ldr	r2, [r7, #8]
 8003918:	4313      	orrs	r3, r2
 800391a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	68ba      	ldr	r2, [r7, #8]
 8003922:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2201      	movs	r2, #1
 8003928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2200      	movs	r2, #0
 8003930:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003934:	2300      	movs	r3, #0
}
 8003936:	4618      	mov	r0, r3
 8003938:	3714      	adds	r7, #20
 800393a:	46bd      	mov	sp, r7
 800393c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003940:	4770      	bx	lr
 8003942:	bf00      	nop
 8003944:	40010000 	.word	0x40010000
 8003948:	40000400 	.word	0x40000400
 800394c:	40000800 	.word	0x40000800
 8003950:	40000c00 	.word	0x40000c00
 8003954:	40010400 	.word	0x40010400
 8003958:	40014000 	.word	0x40014000
 800395c:	40001800 	.word	0x40001800

08003960 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003960:	b480      	push	{r7}
 8003962:	b083      	sub	sp, #12
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003968:	bf00      	nop
 800396a:	370c      	adds	r7, #12
 800396c:	46bd      	mov	sp, r7
 800396e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003972:	4770      	bx	lr

08003974 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003974:	b480      	push	{r7}
 8003976:	b083      	sub	sp, #12
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800397c:	bf00      	nop
 800397e:	370c      	adds	r7, #12
 8003980:	46bd      	mov	sp, r7
 8003982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003986:	4770      	bx	lr

08003988 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b082      	sub	sp, #8
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d101      	bne.n	800399a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003996:	2301      	movs	r3, #1
 8003998:	e03f      	b.n	8003a1a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039a0:	b2db      	uxtb	r3, r3
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d106      	bne.n	80039b4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2200      	movs	r2, #0
 80039aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80039ae:	6878      	ldr	r0, [r7, #4]
 80039b0:	f7fd fab6 	bl	8000f20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2224      	movs	r2, #36	; 0x24
 80039b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	68da      	ldr	r2, [r3, #12]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80039ca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80039cc:	6878      	ldr	r0, [r7, #4]
 80039ce:	f000 f829 	bl	8003a24 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	691a      	ldr	r2, [r3, #16]
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80039e0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	695a      	ldr	r2, [r3, #20]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80039f0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	68da      	ldr	r2, [r3, #12]
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003a00:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2200      	movs	r2, #0
 8003a06:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2220      	movs	r2, #32
 8003a0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2220      	movs	r2, #32
 8003a14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003a18:	2300      	movs	r3, #0
}
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	3708      	adds	r7, #8
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}
	...

08003a24 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a28:	b09f      	sub	sp, #124	; 0x7c
 8003a2a:	af00      	add	r7, sp, #0
 8003a2c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	691b      	ldr	r3, [r3, #16]
 8003a34:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003a38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a3a:	68d9      	ldr	r1, [r3, #12]
 8003a3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a3e:	681a      	ldr	r2, [r3, #0]
 8003a40:	ea40 0301 	orr.w	r3, r0, r1
 8003a44:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003a46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a48:	689a      	ldr	r2, [r3, #8]
 8003a4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a4c:	691b      	ldr	r3, [r3, #16]
 8003a4e:	431a      	orrs	r2, r3
 8003a50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a52:	695b      	ldr	r3, [r3, #20]
 8003a54:	431a      	orrs	r2, r3
 8003a56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a58:	69db      	ldr	r3, [r3, #28]
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8003a5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	68db      	ldr	r3, [r3, #12]
 8003a64:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003a68:	f021 010c 	bic.w	r1, r1, #12
 8003a6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a6e:	681a      	ldr	r2, [r3, #0]
 8003a70:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003a72:	430b      	orrs	r3, r1
 8003a74:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003a76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	695b      	ldr	r3, [r3, #20]
 8003a7c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003a80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a82:	6999      	ldr	r1, [r3, #24]
 8003a84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a86:	681a      	ldr	r2, [r3, #0]
 8003a88:	ea40 0301 	orr.w	r3, r0, r1
 8003a8c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003a8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a90:	681a      	ldr	r2, [r3, #0]
 8003a92:	4bc5      	ldr	r3, [pc, #788]	; (8003da8 <UART_SetConfig+0x384>)
 8003a94:	429a      	cmp	r2, r3
 8003a96:	d004      	beq.n	8003aa2 <UART_SetConfig+0x7e>
 8003a98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a9a:	681a      	ldr	r2, [r3, #0]
 8003a9c:	4bc3      	ldr	r3, [pc, #780]	; (8003dac <UART_SetConfig+0x388>)
 8003a9e:	429a      	cmp	r2, r3
 8003aa0:	d103      	bne.n	8003aaa <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003aa2:	f7fe fb8d 	bl	80021c0 <HAL_RCC_GetPCLK2Freq>
 8003aa6:	6778      	str	r0, [r7, #116]	; 0x74
 8003aa8:	e002      	b.n	8003ab0 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003aaa:	f7fe fb75 	bl	8002198 <HAL_RCC_GetPCLK1Freq>
 8003aae:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ab0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ab2:	69db      	ldr	r3, [r3, #28]
 8003ab4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ab8:	f040 80b6 	bne.w	8003c28 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003abc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003abe:	461c      	mov	r4, r3
 8003ac0:	f04f 0500 	mov.w	r5, #0
 8003ac4:	4622      	mov	r2, r4
 8003ac6:	462b      	mov	r3, r5
 8003ac8:	1891      	adds	r1, r2, r2
 8003aca:	6439      	str	r1, [r7, #64]	; 0x40
 8003acc:	415b      	adcs	r3, r3
 8003ace:	647b      	str	r3, [r7, #68]	; 0x44
 8003ad0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003ad4:	1912      	adds	r2, r2, r4
 8003ad6:	eb45 0303 	adc.w	r3, r5, r3
 8003ada:	f04f 0000 	mov.w	r0, #0
 8003ade:	f04f 0100 	mov.w	r1, #0
 8003ae2:	00d9      	lsls	r1, r3, #3
 8003ae4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003ae8:	00d0      	lsls	r0, r2, #3
 8003aea:	4602      	mov	r2, r0
 8003aec:	460b      	mov	r3, r1
 8003aee:	1911      	adds	r1, r2, r4
 8003af0:	6639      	str	r1, [r7, #96]	; 0x60
 8003af2:	416b      	adcs	r3, r5
 8003af4:	667b      	str	r3, [r7, #100]	; 0x64
 8003af6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	461a      	mov	r2, r3
 8003afc:	f04f 0300 	mov.w	r3, #0
 8003b00:	1891      	adds	r1, r2, r2
 8003b02:	63b9      	str	r1, [r7, #56]	; 0x38
 8003b04:	415b      	adcs	r3, r3
 8003b06:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b08:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003b0c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003b10:	f7fc fb7e 	bl	8000210 <__aeabi_uldivmod>
 8003b14:	4602      	mov	r2, r0
 8003b16:	460b      	mov	r3, r1
 8003b18:	4ba5      	ldr	r3, [pc, #660]	; (8003db0 <UART_SetConfig+0x38c>)
 8003b1a:	fba3 2302 	umull	r2, r3, r3, r2
 8003b1e:	095b      	lsrs	r3, r3, #5
 8003b20:	011e      	lsls	r6, r3, #4
 8003b22:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b24:	461c      	mov	r4, r3
 8003b26:	f04f 0500 	mov.w	r5, #0
 8003b2a:	4622      	mov	r2, r4
 8003b2c:	462b      	mov	r3, r5
 8003b2e:	1891      	adds	r1, r2, r2
 8003b30:	6339      	str	r1, [r7, #48]	; 0x30
 8003b32:	415b      	adcs	r3, r3
 8003b34:	637b      	str	r3, [r7, #52]	; 0x34
 8003b36:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003b3a:	1912      	adds	r2, r2, r4
 8003b3c:	eb45 0303 	adc.w	r3, r5, r3
 8003b40:	f04f 0000 	mov.w	r0, #0
 8003b44:	f04f 0100 	mov.w	r1, #0
 8003b48:	00d9      	lsls	r1, r3, #3
 8003b4a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003b4e:	00d0      	lsls	r0, r2, #3
 8003b50:	4602      	mov	r2, r0
 8003b52:	460b      	mov	r3, r1
 8003b54:	1911      	adds	r1, r2, r4
 8003b56:	65b9      	str	r1, [r7, #88]	; 0x58
 8003b58:	416b      	adcs	r3, r5
 8003b5a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003b5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	461a      	mov	r2, r3
 8003b62:	f04f 0300 	mov.w	r3, #0
 8003b66:	1891      	adds	r1, r2, r2
 8003b68:	62b9      	str	r1, [r7, #40]	; 0x28
 8003b6a:	415b      	adcs	r3, r3
 8003b6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b6e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003b72:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003b76:	f7fc fb4b 	bl	8000210 <__aeabi_uldivmod>
 8003b7a:	4602      	mov	r2, r0
 8003b7c:	460b      	mov	r3, r1
 8003b7e:	4b8c      	ldr	r3, [pc, #560]	; (8003db0 <UART_SetConfig+0x38c>)
 8003b80:	fba3 1302 	umull	r1, r3, r3, r2
 8003b84:	095b      	lsrs	r3, r3, #5
 8003b86:	2164      	movs	r1, #100	; 0x64
 8003b88:	fb01 f303 	mul.w	r3, r1, r3
 8003b8c:	1ad3      	subs	r3, r2, r3
 8003b8e:	00db      	lsls	r3, r3, #3
 8003b90:	3332      	adds	r3, #50	; 0x32
 8003b92:	4a87      	ldr	r2, [pc, #540]	; (8003db0 <UART_SetConfig+0x38c>)
 8003b94:	fba2 2303 	umull	r2, r3, r2, r3
 8003b98:	095b      	lsrs	r3, r3, #5
 8003b9a:	005b      	lsls	r3, r3, #1
 8003b9c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003ba0:	441e      	add	r6, r3
 8003ba2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	f04f 0100 	mov.w	r1, #0
 8003baa:	4602      	mov	r2, r0
 8003bac:	460b      	mov	r3, r1
 8003bae:	1894      	adds	r4, r2, r2
 8003bb0:	623c      	str	r4, [r7, #32]
 8003bb2:	415b      	adcs	r3, r3
 8003bb4:	627b      	str	r3, [r7, #36]	; 0x24
 8003bb6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003bba:	1812      	adds	r2, r2, r0
 8003bbc:	eb41 0303 	adc.w	r3, r1, r3
 8003bc0:	f04f 0400 	mov.w	r4, #0
 8003bc4:	f04f 0500 	mov.w	r5, #0
 8003bc8:	00dd      	lsls	r5, r3, #3
 8003bca:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003bce:	00d4      	lsls	r4, r2, #3
 8003bd0:	4622      	mov	r2, r4
 8003bd2:	462b      	mov	r3, r5
 8003bd4:	1814      	adds	r4, r2, r0
 8003bd6:	653c      	str	r4, [r7, #80]	; 0x50
 8003bd8:	414b      	adcs	r3, r1
 8003bda:	657b      	str	r3, [r7, #84]	; 0x54
 8003bdc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	461a      	mov	r2, r3
 8003be2:	f04f 0300 	mov.w	r3, #0
 8003be6:	1891      	adds	r1, r2, r2
 8003be8:	61b9      	str	r1, [r7, #24]
 8003bea:	415b      	adcs	r3, r3
 8003bec:	61fb      	str	r3, [r7, #28]
 8003bee:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003bf2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003bf6:	f7fc fb0b 	bl	8000210 <__aeabi_uldivmod>
 8003bfa:	4602      	mov	r2, r0
 8003bfc:	460b      	mov	r3, r1
 8003bfe:	4b6c      	ldr	r3, [pc, #432]	; (8003db0 <UART_SetConfig+0x38c>)
 8003c00:	fba3 1302 	umull	r1, r3, r3, r2
 8003c04:	095b      	lsrs	r3, r3, #5
 8003c06:	2164      	movs	r1, #100	; 0x64
 8003c08:	fb01 f303 	mul.w	r3, r1, r3
 8003c0c:	1ad3      	subs	r3, r2, r3
 8003c0e:	00db      	lsls	r3, r3, #3
 8003c10:	3332      	adds	r3, #50	; 0x32
 8003c12:	4a67      	ldr	r2, [pc, #412]	; (8003db0 <UART_SetConfig+0x38c>)
 8003c14:	fba2 2303 	umull	r2, r3, r2, r3
 8003c18:	095b      	lsrs	r3, r3, #5
 8003c1a:	f003 0207 	and.w	r2, r3, #7
 8003c1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4432      	add	r2, r6
 8003c24:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003c26:	e0b9      	b.n	8003d9c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003c28:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c2a:	461c      	mov	r4, r3
 8003c2c:	f04f 0500 	mov.w	r5, #0
 8003c30:	4622      	mov	r2, r4
 8003c32:	462b      	mov	r3, r5
 8003c34:	1891      	adds	r1, r2, r2
 8003c36:	6139      	str	r1, [r7, #16]
 8003c38:	415b      	adcs	r3, r3
 8003c3a:	617b      	str	r3, [r7, #20]
 8003c3c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003c40:	1912      	adds	r2, r2, r4
 8003c42:	eb45 0303 	adc.w	r3, r5, r3
 8003c46:	f04f 0000 	mov.w	r0, #0
 8003c4a:	f04f 0100 	mov.w	r1, #0
 8003c4e:	00d9      	lsls	r1, r3, #3
 8003c50:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003c54:	00d0      	lsls	r0, r2, #3
 8003c56:	4602      	mov	r2, r0
 8003c58:	460b      	mov	r3, r1
 8003c5a:	eb12 0804 	adds.w	r8, r2, r4
 8003c5e:	eb43 0905 	adc.w	r9, r3, r5
 8003c62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	4618      	mov	r0, r3
 8003c68:	f04f 0100 	mov.w	r1, #0
 8003c6c:	f04f 0200 	mov.w	r2, #0
 8003c70:	f04f 0300 	mov.w	r3, #0
 8003c74:	008b      	lsls	r3, r1, #2
 8003c76:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003c7a:	0082      	lsls	r2, r0, #2
 8003c7c:	4640      	mov	r0, r8
 8003c7e:	4649      	mov	r1, r9
 8003c80:	f7fc fac6 	bl	8000210 <__aeabi_uldivmod>
 8003c84:	4602      	mov	r2, r0
 8003c86:	460b      	mov	r3, r1
 8003c88:	4b49      	ldr	r3, [pc, #292]	; (8003db0 <UART_SetConfig+0x38c>)
 8003c8a:	fba3 2302 	umull	r2, r3, r3, r2
 8003c8e:	095b      	lsrs	r3, r3, #5
 8003c90:	011e      	lsls	r6, r3, #4
 8003c92:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c94:	4618      	mov	r0, r3
 8003c96:	f04f 0100 	mov.w	r1, #0
 8003c9a:	4602      	mov	r2, r0
 8003c9c:	460b      	mov	r3, r1
 8003c9e:	1894      	adds	r4, r2, r2
 8003ca0:	60bc      	str	r4, [r7, #8]
 8003ca2:	415b      	adcs	r3, r3
 8003ca4:	60fb      	str	r3, [r7, #12]
 8003ca6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003caa:	1812      	adds	r2, r2, r0
 8003cac:	eb41 0303 	adc.w	r3, r1, r3
 8003cb0:	f04f 0400 	mov.w	r4, #0
 8003cb4:	f04f 0500 	mov.w	r5, #0
 8003cb8:	00dd      	lsls	r5, r3, #3
 8003cba:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003cbe:	00d4      	lsls	r4, r2, #3
 8003cc0:	4622      	mov	r2, r4
 8003cc2:	462b      	mov	r3, r5
 8003cc4:	1814      	adds	r4, r2, r0
 8003cc6:	64bc      	str	r4, [r7, #72]	; 0x48
 8003cc8:	414b      	adcs	r3, r1
 8003cca:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ccc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	f04f 0100 	mov.w	r1, #0
 8003cd6:	f04f 0200 	mov.w	r2, #0
 8003cda:	f04f 0300 	mov.w	r3, #0
 8003cde:	008b      	lsls	r3, r1, #2
 8003ce0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003ce4:	0082      	lsls	r2, r0, #2
 8003ce6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003cea:	f7fc fa91 	bl	8000210 <__aeabi_uldivmod>
 8003cee:	4602      	mov	r2, r0
 8003cf0:	460b      	mov	r3, r1
 8003cf2:	4b2f      	ldr	r3, [pc, #188]	; (8003db0 <UART_SetConfig+0x38c>)
 8003cf4:	fba3 1302 	umull	r1, r3, r3, r2
 8003cf8:	095b      	lsrs	r3, r3, #5
 8003cfa:	2164      	movs	r1, #100	; 0x64
 8003cfc:	fb01 f303 	mul.w	r3, r1, r3
 8003d00:	1ad3      	subs	r3, r2, r3
 8003d02:	011b      	lsls	r3, r3, #4
 8003d04:	3332      	adds	r3, #50	; 0x32
 8003d06:	4a2a      	ldr	r2, [pc, #168]	; (8003db0 <UART_SetConfig+0x38c>)
 8003d08:	fba2 2303 	umull	r2, r3, r2, r3
 8003d0c:	095b      	lsrs	r3, r3, #5
 8003d0e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d12:	441e      	add	r6, r3
 8003d14:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d16:	4618      	mov	r0, r3
 8003d18:	f04f 0100 	mov.w	r1, #0
 8003d1c:	4602      	mov	r2, r0
 8003d1e:	460b      	mov	r3, r1
 8003d20:	1894      	adds	r4, r2, r2
 8003d22:	603c      	str	r4, [r7, #0]
 8003d24:	415b      	adcs	r3, r3
 8003d26:	607b      	str	r3, [r7, #4]
 8003d28:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003d2c:	1812      	adds	r2, r2, r0
 8003d2e:	eb41 0303 	adc.w	r3, r1, r3
 8003d32:	f04f 0400 	mov.w	r4, #0
 8003d36:	f04f 0500 	mov.w	r5, #0
 8003d3a:	00dd      	lsls	r5, r3, #3
 8003d3c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003d40:	00d4      	lsls	r4, r2, #3
 8003d42:	4622      	mov	r2, r4
 8003d44:	462b      	mov	r3, r5
 8003d46:	eb12 0a00 	adds.w	sl, r2, r0
 8003d4a:	eb43 0b01 	adc.w	fp, r3, r1
 8003d4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	4618      	mov	r0, r3
 8003d54:	f04f 0100 	mov.w	r1, #0
 8003d58:	f04f 0200 	mov.w	r2, #0
 8003d5c:	f04f 0300 	mov.w	r3, #0
 8003d60:	008b      	lsls	r3, r1, #2
 8003d62:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003d66:	0082      	lsls	r2, r0, #2
 8003d68:	4650      	mov	r0, sl
 8003d6a:	4659      	mov	r1, fp
 8003d6c:	f7fc fa50 	bl	8000210 <__aeabi_uldivmod>
 8003d70:	4602      	mov	r2, r0
 8003d72:	460b      	mov	r3, r1
 8003d74:	4b0e      	ldr	r3, [pc, #56]	; (8003db0 <UART_SetConfig+0x38c>)
 8003d76:	fba3 1302 	umull	r1, r3, r3, r2
 8003d7a:	095b      	lsrs	r3, r3, #5
 8003d7c:	2164      	movs	r1, #100	; 0x64
 8003d7e:	fb01 f303 	mul.w	r3, r1, r3
 8003d82:	1ad3      	subs	r3, r2, r3
 8003d84:	011b      	lsls	r3, r3, #4
 8003d86:	3332      	adds	r3, #50	; 0x32
 8003d88:	4a09      	ldr	r2, [pc, #36]	; (8003db0 <UART_SetConfig+0x38c>)
 8003d8a:	fba2 2303 	umull	r2, r3, r2, r3
 8003d8e:	095b      	lsrs	r3, r3, #5
 8003d90:	f003 020f 	and.w	r2, r3, #15
 8003d94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4432      	add	r2, r6
 8003d9a:	609a      	str	r2, [r3, #8]
}
 8003d9c:	bf00      	nop
 8003d9e:	377c      	adds	r7, #124	; 0x7c
 8003da0:	46bd      	mov	sp, r7
 8003da2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003da6:	bf00      	nop
 8003da8:	40011000 	.word	0x40011000
 8003dac:	40011400 	.word	0x40011400
 8003db0:	51eb851f 	.word	0x51eb851f

08003db4 <__NVIC_SetPriority>:
{
 8003db4:	b480      	push	{r7}
 8003db6:	b083      	sub	sp, #12
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	4603      	mov	r3, r0
 8003dbc:	6039      	str	r1, [r7, #0]
 8003dbe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003dc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	db0a      	blt.n	8003dde <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	b2da      	uxtb	r2, r3
 8003dcc:	490c      	ldr	r1, [pc, #48]	; (8003e00 <__NVIC_SetPriority+0x4c>)
 8003dce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dd2:	0112      	lsls	r2, r2, #4
 8003dd4:	b2d2      	uxtb	r2, r2
 8003dd6:	440b      	add	r3, r1
 8003dd8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003ddc:	e00a      	b.n	8003df4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	b2da      	uxtb	r2, r3
 8003de2:	4908      	ldr	r1, [pc, #32]	; (8003e04 <__NVIC_SetPriority+0x50>)
 8003de4:	79fb      	ldrb	r3, [r7, #7]
 8003de6:	f003 030f 	and.w	r3, r3, #15
 8003dea:	3b04      	subs	r3, #4
 8003dec:	0112      	lsls	r2, r2, #4
 8003dee:	b2d2      	uxtb	r2, r2
 8003df0:	440b      	add	r3, r1
 8003df2:	761a      	strb	r2, [r3, #24]
}
 8003df4:	bf00      	nop
 8003df6:	370c      	adds	r7, #12
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfe:	4770      	bx	lr
 8003e00:	e000e100 	.word	0xe000e100
 8003e04:	e000ed00 	.word	0xe000ed00

08003e08 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8003e0c:	4b05      	ldr	r3, [pc, #20]	; (8003e24 <SysTick_Handler+0x1c>)
 8003e0e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8003e10:	f002 f944 	bl	800609c <xTaskGetSchedulerState>
 8003e14:	4603      	mov	r3, r0
 8003e16:	2b01      	cmp	r3, #1
 8003e18:	d001      	beq.n	8003e1e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8003e1a:	f002 ff65 	bl	8006ce8 <xPortSysTickHandler>
  }
}
 8003e1e:	bf00      	nop
 8003e20:	bd80      	pop	{r7, pc}
 8003e22:	bf00      	nop
 8003e24:	e000e010 	.word	0xe000e010

08003e28 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003e2c:	2100      	movs	r1, #0
 8003e2e:	f06f 0004 	mvn.w	r0, #4
 8003e32:	f7ff ffbf 	bl	8003db4 <__NVIC_SetPriority>
#endif
}
 8003e36:	bf00      	nop
 8003e38:	bd80      	pop	{r7, pc}
	...

08003e3c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003e3c:	b480      	push	{r7}
 8003e3e:	b083      	sub	sp, #12
 8003e40:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003e42:	f3ef 8305 	mrs	r3, IPSR
 8003e46:	603b      	str	r3, [r7, #0]
  return(result);
 8003e48:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d003      	beq.n	8003e56 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8003e4e:	f06f 0305 	mvn.w	r3, #5
 8003e52:	607b      	str	r3, [r7, #4]
 8003e54:	e00c      	b.n	8003e70 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003e56:	4b0a      	ldr	r3, [pc, #40]	; (8003e80 <osKernelInitialize+0x44>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d105      	bne.n	8003e6a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003e5e:	4b08      	ldr	r3, [pc, #32]	; (8003e80 <osKernelInitialize+0x44>)
 8003e60:	2201      	movs	r2, #1
 8003e62:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003e64:	2300      	movs	r3, #0
 8003e66:	607b      	str	r3, [r7, #4]
 8003e68:	e002      	b.n	8003e70 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8003e6a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003e6e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003e70:	687b      	ldr	r3, [r7, #4]
}
 8003e72:	4618      	mov	r0, r3
 8003e74:	370c      	adds	r7, #12
 8003e76:	46bd      	mov	sp, r7
 8003e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7c:	4770      	bx	lr
 8003e7e:	bf00      	nop
 8003e80:	20000030 	.word	0x20000030

08003e84 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b082      	sub	sp, #8
 8003e88:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003e8a:	f3ef 8305 	mrs	r3, IPSR
 8003e8e:	603b      	str	r3, [r7, #0]
  return(result);
 8003e90:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d003      	beq.n	8003e9e <osKernelStart+0x1a>
    stat = osErrorISR;
 8003e96:	f06f 0305 	mvn.w	r3, #5
 8003e9a:	607b      	str	r3, [r7, #4]
 8003e9c:	e010      	b.n	8003ec0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003e9e:	4b0b      	ldr	r3, [pc, #44]	; (8003ecc <osKernelStart+0x48>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	2b01      	cmp	r3, #1
 8003ea4:	d109      	bne.n	8003eba <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003ea6:	f7ff ffbf 	bl	8003e28 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003eaa:	4b08      	ldr	r3, [pc, #32]	; (8003ecc <osKernelStart+0x48>)
 8003eac:	2202      	movs	r2, #2
 8003eae:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003eb0:	f001 fc0e 	bl	80056d0 <vTaskStartScheduler>
      stat = osOK;
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	607b      	str	r3, [r7, #4]
 8003eb8:	e002      	b.n	8003ec0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8003eba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003ebe:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003ec0:	687b      	ldr	r3, [r7, #4]
}
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	3708      	adds	r7, #8
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bd80      	pop	{r7, pc}
 8003eca:	bf00      	nop
 8003ecc:	20000030 	.word	0x20000030

08003ed0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b08e      	sub	sp, #56	; 0x38
 8003ed4:	af04      	add	r7, sp, #16
 8003ed6:	60f8      	str	r0, [r7, #12]
 8003ed8:	60b9      	str	r1, [r7, #8]
 8003eda:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003edc:	2300      	movs	r3, #0
 8003ede:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003ee0:	f3ef 8305 	mrs	r3, IPSR
 8003ee4:	617b      	str	r3, [r7, #20]
  return(result);
 8003ee6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d17e      	bne.n	8003fea <osThreadNew+0x11a>
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d07b      	beq.n	8003fea <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8003ef2:	2380      	movs	r3, #128	; 0x80
 8003ef4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8003ef6:	2318      	movs	r3, #24
 8003ef8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8003efa:	2300      	movs	r3, #0
 8003efc:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8003efe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003f02:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d045      	beq.n	8003f96 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d002      	beq.n	8003f18 <osThreadNew+0x48>
        name = attr->name;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	699b      	ldr	r3, [r3, #24]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d002      	beq.n	8003f26 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	699b      	ldr	r3, [r3, #24]
 8003f24:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003f26:	69fb      	ldr	r3, [r7, #28]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d008      	beq.n	8003f3e <osThreadNew+0x6e>
 8003f2c:	69fb      	ldr	r3, [r7, #28]
 8003f2e:	2b38      	cmp	r3, #56	; 0x38
 8003f30:	d805      	bhi.n	8003f3e <osThreadNew+0x6e>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	f003 0301 	and.w	r3, r3, #1
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d001      	beq.n	8003f42 <osThreadNew+0x72>
        return (NULL);
 8003f3e:	2300      	movs	r3, #0
 8003f40:	e054      	b.n	8003fec <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	695b      	ldr	r3, [r3, #20]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d003      	beq.n	8003f52 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	695b      	ldr	r3, [r3, #20]
 8003f4e:	089b      	lsrs	r3, r3, #2
 8003f50:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	689b      	ldr	r3, [r3, #8]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d00e      	beq.n	8003f78 <osThreadNew+0xa8>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	68db      	ldr	r3, [r3, #12]
 8003f5e:	2b5b      	cmp	r3, #91	; 0x5b
 8003f60:	d90a      	bls.n	8003f78 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d006      	beq.n	8003f78 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	695b      	ldr	r3, [r3, #20]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d002      	beq.n	8003f78 <osThreadNew+0xa8>
        mem = 1;
 8003f72:	2301      	movs	r3, #1
 8003f74:	61bb      	str	r3, [r7, #24]
 8003f76:	e010      	b.n	8003f9a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	689b      	ldr	r3, [r3, #8]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d10c      	bne.n	8003f9a <osThreadNew+0xca>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	68db      	ldr	r3, [r3, #12]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d108      	bne.n	8003f9a <osThreadNew+0xca>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	691b      	ldr	r3, [r3, #16]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d104      	bne.n	8003f9a <osThreadNew+0xca>
          mem = 0;
 8003f90:	2300      	movs	r3, #0
 8003f92:	61bb      	str	r3, [r7, #24]
 8003f94:	e001      	b.n	8003f9a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8003f96:	2300      	movs	r3, #0
 8003f98:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003f9a:	69bb      	ldr	r3, [r7, #24]
 8003f9c:	2b01      	cmp	r3, #1
 8003f9e:	d110      	bne.n	8003fc2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003fa4:	687a      	ldr	r2, [r7, #4]
 8003fa6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003fa8:	9202      	str	r2, [sp, #8]
 8003faa:	9301      	str	r3, [sp, #4]
 8003fac:	69fb      	ldr	r3, [r7, #28]
 8003fae:	9300      	str	r3, [sp, #0]
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	6a3a      	ldr	r2, [r7, #32]
 8003fb4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003fb6:	68f8      	ldr	r0, [r7, #12]
 8003fb8:	f001 f9b4 	bl	8005324 <xTaskCreateStatic>
 8003fbc:	4603      	mov	r3, r0
 8003fbe:	613b      	str	r3, [r7, #16]
 8003fc0:	e013      	b.n	8003fea <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8003fc2:	69bb      	ldr	r3, [r7, #24]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d110      	bne.n	8003fea <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003fc8:	6a3b      	ldr	r3, [r7, #32]
 8003fca:	b29a      	uxth	r2, r3
 8003fcc:	f107 0310 	add.w	r3, r7, #16
 8003fd0:	9301      	str	r3, [sp, #4]
 8003fd2:	69fb      	ldr	r3, [r7, #28]
 8003fd4:	9300      	str	r3, [sp, #0]
 8003fd6:	68bb      	ldr	r3, [r7, #8]
 8003fd8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003fda:	68f8      	ldr	r0, [r7, #12]
 8003fdc:	f001 f9ff 	bl	80053de <xTaskCreate>
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	2b01      	cmp	r3, #1
 8003fe4:	d001      	beq.n	8003fea <osThreadNew+0x11a>
            hTask = NULL;
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003fea:	693b      	ldr	r3, [r7, #16]
}
 8003fec:	4618      	mov	r0, r3
 8003fee:	3728      	adds	r7, #40	; 0x28
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	bd80      	pop	{r7, pc}

08003ff4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b084      	sub	sp, #16
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003ffc:	f3ef 8305 	mrs	r3, IPSR
 8004000:	60bb      	str	r3, [r7, #8]
  return(result);
 8004002:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004004:	2b00      	cmp	r3, #0
 8004006:	d003      	beq.n	8004010 <osDelay+0x1c>
    stat = osErrorISR;
 8004008:	f06f 0305 	mvn.w	r3, #5
 800400c:	60fb      	str	r3, [r7, #12]
 800400e:	e007      	b.n	8004020 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8004010:	2300      	movs	r3, #0
 8004012:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d002      	beq.n	8004020 <osDelay+0x2c>
      vTaskDelay(ticks);
 800401a:	6878      	ldr	r0, [r7, #4]
 800401c:	f001 fb24 	bl	8005668 <vTaskDelay>
    }
  }

  return (stat);
 8004020:	68fb      	ldr	r3, [r7, #12]
}
 8004022:	4618      	mov	r0, r3
 8004024:	3710      	adds	r7, #16
 8004026:	46bd      	mov	sp, r7
 8004028:	bd80      	pop	{r7, pc}

0800402a <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 800402a:	b580      	push	{r7, lr}
 800402c:	b086      	sub	sp, #24
 800402e:	af00      	add	r7, sp, #0
 8004030:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 8004032:	2300      	movs	r3, #0
 8004034:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004036:	f3ef 8305 	mrs	r3, IPSR
 800403a:	60fb      	str	r3, [r7, #12]
  return(result);
 800403c:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 800403e:	2b00      	cmp	r3, #0
 8004040:	d12d      	bne.n	800409e <osEventFlagsNew+0x74>
    mem = -1;
 8004042:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004046:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d015      	beq.n	800407a <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	689b      	ldr	r3, [r3, #8]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d006      	beq.n	8004064 <osEventFlagsNew+0x3a>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	68db      	ldr	r3, [r3, #12]
 800405a:	2b1f      	cmp	r3, #31
 800405c:	d902      	bls.n	8004064 <osEventFlagsNew+0x3a>
        mem = 1;
 800405e:	2301      	movs	r3, #1
 8004060:	613b      	str	r3, [r7, #16]
 8004062:	e00c      	b.n	800407e <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	689b      	ldr	r3, [r3, #8]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d108      	bne.n	800407e <osEventFlagsNew+0x54>
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	68db      	ldr	r3, [r3, #12]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d104      	bne.n	800407e <osEventFlagsNew+0x54>
          mem = 0;
 8004074:	2300      	movs	r3, #0
 8004076:	613b      	str	r3, [r7, #16]
 8004078:	e001      	b.n	800407e <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 800407a:	2300      	movs	r3, #0
 800407c:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 800407e:	693b      	ldr	r3, [r7, #16]
 8004080:	2b01      	cmp	r3, #1
 8004082:	d106      	bne.n	8004092 <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	689b      	ldr	r3, [r3, #8]
 8004088:	4618      	mov	r0, r3
 800408a:	f000 f93f 	bl	800430c <xEventGroupCreateStatic>
 800408e:	6178      	str	r0, [r7, #20]
 8004090:	e005      	b.n	800409e <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 8004092:	693b      	ldr	r3, [r7, #16]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d102      	bne.n	800409e <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 8004098:	f000 f96f 	bl	800437a <xEventGroupCreate>
 800409c:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 800409e:	697b      	ldr	r3, [r7, #20]
}
 80040a0:	4618      	mov	r0, r3
 80040a2:	3718      	adds	r7, #24
 80040a4:	46bd      	mov	sp, r7
 80040a6:	bd80      	pop	{r7, pc}

080040a8 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b086      	sub	sp, #24
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
 80040b0:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 80040b6:	693b      	ldr	r3, [r7, #16]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d004      	beq.n	80040c6 <osEventFlagsSet+0x1e>
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d003      	beq.n	80040ce <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 80040c6:	f06f 0303 	mvn.w	r3, #3
 80040ca:	617b      	str	r3, [r7, #20]
 80040cc:	e028      	b.n	8004120 <osEventFlagsSet+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80040ce:	f3ef 8305 	mrs	r3, IPSR
 80040d2:	60fb      	str	r3, [r7, #12]
  return(result);
 80040d4:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d01d      	beq.n	8004116 <osEventFlagsSet+0x6e>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 80040da:	2300      	movs	r3, #0
 80040dc:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 80040de:	f107 0308 	add.w	r3, r7, #8
 80040e2:	461a      	mov	r2, r3
 80040e4:	6839      	ldr	r1, [r7, #0]
 80040e6:	6938      	ldr	r0, [r7, #16]
 80040e8:	f000 fb68 	bl	80047bc <xEventGroupSetBitsFromISR>
 80040ec:	4603      	mov	r3, r0
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d103      	bne.n	80040fa <osEventFlagsSet+0x52>
      rflags = (uint32_t)osErrorResource;
 80040f2:	f06f 0302 	mvn.w	r3, #2
 80040f6:	617b      	str	r3, [r7, #20]
 80040f8:	e012      	b.n	8004120 <osEventFlagsSet+0x78>
    } else {
      rflags = flags;
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 80040fe:	68bb      	ldr	r3, [r7, #8]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d00d      	beq.n	8004120 <osEventFlagsSet+0x78>
 8004104:	4b09      	ldr	r3, [pc, #36]	; (800412c <osEventFlagsSet+0x84>)
 8004106:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800410a:	601a      	str	r2, [r3, #0]
 800410c:	f3bf 8f4f 	dsb	sy
 8004110:	f3bf 8f6f 	isb	sy
 8004114:	e004      	b.n	8004120 <osEventFlagsSet+0x78>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 8004116:	6839      	ldr	r1, [r7, #0]
 8004118:	6938      	ldr	r0, [r7, #16]
 800411a:	f000 fa87 	bl	800462c <xEventGroupSetBits>
 800411e:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 8004120:	697b      	ldr	r3, [r7, #20]
}
 8004122:	4618      	mov	r0, r3
 8004124:	3718      	adds	r7, #24
 8004126:	46bd      	mov	sp, r7
 8004128:	bd80      	pop	{r7, pc}
 800412a:	bf00      	nop
 800412c:	e000ed04 	.word	0xe000ed04

08004130 <osEventFlagsClear>:

uint32_t osEventFlagsClear (osEventFlagsId_t ef_id, uint32_t flags) {
 8004130:	b580      	push	{r7, lr}
 8004132:	b086      	sub	sp, #24
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
 8004138:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	613b      	str	r3, [r7, #16]
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 800413e:	693b      	ldr	r3, [r7, #16]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d004      	beq.n	800414e <osEventFlagsClear+0x1e>
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800414a:	2b00      	cmp	r3, #0
 800414c:	d003      	beq.n	8004156 <osEventFlagsClear+0x26>
    rflags = (uint32_t)osErrorParameter;
 800414e:	f06f 0303 	mvn.w	r3, #3
 8004152:	617b      	str	r3, [r7, #20]
 8004154:	e019      	b.n	800418a <osEventFlagsClear+0x5a>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004156:	f3ef 8305 	mrs	r3, IPSR
 800415a:	60fb      	str	r3, [r7, #12]
  return(result);
 800415c:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800415e:	2b00      	cmp	r3, #0
 8004160:	d00e      	beq.n	8004180 <osEventFlagsClear+0x50>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    rflags = xEventGroupGetBitsFromISR (hEventGroup);
 8004162:	6938      	ldr	r0, [r7, #16]
 8004164:	f000 fa3e 	bl	80045e4 <xEventGroupGetBitsFromISR>
 8004168:	6178      	str	r0, [r7, #20]

    if (xEventGroupClearBitsFromISR (hEventGroup, (EventBits_t)flags) == pdFAIL) {
 800416a:	6839      	ldr	r1, [r7, #0]
 800416c:	6938      	ldr	r0, [r7, #16]
 800416e:	f000 fa25 	bl	80045bc <xEventGroupClearBitsFromISR>
 8004172:	4603      	mov	r3, r0
 8004174:	2b00      	cmp	r3, #0
 8004176:	d108      	bne.n	800418a <osEventFlagsClear+0x5a>
      rflags = (uint32_t)osErrorResource;
 8004178:	f06f 0302 	mvn.w	r3, #2
 800417c:	617b      	str	r3, [r7, #20]
 800417e:	e004      	b.n	800418a <osEventFlagsClear+0x5a>
    }
  #endif
  }
  else {
    rflags = xEventGroupClearBits (hEventGroup, (EventBits_t)flags);
 8004180:	6839      	ldr	r1, [r7, #0]
 8004182:	6938      	ldr	r0, [r7, #16]
 8004184:	f000 f9e2 	bl	800454c <xEventGroupClearBits>
 8004188:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 800418a:	697b      	ldr	r3, [r7, #20]
}
 800418c:	4618      	mov	r0, r3
 800418e:	3718      	adds	r7, #24
 8004190:	46bd      	mov	sp, r7
 8004192:	bd80      	pop	{r7, pc}

08004194 <osEventFlagsGet>:

uint32_t osEventFlagsGet (osEventFlagsId_t ef_id) {
 8004194:	b580      	push	{r7, lr}
 8004196:	b086      	sub	sp, #24
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	613b      	str	r3, [r7, #16]
  uint32_t rflags;

  if (ef_id == NULL) {
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d102      	bne.n	80041ac <osEventFlagsGet+0x18>
    rflags = 0U;
 80041a6:	2300      	movs	r3, #0
 80041a8:	617b      	str	r3, [r7, #20]
 80041aa:	e00f      	b.n	80041cc <osEventFlagsGet+0x38>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80041ac:	f3ef 8305 	mrs	r3, IPSR
 80041b0:	60fb      	str	r3, [r7, #12]
  return(result);
 80041b2:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d004      	beq.n	80041c2 <osEventFlagsGet+0x2e>
    rflags = xEventGroupGetBitsFromISR (hEventGroup);
 80041b8:	6938      	ldr	r0, [r7, #16]
 80041ba:	f000 fa13 	bl	80045e4 <xEventGroupGetBitsFromISR>
 80041be:	6178      	str	r0, [r7, #20]
 80041c0:	e004      	b.n	80041cc <osEventFlagsGet+0x38>
  }
  else {
    rflags = xEventGroupGetBits (hEventGroup);
 80041c2:	2100      	movs	r1, #0
 80041c4:	6938      	ldr	r0, [r7, #16]
 80041c6:	f000 f9c1 	bl	800454c <xEventGroupClearBits>
 80041ca:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 80041cc:	697b      	ldr	r3, [r7, #20]
}
 80041ce:	4618      	mov	r0, r3
 80041d0:	3718      	adds	r7, #24
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bd80      	pop	{r7, pc}

080041d6 <osEventFlagsWait>:

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 80041d6:	b580      	push	{r7, lr}
 80041d8:	b08c      	sub	sp, #48	; 0x30
 80041da:	af02      	add	r7, sp, #8
 80041dc:	60f8      	str	r0, [r7, #12]
 80041de:	60b9      	str	r1, [r7, #8]
 80041e0:	607a      	str	r2, [r7, #4]
 80041e2:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 80041e8:	69bb      	ldr	r3, [r7, #24]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d004      	beq.n	80041f8 <osEventFlagsWait+0x22>
 80041ee:	68bb      	ldr	r3, [r7, #8]
 80041f0:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d003      	beq.n	8004200 <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 80041f8:	f06f 0303 	mvn.w	r3, #3
 80041fc:	61fb      	str	r3, [r7, #28]
 80041fe:	e04b      	b.n	8004298 <osEventFlagsWait+0xc2>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004200:	f3ef 8305 	mrs	r3, IPSR
 8004204:	617b      	str	r3, [r7, #20]
  return(result);
 8004206:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8004208:	2b00      	cmp	r3, #0
 800420a:	d003      	beq.n	8004214 <osEventFlagsWait+0x3e>
    rflags = (uint32_t)osErrorISR;
 800420c:	f06f 0305 	mvn.w	r3, #5
 8004210:	61fb      	str	r3, [r7, #28]
 8004212:	e041      	b.n	8004298 <osEventFlagsWait+0xc2>
  }
  else {
    if (options & osFlagsWaitAll) {
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	f003 0301 	and.w	r3, r3, #1
 800421a:	2b00      	cmp	r3, #0
 800421c:	d002      	beq.n	8004224 <osEventFlagsWait+0x4e>
      wait_all = pdTRUE;
 800421e:	2301      	movs	r3, #1
 8004220:	627b      	str	r3, [r7, #36]	; 0x24
 8004222:	e001      	b.n	8004228 <osEventFlagsWait+0x52>
    } else {
      wait_all = pdFAIL;
 8004224:	2300      	movs	r3, #0
 8004226:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (options & osFlagsNoClear) {
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	f003 0302 	and.w	r3, r3, #2
 800422e:	2b00      	cmp	r3, #0
 8004230:	d002      	beq.n	8004238 <osEventFlagsWait+0x62>
      exit_clr = pdFAIL;
 8004232:	2300      	movs	r3, #0
 8004234:	623b      	str	r3, [r7, #32]
 8004236:	e001      	b.n	800423c <osEventFlagsWait+0x66>
    } else {
      exit_clr = pdTRUE;
 8004238:	2301      	movs	r3, #1
 800423a:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	9300      	str	r3, [sp, #0]
 8004240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004242:	6a3a      	ldr	r2, [r7, #32]
 8004244:	68b9      	ldr	r1, [r7, #8]
 8004246:	69b8      	ldr	r0, [r7, #24]
 8004248:	f000 f8b2 	bl	80043b0 <xEventGroupWaitBits>
 800424c:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	f003 0301 	and.w	r3, r3, #1
 8004254:	2b00      	cmp	r3, #0
 8004256:	d010      	beq.n	800427a <osEventFlagsWait+0xa4>
      if ((flags & rflags) != flags) {
 8004258:	68ba      	ldr	r2, [r7, #8]
 800425a:	69fb      	ldr	r3, [r7, #28]
 800425c:	4013      	ands	r3, r2
 800425e:	68ba      	ldr	r2, [r7, #8]
 8004260:	429a      	cmp	r2, r3
 8004262:	d019      	beq.n	8004298 <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d003      	beq.n	8004272 <osEventFlagsWait+0x9c>
          rflags = (uint32_t)osErrorTimeout;
 800426a:	f06f 0301 	mvn.w	r3, #1
 800426e:	61fb      	str	r3, [r7, #28]
 8004270:	e012      	b.n	8004298 <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 8004272:	f06f 0302 	mvn.w	r3, #2
 8004276:	61fb      	str	r3, [r7, #28]
 8004278:	e00e      	b.n	8004298 <osEventFlagsWait+0xc2>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 800427a:	68ba      	ldr	r2, [r7, #8]
 800427c:	69fb      	ldr	r3, [r7, #28]
 800427e:	4013      	ands	r3, r2
 8004280:	2b00      	cmp	r3, #0
 8004282:	d109      	bne.n	8004298 <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d003      	beq.n	8004292 <osEventFlagsWait+0xbc>
          rflags = (uint32_t)osErrorTimeout;
 800428a:	f06f 0301 	mvn.w	r3, #1
 800428e:	61fb      	str	r3, [r7, #28]
 8004290:	e002      	b.n	8004298 <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 8004292:	f06f 0302 	mvn.w	r3, #2
 8004296:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 8004298:	69fb      	ldr	r3, [r7, #28]
}
 800429a:	4618      	mov	r0, r3
 800429c:	3728      	adds	r7, #40	; 0x28
 800429e:	46bd      	mov	sp, r7
 80042a0:	bd80      	pop	{r7, pc}
	...

080042a4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80042a4:	b480      	push	{r7}
 80042a6:	b085      	sub	sp, #20
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	60f8      	str	r0, [r7, #12]
 80042ac:	60b9      	str	r1, [r7, #8]
 80042ae:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	4a07      	ldr	r2, [pc, #28]	; (80042d0 <vApplicationGetIdleTaskMemory+0x2c>)
 80042b4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80042b6:	68bb      	ldr	r3, [r7, #8]
 80042b8:	4a06      	ldr	r2, [pc, #24]	; (80042d4 <vApplicationGetIdleTaskMemory+0x30>)
 80042ba:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2280      	movs	r2, #128	; 0x80
 80042c0:	601a      	str	r2, [r3, #0]
}
 80042c2:	bf00      	nop
 80042c4:	3714      	adds	r7, #20
 80042c6:	46bd      	mov	sp, r7
 80042c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042cc:	4770      	bx	lr
 80042ce:	bf00      	nop
 80042d0:	20000034 	.word	0x20000034
 80042d4:	20000090 	.word	0x20000090

080042d8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80042d8:	b480      	push	{r7}
 80042da:	b085      	sub	sp, #20
 80042dc:	af00      	add	r7, sp, #0
 80042de:	60f8      	str	r0, [r7, #12]
 80042e0:	60b9      	str	r1, [r7, #8]
 80042e2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	4a07      	ldr	r2, [pc, #28]	; (8004304 <vApplicationGetTimerTaskMemory+0x2c>)
 80042e8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80042ea:	68bb      	ldr	r3, [r7, #8]
 80042ec:	4a06      	ldr	r2, [pc, #24]	; (8004308 <vApplicationGetTimerTaskMemory+0x30>)
 80042ee:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80042f6:	601a      	str	r2, [r3, #0]
}
 80042f8:	bf00      	nop
 80042fa:	3714      	adds	r7, #20
 80042fc:	46bd      	mov	sp, r7
 80042fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004302:	4770      	bx	lr
 8004304:	20000290 	.word	0x20000290
 8004308:	200002ec 	.word	0x200002ec

0800430c <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 800430c:	b580      	push	{r7, lr}
 800430e:	b086      	sub	sp, #24
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d10a      	bne.n	8004330 <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800431a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800431e:	f383 8811 	msr	BASEPRI, r3
 8004322:	f3bf 8f6f 	isb	sy
 8004326:	f3bf 8f4f 	dsb	sy
 800432a:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800432c:	bf00      	nop
 800432e:	e7fe      	b.n	800432e <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 8004330:	2320      	movs	r3, #32
 8004332:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 8004334:	68bb      	ldr	r3, [r7, #8]
 8004336:	2b20      	cmp	r3, #32
 8004338:	d00a      	beq.n	8004350 <xEventGroupCreateStatic+0x44>
	__asm volatile
 800433a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800433e:	f383 8811 	msr	BASEPRI, r3
 8004342:	f3bf 8f6f 	isb	sy
 8004346:	f3bf 8f4f 	dsb	sy
 800434a:	60fb      	str	r3, [r7, #12]
}
 800434c:	bf00      	nop
 800434e:	e7fe      	b.n	800434e <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 8004354:	697b      	ldr	r3, [r7, #20]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d00a      	beq.n	8004370 <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 800435a:	697b      	ldr	r3, [r7, #20]
 800435c:	2200      	movs	r2, #0
 800435e:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8004360:	697b      	ldr	r3, [r7, #20]
 8004362:	3304      	adds	r3, #4
 8004364:	4618      	mov	r0, r3
 8004366:	f000 fa3d 	bl	80047e4 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 800436a:	697b      	ldr	r3, [r7, #20]
 800436c:	2201      	movs	r2, #1
 800436e:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 8004370:	697b      	ldr	r3, [r7, #20]
	}
 8004372:	4618      	mov	r0, r3
 8004374:	3718      	adds	r7, #24
 8004376:	46bd      	mov	sp, r7
 8004378:	bd80      	pop	{r7, pc}

0800437a <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 800437a:	b580      	push	{r7, lr}
 800437c:	b082      	sub	sp, #8
 800437e:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8004380:	2020      	movs	r0, #32
 8004382:	f002 fd41 	bl	8006e08 <pvPortMalloc>
 8004386:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d00a      	beq.n	80043a4 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2200      	movs	r2, #0
 8004392:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	3304      	adds	r3, #4
 8004398:	4618      	mov	r0, r3
 800439a:	f000 fa23 	bl	80047e4 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2200      	movs	r2, #0
 80043a2:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 80043a4:	687b      	ldr	r3, [r7, #4]
	}
 80043a6:	4618      	mov	r0, r3
 80043a8:	3708      	adds	r7, #8
 80043aa:	46bd      	mov	sp, r7
 80043ac:	bd80      	pop	{r7, pc}
	...

080043b0 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b090      	sub	sp, #64	; 0x40
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	60f8      	str	r0, [r7, #12]
 80043b8:	60b9      	str	r1, [r7, #8]
 80043ba:	607a      	str	r2, [r7, #4]
 80043bc:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 80043c2:	2300      	movs	r3, #0
 80043c4:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 80043c6:	2300      	movs	r3, #0
 80043c8:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d10a      	bne.n	80043e6 <xEventGroupWaitBits+0x36>
	__asm volatile
 80043d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043d4:	f383 8811 	msr	BASEPRI, r3
 80043d8:	f3bf 8f6f 	isb	sy
 80043dc:	f3bf 8f4f 	dsb	sy
 80043e0:	623b      	str	r3, [r7, #32]
}
 80043e2:	bf00      	nop
 80043e4:	e7fe      	b.n	80043e4 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80043e6:	68bb      	ldr	r3, [r7, #8]
 80043e8:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d00a      	beq.n	8004406 <xEventGroupWaitBits+0x56>
	__asm volatile
 80043f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043f4:	f383 8811 	msr	BASEPRI, r3
 80043f8:	f3bf 8f6f 	isb	sy
 80043fc:	f3bf 8f4f 	dsb	sy
 8004400:	61fb      	str	r3, [r7, #28]
}
 8004402:	bf00      	nop
 8004404:	e7fe      	b.n	8004404 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d10a      	bne.n	8004422 <xEventGroupWaitBits+0x72>
	__asm volatile
 800440c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004410:	f383 8811 	msr	BASEPRI, r3
 8004414:	f3bf 8f6f 	isb	sy
 8004418:	f3bf 8f4f 	dsb	sy
 800441c:	61bb      	str	r3, [r7, #24]
}
 800441e:	bf00      	nop
 8004420:	e7fe      	b.n	8004420 <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004422:	f001 fe3b 	bl	800609c <xTaskGetSchedulerState>
 8004426:	4603      	mov	r3, r0
 8004428:	2b00      	cmp	r3, #0
 800442a:	d102      	bne.n	8004432 <xEventGroupWaitBits+0x82>
 800442c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800442e:	2b00      	cmp	r3, #0
 8004430:	d101      	bne.n	8004436 <xEventGroupWaitBits+0x86>
 8004432:	2301      	movs	r3, #1
 8004434:	e000      	b.n	8004438 <xEventGroupWaitBits+0x88>
 8004436:	2300      	movs	r3, #0
 8004438:	2b00      	cmp	r3, #0
 800443a:	d10a      	bne.n	8004452 <xEventGroupWaitBits+0xa2>
	__asm volatile
 800443c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004440:	f383 8811 	msr	BASEPRI, r3
 8004444:	f3bf 8f6f 	isb	sy
 8004448:	f3bf 8f4f 	dsb	sy
 800444c:	617b      	str	r3, [r7, #20]
}
 800444e:	bf00      	nop
 8004450:	e7fe      	b.n	8004450 <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 8004452:	f001 f9a3 	bl	800579c <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8004456:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 800445c:	683a      	ldr	r2, [r7, #0]
 800445e:	68b9      	ldr	r1, [r7, #8]
 8004460:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004462:	f000 f988 	bl	8004776 <prvTestWaitCondition>
 8004466:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 8004468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800446a:	2b00      	cmp	r3, #0
 800446c:	d00e      	beq.n	800448c <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 800446e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004470:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 8004472:	2300      	movs	r3, #0
 8004474:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d028      	beq.n	80044ce <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800447c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800447e:	681a      	ldr	r2, [r3, #0]
 8004480:	68bb      	ldr	r3, [r7, #8]
 8004482:	43db      	mvns	r3, r3
 8004484:	401a      	ands	r2, r3
 8004486:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004488:	601a      	str	r2, [r3, #0]
 800448a:	e020      	b.n	80044ce <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 800448c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800448e:	2b00      	cmp	r3, #0
 8004490:	d104      	bne.n	800449c <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 8004492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004494:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 8004496:	2301      	movs	r3, #1
 8004498:	633b      	str	r3, [r7, #48]	; 0x30
 800449a:	e018      	b.n	80044ce <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d003      	beq.n	80044aa <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 80044a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044a4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80044a8:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d003      	beq.n	80044b8 <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 80044b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044b2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80044b6:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 80044b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044ba:	1d18      	adds	r0, r3, #4
 80044bc:	68ba      	ldr	r2, [r7, #8]
 80044be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044c0:	4313      	orrs	r3, r2
 80044c2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80044c4:	4619      	mov	r1, r3
 80044c6:	f001 fb61 	bl	8005b8c <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 80044ca:	2300      	movs	r3, #0
 80044cc:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 80044ce:	f001 f973 	bl	80057b8 <xTaskResumeAll>
 80044d2:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 80044d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d031      	beq.n	800453e <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 80044da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d107      	bne.n	80044f0 <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 80044e0:	4b19      	ldr	r3, [pc, #100]	; (8004548 <xEventGroupWaitBits+0x198>)
 80044e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044e6:	601a      	str	r2, [r3, #0]
 80044e8:	f3bf 8f4f 	dsb	sy
 80044ec:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 80044f0:	f001 fe60 	bl	80061b4 <uxTaskResetEventItemValue>
 80044f4:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 80044f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d11a      	bne.n	8004536 <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 8004500:	f002 fb60 	bl	8006bc4 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8004504:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 800450a:	683a      	ldr	r2, [r7, #0]
 800450c:	68b9      	ldr	r1, [r7, #8]
 800450e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004510:	f000 f931 	bl	8004776 <prvTestWaitCondition>
 8004514:	4603      	mov	r3, r0
 8004516:	2b00      	cmp	r3, #0
 8004518:	d009      	beq.n	800452e <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d006      	beq.n	800452e <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8004520:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004522:	681a      	ldr	r2, [r3, #0]
 8004524:	68bb      	ldr	r3, [r7, #8]
 8004526:	43db      	mvns	r3, r3
 8004528:	401a      	ands	r2, r3
 800452a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800452c:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 800452e:	2301      	movs	r3, #1
 8004530:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 8004532:	f002 fb77 	bl	8006c24 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8004536:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004538:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800453c:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 800453e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004540:	4618      	mov	r0, r3
 8004542:	3740      	adds	r7, #64	; 0x40
 8004544:	46bd      	mov	sp, r7
 8004546:	bd80      	pop	{r7, pc}
 8004548:	e000ed04 	.word	0xe000ed04

0800454c <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b086      	sub	sp, #24
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
 8004554:	6039      	str	r1, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	617b      	str	r3, [r7, #20]
EventBits_t uxReturn;

	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d10a      	bne.n	8004576 <xEventGroupClearBits+0x2a>
	__asm volatile
 8004560:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004564:	f383 8811 	msr	BASEPRI, r3
 8004568:	f3bf 8f6f 	isb	sy
 800456c:	f3bf 8f4f 	dsb	sy
 8004570:	60fb      	str	r3, [r7, #12]
}
 8004572:	bf00      	nop
 8004574:	e7fe      	b.n	8004574 <xEventGroupClearBits+0x28>
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800457c:	2b00      	cmp	r3, #0
 800457e:	d00a      	beq.n	8004596 <xEventGroupClearBits+0x4a>
	__asm volatile
 8004580:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004584:	f383 8811 	msr	BASEPRI, r3
 8004588:	f3bf 8f6f 	isb	sy
 800458c:	f3bf 8f4f 	dsb	sy
 8004590:	60bb      	str	r3, [r7, #8]
}
 8004592:	bf00      	nop
 8004594:	e7fe      	b.n	8004594 <xEventGroupClearBits+0x48>

	taskENTER_CRITICAL();
 8004596:	f002 fb15 	bl	8006bc4 <vPortEnterCritical>
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
 800459a:	697b      	ldr	r3, [r7, #20]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	613b      	str	r3, [r7, #16]

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 80045a0:	697b      	ldr	r3, [r7, #20]
 80045a2:	681a      	ldr	r2, [r3, #0]
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	43db      	mvns	r3, r3
 80045a8:	401a      	ands	r2, r3
 80045aa:	697b      	ldr	r3, [r7, #20]
 80045ac:	601a      	str	r2, [r3, #0]
	}
	taskEXIT_CRITICAL();
 80045ae:	f002 fb39 	bl	8006c24 <vPortExitCritical>

	return uxReturn;
 80045b2:	693b      	ldr	r3, [r7, #16]
}
 80045b4:	4618      	mov	r0, r3
 80045b6:	3718      	adds	r7, #24
 80045b8:	46bd      	mov	sp, r7
 80045ba:	bd80      	pop	{r7, pc}

080045bc <xEventGroupClearBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupClearBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
	{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b084      	sub	sp, #16
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
 80045c4:	6039      	str	r1, [r7, #0]
		BaseType_t xReturn;

		traceEVENT_GROUP_CLEAR_BITS_FROM_ISR( xEventGroup, uxBitsToClear );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupClearBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToClear, NULL ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 80045c6:	2300      	movs	r3, #0
 80045c8:	683a      	ldr	r2, [r7, #0]
 80045ca:	6879      	ldr	r1, [r7, #4]
 80045cc:	4804      	ldr	r0, [pc, #16]	; (80045e0 <xEventGroupClearBitsFromISR+0x24>)
 80045ce:	f002 f9ab 	bl	8006928 <xTimerPendFunctionCallFromISR>
 80045d2:	60f8      	str	r0, [r7, #12]

		return xReturn;
 80045d4:	68fb      	ldr	r3, [r7, #12]
	}
 80045d6:	4618      	mov	r0, r3
 80045d8:	3710      	adds	r7, #16
 80045da:	46bd      	mov	sp, r7
 80045dc:	bd80      	pop	{r7, pc}
 80045de:	bf00      	nop
 80045e0:	0800475d 	.word	0x0800475d

080045e4 <xEventGroupGetBitsFromISR>:

#endif
/*-----------------------------------------------------------*/

EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup )
{
 80045e4:	b480      	push	{r7}
 80045e6:	b089      	sub	sp, #36	; 0x24
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
UBaseType_t uxSavedInterruptStatus;
EventGroup_t const * const pxEventBits = xEventGroup;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	61fb      	str	r3, [r7, #28]

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80045f0:	f3ef 8211 	mrs	r2, BASEPRI
 80045f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045f8:	f383 8811 	msr	BASEPRI, r3
 80045fc:	f3bf 8f6f 	isb	sy
 8004600:	f3bf 8f4f 	dsb	sy
 8004604:	60fa      	str	r2, [r7, #12]
 8004606:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004608:	68fb      	ldr	r3, [r7, #12]
EventBits_t uxReturn;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800460a:	61bb      	str	r3, [r7, #24]
	{
		uxReturn = pxEventBits->uxEventBits;
 800460c:	69fb      	ldr	r3, [r7, #28]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	617b      	str	r3, [r7, #20]
 8004612:	69bb      	ldr	r3, [r7, #24]
 8004614:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004616:	693b      	ldr	r3, [r7, #16]
 8004618:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800461c:	bf00      	nop
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return uxReturn;
 800461e:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
 8004620:	4618      	mov	r0, r3
 8004622:	3724      	adds	r7, #36	; 0x24
 8004624:	46bd      	mov	sp, r7
 8004626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462a:	4770      	bx	lr

0800462c <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b08e      	sub	sp, #56	; 0x38
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
 8004634:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8004636:	2300      	movs	r3, #0
 8004638:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 800463e:	2300      	movs	r3, #0
 8004640:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d10a      	bne.n	800465e <xEventGroupSetBits+0x32>
	__asm volatile
 8004648:	f04f 0350 	mov.w	r3, #80	; 0x50
 800464c:	f383 8811 	msr	BASEPRI, r3
 8004650:	f3bf 8f6f 	isb	sy
 8004654:	f3bf 8f4f 	dsb	sy
 8004658:	613b      	str	r3, [r7, #16]
}
 800465a:	bf00      	nop
 800465c:	e7fe      	b.n	800465c <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004664:	2b00      	cmp	r3, #0
 8004666:	d00a      	beq.n	800467e <xEventGroupSetBits+0x52>
	__asm volatile
 8004668:	f04f 0350 	mov.w	r3, #80	; 0x50
 800466c:	f383 8811 	msr	BASEPRI, r3
 8004670:	f3bf 8f6f 	isb	sy
 8004674:	f3bf 8f4f 	dsb	sy
 8004678:	60fb      	str	r3, [r7, #12]
}
 800467a:	bf00      	nop
 800467c:	e7fe      	b.n	800467c <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 800467e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004680:	3304      	adds	r3, #4
 8004682:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004686:	3308      	adds	r3, #8
 8004688:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 800468a:	f001 f887 	bl	800579c <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 800468e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004690:	68db      	ldr	r3, [r3, #12]
 8004692:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8004694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004696:	681a      	ldr	r2, [r3, #0]
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	431a      	orrs	r2, r3
 800469c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800469e:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 80046a0:	e03c      	b.n	800471c <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 80046a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 80046a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 80046ae:	2300      	movs	r3, #0
 80046b0:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 80046b2:	69bb      	ldr	r3, [r7, #24]
 80046b4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80046b8:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 80046ba:	69bb      	ldr	r3, [r7, #24]
 80046bc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80046c0:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 80046c2:	697b      	ldr	r3, [r7, #20]
 80046c4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d108      	bne.n	80046de <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 80046cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046ce:	681a      	ldr	r2, [r3, #0]
 80046d0:	69bb      	ldr	r3, [r7, #24]
 80046d2:	4013      	ands	r3, r2
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d00b      	beq.n	80046f0 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 80046d8:	2301      	movs	r3, #1
 80046da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80046dc:	e008      	b.n	80046f0 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 80046de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046e0:	681a      	ldr	r2, [r3, #0]
 80046e2:	69bb      	ldr	r3, [r7, #24]
 80046e4:	4013      	ands	r3, r2
 80046e6:	69ba      	ldr	r2, [r7, #24]
 80046e8:	429a      	cmp	r2, r3
 80046ea:	d101      	bne.n	80046f0 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 80046ec:	2301      	movs	r3, #1
 80046ee:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 80046f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d010      	beq.n	8004718 <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 80046f6:	697b      	ldr	r3, [r7, #20]
 80046f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d003      	beq.n	8004708 <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8004700:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004702:	69bb      	ldr	r3, [r7, #24]
 8004704:	4313      	orrs	r3, r2
 8004706:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8004708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004710:	4619      	mov	r1, r3
 8004712:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004714:	f001 fb06 	bl	8005d24 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8004718:	69fb      	ldr	r3, [r7, #28]
 800471a:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 800471c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800471e:	6a3b      	ldr	r3, [r7, #32]
 8004720:	429a      	cmp	r2, r3
 8004722:	d1be      	bne.n	80046a2 <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8004724:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004726:	681a      	ldr	r2, [r3, #0]
 8004728:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800472a:	43db      	mvns	r3, r3
 800472c:	401a      	ands	r2, r3
 800472e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004730:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8004732:	f001 f841 	bl	80057b8 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8004736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004738:	681b      	ldr	r3, [r3, #0]
}
 800473a:	4618      	mov	r0, r3
 800473c:	3738      	adds	r7, #56	; 0x38
 800473e:	46bd      	mov	sp, r7
 8004740:	bd80      	pop	{r7, pc}

08004742 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 8004742:	b580      	push	{r7, lr}
 8004744:	b082      	sub	sp, #8
 8004746:	af00      	add	r7, sp, #0
 8004748:	6078      	str	r0, [r7, #4]
 800474a:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 800474c:	6839      	ldr	r1, [r7, #0]
 800474e:	6878      	ldr	r0, [r7, #4]
 8004750:	f7ff ff6c 	bl	800462c <xEventGroupSetBits>
}
 8004754:	bf00      	nop
 8004756:	3708      	adds	r7, #8
 8004758:	46bd      	mov	sp, r7
 800475a:	bd80      	pop	{r7, pc}

0800475c <vEventGroupClearBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'clear bits' command that was pended from
an interrupt. */
void vEventGroupClearBitsCallback( void *pvEventGroup, const uint32_t ulBitsToClear )
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b082      	sub	sp, #8
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
 8004764:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8004766:	6839      	ldr	r1, [r7, #0]
 8004768:	6878      	ldr	r0, [r7, #4]
 800476a:	f7ff feef 	bl	800454c <xEventGroupClearBits>
}
 800476e:	bf00      	nop
 8004770:	3708      	adds	r7, #8
 8004772:	46bd      	mov	sp, r7
 8004774:	bd80      	pop	{r7, pc}

08004776 <prvTestWaitCondition>:
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8004776:	b480      	push	{r7}
 8004778:	b087      	sub	sp, #28
 800477a:	af00      	add	r7, sp, #0
 800477c:	60f8      	str	r0, [r7, #12]
 800477e:	60b9      	str	r1, [r7, #8]
 8004780:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8004782:	2300      	movs	r3, #0
 8004784:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d107      	bne.n	800479c <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 800478c:	68fa      	ldr	r2, [r7, #12]
 800478e:	68bb      	ldr	r3, [r7, #8]
 8004790:	4013      	ands	r3, r2
 8004792:	2b00      	cmp	r3, #0
 8004794:	d00a      	beq.n	80047ac <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8004796:	2301      	movs	r3, #1
 8004798:	617b      	str	r3, [r7, #20]
 800479a:	e007      	b.n	80047ac <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 800479c:	68fa      	ldr	r2, [r7, #12]
 800479e:	68bb      	ldr	r3, [r7, #8]
 80047a0:	4013      	ands	r3, r2
 80047a2:	68ba      	ldr	r2, [r7, #8]
 80047a4:	429a      	cmp	r2, r3
 80047a6:	d101      	bne.n	80047ac <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 80047a8:	2301      	movs	r3, #1
 80047aa:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 80047ac:	697b      	ldr	r3, [r7, #20]
}
 80047ae:	4618      	mov	r0, r3
 80047b0:	371c      	adds	r7, #28
 80047b2:	46bd      	mov	sp, r7
 80047b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b8:	4770      	bx	lr
	...

080047bc <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b086      	sub	sp, #24
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	60f8      	str	r0, [r7, #12]
 80047c4:	60b9      	str	r1, [r7, #8]
 80047c6:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	68ba      	ldr	r2, [r7, #8]
 80047cc:	68f9      	ldr	r1, [r7, #12]
 80047ce:	4804      	ldr	r0, [pc, #16]	; (80047e0 <xEventGroupSetBitsFromISR+0x24>)
 80047d0:	f002 f8aa 	bl	8006928 <xTimerPendFunctionCallFromISR>
 80047d4:	6178      	str	r0, [r7, #20]

		return xReturn;
 80047d6:	697b      	ldr	r3, [r7, #20]
	}
 80047d8:	4618      	mov	r0, r3
 80047da:	3718      	adds	r7, #24
 80047dc:	46bd      	mov	sp, r7
 80047de:	bd80      	pop	{r7, pc}
 80047e0:	08004743 	.word	0x08004743

080047e4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80047e4:	b480      	push	{r7}
 80047e6:	b083      	sub	sp, #12
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	f103 0208 	add.w	r2, r3, #8
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80047fc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	f103 0208 	add.w	r2, r3, #8
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	f103 0208 	add.w	r2, r3, #8
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2200      	movs	r2, #0
 8004816:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004818:	bf00      	nop
 800481a:	370c      	adds	r7, #12
 800481c:	46bd      	mov	sp, r7
 800481e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004822:	4770      	bx	lr

08004824 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004824:	b480      	push	{r7}
 8004826:	b083      	sub	sp, #12
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2200      	movs	r2, #0
 8004830:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004832:	bf00      	nop
 8004834:	370c      	adds	r7, #12
 8004836:	46bd      	mov	sp, r7
 8004838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483c:	4770      	bx	lr

0800483e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800483e:	b480      	push	{r7}
 8004840:	b085      	sub	sp, #20
 8004842:	af00      	add	r7, sp, #0
 8004844:	6078      	str	r0, [r7, #4]
 8004846:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	685b      	ldr	r3, [r3, #4]
 800484c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	68fa      	ldr	r2, [r7, #12]
 8004852:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	689a      	ldr	r2, [r3, #8]
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	689b      	ldr	r3, [r3, #8]
 8004860:	683a      	ldr	r2, [r7, #0]
 8004862:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	683a      	ldr	r2, [r7, #0]
 8004868:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	687a      	ldr	r2, [r7, #4]
 800486e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	1c5a      	adds	r2, r3, #1
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	601a      	str	r2, [r3, #0]
}
 800487a:	bf00      	nop
 800487c:	3714      	adds	r7, #20
 800487e:	46bd      	mov	sp, r7
 8004880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004884:	4770      	bx	lr

08004886 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004886:	b480      	push	{r7}
 8004888:	b085      	sub	sp, #20
 800488a:	af00      	add	r7, sp, #0
 800488c:	6078      	str	r0, [r7, #4]
 800488e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004896:	68bb      	ldr	r3, [r7, #8]
 8004898:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800489c:	d103      	bne.n	80048a6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	691b      	ldr	r3, [r3, #16]
 80048a2:	60fb      	str	r3, [r7, #12]
 80048a4:	e00c      	b.n	80048c0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	3308      	adds	r3, #8
 80048aa:	60fb      	str	r3, [r7, #12]
 80048ac:	e002      	b.n	80048b4 <vListInsert+0x2e>
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	685b      	ldr	r3, [r3, #4]
 80048b2:	60fb      	str	r3, [r7, #12]
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	68ba      	ldr	r2, [r7, #8]
 80048bc:	429a      	cmp	r2, r3
 80048be:	d2f6      	bcs.n	80048ae <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	685a      	ldr	r2, [r3, #4]
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	683a      	ldr	r2, [r7, #0]
 80048ce:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	68fa      	ldr	r2, [r7, #12]
 80048d4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	683a      	ldr	r2, [r7, #0]
 80048da:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	687a      	ldr	r2, [r7, #4]
 80048e0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	1c5a      	adds	r2, r3, #1
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	601a      	str	r2, [r3, #0]
}
 80048ec:	bf00      	nop
 80048ee:	3714      	adds	r7, #20
 80048f0:	46bd      	mov	sp, r7
 80048f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f6:	4770      	bx	lr

080048f8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80048f8:	b480      	push	{r7}
 80048fa:	b085      	sub	sp, #20
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	691b      	ldr	r3, [r3, #16]
 8004904:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	685b      	ldr	r3, [r3, #4]
 800490a:	687a      	ldr	r2, [r7, #4]
 800490c:	6892      	ldr	r2, [r2, #8]
 800490e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	689b      	ldr	r3, [r3, #8]
 8004914:	687a      	ldr	r2, [r7, #4]
 8004916:	6852      	ldr	r2, [r2, #4]
 8004918:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	687a      	ldr	r2, [r7, #4]
 8004920:	429a      	cmp	r2, r3
 8004922:	d103      	bne.n	800492c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	689a      	ldr	r2, [r3, #8]
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2200      	movs	r2, #0
 8004930:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	1e5a      	subs	r2, r3, #1
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
}
 8004940:	4618      	mov	r0, r3
 8004942:	3714      	adds	r7, #20
 8004944:	46bd      	mov	sp, r7
 8004946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494a:	4770      	bx	lr

0800494c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b084      	sub	sp, #16
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
 8004954:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d10a      	bne.n	8004976 <xQueueGenericReset+0x2a>
	__asm volatile
 8004960:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004964:	f383 8811 	msr	BASEPRI, r3
 8004968:	f3bf 8f6f 	isb	sy
 800496c:	f3bf 8f4f 	dsb	sy
 8004970:	60bb      	str	r3, [r7, #8]
}
 8004972:	bf00      	nop
 8004974:	e7fe      	b.n	8004974 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004976:	f002 f925 	bl	8006bc4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681a      	ldr	r2, [r3, #0]
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004982:	68f9      	ldr	r1, [r7, #12]
 8004984:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004986:	fb01 f303 	mul.w	r3, r1, r3
 800498a:	441a      	add	r2, r3
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	2200      	movs	r2, #0
 8004994:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681a      	ldr	r2, [r3, #0]
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681a      	ldr	r2, [r3, #0]
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049a6:	3b01      	subs	r3, #1
 80049a8:	68f9      	ldr	r1, [r7, #12]
 80049aa:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80049ac:	fb01 f303 	mul.w	r3, r1, r3
 80049b0:	441a      	add	r2, r3
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	22ff      	movs	r2, #255	; 0xff
 80049ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	22ff      	movs	r2, #255	; 0xff
 80049c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d114      	bne.n	80049f6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	691b      	ldr	r3, [r3, #16]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d01a      	beq.n	8004a0a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	3310      	adds	r3, #16
 80049d8:	4618      	mov	r0, r3
 80049da:	f001 f93f 	bl	8005c5c <xTaskRemoveFromEventList>
 80049de:	4603      	mov	r3, r0
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d012      	beq.n	8004a0a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80049e4:	4b0c      	ldr	r3, [pc, #48]	; (8004a18 <xQueueGenericReset+0xcc>)
 80049e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049ea:	601a      	str	r2, [r3, #0]
 80049ec:	f3bf 8f4f 	dsb	sy
 80049f0:	f3bf 8f6f 	isb	sy
 80049f4:	e009      	b.n	8004a0a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	3310      	adds	r3, #16
 80049fa:	4618      	mov	r0, r3
 80049fc:	f7ff fef2 	bl	80047e4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	3324      	adds	r3, #36	; 0x24
 8004a04:	4618      	mov	r0, r3
 8004a06:	f7ff feed 	bl	80047e4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004a0a:	f002 f90b 	bl	8006c24 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004a0e:	2301      	movs	r3, #1
}
 8004a10:	4618      	mov	r0, r3
 8004a12:	3710      	adds	r7, #16
 8004a14:	46bd      	mov	sp, r7
 8004a16:	bd80      	pop	{r7, pc}
 8004a18:	e000ed04 	.word	0xe000ed04

08004a1c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b08e      	sub	sp, #56	; 0x38
 8004a20:	af02      	add	r7, sp, #8
 8004a22:	60f8      	str	r0, [r7, #12]
 8004a24:	60b9      	str	r1, [r7, #8]
 8004a26:	607a      	str	r2, [r7, #4]
 8004a28:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d10a      	bne.n	8004a46 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004a30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a34:	f383 8811 	msr	BASEPRI, r3
 8004a38:	f3bf 8f6f 	isb	sy
 8004a3c:	f3bf 8f4f 	dsb	sy
 8004a40:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004a42:	bf00      	nop
 8004a44:	e7fe      	b.n	8004a44 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d10a      	bne.n	8004a62 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004a4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a50:	f383 8811 	msr	BASEPRI, r3
 8004a54:	f3bf 8f6f 	isb	sy
 8004a58:	f3bf 8f4f 	dsb	sy
 8004a5c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004a5e:	bf00      	nop
 8004a60:	e7fe      	b.n	8004a60 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d002      	beq.n	8004a6e <xQueueGenericCreateStatic+0x52>
 8004a68:	68bb      	ldr	r3, [r7, #8]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d001      	beq.n	8004a72 <xQueueGenericCreateStatic+0x56>
 8004a6e:	2301      	movs	r3, #1
 8004a70:	e000      	b.n	8004a74 <xQueueGenericCreateStatic+0x58>
 8004a72:	2300      	movs	r3, #0
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d10a      	bne.n	8004a8e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004a78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a7c:	f383 8811 	msr	BASEPRI, r3
 8004a80:	f3bf 8f6f 	isb	sy
 8004a84:	f3bf 8f4f 	dsb	sy
 8004a88:	623b      	str	r3, [r7, #32]
}
 8004a8a:	bf00      	nop
 8004a8c:	e7fe      	b.n	8004a8c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d102      	bne.n	8004a9a <xQueueGenericCreateStatic+0x7e>
 8004a94:	68bb      	ldr	r3, [r7, #8]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d101      	bne.n	8004a9e <xQueueGenericCreateStatic+0x82>
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	e000      	b.n	8004aa0 <xQueueGenericCreateStatic+0x84>
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d10a      	bne.n	8004aba <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004aa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aa8:	f383 8811 	msr	BASEPRI, r3
 8004aac:	f3bf 8f6f 	isb	sy
 8004ab0:	f3bf 8f4f 	dsb	sy
 8004ab4:	61fb      	str	r3, [r7, #28]
}
 8004ab6:	bf00      	nop
 8004ab8:	e7fe      	b.n	8004ab8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004aba:	2350      	movs	r3, #80	; 0x50
 8004abc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004abe:	697b      	ldr	r3, [r7, #20]
 8004ac0:	2b50      	cmp	r3, #80	; 0x50
 8004ac2:	d00a      	beq.n	8004ada <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004ac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ac8:	f383 8811 	msr	BASEPRI, r3
 8004acc:	f3bf 8f6f 	isb	sy
 8004ad0:	f3bf 8f4f 	dsb	sy
 8004ad4:	61bb      	str	r3, [r7, #24]
}
 8004ad6:	bf00      	nop
 8004ad8:	e7fe      	b.n	8004ad8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004ada:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004ae0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d00d      	beq.n	8004b02 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004ae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ae8:	2201      	movs	r2, #1
 8004aea:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004aee:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004af2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004af4:	9300      	str	r3, [sp, #0]
 8004af6:	4613      	mov	r3, r2
 8004af8:	687a      	ldr	r2, [r7, #4]
 8004afa:	68b9      	ldr	r1, [r7, #8]
 8004afc:	68f8      	ldr	r0, [r7, #12]
 8004afe:	f000 f805 	bl	8004b0c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004b02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004b04:	4618      	mov	r0, r3
 8004b06:	3730      	adds	r7, #48	; 0x30
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	bd80      	pop	{r7, pc}

08004b0c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b084      	sub	sp, #16
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	60f8      	str	r0, [r7, #12]
 8004b14:	60b9      	str	r1, [r7, #8]
 8004b16:	607a      	str	r2, [r7, #4]
 8004b18:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004b1a:	68bb      	ldr	r3, [r7, #8]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d103      	bne.n	8004b28 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004b20:	69bb      	ldr	r3, [r7, #24]
 8004b22:	69ba      	ldr	r2, [r7, #24]
 8004b24:	601a      	str	r2, [r3, #0]
 8004b26:	e002      	b.n	8004b2e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004b28:	69bb      	ldr	r3, [r7, #24]
 8004b2a:	687a      	ldr	r2, [r7, #4]
 8004b2c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004b2e:	69bb      	ldr	r3, [r7, #24]
 8004b30:	68fa      	ldr	r2, [r7, #12]
 8004b32:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004b34:	69bb      	ldr	r3, [r7, #24]
 8004b36:	68ba      	ldr	r2, [r7, #8]
 8004b38:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004b3a:	2101      	movs	r1, #1
 8004b3c:	69b8      	ldr	r0, [r7, #24]
 8004b3e:	f7ff ff05 	bl	800494c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004b42:	69bb      	ldr	r3, [r7, #24]
 8004b44:	78fa      	ldrb	r2, [r7, #3]
 8004b46:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004b4a:	bf00      	nop
 8004b4c:	3710      	adds	r7, #16
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	bd80      	pop	{r7, pc}
	...

08004b54 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b08e      	sub	sp, #56	; 0x38
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	60f8      	str	r0, [r7, #12]
 8004b5c:	60b9      	str	r1, [r7, #8]
 8004b5e:	607a      	str	r2, [r7, #4]
 8004b60:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004b62:	2300      	movs	r3, #0
 8004b64:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d10a      	bne.n	8004b86 <xQueueGenericSend+0x32>
	__asm volatile
 8004b70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b74:	f383 8811 	msr	BASEPRI, r3
 8004b78:	f3bf 8f6f 	isb	sy
 8004b7c:	f3bf 8f4f 	dsb	sy
 8004b80:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004b82:	bf00      	nop
 8004b84:	e7fe      	b.n	8004b84 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004b86:	68bb      	ldr	r3, [r7, #8]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d103      	bne.n	8004b94 <xQueueGenericSend+0x40>
 8004b8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d101      	bne.n	8004b98 <xQueueGenericSend+0x44>
 8004b94:	2301      	movs	r3, #1
 8004b96:	e000      	b.n	8004b9a <xQueueGenericSend+0x46>
 8004b98:	2300      	movs	r3, #0
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d10a      	bne.n	8004bb4 <xQueueGenericSend+0x60>
	__asm volatile
 8004b9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ba2:	f383 8811 	msr	BASEPRI, r3
 8004ba6:	f3bf 8f6f 	isb	sy
 8004baa:	f3bf 8f4f 	dsb	sy
 8004bae:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004bb0:	bf00      	nop
 8004bb2:	e7fe      	b.n	8004bb2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	2b02      	cmp	r3, #2
 8004bb8:	d103      	bne.n	8004bc2 <xQueueGenericSend+0x6e>
 8004bba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bbe:	2b01      	cmp	r3, #1
 8004bc0:	d101      	bne.n	8004bc6 <xQueueGenericSend+0x72>
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	e000      	b.n	8004bc8 <xQueueGenericSend+0x74>
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d10a      	bne.n	8004be2 <xQueueGenericSend+0x8e>
	__asm volatile
 8004bcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bd0:	f383 8811 	msr	BASEPRI, r3
 8004bd4:	f3bf 8f6f 	isb	sy
 8004bd8:	f3bf 8f4f 	dsb	sy
 8004bdc:	623b      	str	r3, [r7, #32]
}
 8004bde:	bf00      	nop
 8004be0:	e7fe      	b.n	8004be0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004be2:	f001 fa5b 	bl	800609c <xTaskGetSchedulerState>
 8004be6:	4603      	mov	r3, r0
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d102      	bne.n	8004bf2 <xQueueGenericSend+0x9e>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d101      	bne.n	8004bf6 <xQueueGenericSend+0xa2>
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	e000      	b.n	8004bf8 <xQueueGenericSend+0xa4>
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d10a      	bne.n	8004c12 <xQueueGenericSend+0xbe>
	__asm volatile
 8004bfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c00:	f383 8811 	msr	BASEPRI, r3
 8004c04:	f3bf 8f6f 	isb	sy
 8004c08:	f3bf 8f4f 	dsb	sy
 8004c0c:	61fb      	str	r3, [r7, #28]
}
 8004c0e:	bf00      	nop
 8004c10:	e7fe      	b.n	8004c10 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004c12:	f001 ffd7 	bl	8006bc4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004c16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c1e:	429a      	cmp	r2, r3
 8004c20:	d302      	bcc.n	8004c28 <xQueueGenericSend+0xd4>
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	2b02      	cmp	r3, #2
 8004c26:	d129      	bne.n	8004c7c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004c28:	683a      	ldr	r2, [r7, #0]
 8004c2a:	68b9      	ldr	r1, [r7, #8]
 8004c2c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004c2e:	f000 fa0b 	bl	8005048 <prvCopyDataToQueue>
 8004c32:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004c34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d010      	beq.n	8004c5e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004c3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c3e:	3324      	adds	r3, #36	; 0x24
 8004c40:	4618      	mov	r0, r3
 8004c42:	f001 f80b 	bl	8005c5c <xTaskRemoveFromEventList>
 8004c46:	4603      	mov	r3, r0
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d013      	beq.n	8004c74 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004c4c:	4b3f      	ldr	r3, [pc, #252]	; (8004d4c <xQueueGenericSend+0x1f8>)
 8004c4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c52:	601a      	str	r2, [r3, #0]
 8004c54:	f3bf 8f4f 	dsb	sy
 8004c58:	f3bf 8f6f 	isb	sy
 8004c5c:	e00a      	b.n	8004c74 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004c5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d007      	beq.n	8004c74 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004c64:	4b39      	ldr	r3, [pc, #228]	; (8004d4c <xQueueGenericSend+0x1f8>)
 8004c66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c6a:	601a      	str	r2, [r3, #0]
 8004c6c:	f3bf 8f4f 	dsb	sy
 8004c70:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004c74:	f001 ffd6 	bl	8006c24 <vPortExitCritical>
				return pdPASS;
 8004c78:	2301      	movs	r3, #1
 8004c7a:	e063      	b.n	8004d44 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d103      	bne.n	8004c8a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004c82:	f001 ffcf 	bl	8006c24 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004c86:	2300      	movs	r3, #0
 8004c88:	e05c      	b.n	8004d44 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004c8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d106      	bne.n	8004c9e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004c90:	f107 0314 	add.w	r3, r7, #20
 8004c94:	4618      	mov	r0, r3
 8004c96:	f001 f8a7 	bl	8005de8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004c9e:	f001 ffc1 	bl	8006c24 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004ca2:	f000 fd7b 	bl	800579c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004ca6:	f001 ff8d 	bl	8006bc4 <vPortEnterCritical>
 8004caa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004cb0:	b25b      	sxtb	r3, r3
 8004cb2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004cb6:	d103      	bne.n	8004cc0 <xQueueGenericSend+0x16c>
 8004cb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cba:	2200      	movs	r2, #0
 8004cbc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004cc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cc2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004cc6:	b25b      	sxtb	r3, r3
 8004cc8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004ccc:	d103      	bne.n	8004cd6 <xQueueGenericSend+0x182>
 8004cce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004cd6:	f001 ffa5 	bl	8006c24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004cda:	1d3a      	adds	r2, r7, #4
 8004cdc:	f107 0314 	add.w	r3, r7, #20
 8004ce0:	4611      	mov	r1, r2
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	f001 f896 	bl	8005e14 <xTaskCheckForTimeOut>
 8004ce8:	4603      	mov	r3, r0
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d124      	bne.n	8004d38 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004cee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004cf0:	f000 faa2 	bl	8005238 <prvIsQueueFull>
 8004cf4:	4603      	mov	r3, r0
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d018      	beq.n	8004d2c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004cfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cfc:	3310      	adds	r3, #16
 8004cfe:	687a      	ldr	r2, [r7, #4]
 8004d00:	4611      	mov	r1, r2
 8004d02:	4618      	mov	r0, r3
 8004d04:	f000 ff1e 	bl	8005b44 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004d08:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004d0a:	f000 fa2d 	bl	8005168 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004d0e:	f000 fd53 	bl	80057b8 <xTaskResumeAll>
 8004d12:	4603      	mov	r3, r0
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	f47f af7c 	bne.w	8004c12 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8004d1a:	4b0c      	ldr	r3, [pc, #48]	; (8004d4c <xQueueGenericSend+0x1f8>)
 8004d1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d20:	601a      	str	r2, [r3, #0]
 8004d22:	f3bf 8f4f 	dsb	sy
 8004d26:	f3bf 8f6f 	isb	sy
 8004d2a:	e772      	b.n	8004c12 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004d2c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004d2e:	f000 fa1b 	bl	8005168 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004d32:	f000 fd41 	bl	80057b8 <xTaskResumeAll>
 8004d36:	e76c      	b.n	8004c12 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004d38:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004d3a:	f000 fa15 	bl	8005168 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004d3e:	f000 fd3b 	bl	80057b8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004d42:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004d44:	4618      	mov	r0, r3
 8004d46:	3738      	adds	r7, #56	; 0x38
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	bd80      	pop	{r7, pc}
 8004d4c:	e000ed04 	.word	0xe000ed04

08004d50 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b090      	sub	sp, #64	; 0x40
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	60f8      	str	r0, [r7, #12]
 8004d58:	60b9      	str	r1, [r7, #8]
 8004d5a:	607a      	str	r2, [r7, #4]
 8004d5c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8004d62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d10a      	bne.n	8004d7e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004d68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d6c:	f383 8811 	msr	BASEPRI, r3
 8004d70:	f3bf 8f6f 	isb	sy
 8004d74:	f3bf 8f4f 	dsb	sy
 8004d78:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004d7a:	bf00      	nop
 8004d7c:	e7fe      	b.n	8004d7c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004d7e:	68bb      	ldr	r3, [r7, #8]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d103      	bne.n	8004d8c <xQueueGenericSendFromISR+0x3c>
 8004d84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d101      	bne.n	8004d90 <xQueueGenericSendFromISR+0x40>
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	e000      	b.n	8004d92 <xQueueGenericSendFromISR+0x42>
 8004d90:	2300      	movs	r3, #0
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d10a      	bne.n	8004dac <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8004d96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d9a:	f383 8811 	msr	BASEPRI, r3
 8004d9e:	f3bf 8f6f 	isb	sy
 8004da2:	f3bf 8f4f 	dsb	sy
 8004da6:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004da8:	bf00      	nop
 8004daa:	e7fe      	b.n	8004daa <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	2b02      	cmp	r3, #2
 8004db0:	d103      	bne.n	8004dba <xQueueGenericSendFromISR+0x6a>
 8004db2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004db4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004db6:	2b01      	cmp	r3, #1
 8004db8:	d101      	bne.n	8004dbe <xQueueGenericSendFromISR+0x6e>
 8004dba:	2301      	movs	r3, #1
 8004dbc:	e000      	b.n	8004dc0 <xQueueGenericSendFromISR+0x70>
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d10a      	bne.n	8004dda <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8004dc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dc8:	f383 8811 	msr	BASEPRI, r3
 8004dcc:	f3bf 8f6f 	isb	sy
 8004dd0:	f3bf 8f4f 	dsb	sy
 8004dd4:	623b      	str	r3, [r7, #32]
}
 8004dd6:	bf00      	nop
 8004dd8:	e7fe      	b.n	8004dd8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004dda:	f001 ffd5 	bl	8006d88 <vPortValidateInterruptPriority>
	__asm volatile
 8004dde:	f3ef 8211 	mrs	r2, BASEPRI
 8004de2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004de6:	f383 8811 	msr	BASEPRI, r3
 8004dea:	f3bf 8f6f 	isb	sy
 8004dee:	f3bf 8f4f 	dsb	sy
 8004df2:	61fa      	str	r2, [r7, #28]
 8004df4:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8004df6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004df8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004dfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dfc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004dfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e02:	429a      	cmp	r2, r3
 8004e04:	d302      	bcc.n	8004e0c <xQueueGenericSendFromISR+0xbc>
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	2b02      	cmp	r3, #2
 8004e0a:	d12f      	bne.n	8004e6c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004e0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e0e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004e12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004e16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e1a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004e1c:	683a      	ldr	r2, [r7, #0]
 8004e1e:	68b9      	ldr	r1, [r7, #8]
 8004e20:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004e22:	f000 f911 	bl	8005048 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004e26:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8004e2a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004e2e:	d112      	bne.n	8004e56 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004e30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d016      	beq.n	8004e66 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004e38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e3a:	3324      	adds	r3, #36	; 0x24
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	f000 ff0d 	bl	8005c5c <xTaskRemoveFromEventList>
 8004e42:	4603      	mov	r3, r0
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d00e      	beq.n	8004e66 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d00b      	beq.n	8004e66 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2201      	movs	r2, #1
 8004e52:	601a      	str	r2, [r3, #0]
 8004e54:	e007      	b.n	8004e66 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004e56:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004e5a:	3301      	adds	r3, #1
 8004e5c:	b2db      	uxtb	r3, r3
 8004e5e:	b25a      	sxtb	r2, r3
 8004e60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e62:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004e66:	2301      	movs	r3, #1
 8004e68:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8004e6a:	e001      	b.n	8004e70 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e72:	617b      	str	r3, [r7, #20]
	__asm volatile
 8004e74:	697b      	ldr	r3, [r7, #20]
 8004e76:	f383 8811 	msr	BASEPRI, r3
}
 8004e7a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004e7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004e7e:	4618      	mov	r0, r3
 8004e80:	3740      	adds	r7, #64	; 0x40
 8004e82:	46bd      	mov	sp, r7
 8004e84:	bd80      	pop	{r7, pc}
	...

08004e88 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b08c      	sub	sp, #48	; 0x30
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	60f8      	str	r0, [r7, #12]
 8004e90:	60b9      	str	r1, [r7, #8]
 8004e92:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004e94:	2300      	movs	r3, #0
 8004e96:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004e9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d10a      	bne.n	8004eb8 <xQueueReceive+0x30>
	__asm volatile
 8004ea2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ea6:	f383 8811 	msr	BASEPRI, r3
 8004eaa:	f3bf 8f6f 	isb	sy
 8004eae:	f3bf 8f4f 	dsb	sy
 8004eb2:	623b      	str	r3, [r7, #32]
}
 8004eb4:	bf00      	nop
 8004eb6:	e7fe      	b.n	8004eb6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004eb8:	68bb      	ldr	r3, [r7, #8]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d103      	bne.n	8004ec6 <xQueueReceive+0x3e>
 8004ebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d101      	bne.n	8004eca <xQueueReceive+0x42>
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	e000      	b.n	8004ecc <xQueueReceive+0x44>
 8004eca:	2300      	movs	r3, #0
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d10a      	bne.n	8004ee6 <xQueueReceive+0x5e>
	__asm volatile
 8004ed0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ed4:	f383 8811 	msr	BASEPRI, r3
 8004ed8:	f3bf 8f6f 	isb	sy
 8004edc:	f3bf 8f4f 	dsb	sy
 8004ee0:	61fb      	str	r3, [r7, #28]
}
 8004ee2:	bf00      	nop
 8004ee4:	e7fe      	b.n	8004ee4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004ee6:	f001 f8d9 	bl	800609c <xTaskGetSchedulerState>
 8004eea:	4603      	mov	r3, r0
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d102      	bne.n	8004ef6 <xQueueReceive+0x6e>
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d101      	bne.n	8004efa <xQueueReceive+0x72>
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	e000      	b.n	8004efc <xQueueReceive+0x74>
 8004efa:	2300      	movs	r3, #0
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d10a      	bne.n	8004f16 <xQueueReceive+0x8e>
	__asm volatile
 8004f00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f04:	f383 8811 	msr	BASEPRI, r3
 8004f08:	f3bf 8f6f 	isb	sy
 8004f0c:	f3bf 8f4f 	dsb	sy
 8004f10:	61bb      	str	r3, [r7, #24]
}
 8004f12:	bf00      	nop
 8004f14:	e7fe      	b.n	8004f14 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004f16:	f001 fe55 	bl	8006bc4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004f1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f1e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d01f      	beq.n	8004f66 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004f26:	68b9      	ldr	r1, [r7, #8]
 8004f28:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f2a:	f000 f8f7 	bl	800511c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f30:	1e5a      	subs	r2, r3, #1
 8004f32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f34:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004f36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f38:	691b      	ldr	r3, [r3, #16]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d00f      	beq.n	8004f5e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004f3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f40:	3310      	adds	r3, #16
 8004f42:	4618      	mov	r0, r3
 8004f44:	f000 fe8a 	bl	8005c5c <xTaskRemoveFromEventList>
 8004f48:	4603      	mov	r3, r0
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d007      	beq.n	8004f5e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004f4e:	4b3d      	ldr	r3, [pc, #244]	; (8005044 <xQueueReceive+0x1bc>)
 8004f50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f54:	601a      	str	r2, [r3, #0]
 8004f56:	f3bf 8f4f 	dsb	sy
 8004f5a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004f5e:	f001 fe61 	bl	8006c24 <vPortExitCritical>
				return pdPASS;
 8004f62:	2301      	movs	r3, #1
 8004f64:	e069      	b.n	800503a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d103      	bne.n	8004f74 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004f6c:	f001 fe5a 	bl	8006c24 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004f70:	2300      	movs	r3, #0
 8004f72:	e062      	b.n	800503a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004f74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d106      	bne.n	8004f88 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004f7a:	f107 0310 	add.w	r3, r7, #16
 8004f7e:	4618      	mov	r0, r3
 8004f80:	f000 ff32 	bl	8005de8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004f84:	2301      	movs	r3, #1
 8004f86:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004f88:	f001 fe4c 	bl	8006c24 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004f8c:	f000 fc06 	bl	800579c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004f90:	f001 fe18 	bl	8006bc4 <vPortEnterCritical>
 8004f94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f96:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004f9a:	b25b      	sxtb	r3, r3
 8004f9c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004fa0:	d103      	bne.n	8004faa <xQueueReceive+0x122>
 8004fa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004faa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004fb0:	b25b      	sxtb	r3, r3
 8004fb2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004fb6:	d103      	bne.n	8004fc0 <xQueueReceive+0x138>
 8004fb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fba:	2200      	movs	r2, #0
 8004fbc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004fc0:	f001 fe30 	bl	8006c24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004fc4:	1d3a      	adds	r2, r7, #4
 8004fc6:	f107 0310 	add.w	r3, r7, #16
 8004fca:	4611      	mov	r1, r2
 8004fcc:	4618      	mov	r0, r3
 8004fce:	f000 ff21 	bl	8005e14 <xTaskCheckForTimeOut>
 8004fd2:	4603      	mov	r3, r0
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d123      	bne.n	8005020 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004fd8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004fda:	f000 f917 	bl	800520c <prvIsQueueEmpty>
 8004fde:	4603      	mov	r3, r0
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d017      	beq.n	8005014 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004fe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fe6:	3324      	adds	r3, #36	; 0x24
 8004fe8:	687a      	ldr	r2, [r7, #4]
 8004fea:	4611      	mov	r1, r2
 8004fec:	4618      	mov	r0, r3
 8004fee:	f000 fda9 	bl	8005b44 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004ff2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004ff4:	f000 f8b8 	bl	8005168 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004ff8:	f000 fbde 	bl	80057b8 <xTaskResumeAll>
 8004ffc:	4603      	mov	r3, r0
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d189      	bne.n	8004f16 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005002:	4b10      	ldr	r3, [pc, #64]	; (8005044 <xQueueReceive+0x1bc>)
 8005004:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005008:	601a      	str	r2, [r3, #0]
 800500a:	f3bf 8f4f 	dsb	sy
 800500e:	f3bf 8f6f 	isb	sy
 8005012:	e780      	b.n	8004f16 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005014:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005016:	f000 f8a7 	bl	8005168 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800501a:	f000 fbcd 	bl	80057b8 <xTaskResumeAll>
 800501e:	e77a      	b.n	8004f16 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005020:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005022:	f000 f8a1 	bl	8005168 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005026:	f000 fbc7 	bl	80057b8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800502a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800502c:	f000 f8ee 	bl	800520c <prvIsQueueEmpty>
 8005030:	4603      	mov	r3, r0
 8005032:	2b00      	cmp	r3, #0
 8005034:	f43f af6f 	beq.w	8004f16 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005038:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800503a:	4618      	mov	r0, r3
 800503c:	3730      	adds	r7, #48	; 0x30
 800503e:	46bd      	mov	sp, r7
 8005040:	bd80      	pop	{r7, pc}
 8005042:	bf00      	nop
 8005044:	e000ed04 	.word	0xe000ed04

08005048 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005048:	b580      	push	{r7, lr}
 800504a:	b086      	sub	sp, #24
 800504c:	af00      	add	r7, sp, #0
 800504e:	60f8      	str	r0, [r7, #12]
 8005050:	60b9      	str	r1, [r7, #8]
 8005052:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005054:	2300      	movs	r3, #0
 8005056:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800505c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005062:	2b00      	cmp	r3, #0
 8005064:	d10d      	bne.n	8005082 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d14d      	bne.n	800510a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	689b      	ldr	r3, [r3, #8]
 8005072:	4618      	mov	r0, r3
 8005074:	f001 f830 	bl	80060d8 <xTaskPriorityDisinherit>
 8005078:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	2200      	movs	r2, #0
 800507e:	609a      	str	r2, [r3, #8]
 8005080:	e043      	b.n	800510a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d119      	bne.n	80050bc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	6858      	ldr	r0, [r3, #4]
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005090:	461a      	mov	r2, r3
 8005092:	68b9      	ldr	r1, [r7, #8]
 8005094:	f002 f8c6 	bl	8007224 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	685a      	ldr	r2, [r3, #4]
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050a0:	441a      	add	r2, r3
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	685a      	ldr	r2, [r3, #4]
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	689b      	ldr	r3, [r3, #8]
 80050ae:	429a      	cmp	r2, r3
 80050b0:	d32b      	bcc.n	800510a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681a      	ldr	r2, [r3, #0]
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	605a      	str	r2, [r3, #4]
 80050ba:	e026      	b.n	800510a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	68d8      	ldr	r0, [r3, #12]
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050c4:	461a      	mov	r2, r3
 80050c6:	68b9      	ldr	r1, [r7, #8]
 80050c8:	f002 f8ac 	bl	8007224 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	68da      	ldr	r2, [r3, #12]
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050d4:	425b      	negs	r3, r3
 80050d6:	441a      	add	r2, r3
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	68da      	ldr	r2, [r3, #12]
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	429a      	cmp	r2, r3
 80050e6:	d207      	bcs.n	80050f8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	689a      	ldr	r2, [r3, #8]
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050f0:	425b      	negs	r3, r3
 80050f2:	441a      	add	r2, r3
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2b02      	cmp	r3, #2
 80050fc:	d105      	bne.n	800510a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80050fe:	693b      	ldr	r3, [r7, #16]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d002      	beq.n	800510a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005104:	693b      	ldr	r3, [r7, #16]
 8005106:	3b01      	subs	r3, #1
 8005108:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800510a:	693b      	ldr	r3, [r7, #16]
 800510c:	1c5a      	adds	r2, r3, #1
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005112:	697b      	ldr	r3, [r7, #20]
}
 8005114:	4618      	mov	r0, r3
 8005116:	3718      	adds	r7, #24
 8005118:	46bd      	mov	sp, r7
 800511a:	bd80      	pop	{r7, pc}

0800511c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b082      	sub	sp, #8
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
 8005124:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800512a:	2b00      	cmp	r3, #0
 800512c:	d018      	beq.n	8005160 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	68da      	ldr	r2, [r3, #12]
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005136:	441a      	add	r2, r3
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	68da      	ldr	r2, [r3, #12]
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	689b      	ldr	r3, [r3, #8]
 8005144:	429a      	cmp	r2, r3
 8005146:	d303      	bcc.n	8005150 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681a      	ldr	r2, [r3, #0]
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	68d9      	ldr	r1, [r3, #12]
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005158:	461a      	mov	r2, r3
 800515a:	6838      	ldr	r0, [r7, #0]
 800515c:	f002 f862 	bl	8007224 <memcpy>
	}
}
 8005160:	bf00      	nop
 8005162:	3708      	adds	r7, #8
 8005164:	46bd      	mov	sp, r7
 8005166:	bd80      	pop	{r7, pc}

08005168 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005168:	b580      	push	{r7, lr}
 800516a:	b084      	sub	sp, #16
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005170:	f001 fd28 	bl	8006bc4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800517a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800517c:	e011      	b.n	80051a2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005182:	2b00      	cmp	r3, #0
 8005184:	d012      	beq.n	80051ac <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	3324      	adds	r3, #36	; 0x24
 800518a:	4618      	mov	r0, r3
 800518c:	f000 fd66 	bl	8005c5c <xTaskRemoveFromEventList>
 8005190:	4603      	mov	r3, r0
 8005192:	2b00      	cmp	r3, #0
 8005194:	d001      	beq.n	800519a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005196:	f000 fe9f 	bl	8005ed8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800519a:	7bfb      	ldrb	r3, [r7, #15]
 800519c:	3b01      	subs	r3, #1
 800519e:	b2db      	uxtb	r3, r3
 80051a0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80051a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	dce9      	bgt.n	800517e <prvUnlockQueue+0x16>
 80051aa:	e000      	b.n	80051ae <prvUnlockQueue+0x46>
					break;
 80051ac:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	22ff      	movs	r2, #255	; 0xff
 80051b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80051b6:	f001 fd35 	bl	8006c24 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80051ba:	f001 fd03 	bl	8006bc4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80051c4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80051c6:	e011      	b.n	80051ec <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	691b      	ldr	r3, [r3, #16]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d012      	beq.n	80051f6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	3310      	adds	r3, #16
 80051d4:	4618      	mov	r0, r3
 80051d6:	f000 fd41 	bl	8005c5c <xTaskRemoveFromEventList>
 80051da:	4603      	mov	r3, r0
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d001      	beq.n	80051e4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80051e0:	f000 fe7a 	bl	8005ed8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80051e4:	7bbb      	ldrb	r3, [r7, #14]
 80051e6:	3b01      	subs	r3, #1
 80051e8:	b2db      	uxtb	r3, r3
 80051ea:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80051ec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	dce9      	bgt.n	80051c8 <prvUnlockQueue+0x60>
 80051f4:	e000      	b.n	80051f8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80051f6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	22ff      	movs	r2, #255	; 0xff
 80051fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005200:	f001 fd10 	bl	8006c24 <vPortExitCritical>
}
 8005204:	bf00      	nop
 8005206:	3710      	adds	r7, #16
 8005208:	46bd      	mov	sp, r7
 800520a:	bd80      	pop	{r7, pc}

0800520c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b084      	sub	sp, #16
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005214:	f001 fcd6 	bl	8006bc4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800521c:	2b00      	cmp	r3, #0
 800521e:	d102      	bne.n	8005226 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005220:	2301      	movs	r3, #1
 8005222:	60fb      	str	r3, [r7, #12]
 8005224:	e001      	b.n	800522a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005226:	2300      	movs	r3, #0
 8005228:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800522a:	f001 fcfb 	bl	8006c24 <vPortExitCritical>

	return xReturn;
 800522e:	68fb      	ldr	r3, [r7, #12]
}
 8005230:	4618      	mov	r0, r3
 8005232:	3710      	adds	r7, #16
 8005234:	46bd      	mov	sp, r7
 8005236:	bd80      	pop	{r7, pc}

08005238 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b084      	sub	sp, #16
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005240:	f001 fcc0 	bl	8006bc4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800524c:	429a      	cmp	r2, r3
 800524e:	d102      	bne.n	8005256 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005250:	2301      	movs	r3, #1
 8005252:	60fb      	str	r3, [r7, #12]
 8005254:	e001      	b.n	800525a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005256:	2300      	movs	r3, #0
 8005258:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800525a:	f001 fce3 	bl	8006c24 <vPortExitCritical>

	return xReturn;
 800525e:	68fb      	ldr	r3, [r7, #12]
}
 8005260:	4618      	mov	r0, r3
 8005262:	3710      	adds	r7, #16
 8005264:	46bd      	mov	sp, r7
 8005266:	bd80      	pop	{r7, pc}

08005268 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005268:	b480      	push	{r7}
 800526a:	b085      	sub	sp, #20
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
 8005270:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005272:	2300      	movs	r3, #0
 8005274:	60fb      	str	r3, [r7, #12]
 8005276:	e014      	b.n	80052a2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005278:	4a0f      	ldr	r2, [pc, #60]	; (80052b8 <vQueueAddToRegistry+0x50>)
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d10b      	bne.n	800529c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005284:	490c      	ldr	r1, [pc, #48]	; (80052b8 <vQueueAddToRegistry+0x50>)
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	683a      	ldr	r2, [r7, #0]
 800528a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800528e:	4a0a      	ldr	r2, [pc, #40]	; (80052b8 <vQueueAddToRegistry+0x50>)
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	00db      	lsls	r3, r3, #3
 8005294:	4413      	add	r3, r2
 8005296:	687a      	ldr	r2, [r7, #4]
 8005298:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800529a:	e006      	b.n	80052aa <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	3301      	adds	r3, #1
 80052a0:	60fb      	str	r3, [r7, #12]
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	2b07      	cmp	r3, #7
 80052a6:	d9e7      	bls.n	8005278 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80052a8:	bf00      	nop
 80052aa:	bf00      	nop
 80052ac:	3714      	adds	r7, #20
 80052ae:	46bd      	mov	sp, r7
 80052b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b4:	4770      	bx	lr
 80052b6:	bf00      	nop
 80052b8:	20004acc 	.word	0x20004acc

080052bc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b086      	sub	sp, #24
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	60f8      	str	r0, [r7, #12]
 80052c4:	60b9      	str	r1, [r7, #8]
 80052c6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80052cc:	f001 fc7a 	bl	8006bc4 <vPortEnterCritical>
 80052d0:	697b      	ldr	r3, [r7, #20]
 80052d2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80052d6:	b25b      	sxtb	r3, r3
 80052d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80052dc:	d103      	bne.n	80052e6 <vQueueWaitForMessageRestricted+0x2a>
 80052de:	697b      	ldr	r3, [r7, #20]
 80052e0:	2200      	movs	r2, #0
 80052e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80052e6:	697b      	ldr	r3, [r7, #20]
 80052e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80052ec:	b25b      	sxtb	r3, r3
 80052ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80052f2:	d103      	bne.n	80052fc <vQueueWaitForMessageRestricted+0x40>
 80052f4:	697b      	ldr	r3, [r7, #20]
 80052f6:	2200      	movs	r2, #0
 80052f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80052fc:	f001 fc92 	bl	8006c24 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005300:	697b      	ldr	r3, [r7, #20]
 8005302:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005304:	2b00      	cmp	r3, #0
 8005306:	d106      	bne.n	8005316 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005308:	697b      	ldr	r3, [r7, #20]
 800530a:	3324      	adds	r3, #36	; 0x24
 800530c:	687a      	ldr	r2, [r7, #4]
 800530e:	68b9      	ldr	r1, [r7, #8]
 8005310:	4618      	mov	r0, r3
 8005312:	f000 fc77 	bl	8005c04 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005316:	6978      	ldr	r0, [r7, #20]
 8005318:	f7ff ff26 	bl	8005168 <prvUnlockQueue>
	}
 800531c:	bf00      	nop
 800531e:	3718      	adds	r7, #24
 8005320:	46bd      	mov	sp, r7
 8005322:	bd80      	pop	{r7, pc}

08005324 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005324:	b580      	push	{r7, lr}
 8005326:	b08e      	sub	sp, #56	; 0x38
 8005328:	af04      	add	r7, sp, #16
 800532a:	60f8      	str	r0, [r7, #12]
 800532c:	60b9      	str	r1, [r7, #8]
 800532e:	607a      	str	r2, [r7, #4]
 8005330:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005332:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005334:	2b00      	cmp	r3, #0
 8005336:	d10a      	bne.n	800534e <xTaskCreateStatic+0x2a>
	__asm volatile
 8005338:	f04f 0350 	mov.w	r3, #80	; 0x50
 800533c:	f383 8811 	msr	BASEPRI, r3
 8005340:	f3bf 8f6f 	isb	sy
 8005344:	f3bf 8f4f 	dsb	sy
 8005348:	623b      	str	r3, [r7, #32]
}
 800534a:	bf00      	nop
 800534c:	e7fe      	b.n	800534c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800534e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005350:	2b00      	cmp	r3, #0
 8005352:	d10a      	bne.n	800536a <xTaskCreateStatic+0x46>
	__asm volatile
 8005354:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005358:	f383 8811 	msr	BASEPRI, r3
 800535c:	f3bf 8f6f 	isb	sy
 8005360:	f3bf 8f4f 	dsb	sy
 8005364:	61fb      	str	r3, [r7, #28]
}
 8005366:	bf00      	nop
 8005368:	e7fe      	b.n	8005368 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800536a:	235c      	movs	r3, #92	; 0x5c
 800536c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800536e:	693b      	ldr	r3, [r7, #16]
 8005370:	2b5c      	cmp	r3, #92	; 0x5c
 8005372:	d00a      	beq.n	800538a <xTaskCreateStatic+0x66>
	__asm volatile
 8005374:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005378:	f383 8811 	msr	BASEPRI, r3
 800537c:	f3bf 8f6f 	isb	sy
 8005380:	f3bf 8f4f 	dsb	sy
 8005384:	61bb      	str	r3, [r7, #24]
}
 8005386:	bf00      	nop
 8005388:	e7fe      	b.n	8005388 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800538a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800538c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800538e:	2b00      	cmp	r3, #0
 8005390:	d01e      	beq.n	80053d0 <xTaskCreateStatic+0xac>
 8005392:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005394:	2b00      	cmp	r3, #0
 8005396:	d01b      	beq.n	80053d0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005398:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800539a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800539c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800539e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80053a0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80053a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053a4:	2202      	movs	r2, #2
 80053a6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80053aa:	2300      	movs	r3, #0
 80053ac:	9303      	str	r3, [sp, #12]
 80053ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053b0:	9302      	str	r3, [sp, #8]
 80053b2:	f107 0314 	add.w	r3, r7, #20
 80053b6:	9301      	str	r3, [sp, #4]
 80053b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053ba:	9300      	str	r3, [sp, #0]
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	687a      	ldr	r2, [r7, #4]
 80053c0:	68b9      	ldr	r1, [r7, #8]
 80053c2:	68f8      	ldr	r0, [r7, #12]
 80053c4:	f000 f850 	bl	8005468 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80053c8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80053ca:	f000 f8dd 	bl	8005588 <prvAddNewTaskToReadyList>
 80053ce:	e001      	b.n	80053d4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80053d0:	2300      	movs	r3, #0
 80053d2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80053d4:	697b      	ldr	r3, [r7, #20]
	}
 80053d6:	4618      	mov	r0, r3
 80053d8:	3728      	adds	r7, #40	; 0x28
 80053da:	46bd      	mov	sp, r7
 80053dc:	bd80      	pop	{r7, pc}

080053de <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80053de:	b580      	push	{r7, lr}
 80053e0:	b08c      	sub	sp, #48	; 0x30
 80053e2:	af04      	add	r7, sp, #16
 80053e4:	60f8      	str	r0, [r7, #12]
 80053e6:	60b9      	str	r1, [r7, #8]
 80053e8:	603b      	str	r3, [r7, #0]
 80053ea:	4613      	mov	r3, r2
 80053ec:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80053ee:	88fb      	ldrh	r3, [r7, #6]
 80053f0:	009b      	lsls	r3, r3, #2
 80053f2:	4618      	mov	r0, r3
 80053f4:	f001 fd08 	bl	8006e08 <pvPortMalloc>
 80053f8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80053fa:	697b      	ldr	r3, [r7, #20]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d00e      	beq.n	800541e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005400:	205c      	movs	r0, #92	; 0x5c
 8005402:	f001 fd01 	bl	8006e08 <pvPortMalloc>
 8005406:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005408:	69fb      	ldr	r3, [r7, #28]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d003      	beq.n	8005416 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800540e:	69fb      	ldr	r3, [r7, #28]
 8005410:	697a      	ldr	r2, [r7, #20]
 8005412:	631a      	str	r2, [r3, #48]	; 0x30
 8005414:	e005      	b.n	8005422 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005416:	6978      	ldr	r0, [r7, #20]
 8005418:	f001 fdc2 	bl	8006fa0 <vPortFree>
 800541c:	e001      	b.n	8005422 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800541e:	2300      	movs	r3, #0
 8005420:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005422:	69fb      	ldr	r3, [r7, #28]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d017      	beq.n	8005458 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005428:	69fb      	ldr	r3, [r7, #28]
 800542a:	2200      	movs	r2, #0
 800542c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005430:	88fa      	ldrh	r2, [r7, #6]
 8005432:	2300      	movs	r3, #0
 8005434:	9303      	str	r3, [sp, #12]
 8005436:	69fb      	ldr	r3, [r7, #28]
 8005438:	9302      	str	r3, [sp, #8]
 800543a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800543c:	9301      	str	r3, [sp, #4]
 800543e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005440:	9300      	str	r3, [sp, #0]
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	68b9      	ldr	r1, [r7, #8]
 8005446:	68f8      	ldr	r0, [r7, #12]
 8005448:	f000 f80e 	bl	8005468 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800544c:	69f8      	ldr	r0, [r7, #28]
 800544e:	f000 f89b 	bl	8005588 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005452:	2301      	movs	r3, #1
 8005454:	61bb      	str	r3, [r7, #24]
 8005456:	e002      	b.n	800545e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005458:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800545c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800545e:	69bb      	ldr	r3, [r7, #24]
	}
 8005460:	4618      	mov	r0, r3
 8005462:	3720      	adds	r7, #32
 8005464:	46bd      	mov	sp, r7
 8005466:	bd80      	pop	{r7, pc}

08005468 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005468:	b580      	push	{r7, lr}
 800546a:	b088      	sub	sp, #32
 800546c:	af00      	add	r7, sp, #0
 800546e:	60f8      	str	r0, [r7, #12]
 8005470:	60b9      	str	r1, [r7, #8]
 8005472:	607a      	str	r2, [r7, #4]
 8005474:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005478:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	009b      	lsls	r3, r3, #2
 800547e:	461a      	mov	r2, r3
 8005480:	21a5      	movs	r1, #165	; 0xa5
 8005482:	f001 fedd 	bl	8007240 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005488:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005490:	3b01      	subs	r3, #1
 8005492:	009b      	lsls	r3, r3, #2
 8005494:	4413      	add	r3, r2
 8005496:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005498:	69bb      	ldr	r3, [r7, #24]
 800549a:	f023 0307 	bic.w	r3, r3, #7
 800549e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80054a0:	69bb      	ldr	r3, [r7, #24]
 80054a2:	f003 0307 	and.w	r3, r3, #7
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d00a      	beq.n	80054c0 <prvInitialiseNewTask+0x58>
	__asm volatile
 80054aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054ae:	f383 8811 	msr	BASEPRI, r3
 80054b2:	f3bf 8f6f 	isb	sy
 80054b6:	f3bf 8f4f 	dsb	sy
 80054ba:	617b      	str	r3, [r7, #20]
}
 80054bc:	bf00      	nop
 80054be:	e7fe      	b.n	80054be <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80054c0:	68bb      	ldr	r3, [r7, #8]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d01f      	beq.n	8005506 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80054c6:	2300      	movs	r3, #0
 80054c8:	61fb      	str	r3, [r7, #28]
 80054ca:	e012      	b.n	80054f2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80054cc:	68ba      	ldr	r2, [r7, #8]
 80054ce:	69fb      	ldr	r3, [r7, #28]
 80054d0:	4413      	add	r3, r2
 80054d2:	7819      	ldrb	r1, [r3, #0]
 80054d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80054d6:	69fb      	ldr	r3, [r7, #28]
 80054d8:	4413      	add	r3, r2
 80054da:	3334      	adds	r3, #52	; 0x34
 80054dc:	460a      	mov	r2, r1
 80054de:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80054e0:	68ba      	ldr	r2, [r7, #8]
 80054e2:	69fb      	ldr	r3, [r7, #28]
 80054e4:	4413      	add	r3, r2
 80054e6:	781b      	ldrb	r3, [r3, #0]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d006      	beq.n	80054fa <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80054ec:	69fb      	ldr	r3, [r7, #28]
 80054ee:	3301      	adds	r3, #1
 80054f0:	61fb      	str	r3, [r7, #28]
 80054f2:	69fb      	ldr	r3, [r7, #28]
 80054f4:	2b0f      	cmp	r3, #15
 80054f6:	d9e9      	bls.n	80054cc <prvInitialiseNewTask+0x64>
 80054f8:	e000      	b.n	80054fc <prvInitialiseNewTask+0x94>
			{
				break;
 80054fa:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80054fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054fe:	2200      	movs	r2, #0
 8005500:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005504:	e003      	b.n	800550e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005508:	2200      	movs	r2, #0
 800550a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800550e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005510:	2b37      	cmp	r3, #55	; 0x37
 8005512:	d901      	bls.n	8005518 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005514:	2337      	movs	r3, #55	; 0x37
 8005516:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800551a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800551c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800551e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005520:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005522:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005526:	2200      	movs	r2, #0
 8005528:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800552a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800552c:	3304      	adds	r3, #4
 800552e:	4618      	mov	r0, r3
 8005530:	f7ff f978 	bl	8004824 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005536:	3318      	adds	r3, #24
 8005538:	4618      	mov	r0, r3
 800553a:	f7ff f973 	bl	8004824 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800553e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005540:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005542:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005546:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800554a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800554c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800554e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005550:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005552:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005556:	2200      	movs	r2, #0
 8005558:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800555a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800555c:	2200      	movs	r2, #0
 800555e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005562:	683a      	ldr	r2, [r7, #0]
 8005564:	68f9      	ldr	r1, [r7, #12]
 8005566:	69b8      	ldr	r0, [r7, #24]
 8005568:	f001 f9fe 	bl	8006968 <pxPortInitialiseStack>
 800556c:	4602      	mov	r2, r0
 800556e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005570:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005572:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005574:	2b00      	cmp	r3, #0
 8005576:	d002      	beq.n	800557e <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005578:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800557a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800557c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800557e:	bf00      	nop
 8005580:	3720      	adds	r7, #32
 8005582:	46bd      	mov	sp, r7
 8005584:	bd80      	pop	{r7, pc}
	...

08005588 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b082      	sub	sp, #8
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005590:	f001 fb18 	bl	8006bc4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005594:	4b2d      	ldr	r3, [pc, #180]	; (800564c <prvAddNewTaskToReadyList+0xc4>)
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	3301      	adds	r3, #1
 800559a:	4a2c      	ldr	r2, [pc, #176]	; (800564c <prvAddNewTaskToReadyList+0xc4>)
 800559c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800559e:	4b2c      	ldr	r3, [pc, #176]	; (8005650 <prvAddNewTaskToReadyList+0xc8>)
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d109      	bne.n	80055ba <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80055a6:	4a2a      	ldr	r2, [pc, #168]	; (8005650 <prvAddNewTaskToReadyList+0xc8>)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80055ac:	4b27      	ldr	r3, [pc, #156]	; (800564c <prvAddNewTaskToReadyList+0xc4>)
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	2b01      	cmp	r3, #1
 80055b2:	d110      	bne.n	80055d6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80055b4:	f000 fcb4 	bl	8005f20 <prvInitialiseTaskLists>
 80055b8:	e00d      	b.n	80055d6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80055ba:	4b26      	ldr	r3, [pc, #152]	; (8005654 <prvAddNewTaskToReadyList+0xcc>)
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d109      	bne.n	80055d6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80055c2:	4b23      	ldr	r3, [pc, #140]	; (8005650 <prvAddNewTaskToReadyList+0xc8>)
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055cc:	429a      	cmp	r2, r3
 80055ce:	d802      	bhi.n	80055d6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80055d0:	4a1f      	ldr	r2, [pc, #124]	; (8005650 <prvAddNewTaskToReadyList+0xc8>)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80055d6:	4b20      	ldr	r3, [pc, #128]	; (8005658 <prvAddNewTaskToReadyList+0xd0>)
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	3301      	adds	r3, #1
 80055dc:	4a1e      	ldr	r2, [pc, #120]	; (8005658 <prvAddNewTaskToReadyList+0xd0>)
 80055de:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80055e0:	4b1d      	ldr	r3, [pc, #116]	; (8005658 <prvAddNewTaskToReadyList+0xd0>)
 80055e2:	681a      	ldr	r2, [r3, #0]
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055ec:	4b1b      	ldr	r3, [pc, #108]	; (800565c <prvAddNewTaskToReadyList+0xd4>)
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	429a      	cmp	r2, r3
 80055f2:	d903      	bls.n	80055fc <prvAddNewTaskToReadyList+0x74>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055f8:	4a18      	ldr	r2, [pc, #96]	; (800565c <prvAddNewTaskToReadyList+0xd4>)
 80055fa:	6013      	str	r3, [r2, #0]
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005600:	4613      	mov	r3, r2
 8005602:	009b      	lsls	r3, r3, #2
 8005604:	4413      	add	r3, r2
 8005606:	009b      	lsls	r3, r3, #2
 8005608:	4a15      	ldr	r2, [pc, #84]	; (8005660 <prvAddNewTaskToReadyList+0xd8>)
 800560a:	441a      	add	r2, r3
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	3304      	adds	r3, #4
 8005610:	4619      	mov	r1, r3
 8005612:	4610      	mov	r0, r2
 8005614:	f7ff f913 	bl	800483e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005618:	f001 fb04 	bl	8006c24 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800561c:	4b0d      	ldr	r3, [pc, #52]	; (8005654 <prvAddNewTaskToReadyList+0xcc>)
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d00e      	beq.n	8005642 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005624:	4b0a      	ldr	r3, [pc, #40]	; (8005650 <prvAddNewTaskToReadyList+0xc8>)
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800562e:	429a      	cmp	r2, r3
 8005630:	d207      	bcs.n	8005642 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005632:	4b0c      	ldr	r3, [pc, #48]	; (8005664 <prvAddNewTaskToReadyList+0xdc>)
 8005634:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005638:	601a      	str	r2, [r3, #0]
 800563a:	f3bf 8f4f 	dsb	sy
 800563e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005642:	bf00      	nop
 8005644:	3708      	adds	r7, #8
 8005646:	46bd      	mov	sp, r7
 8005648:	bd80      	pop	{r7, pc}
 800564a:	bf00      	nop
 800564c:	20000bc0 	.word	0x20000bc0
 8005650:	200006ec 	.word	0x200006ec
 8005654:	20000bcc 	.word	0x20000bcc
 8005658:	20000bdc 	.word	0x20000bdc
 800565c:	20000bc8 	.word	0x20000bc8
 8005660:	200006f0 	.word	0x200006f0
 8005664:	e000ed04 	.word	0xe000ed04

08005668 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005668:	b580      	push	{r7, lr}
 800566a:	b084      	sub	sp, #16
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005670:	2300      	movs	r3, #0
 8005672:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d017      	beq.n	80056aa <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800567a:	4b13      	ldr	r3, [pc, #76]	; (80056c8 <vTaskDelay+0x60>)
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d00a      	beq.n	8005698 <vTaskDelay+0x30>
	__asm volatile
 8005682:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005686:	f383 8811 	msr	BASEPRI, r3
 800568a:	f3bf 8f6f 	isb	sy
 800568e:	f3bf 8f4f 	dsb	sy
 8005692:	60bb      	str	r3, [r7, #8]
}
 8005694:	bf00      	nop
 8005696:	e7fe      	b.n	8005696 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005698:	f000 f880 	bl	800579c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800569c:	2100      	movs	r1, #0
 800569e:	6878      	ldr	r0, [r7, #4]
 80056a0:	f000 fda0 	bl	80061e4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80056a4:	f000 f888 	bl	80057b8 <xTaskResumeAll>
 80056a8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d107      	bne.n	80056c0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80056b0:	4b06      	ldr	r3, [pc, #24]	; (80056cc <vTaskDelay+0x64>)
 80056b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056b6:	601a      	str	r2, [r3, #0]
 80056b8:	f3bf 8f4f 	dsb	sy
 80056bc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80056c0:	bf00      	nop
 80056c2:	3710      	adds	r7, #16
 80056c4:	46bd      	mov	sp, r7
 80056c6:	bd80      	pop	{r7, pc}
 80056c8:	20000be8 	.word	0x20000be8
 80056cc:	e000ed04 	.word	0xe000ed04

080056d0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b08a      	sub	sp, #40	; 0x28
 80056d4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80056d6:	2300      	movs	r3, #0
 80056d8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80056da:	2300      	movs	r3, #0
 80056dc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80056de:	463a      	mov	r2, r7
 80056e0:	1d39      	adds	r1, r7, #4
 80056e2:	f107 0308 	add.w	r3, r7, #8
 80056e6:	4618      	mov	r0, r3
 80056e8:	f7fe fddc 	bl	80042a4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80056ec:	6839      	ldr	r1, [r7, #0]
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	68ba      	ldr	r2, [r7, #8]
 80056f2:	9202      	str	r2, [sp, #8]
 80056f4:	9301      	str	r3, [sp, #4]
 80056f6:	2300      	movs	r3, #0
 80056f8:	9300      	str	r3, [sp, #0]
 80056fa:	2300      	movs	r3, #0
 80056fc:	460a      	mov	r2, r1
 80056fe:	4921      	ldr	r1, [pc, #132]	; (8005784 <vTaskStartScheduler+0xb4>)
 8005700:	4821      	ldr	r0, [pc, #132]	; (8005788 <vTaskStartScheduler+0xb8>)
 8005702:	f7ff fe0f 	bl	8005324 <xTaskCreateStatic>
 8005706:	4603      	mov	r3, r0
 8005708:	4a20      	ldr	r2, [pc, #128]	; (800578c <vTaskStartScheduler+0xbc>)
 800570a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800570c:	4b1f      	ldr	r3, [pc, #124]	; (800578c <vTaskStartScheduler+0xbc>)
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d002      	beq.n	800571a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005714:	2301      	movs	r3, #1
 8005716:	617b      	str	r3, [r7, #20]
 8005718:	e001      	b.n	800571e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800571a:	2300      	movs	r3, #0
 800571c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800571e:	697b      	ldr	r3, [r7, #20]
 8005720:	2b01      	cmp	r3, #1
 8005722:	d102      	bne.n	800572a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005724:	f000 fdb2 	bl	800628c <xTimerCreateTimerTask>
 8005728:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800572a:	697b      	ldr	r3, [r7, #20]
 800572c:	2b01      	cmp	r3, #1
 800572e:	d116      	bne.n	800575e <vTaskStartScheduler+0x8e>
	__asm volatile
 8005730:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005734:	f383 8811 	msr	BASEPRI, r3
 8005738:	f3bf 8f6f 	isb	sy
 800573c:	f3bf 8f4f 	dsb	sy
 8005740:	613b      	str	r3, [r7, #16]
}
 8005742:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005744:	4b12      	ldr	r3, [pc, #72]	; (8005790 <vTaskStartScheduler+0xc0>)
 8005746:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800574a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800574c:	4b11      	ldr	r3, [pc, #68]	; (8005794 <vTaskStartScheduler+0xc4>)
 800574e:	2201      	movs	r2, #1
 8005750:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005752:	4b11      	ldr	r3, [pc, #68]	; (8005798 <vTaskStartScheduler+0xc8>)
 8005754:	2200      	movs	r2, #0
 8005756:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005758:	f001 f992 	bl	8006a80 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800575c:	e00e      	b.n	800577c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800575e:	697b      	ldr	r3, [r7, #20]
 8005760:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005764:	d10a      	bne.n	800577c <vTaskStartScheduler+0xac>
	__asm volatile
 8005766:	f04f 0350 	mov.w	r3, #80	; 0x50
 800576a:	f383 8811 	msr	BASEPRI, r3
 800576e:	f3bf 8f6f 	isb	sy
 8005772:	f3bf 8f4f 	dsb	sy
 8005776:	60fb      	str	r3, [r7, #12]
}
 8005778:	bf00      	nop
 800577a:	e7fe      	b.n	800577a <vTaskStartScheduler+0xaa>
}
 800577c:	bf00      	nop
 800577e:	3718      	adds	r7, #24
 8005780:	46bd      	mov	sp, r7
 8005782:	bd80      	pop	{r7, pc}
 8005784:	080072a8 	.word	0x080072a8
 8005788:	08005ef1 	.word	0x08005ef1
 800578c:	20000be4 	.word	0x20000be4
 8005790:	20000be0 	.word	0x20000be0
 8005794:	20000bcc 	.word	0x20000bcc
 8005798:	20000bc4 	.word	0x20000bc4

0800579c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800579c:	b480      	push	{r7}
 800579e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80057a0:	4b04      	ldr	r3, [pc, #16]	; (80057b4 <vTaskSuspendAll+0x18>)
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	3301      	adds	r3, #1
 80057a6:	4a03      	ldr	r2, [pc, #12]	; (80057b4 <vTaskSuspendAll+0x18>)
 80057a8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80057aa:	bf00      	nop
 80057ac:	46bd      	mov	sp, r7
 80057ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b2:	4770      	bx	lr
 80057b4:	20000be8 	.word	0x20000be8

080057b8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b084      	sub	sp, #16
 80057bc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80057be:	2300      	movs	r3, #0
 80057c0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80057c2:	2300      	movs	r3, #0
 80057c4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80057c6:	4b42      	ldr	r3, [pc, #264]	; (80058d0 <xTaskResumeAll+0x118>)
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d10a      	bne.n	80057e4 <xTaskResumeAll+0x2c>
	__asm volatile
 80057ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057d2:	f383 8811 	msr	BASEPRI, r3
 80057d6:	f3bf 8f6f 	isb	sy
 80057da:	f3bf 8f4f 	dsb	sy
 80057de:	603b      	str	r3, [r7, #0]
}
 80057e0:	bf00      	nop
 80057e2:	e7fe      	b.n	80057e2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80057e4:	f001 f9ee 	bl	8006bc4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80057e8:	4b39      	ldr	r3, [pc, #228]	; (80058d0 <xTaskResumeAll+0x118>)
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	3b01      	subs	r3, #1
 80057ee:	4a38      	ldr	r2, [pc, #224]	; (80058d0 <xTaskResumeAll+0x118>)
 80057f0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80057f2:	4b37      	ldr	r3, [pc, #220]	; (80058d0 <xTaskResumeAll+0x118>)
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d162      	bne.n	80058c0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80057fa:	4b36      	ldr	r3, [pc, #216]	; (80058d4 <xTaskResumeAll+0x11c>)
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d05e      	beq.n	80058c0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005802:	e02f      	b.n	8005864 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005804:	4b34      	ldr	r3, [pc, #208]	; (80058d8 <xTaskResumeAll+0x120>)
 8005806:	68db      	ldr	r3, [r3, #12]
 8005808:	68db      	ldr	r3, [r3, #12]
 800580a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	3318      	adds	r3, #24
 8005810:	4618      	mov	r0, r3
 8005812:	f7ff f871 	bl	80048f8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	3304      	adds	r3, #4
 800581a:	4618      	mov	r0, r3
 800581c:	f7ff f86c 	bl	80048f8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005824:	4b2d      	ldr	r3, [pc, #180]	; (80058dc <xTaskResumeAll+0x124>)
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	429a      	cmp	r2, r3
 800582a:	d903      	bls.n	8005834 <xTaskResumeAll+0x7c>
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005830:	4a2a      	ldr	r2, [pc, #168]	; (80058dc <xTaskResumeAll+0x124>)
 8005832:	6013      	str	r3, [r2, #0]
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005838:	4613      	mov	r3, r2
 800583a:	009b      	lsls	r3, r3, #2
 800583c:	4413      	add	r3, r2
 800583e:	009b      	lsls	r3, r3, #2
 8005840:	4a27      	ldr	r2, [pc, #156]	; (80058e0 <xTaskResumeAll+0x128>)
 8005842:	441a      	add	r2, r3
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	3304      	adds	r3, #4
 8005848:	4619      	mov	r1, r3
 800584a:	4610      	mov	r0, r2
 800584c:	f7fe fff7 	bl	800483e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005854:	4b23      	ldr	r3, [pc, #140]	; (80058e4 <xTaskResumeAll+0x12c>)
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800585a:	429a      	cmp	r2, r3
 800585c:	d302      	bcc.n	8005864 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800585e:	4b22      	ldr	r3, [pc, #136]	; (80058e8 <xTaskResumeAll+0x130>)
 8005860:	2201      	movs	r2, #1
 8005862:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005864:	4b1c      	ldr	r3, [pc, #112]	; (80058d8 <xTaskResumeAll+0x120>)
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d1cb      	bne.n	8005804 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d001      	beq.n	8005876 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005872:	f000 fbf3 	bl	800605c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005876:	4b1d      	ldr	r3, [pc, #116]	; (80058ec <xTaskResumeAll+0x134>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d010      	beq.n	80058a4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005882:	f000 f847 	bl	8005914 <xTaskIncrementTick>
 8005886:	4603      	mov	r3, r0
 8005888:	2b00      	cmp	r3, #0
 800588a:	d002      	beq.n	8005892 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800588c:	4b16      	ldr	r3, [pc, #88]	; (80058e8 <xTaskResumeAll+0x130>)
 800588e:	2201      	movs	r2, #1
 8005890:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	3b01      	subs	r3, #1
 8005896:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d1f1      	bne.n	8005882 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800589e:	4b13      	ldr	r3, [pc, #76]	; (80058ec <xTaskResumeAll+0x134>)
 80058a0:	2200      	movs	r2, #0
 80058a2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80058a4:	4b10      	ldr	r3, [pc, #64]	; (80058e8 <xTaskResumeAll+0x130>)
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d009      	beq.n	80058c0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80058ac:	2301      	movs	r3, #1
 80058ae:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80058b0:	4b0f      	ldr	r3, [pc, #60]	; (80058f0 <xTaskResumeAll+0x138>)
 80058b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058b6:	601a      	str	r2, [r3, #0]
 80058b8:	f3bf 8f4f 	dsb	sy
 80058bc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80058c0:	f001 f9b0 	bl	8006c24 <vPortExitCritical>

	return xAlreadyYielded;
 80058c4:	68bb      	ldr	r3, [r7, #8]
}
 80058c6:	4618      	mov	r0, r3
 80058c8:	3710      	adds	r7, #16
 80058ca:	46bd      	mov	sp, r7
 80058cc:	bd80      	pop	{r7, pc}
 80058ce:	bf00      	nop
 80058d0:	20000be8 	.word	0x20000be8
 80058d4:	20000bc0 	.word	0x20000bc0
 80058d8:	20000b80 	.word	0x20000b80
 80058dc:	20000bc8 	.word	0x20000bc8
 80058e0:	200006f0 	.word	0x200006f0
 80058e4:	200006ec 	.word	0x200006ec
 80058e8:	20000bd4 	.word	0x20000bd4
 80058ec:	20000bd0 	.word	0x20000bd0
 80058f0:	e000ed04 	.word	0xe000ed04

080058f4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80058f4:	b480      	push	{r7}
 80058f6:	b083      	sub	sp, #12
 80058f8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80058fa:	4b05      	ldr	r3, [pc, #20]	; (8005910 <xTaskGetTickCount+0x1c>)
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005900:	687b      	ldr	r3, [r7, #4]
}
 8005902:	4618      	mov	r0, r3
 8005904:	370c      	adds	r7, #12
 8005906:	46bd      	mov	sp, r7
 8005908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590c:	4770      	bx	lr
 800590e:	bf00      	nop
 8005910:	20000bc4 	.word	0x20000bc4

08005914 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005914:	b580      	push	{r7, lr}
 8005916:	b086      	sub	sp, #24
 8005918:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800591a:	2300      	movs	r3, #0
 800591c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800591e:	4b4f      	ldr	r3, [pc, #316]	; (8005a5c <xTaskIncrementTick+0x148>)
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	2b00      	cmp	r3, #0
 8005924:	f040 808f 	bne.w	8005a46 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005928:	4b4d      	ldr	r3, [pc, #308]	; (8005a60 <xTaskIncrementTick+0x14c>)
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	3301      	adds	r3, #1
 800592e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005930:	4a4b      	ldr	r2, [pc, #300]	; (8005a60 <xTaskIncrementTick+0x14c>)
 8005932:	693b      	ldr	r3, [r7, #16]
 8005934:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005936:	693b      	ldr	r3, [r7, #16]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d120      	bne.n	800597e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800593c:	4b49      	ldr	r3, [pc, #292]	; (8005a64 <xTaskIncrementTick+0x150>)
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d00a      	beq.n	800595c <xTaskIncrementTick+0x48>
	__asm volatile
 8005946:	f04f 0350 	mov.w	r3, #80	; 0x50
 800594a:	f383 8811 	msr	BASEPRI, r3
 800594e:	f3bf 8f6f 	isb	sy
 8005952:	f3bf 8f4f 	dsb	sy
 8005956:	603b      	str	r3, [r7, #0]
}
 8005958:	bf00      	nop
 800595a:	e7fe      	b.n	800595a <xTaskIncrementTick+0x46>
 800595c:	4b41      	ldr	r3, [pc, #260]	; (8005a64 <xTaskIncrementTick+0x150>)
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	60fb      	str	r3, [r7, #12]
 8005962:	4b41      	ldr	r3, [pc, #260]	; (8005a68 <xTaskIncrementTick+0x154>)
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	4a3f      	ldr	r2, [pc, #252]	; (8005a64 <xTaskIncrementTick+0x150>)
 8005968:	6013      	str	r3, [r2, #0]
 800596a:	4a3f      	ldr	r2, [pc, #252]	; (8005a68 <xTaskIncrementTick+0x154>)
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	6013      	str	r3, [r2, #0]
 8005970:	4b3e      	ldr	r3, [pc, #248]	; (8005a6c <xTaskIncrementTick+0x158>)
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	3301      	adds	r3, #1
 8005976:	4a3d      	ldr	r2, [pc, #244]	; (8005a6c <xTaskIncrementTick+0x158>)
 8005978:	6013      	str	r3, [r2, #0]
 800597a:	f000 fb6f 	bl	800605c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800597e:	4b3c      	ldr	r3, [pc, #240]	; (8005a70 <xTaskIncrementTick+0x15c>)
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	693a      	ldr	r2, [r7, #16]
 8005984:	429a      	cmp	r2, r3
 8005986:	d349      	bcc.n	8005a1c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005988:	4b36      	ldr	r3, [pc, #216]	; (8005a64 <xTaskIncrementTick+0x150>)
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d104      	bne.n	800599c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005992:	4b37      	ldr	r3, [pc, #220]	; (8005a70 <xTaskIncrementTick+0x15c>)
 8005994:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005998:	601a      	str	r2, [r3, #0]
					break;
 800599a:	e03f      	b.n	8005a1c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800599c:	4b31      	ldr	r3, [pc, #196]	; (8005a64 <xTaskIncrementTick+0x150>)
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	68db      	ldr	r3, [r3, #12]
 80059a2:	68db      	ldr	r3, [r3, #12]
 80059a4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80059a6:	68bb      	ldr	r3, [r7, #8]
 80059a8:	685b      	ldr	r3, [r3, #4]
 80059aa:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80059ac:	693a      	ldr	r2, [r7, #16]
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	429a      	cmp	r2, r3
 80059b2:	d203      	bcs.n	80059bc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80059b4:	4a2e      	ldr	r2, [pc, #184]	; (8005a70 <xTaskIncrementTick+0x15c>)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80059ba:	e02f      	b.n	8005a1c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80059bc:	68bb      	ldr	r3, [r7, #8]
 80059be:	3304      	adds	r3, #4
 80059c0:	4618      	mov	r0, r3
 80059c2:	f7fe ff99 	bl	80048f8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80059c6:	68bb      	ldr	r3, [r7, #8]
 80059c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d004      	beq.n	80059d8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80059ce:	68bb      	ldr	r3, [r7, #8]
 80059d0:	3318      	adds	r3, #24
 80059d2:	4618      	mov	r0, r3
 80059d4:	f7fe ff90 	bl	80048f8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059dc:	4b25      	ldr	r3, [pc, #148]	; (8005a74 <xTaskIncrementTick+0x160>)
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	429a      	cmp	r2, r3
 80059e2:	d903      	bls.n	80059ec <xTaskIncrementTick+0xd8>
 80059e4:	68bb      	ldr	r3, [r7, #8]
 80059e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059e8:	4a22      	ldr	r2, [pc, #136]	; (8005a74 <xTaskIncrementTick+0x160>)
 80059ea:	6013      	str	r3, [r2, #0]
 80059ec:	68bb      	ldr	r3, [r7, #8]
 80059ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059f0:	4613      	mov	r3, r2
 80059f2:	009b      	lsls	r3, r3, #2
 80059f4:	4413      	add	r3, r2
 80059f6:	009b      	lsls	r3, r3, #2
 80059f8:	4a1f      	ldr	r2, [pc, #124]	; (8005a78 <xTaskIncrementTick+0x164>)
 80059fa:	441a      	add	r2, r3
 80059fc:	68bb      	ldr	r3, [r7, #8]
 80059fe:	3304      	adds	r3, #4
 8005a00:	4619      	mov	r1, r3
 8005a02:	4610      	mov	r0, r2
 8005a04:	f7fe ff1b 	bl	800483e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005a08:	68bb      	ldr	r3, [r7, #8]
 8005a0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a0c:	4b1b      	ldr	r3, [pc, #108]	; (8005a7c <xTaskIncrementTick+0x168>)
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a12:	429a      	cmp	r2, r3
 8005a14:	d3b8      	bcc.n	8005988 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005a16:	2301      	movs	r3, #1
 8005a18:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005a1a:	e7b5      	b.n	8005988 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005a1c:	4b17      	ldr	r3, [pc, #92]	; (8005a7c <xTaskIncrementTick+0x168>)
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a22:	4915      	ldr	r1, [pc, #84]	; (8005a78 <xTaskIncrementTick+0x164>)
 8005a24:	4613      	mov	r3, r2
 8005a26:	009b      	lsls	r3, r3, #2
 8005a28:	4413      	add	r3, r2
 8005a2a:	009b      	lsls	r3, r3, #2
 8005a2c:	440b      	add	r3, r1
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	2b01      	cmp	r3, #1
 8005a32:	d901      	bls.n	8005a38 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005a34:	2301      	movs	r3, #1
 8005a36:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005a38:	4b11      	ldr	r3, [pc, #68]	; (8005a80 <xTaskIncrementTick+0x16c>)
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d007      	beq.n	8005a50 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005a40:	2301      	movs	r3, #1
 8005a42:	617b      	str	r3, [r7, #20]
 8005a44:	e004      	b.n	8005a50 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005a46:	4b0f      	ldr	r3, [pc, #60]	; (8005a84 <xTaskIncrementTick+0x170>)
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	3301      	adds	r3, #1
 8005a4c:	4a0d      	ldr	r2, [pc, #52]	; (8005a84 <xTaskIncrementTick+0x170>)
 8005a4e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005a50:	697b      	ldr	r3, [r7, #20]
}
 8005a52:	4618      	mov	r0, r3
 8005a54:	3718      	adds	r7, #24
 8005a56:	46bd      	mov	sp, r7
 8005a58:	bd80      	pop	{r7, pc}
 8005a5a:	bf00      	nop
 8005a5c:	20000be8 	.word	0x20000be8
 8005a60:	20000bc4 	.word	0x20000bc4
 8005a64:	20000b78 	.word	0x20000b78
 8005a68:	20000b7c 	.word	0x20000b7c
 8005a6c:	20000bd8 	.word	0x20000bd8
 8005a70:	20000be0 	.word	0x20000be0
 8005a74:	20000bc8 	.word	0x20000bc8
 8005a78:	200006f0 	.word	0x200006f0
 8005a7c:	200006ec 	.word	0x200006ec
 8005a80:	20000bd4 	.word	0x20000bd4
 8005a84:	20000bd0 	.word	0x20000bd0

08005a88 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005a88:	b480      	push	{r7}
 8005a8a:	b085      	sub	sp, #20
 8005a8c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005a8e:	4b28      	ldr	r3, [pc, #160]	; (8005b30 <vTaskSwitchContext+0xa8>)
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d003      	beq.n	8005a9e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005a96:	4b27      	ldr	r3, [pc, #156]	; (8005b34 <vTaskSwitchContext+0xac>)
 8005a98:	2201      	movs	r2, #1
 8005a9a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005a9c:	e041      	b.n	8005b22 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8005a9e:	4b25      	ldr	r3, [pc, #148]	; (8005b34 <vTaskSwitchContext+0xac>)
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005aa4:	4b24      	ldr	r3, [pc, #144]	; (8005b38 <vTaskSwitchContext+0xb0>)
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	60fb      	str	r3, [r7, #12]
 8005aaa:	e010      	b.n	8005ace <vTaskSwitchContext+0x46>
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d10a      	bne.n	8005ac8 <vTaskSwitchContext+0x40>
	__asm volatile
 8005ab2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ab6:	f383 8811 	msr	BASEPRI, r3
 8005aba:	f3bf 8f6f 	isb	sy
 8005abe:	f3bf 8f4f 	dsb	sy
 8005ac2:	607b      	str	r3, [r7, #4]
}
 8005ac4:	bf00      	nop
 8005ac6:	e7fe      	b.n	8005ac6 <vTaskSwitchContext+0x3e>
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	3b01      	subs	r3, #1
 8005acc:	60fb      	str	r3, [r7, #12]
 8005ace:	491b      	ldr	r1, [pc, #108]	; (8005b3c <vTaskSwitchContext+0xb4>)
 8005ad0:	68fa      	ldr	r2, [r7, #12]
 8005ad2:	4613      	mov	r3, r2
 8005ad4:	009b      	lsls	r3, r3, #2
 8005ad6:	4413      	add	r3, r2
 8005ad8:	009b      	lsls	r3, r3, #2
 8005ada:	440b      	add	r3, r1
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d0e4      	beq.n	8005aac <vTaskSwitchContext+0x24>
 8005ae2:	68fa      	ldr	r2, [r7, #12]
 8005ae4:	4613      	mov	r3, r2
 8005ae6:	009b      	lsls	r3, r3, #2
 8005ae8:	4413      	add	r3, r2
 8005aea:	009b      	lsls	r3, r3, #2
 8005aec:	4a13      	ldr	r2, [pc, #76]	; (8005b3c <vTaskSwitchContext+0xb4>)
 8005aee:	4413      	add	r3, r2
 8005af0:	60bb      	str	r3, [r7, #8]
 8005af2:	68bb      	ldr	r3, [r7, #8]
 8005af4:	685b      	ldr	r3, [r3, #4]
 8005af6:	685a      	ldr	r2, [r3, #4]
 8005af8:	68bb      	ldr	r3, [r7, #8]
 8005afa:	605a      	str	r2, [r3, #4]
 8005afc:	68bb      	ldr	r3, [r7, #8]
 8005afe:	685a      	ldr	r2, [r3, #4]
 8005b00:	68bb      	ldr	r3, [r7, #8]
 8005b02:	3308      	adds	r3, #8
 8005b04:	429a      	cmp	r2, r3
 8005b06:	d104      	bne.n	8005b12 <vTaskSwitchContext+0x8a>
 8005b08:	68bb      	ldr	r3, [r7, #8]
 8005b0a:	685b      	ldr	r3, [r3, #4]
 8005b0c:	685a      	ldr	r2, [r3, #4]
 8005b0e:	68bb      	ldr	r3, [r7, #8]
 8005b10:	605a      	str	r2, [r3, #4]
 8005b12:	68bb      	ldr	r3, [r7, #8]
 8005b14:	685b      	ldr	r3, [r3, #4]
 8005b16:	68db      	ldr	r3, [r3, #12]
 8005b18:	4a09      	ldr	r2, [pc, #36]	; (8005b40 <vTaskSwitchContext+0xb8>)
 8005b1a:	6013      	str	r3, [r2, #0]
 8005b1c:	4a06      	ldr	r2, [pc, #24]	; (8005b38 <vTaskSwitchContext+0xb0>)
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	6013      	str	r3, [r2, #0]
}
 8005b22:	bf00      	nop
 8005b24:	3714      	adds	r7, #20
 8005b26:	46bd      	mov	sp, r7
 8005b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2c:	4770      	bx	lr
 8005b2e:	bf00      	nop
 8005b30:	20000be8 	.word	0x20000be8
 8005b34:	20000bd4 	.word	0x20000bd4
 8005b38:	20000bc8 	.word	0x20000bc8
 8005b3c:	200006f0 	.word	0x200006f0
 8005b40:	200006ec 	.word	0x200006ec

08005b44 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b084      	sub	sp, #16
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
 8005b4c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d10a      	bne.n	8005b6a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005b54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b58:	f383 8811 	msr	BASEPRI, r3
 8005b5c:	f3bf 8f6f 	isb	sy
 8005b60:	f3bf 8f4f 	dsb	sy
 8005b64:	60fb      	str	r3, [r7, #12]
}
 8005b66:	bf00      	nop
 8005b68:	e7fe      	b.n	8005b68 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005b6a:	4b07      	ldr	r3, [pc, #28]	; (8005b88 <vTaskPlaceOnEventList+0x44>)
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	3318      	adds	r3, #24
 8005b70:	4619      	mov	r1, r3
 8005b72:	6878      	ldr	r0, [r7, #4]
 8005b74:	f7fe fe87 	bl	8004886 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005b78:	2101      	movs	r1, #1
 8005b7a:	6838      	ldr	r0, [r7, #0]
 8005b7c:	f000 fb32 	bl	80061e4 <prvAddCurrentTaskToDelayedList>
}
 8005b80:	bf00      	nop
 8005b82:	3710      	adds	r7, #16
 8005b84:	46bd      	mov	sp, r7
 8005b86:	bd80      	pop	{r7, pc}
 8005b88:	200006ec 	.word	0x200006ec

08005b8c <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b086      	sub	sp, #24
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	60f8      	str	r0, [r7, #12]
 8005b94:	60b9      	str	r1, [r7, #8]
 8005b96:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d10a      	bne.n	8005bb4 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 8005b9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ba2:	f383 8811 	msr	BASEPRI, r3
 8005ba6:	f3bf 8f6f 	isb	sy
 8005baa:	f3bf 8f4f 	dsb	sy
 8005bae:	617b      	str	r3, [r7, #20]
}
 8005bb0:	bf00      	nop
 8005bb2:	e7fe      	b.n	8005bb2 <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8005bb4:	4b11      	ldr	r3, [pc, #68]	; (8005bfc <vTaskPlaceOnUnorderedEventList+0x70>)
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d10a      	bne.n	8005bd2 <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 8005bbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bc0:	f383 8811 	msr	BASEPRI, r3
 8005bc4:	f3bf 8f6f 	isb	sy
 8005bc8:	f3bf 8f4f 	dsb	sy
 8005bcc:	613b      	str	r3, [r7, #16]
}
 8005bce:	bf00      	nop
 8005bd0:	e7fe      	b.n	8005bd0 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8005bd2:	4b0b      	ldr	r3, [pc, #44]	; (8005c00 <vTaskPlaceOnUnorderedEventList+0x74>)
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	68ba      	ldr	r2, [r7, #8]
 8005bd8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8005bdc:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005bde:	4b08      	ldr	r3, [pc, #32]	; (8005c00 <vTaskPlaceOnUnorderedEventList+0x74>)
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	3318      	adds	r3, #24
 8005be4:	4619      	mov	r1, r3
 8005be6:	68f8      	ldr	r0, [r7, #12]
 8005be8:	f7fe fe29 	bl	800483e <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005bec:	2101      	movs	r1, #1
 8005bee:	6878      	ldr	r0, [r7, #4]
 8005bf0:	f000 faf8 	bl	80061e4 <prvAddCurrentTaskToDelayedList>
}
 8005bf4:	bf00      	nop
 8005bf6:	3718      	adds	r7, #24
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	bd80      	pop	{r7, pc}
 8005bfc:	20000be8 	.word	0x20000be8
 8005c00:	200006ec 	.word	0x200006ec

08005c04 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005c04:	b580      	push	{r7, lr}
 8005c06:	b086      	sub	sp, #24
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	60f8      	str	r0, [r7, #12]
 8005c0c:	60b9      	str	r1, [r7, #8]
 8005c0e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d10a      	bne.n	8005c2c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8005c16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c1a:	f383 8811 	msr	BASEPRI, r3
 8005c1e:	f3bf 8f6f 	isb	sy
 8005c22:	f3bf 8f4f 	dsb	sy
 8005c26:	617b      	str	r3, [r7, #20]
}
 8005c28:	bf00      	nop
 8005c2a:	e7fe      	b.n	8005c2a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005c2c:	4b0a      	ldr	r3, [pc, #40]	; (8005c58 <vTaskPlaceOnEventListRestricted+0x54>)
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	3318      	adds	r3, #24
 8005c32:	4619      	mov	r1, r3
 8005c34:	68f8      	ldr	r0, [r7, #12]
 8005c36:	f7fe fe02 	bl	800483e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d002      	beq.n	8005c46 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8005c40:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005c44:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005c46:	6879      	ldr	r1, [r7, #4]
 8005c48:	68b8      	ldr	r0, [r7, #8]
 8005c4a:	f000 facb 	bl	80061e4 <prvAddCurrentTaskToDelayedList>
	}
 8005c4e:	bf00      	nop
 8005c50:	3718      	adds	r7, #24
 8005c52:	46bd      	mov	sp, r7
 8005c54:	bd80      	pop	{r7, pc}
 8005c56:	bf00      	nop
 8005c58:	200006ec 	.word	0x200006ec

08005c5c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b086      	sub	sp, #24
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	68db      	ldr	r3, [r3, #12]
 8005c68:	68db      	ldr	r3, [r3, #12]
 8005c6a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005c6c:	693b      	ldr	r3, [r7, #16]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d10a      	bne.n	8005c88 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8005c72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c76:	f383 8811 	msr	BASEPRI, r3
 8005c7a:	f3bf 8f6f 	isb	sy
 8005c7e:	f3bf 8f4f 	dsb	sy
 8005c82:	60fb      	str	r3, [r7, #12]
}
 8005c84:	bf00      	nop
 8005c86:	e7fe      	b.n	8005c86 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005c88:	693b      	ldr	r3, [r7, #16]
 8005c8a:	3318      	adds	r3, #24
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	f7fe fe33 	bl	80048f8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005c92:	4b1e      	ldr	r3, [pc, #120]	; (8005d0c <xTaskRemoveFromEventList+0xb0>)
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d11d      	bne.n	8005cd6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005c9a:	693b      	ldr	r3, [r7, #16]
 8005c9c:	3304      	adds	r3, #4
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	f7fe fe2a 	bl	80048f8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005ca4:	693b      	ldr	r3, [r7, #16]
 8005ca6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ca8:	4b19      	ldr	r3, [pc, #100]	; (8005d10 <xTaskRemoveFromEventList+0xb4>)
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	429a      	cmp	r2, r3
 8005cae:	d903      	bls.n	8005cb8 <xTaskRemoveFromEventList+0x5c>
 8005cb0:	693b      	ldr	r3, [r7, #16]
 8005cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cb4:	4a16      	ldr	r2, [pc, #88]	; (8005d10 <xTaskRemoveFromEventList+0xb4>)
 8005cb6:	6013      	str	r3, [r2, #0]
 8005cb8:	693b      	ldr	r3, [r7, #16]
 8005cba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cbc:	4613      	mov	r3, r2
 8005cbe:	009b      	lsls	r3, r3, #2
 8005cc0:	4413      	add	r3, r2
 8005cc2:	009b      	lsls	r3, r3, #2
 8005cc4:	4a13      	ldr	r2, [pc, #76]	; (8005d14 <xTaskRemoveFromEventList+0xb8>)
 8005cc6:	441a      	add	r2, r3
 8005cc8:	693b      	ldr	r3, [r7, #16]
 8005cca:	3304      	adds	r3, #4
 8005ccc:	4619      	mov	r1, r3
 8005cce:	4610      	mov	r0, r2
 8005cd0:	f7fe fdb5 	bl	800483e <vListInsertEnd>
 8005cd4:	e005      	b.n	8005ce2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005cd6:	693b      	ldr	r3, [r7, #16]
 8005cd8:	3318      	adds	r3, #24
 8005cda:	4619      	mov	r1, r3
 8005cdc:	480e      	ldr	r0, [pc, #56]	; (8005d18 <xTaskRemoveFromEventList+0xbc>)
 8005cde:	f7fe fdae 	bl	800483e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005ce2:	693b      	ldr	r3, [r7, #16]
 8005ce4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ce6:	4b0d      	ldr	r3, [pc, #52]	; (8005d1c <xTaskRemoveFromEventList+0xc0>)
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cec:	429a      	cmp	r2, r3
 8005cee:	d905      	bls.n	8005cfc <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005cf0:	2301      	movs	r3, #1
 8005cf2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005cf4:	4b0a      	ldr	r3, [pc, #40]	; (8005d20 <xTaskRemoveFromEventList+0xc4>)
 8005cf6:	2201      	movs	r2, #1
 8005cf8:	601a      	str	r2, [r3, #0]
 8005cfa:	e001      	b.n	8005d00 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005d00:	697b      	ldr	r3, [r7, #20]
}
 8005d02:	4618      	mov	r0, r3
 8005d04:	3718      	adds	r7, #24
 8005d06:	46bd      	mov	sp, r7
 8005d08:	bd80      	pop	{r7, pc}
 8005d0a:	bf00      	nop
 8005d0c:	20000be8 	.word	0x20000be8
 8005d10:	20000bc8 	.word	0x20000bc8
 8005d14:	200006f0 	.word	0x200006f0
 8005d18:	20000b80 	.word	0x20000b80
 8005d1c:	200006ec 	.word	0x200006ec
 8005d20:	20000bd4 	.word	0x20000bd4

08005d24 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8005d24:	b580      	push	{r7, lr}
 8005d26:	b086      	sub	sp, #24
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
 8005d2c:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8005d2e:	4b29      	ldr	r3, [pc, #164]	; (8005dd4 <vTaskRemoveFromUnorderedEventList+0xb0>)
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d10a      	bne.n	8005d4c <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 8005d36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d3a:	f383 8811 	msr	BASEPRI, r3
 8005d3e:	f3bf 8f6f 	isb	sy
 8005d42:	f3bf 8f4f 	dsb	sy
 8005d46:	613b      	str	r3, [r7, #16]
}
 8005d48:	bf00      	nop
 8005d4a:	e7fe      	b.n	8005d4a <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	68db      	ldr	r3, [r3, #12]
 8005d5a:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8005d5c:	697b      	ldr	r3, [r7, #20]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d10a      	bne.n	8005d78 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 8005d62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d66:	f383 8811 	msr	BASEPRI, r3
 8005d6a:	f3bf 8f6f 	isb	sy
 8005d6e:	f3bf 8f4f 	dsb	sy
 8005d72:	60fb      	str	r3, [r7, #12]
}
 8005d74:	bf00      	nop
 8005d76:	e7fe      	b.n	8005d76 <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 8005d78:	6878      	ldr	r0, [r7, #4]
 8005d7a:	f7fe fdbd 	bl	80048f8 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005d7e:	697b      	ldr	r3, [r7, #20]
 8005d80:	3304      	adds	r3, #4
 8005d82:	4618      	mov	r0, r3
 8005d84:	f7fe fdb8 	bl	80048f8 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8005d88:	697b      	ldr	r3, [r7, #20]
 8005d8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d8c:	4b12      	ldr	r3, [pc, #72]	; (8005dd8 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	429a      	cmp	r2, r3
 8005d92:	d903      	bls.n	8005d9c <vTaskRemoveFromUnorderedEventList+0x78>
 8005d94:	697b      	ldr	r3, [r7, #20]
 8005d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d98:	4a0f      	ldr	r2, [pc, #60]	; (8005dd8 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8005d9a:	6013      	str	r3, [r2, #0]
 8005d9c:	697b      	ldr	r3, [r7, #20]
 8005d9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005da0:	4613      	mov	r3, r2
 8005da2:	009b      	lsls	r3, r3, #2
 8005da4:	4413      	add	r3, r2
 8005da6:	009b      	lsls	r3, r3, #2
 8005da8:	4a0c      	ldr	r2, [pc, #48]	; (8005ddc <vTaskRemoveFromUnorderedEventList+0xb8>)
 8005daa:	441a      	add	r2, r3
 8005dac:	697b      	ldr	r3, [r7, #20]
 8005dae:	3304      	adds	r3, #4
 8005db0:	4619      	mov	r1, r3
 8005db2:	4610      	mov	r0, r2
 8005db4:	f7fe fd43 	bl	800483e <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005db8:	697b      	ldr	r3, [r7, #20]
 8005dba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dbc:	4b08      	ldr	r3, [pc, #32]	; (8005de0 <vTaskRemoveFromUnorderedEventList+0xbc>)
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dc2:	429a      	cmp	r2, r3
 8005dc4:	d902      	bls.n	8005dcc <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8005dc6:	4b07      	ldr	r3, [pc, #28]	; (8005de4 <vTaskRemoveFromUnorderedEventList+0xc0>)
 8005dc8:	2201      	movs	r2, #1
 8005dca:	601a      	str	r2, [r3, #0]
	}
}
 8005dcc:	bf00      	nop
 8005dce:	3718      	adds	r7, #24
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	bd80      	pop	{r7, pc}
 8005dd4:	20000be8 	.word	0x20000be8
 8005dd8:	20000bc8 	.word	0x20000bc8
 8005ddc:	200006f0 	.word	0x200006f0
 8005de0:	200006ec 	.word	0x200006ec
 8005de4:	20000bd4 	.word	0x20000bd4

08005de8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005de8:	b480      	push	{r7}
 8005dea:	b083      	sub	sp, #12
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005df0:	4b06      	ldr	r3, [pc, #24]	; (8005e0c <vTaskInternalSetTimeOutState+0x24>)
 8005df2:	681a      	ldr	r2, [r3, #0]
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005df8:	4b05      	ldr	r3, [pc, #20]	; (8005e10 <vTaskInternalSetTimeOutState+0x28>)
 8005dfa:	681a      	ldr	r2, [r3, #0]
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	605a      	str	r2, [r3, #4]
}
 8005e00:	bf00      	nop
 8005e02:	370c      	adds	r7, #12
 8005e04:	46bd      	mov	sp, r7
 8005e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0a:	4770      	bx	lr
 8005e0c:	20000bd8 	.word	0x20000bd8
 8005e10:	20000bc4 	.word	0x20000bc4

08005e14 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005e14:	b580      	push	{r7, lr}
 8005e16:	b088      	sub	sp, #32
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
 8005e1c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d10a      	bne.n	8005e3a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005e24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e28:	f383 8811 	msr	BASEPRI, r3
 8005e2c:	f3bf 8f6f 	isb	sy
 8005e30:	f3bf 8f4f 	dsb	sy
 8005e34:	613b      	str	r3, [r7, #16]
}
 8005e36:	bf00      	nop
 8005e38:	e7fe      	b.n	8005e38 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d10a      	bne.n	8005e56 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005e40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e44:	f383 8811 	msr	BASEPRI, r3
 8005e48:	f3bf 8f6f 	isb	sy
 8005e4c:	f3bf 8f4f 	dsb	sy
 8005e50:	60fb      	str	r3, [r7, #12]
}
 8005e52:	bf00      	nop
 8005e54:	e7fe      	b.n	8005e54 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8005e56:	f000 feb5 	bl	8006bc4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005e5a:	4b1d      	ldr	r3, [pc, #116]	; (8005ed0 <xTaskCheckForTimeOut+0xbc>)
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	685b      	ldr	r3, [r3, #4]
 8005e64:	69ba      	ldr	r2, [r7, #24]
 8005e66:	1ad3      	subs	r3, r2, r3
 8005e68:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005e72:	d102      	bne.n	8005e7a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005e74:	2300      	movs	r3, #0
 8005e76:	61fb      	str	r3, [r7, #28]
 8005e78:	e023      	b.n	8005ec2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681a      	ldr	r2, [r3, #0]
 8005e7e:	4b15      	ldr	r3, [pc, #84]	; (8005ed4 <xTaskCheckForTimeOut+0xc0>)
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	429a      	cmp	r2, r3
 8005e84:	d007      	beq.n	8005e96 <xTaskCheckForTimeOut+0x82>
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	685b      	ldr	r3, [r3, #4]
 8005e8a:	69ba      	ldr	r2, [r7, #24]
 8005e8c:	429a      	cmp	r2, r3
 8005e8e:	d302      	bcc.n	8005e96 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005e90:	2301      	movs	r3, #1
 8005e92:	61fb      	str	r3, [r7, #28]
 8005e94:	e015      	b.n	8005ec2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	697a      	ldr	r2, [r7, #20]
 8005e9c:	429a      	cmp	r2, r3
 8005e9e:	d20b      	bcs.n	8005eb8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	681a      	ldr	r2, [r3, #0]
 8005ea4:	697b      	ldr	r3, [r7, #20]
 8005ea6:	1ad2      	subs	r2, r2, r3
 8005ea8:	683b      	ldr	r3, [r7, #0]
 8005eaa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005eac:	6878      	ldr	r0, [r7, #4]
 8005eae:	f7ff ff9b 	bl	8005de8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	61fb      	str	r3, [r7, #28]
 8005eb6:	e004      	b.n	8005ec2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	2200      	movs	r2, #0
 8005ebc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005ebe:	2301      	movs	r3, #1
 8005ec0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005ec2:	f000 feaf 	bl	8006c24 <vPortExitCritical>

	return xReturn;
 8005ec6:	69fb      	ldr	r3, [r7, #28]
}
 8005ec8:	4618      	mov	r0, r3
 8005eca:	3720      	adds	r7, #32
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	bd80      	pop	{r7, pc}
 8005ed0:	20000bc4 	.word	0x20000bc4
 8005ed4:	20000bd8 	.word	0x20000bd8

08005ed8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005ed8:	b480      	push	{r7}
 8005eda:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005edc:	4b03      	ldr	r3, [pc, #12]	; (8005eec <vTaskMissedYield+0x14>)
 8005ede:	2201      	movs	r2, #1
 8005ee0:	601a      	str	r2, [r3, #0]
}
 8005ee2:	bf00      	nop
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eea:	4770      	bx	lr
 8005eec:	20000bd4 	.word	0x20000bd4

08005ef0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b082      	sub	sp, #8
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005ef8:	f000 f852 	bl	8005fa0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005efc:	4b06      	ldr	r3, [pc, #24]	; (8005f18 <prvIdleTask+0x28>)
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	2b01      	cmp	r3, #1
 8005f02:	d9f9      	bls.n	8005ef8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005f04:	4b05      	ldr	r3, [pc, #20]	; (8005f1c <prvIdleTask+0x2c>)
 8005f06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f0a:	601a      	str	r2, [r3, #0]
 8005f0c:	f3bf 8f4f 	dsb	sy
 8005f10:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005f14:	e7f0      	b.n	8005ef8 <prvIdleTask+0x8>
 8005f16:	bf00      	nop
 8005f18:	200006f0 	.word	0x200006f0
 8005f1c:	e000ed04 	.word	0xe000ed04

08005f20 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b082      	sub	sp, #8
 8005f24:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005f26:	2300      	movs	r3, #0
 8005f28:	607b      	str	r3, [r7, #4]
 8005f2a:	e00c      	b.n	8005f46 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005f2c:	687a      	ldr	r2, [r7, #4]
 8005f2e:	4613      	mov	r3, r2
 8005f30:	009b      	lsls	r3, r3, #2
 8005f32:	4413      	add	r3, r2
 8005f34:	009b      	lsls	r3, r3, #2
 8005f36:	4a12      	ldr	r2, [pc, #72]	; (8005f80 <prvInitialiseTaskLists+0x60>)
 8005f38:	4413      	add	r3, r2
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	f7fe fc52 	bl	80047e4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	3301      	adds	r3, #1
 8005f44:	607b      	str	r3, [r7, #4]
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	2b37      	cmp	r3, #55	; 0x37
 8005f4a:	d9ef      	bls.n	8005f2c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005f4c:	480d      	ldr	r0, [pc, #52]	; (8005f84 <prvInitialiseTaskLists+0x64>)
 8005f4e:	f7fe fc49 	bl	80047e4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005f52:	480d      	ldr	r0, [pc, #52]	; (8005f88 <prvInitialiseTaskLists+0x68>)
 8005f54:	f7fe fc46 	bl	80047e4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005f58:	480c      	ldr	r0, [pc, #48]	; (8005f8c <prvInitialiseTaskLists+0x6c>)
 8005f5a:	f7fe fc43 	bl	80047e4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005f5e:	480c      	ldr	r0, [pc, #48]	; (8005f90 <prvInitialiseTaskLists+0x70>)
 8005f60:	f7fe fc40 	bl	80047e4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005f64:	480b      	ldr	r0, [pc, #44]	; (8005f94 <prvInitialiseTaskLists+0x74>)
 8005f66:	f7fe fc3d 	bl	80047e4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005f6a:	4b0b      	ldr	r3, [pc, #44]	; (8005f98 <prvInitialiseTaskLists+0x78>)
 8005f6c:	4a05      	ldr	r2, [pc, #20]	; (8005f84 <prvInitialiseTaskLists+0x64>)
 8005f6e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005f70:	4b0a      	ldr	r3, [pc, #40]	; (8005f9c <prvInitialiseTaskLists+0x7c>)
 8005f72:	4a05      	ldr	r2, [pc, #20]	; (8005f88 <prvInitialiseTaskLists+0x68>)
 8005f74:	601a      	str	r2, [r3, #0]
}
 8005f76:	bf00      	nop
 8005f78:	3708      	adds	r7, #8
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	bd80      	pop	{r7, pc}
 8005f7e:	bf00      	nop
 8005f80:	200006f0 	.word	0x200006f0
 8005f84:	20000b50 	.word	0x20000b50
 8005f88:	20000b64 	.word	0x20000b64
 8005f8c:	20000b80 	.word	0x20000b80
 8005f90:	20000b94 	.word	0x20000b94
 8005f94:	20000bac 	.word	0x20000bac
 8005f98:	20000b78 	.word	0x20000b78
 8005f9c:	20000b7c 	.word	0x20000b7c

08005fa0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	b082      	sub	sp, #8
 8005fa4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005fa6:	e019      	b.n	8005fdc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005fa8:	f000 fe0c 	bl	8006bc4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005fac:	4b10      	ldr	r3, [pc, #64]	; (8005ff0 <prvCheckTasksWaitingTermination+0x50>)
 8005fae:	68db      	ldr	r3, [r3, #12]
 8005fb0:	68db      	ldr	r3, [r3, #12]
 8005fb2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	3304      	adds	r3, #4
 8005fb8:	4618      	mov	r0, r3
 8005fba:	f7fe fc9d 	bl	80048f8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005fbe:	4b0d      	ldr	r3, [pc, #52]	; (8005ff4 <prvCheckTasksWaitingTermination+0x54>)
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	3b01      	subs	r3, #1
 8005fc4:	4a0b      	ldr	r2, [pc, #44]	; (8005ff4 <prvCheckTasksWaitingTermination+0x54>)
 8005fc6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005fc8:	4b0b      	ldr	r3, [pc, #44]	; (8005ff8 <prvCheckTasksWaitingTermination+0x58>)
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	3b01      	subs	r3, #1
 8005fce:	4a0a      	ldr	r2, [pc, #40]	; (8005ff8 <prvCheckTasksWaitingTermination+0x58>)
 8005fd0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005fd2:	f000 fe27 	bl	8006c24 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005fd6:	6878      	ldr	r0, [r7, #4]
 8005fd8:	f000 f810 	bl	8005ffc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005fdc:	4b06      	ldr	r3, [pc, #24]	; (8005ff8 <prvCheckTasksWaitingTermination+0x58>)
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d1e1      	bne.n	8005fa8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005fe4:	bf00      	nop
 8005fe6:	bf00      	nop
 8005fe8:	3708      	adds	r7, #8
 8005fea:	46bd      	mov	sp, r7
 8005fec:	bd80      	pop	{r7, pc}
 8005fee:	bf00      	nop
 8005ff0:	20000b94 	.word	0x20000b94
 8005ff4:	20000bc0 	.word	0x20000bc0
 8005ff8:	20000ba8 	.word	0x20000ba8

08005ffc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b084      	sub	sp, #16
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800600a:	2b00      	cmp	r3, #0
 800600c:	d108      	bne.n	8006020 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006012:	4618      	mov	r0, r3
 8006014:	f000 ffc4 	bl	8006fa0 <vPortFree>
				vPortFree( pxTCB );
 8006018:	6878      	ldr	r0, [r7, #4]
 800601a:	f000 ffc1 	bl	8006fa0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800601e:	e018      	b.n	8006052 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006026:	2b01      	cmp	r3, #1
 8006028:	d103      	bne.n	8006032 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800602a:	6878      	ldr	r0, [r7, #4]
 800602c:	f000 ffb8 	bl	8006fa0 <vPortFree>
	}
 8006030:	e00f      	b.n	8006052 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006038:	2b02      	cmp	r3, #2
 800603a:	d00a      	beq.n	8006052 <prvDeleteTCB+0x56>
	__asm volatile
 800603c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006040:	f383 8811 	msr	BASEPRI, r3
 8006044:	f3bf 8f6f 	isb	sy
 8006048:	f3bf 8f4f 	dsb	sy
 800604c:	60fb      	str	r3, [r7, #12]
}
 800604e:	bf00      	nop
 8006050:	e7fe      	b.n	8006050 <prvDeleteTCB+0x54>
	}
 8006052:	bf00      	nop
 8006054:	3710      	adds	r7, #16
 8006056:	46bd      	mov	sp, r7
 8006058:	bd80      	pop	{r7, pc}
	...

0800605c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800605c:	b480      	push	{r7}
 800605e:	b083      	sub	sp, #12
 8006060:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006062:	4b0c      	ldr	r3, [pc, #48]	; (8006094 <prvResetNextTaskUnblockTime+0x38>)
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	2b00      	cmp	r3, #0
 800606a:	d104      	bne.n	8006076 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800606c:	4b0a      	ldr	r3, [pc, #40]	; (8006098 <prvResetNextTaskUnblockTime+0x3c>)
 800606e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006072:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006074:	e008      	b.n	8006088 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006076:	4b07      	ldr	r3, [pc, #28]	; (8006094 <prvResetNextTaskUnblockTime+0x38>)
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	68db      	ldr	r3, [r3, #12]
 800607c:	68db      	ldr	r3, [r3, #12]
 800607e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	685b      	ldr	r3, [r3, #4]
 8006084:	4a04      	ldr	r2, [pc, #16]	; (8006098 <prvResetNextTaskUnblockTime+0x3c>)
 8006086:	6013      	str	r3, [r2, #0]
}
 8006088:	bf00      	nop
 800608a:	370c      	adds	r7, #12
 800608c:	46bd      	mov	sp, r7
 800608e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006092:	4770      	bx	lr
 8006094:	20000b78 	.word	0x20000b78
 8006098:	20000be0 	.word	0x20000be0

0800609c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800609c:	b480      	push	{r7}
 800609e:	b083      	sub	sp, #12
 80060a0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80060a2:	4b0b      	ldr	r3, [pc, #44]	; (80060d0 <xTaskGetSchedulerState+0x34>)
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d102      	bne.n	80060b0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80060aa:	2301      	movs	r3, #1
 80060ac:	607b      	str	r3, [r7, #4]
 80060ae:	e008      	b.n	80060c2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80060b0:	4b08      	ldr	r3, [pc, #32]	; (80060d4 <xTaskGetSchedulerState+0x38>)
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d102      	bne.n	80060be <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80060b8:	2302      	movs	r3, #2
 80060ba:	607b      	str	r3, [r7, #4]
 80060bc:	e001      	b.n	80060c2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80060be:	2300      	movs	r3, #0
 80060c0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80060c2:	687b      	ldr	r3, [r7, #4]
	}
 80060c4:	4618      	mov	r0, r3
 80060c6:	370c      	adds	r7, #12
 80060c8:	46bd      	mov	sp, r7
 80060ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ce:	4770      	bx	lr
 80060d0:	20000bcc 	.word	0x20000bcc
 80060d4:	20000be8 	.word	0x20000be8

080060d8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b086      	sub	sp, #24
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80060e4:	2300      	movs	r3, #0
 80060e6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d056      	beq.n	800619c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80060ee:	4b2e      	ldr	r3, [pc, #184]	; (80061a8 <xTaskPriorityDisinherit+0xd0>)
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	693a      	ldr	r2, [r7, #16]
 80060f4:	429a      	cmp	r2, r3
 80060f6:	d00a      	beq.n	800610e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80060f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060fc:	f383 8811 	msr	BASEPRI, r3
 8006100:	f3bf 8f6f 	isb	sy
 8006104:	f3bf 8f4f 	dsb	sy
 8006108:	60fb      	str	r3, [r7, #12]
}
 800610a:	bf00      	nop
 800610c:	e7fe      	b.n	800610c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800610e:	693b      	ldr	r3, [r7, #16]
 8006110:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006112:	2b00      	cmp	r3, #0
 8006114:	d10a      	bne.n	800612c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006116:	f04f 0350 	mov.w	r3, #80	; 0x50
 800611a:	f383 8811 	msr	BASEPRI, r3
 800611e:	f3bf 8f6f 	isb	sy
 8006122:	f3bf 8f4f 	dsb	sy
 8006126:	60bb      	str	r3, [r7, #8]
}
 8006128:	bf00      	nop
 800612a:	e7fe      	b.n	800612a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800612c:	693b      	ldr	r3, [r7, #16]
 800612e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006130:	1e5a      	subs	r2, r3, #1
 8006132:	693b      	ldr	r3, [r7, #16]
 8006134:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006136:	693b      	ldr	r3, [r7, #16]
 8006138:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800613a:	693b      	ldr	r3, [r7, #16]
 800613c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800613e:	429a      	cmp	r2, r3
 8006140:	d02c      	beq.n	800619c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006142:	693b      	ldr	r3, [r7, #16]
 8006144:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006146:	2b00      	cmp	r3, #0
 8006148:	d128      	bne.n	800619c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800614a:	693b      	ldr	r3, [r7, #16]
 800614c:	3304      	adds	r3, #4
 800614e:	4618      	mov	r0, r3
 8006150:	f7fe fbd2 	bl	80048f8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006154:	693b      	ldr	r3, [r7, #16]
 8006156:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006158:	693b      	ldr	r3, [r7, #16]
 800615a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800615c:	693b      	ldr	r3, [r7, #16]
 800615e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006160:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006164:	693b      	ldr	r3, [r7, #16]
 8006166:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006168:	693b      	ldr	r3, [r7, #16]
 800616a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800616c:	4b0f      	ldr	r3, [pc, #60]	; (80061ac <xTaskPriorityDisinherit+0xd4>)
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	429a      	cmp	r2, r3
 8006172:	d903      	bls.n	800617c <xTaskPriorityDisinherit+0xa4>
 8006174:	693b      	ldr	r3, [r7, #16]
 8006176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006178:	4a0c      	ldr	r2, [pc, #48]	; (80061ac <xTaskPriorityDisinherit+0xd4>)
 800617a:	6013      	str	r3, [r2, #0]
 800617c:	693b      	ldr	r3, [r7, #16]
 800617e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006180:	4613      	mov	r3, r2
 8006182:	009b      	lsls	r3, r3, #2
 8006184:	4413      	add	r3, r2
 8006186:	009b      	lsls	r3, r3, #2
 8006188:	4a09      	ldr	r2, [pc, #36]	; (80061b0 <xTaskPriorityDisinherit+0xd8>)
 800618a:	441a      	add	r2, r3
 800618c:	693b      	ldr	r3, [r7, #16]
 800618e:	3304      	adds	r3, #4
 8006190:	4619      	mov	r1, r3
 8006192:	4610      	mov	r0, r2
 8006194:	f7fe fb53 	bl	800483e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006198:	2301      	movs	r3, #1
 800619a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800619c:	697b      	ldr	r3, [r7, #20]
	}
 800619e:	4618      	mov	r0, r3
 80061a0:	3718      	adds	r7, #24
 80061a2:	46bd      	mov	sp, r7
 80061a4:	bd80      	pop	{r7, pc}
 80061a6:	bf00      	nop
 80061a8:	200006ec 	.word	0x200006ec
 80061ac:	20000bc8 	.word	0x20000bc8
 80061b0:	200006f0 	.word	0x200006f0

080061b4 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 80061b4:	b480      	push	{r7}
 80061b6:	b083      	sub	sp, #12
 80061b8:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 80061ba:	4b09      	ldr	r3, [pc, #36]	; (80061e0 <uxTaskResetEventItemValue+0x2c>)
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	699b      	ldr	r3, [r3, #24]
 80061c0:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80061c2:	4b07      	ldr	r3, [pc, #28]	; (80061e0 <uxTaskResetEventItemValue+0x2c>)
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061c8:	4b05      	ldr	r3, [pc, #20]	; (80061e0 <uxTaskResetEventItemValue+0x2c>)
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 80061d0:	619a      	str	r2, [r3, #24]

	return uxReturn;
 80061d2:	687b      	ldr	r3, [r7, #4]
}
 80061d4:	4618      	mov	r0, r3
 80061d6:	370c      	adds	r7, #12
 80061d8:	46bd      	mov	sp, r7
 80061da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061de:	4770      	bx	lr
 80061e0:	200006ec 	.word	0x200006ec

080061e4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80061e4:	b580      	push	{r7, lr}
 80061e6:	b084      	sub	sp, #16
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	6078      	str	r0, [r7, #4]
 80061ec:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80061ee:	4b21      	ldr	r3, [pc, #132]	; (8006274 <prvAddCurrentTaskToDelayedList+0x90>)
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80061f4:	4b20      	ldr	r3, [pc, #128]	; (8006278 <prvAddCurrentTaskToDelayedList+0x94>)
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	3304      	adds	r3, #4
 80061fa:	4618      	mov	r0, r3
 80061fc:	f7fe fb7c 	bl	80048f8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006206:	d10a      	bne.n	800621e <prvAddCurrentTaskToDelayedList+0x3a>
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d007      	beq.n	800621e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800620e:	4b1a      	ldr	r3, [pc, #104]	; (8006278 <prvAddCurrentTaskToDelayedList+0x94>)
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	3304      	adds	r3, #4
 8006214:	4619      	mov	r1, r3
 8006216:	4819      	ldr	r0, [pc, #100]	; (800627c <prvAddCurrentTaskToDelayedList+0x98>)
 8006218:	f7fe fb11 	bl	800483e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800621c:	e026      	b.n	800626c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800621e:	68fa      	ldr	r2, [r7, #12]
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	4413      	add	r3, r2
 8006224:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006226:	4b14      	ldr	r3, [pc, #80]	; (8006278 <prvAddCurrentTaskToDelayedList+0x94>)
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	68ba      	ldr	r2, [r7, #8]
 800622c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800622e:	68ba      	ldr	r2, [r7, #8]
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	429a      	cmp	r2, r3
 8006234:	d209      	bcs.n	800624a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006236:	4b12      	ldr	r3, [pc, #72]	; (8006280 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006238:	681a      	ldr	r2, [r3, #0]
 800623a:	4b0f      	ldr	r3, [pc, #60]	; (8006278 <prvAddCurrentTaskToDelayedList+0x94>)
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	3304      	adds	r3, #4
 8006240:	4619      	mov	r1, r3
 8006242:	4610      	mov	r0, r2
 8006244:	f7fe fb1f 	bl	8004886 <vListInsert>
}
 8006248:	e010      	b.n	800626c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800624a:	4b0e      	ldr	r3, [pc, #56]	; (8006284 <prvAddCurrentTaskToDelayedList+0xa0>)
 800624c:	681a      	ldr	r2, [r3, #0]
 800624e:	4b0a      	ldr	r3, [pc, #40]	; (8006278 <prvAddCurrentTaskToDelayedList+0x94>)
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	3304      	adds	r3, #4
 8006254:	4619      	mov	r1, r3
 8006256:	4610      	mov	r0, r2
 8006258:	f7fe fb15 	bl	8004886 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800625c:	4b0a      	ldr	r3, [pc, #40]	; (8006288 <prvAddCurrentTaskToDelayedList+0xa4>)
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	68ba      	ldr	r2, [r7, #8]
 8006262:	429a      	cmp	r2, r3
 8006264:	d202      	bcs.n	800626c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006266:	4a08      	ldr	r2, [pc, #32]	; (8006288 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006268:	68bb      	ldr	r3, [r7, #8]
 800626a:	6013      	str	r3, [r2, #0]
}
 800626c:	bf00      	nop
 800626e:	3710      	adds	r7, #16
 8006270:	46bd      	mov	sp, r7
 8006272:	bd80      	pop	{r7, pc}
 8006274:	20000bc4 	.word	0x20000bc4
 8006278:	200006ec 	.word	0x200006ec
 800627c:	20000bac 	.word	0x20000bac
 8006280:	20000b7c 	.word	0x20000b7c
 8006284:	20000b78 	.word	0x20000b78
 8006288:	20000be0 	.word	0x20000be0

0800628c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800628c:	b580      	push	{r7, lr}
 800628e:	b08a      	sub	sp, #40	; 0x28
 8006290:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006292:	2300      	movs	r3, #0
 8006294:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006296:	f000 fb07 	bl	80068a8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800629a:	4b1c      	ldr	r3, [pc, #112]	; (800630c <xTimerCreateTimerTask+0x80>)
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d021      	beq.n	80062e6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80062a2:	2300      	movs	r3, #0
 80062a4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80062a6:	2300      	movs	r3, #0
 80062a8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80062aa:	1d3a      	adds	r2, r7, #4
 80062ac:	f107 0108 	add.w	r1, r7, #8
 80062b0:	f107 030c 	add.w	r3, r7, #12
 80062b4:	4618      	mov	r0, r3
 80062b6:	f7fe f80f 	bl	80042d8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80062ba:	6879      	ldr	r1, [r7, #4]
 80062bc:	68bb      	ldr	r3, [r7, #8]
 80062be:	68fa      	ldr	r2, [r7, #12]
 80062c0:	9202      	str	r2, [sp, #8]
 80062c2:	9301      	str	r3, [sp, #4]
 80062c4:	2302      	movs	r3, #2
 80062c6:	9300      	str	r3, [sp, #0]
 80062c8:	2300      	movs	r3, #0
 80062ca:	460a      	mov	r2, r1
 80062cc:	4910      	ldr	r1, [pc, #64]	; (8006310 <xTimerCreateTimerTask+0x84>)
 80062ce:	4811      	ldr	r0, [pc, #68]	; (8006314 <xTimerCreateTimerTask+0x88>)
 80062d0:	f7ff f828 	bl	8005324 <xTaskCreateStatic>
 80062d4:	4603      	mov	r3, r0
 80062d6:	4a10      	ldr	r2, [pc, #64]	; (8006318 <xTimerCreateTimerTask+0x8c>)
 80062d8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80062da:	4b0f      	ldr	r3, [pc, #60]	; (8006318 <xTimerCreateTimerTask+0x8c>)
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d001      	beq.n	80062e6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80062e2:	2301      	movs	r3, #1
 80062e4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80062e6:	697b      	ldr	r3, [r7, #20]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d10a      	bne.n	8006302 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80062ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062f0:	f383 8811 	msr	BASEPRI, r3
 80062f4:	f3bf 8f6f 	isb	sy
 80062f8:	f3bf 8f4f 	dsb	sy
 80062fc:	613b      	str	r3, [r7, #16]
}
 80062fe:	bf00      	nop
 8006300:	e7fe      	b.n	8006300 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006302:	697b      	ldr	r3, [r7, #20]
}
 8006304:	4618      	mov	r0, r3
 8006306:	3718      	adds	r7, #24
 8006308:	46bd      	mov	sp, r7
 800630a:	bd80      	pop	{r7, pc}
 800630c:	20000c1c 	.word	0x20000c1c
 8006310:	080072b0 	.word	0x080072b0
 8006314:	08006451 	.word	0x08006451
 8006318:	20000c20 	.word	0x20000c20

0800631c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800631c:	b580      	push	{r7, lr}
 800631e:	b08a      	sub	sp, #40	; 0x28
 8006320:	af00      	add	r7, sp, #0
 8006322:	60f8      	str	r0, [r7, #12]
 8006324:	60b9      	str	r1, [r7, #8]
 8006326:	607a      	str	r2, [r7, #4]
 8006328:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800632a:	2300      	movs	r3, #0
 800632c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	2b00      	cmp	r3, #0
 8006332:	d10a      	bne.n	800634a <xTimerGenericCommand+0x2e>
	__asm volatile
 8006334:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006338:	f383 8811 	msr	BASEPRI, r3
 800633c:	f3bf 8f6f 	isb	sy
 8006340:	f3bf 8f4f 	dsb	sy
 8006344:	623b      	str	r3, [r7, #32]
}
 8006346:	bf00      	nop
 8006348:	e7fe      	b.n	8006348 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800634a:	4b1a      	ldr	r3, [pc, #104]	; (80063b4 <xTimerGenericCommand+0x98>)
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d02a      	beq.n	80063a8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006352:	68bb      	ldr	r3, [r7, #8]
 8006354:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800635e:	68bb      	ldr	r3, [r7, #8]
 8006360:	2b05      	cmp	r3, #5
 8006362:	dc18      	bgt.n	8006396 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006364:	f7ff fe9a 	bl	800609c <xTaskGetSchedulerState>
 8006368:	4603      	mov	r3, r0
 800636a:	2b02      	cmp	r3, #2
 800636c:	d109      	bne.n	8006382 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800636e:	4b11      	ldr	r3, [pc, #68]	; (80063b4 <xTimerGenericCommand+0x98>)
 8006370:	6818      	ldr	r0, [r3, #0]
 8006372:	f107 0110 	add.w	r1, r7, #16
 8006376:	2300      	movs	r3, #0
 8006378:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800637a:	f7fe fbeb 	bl	8004b54 <xQueueGenericSend>
 800637e:	6278      	str	r0, [r7, #36]	; 0x24
 8006380:	e012      	b.n	80063a8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006382:	4b0c      	ldr	r3, [pc, #48]	; (80063b4 <xTimerGenericCommand+0x98>)
 8006384:	6818      	ldr	r0, [r3, #0]
 8006386:	f107 0110 	add.w	r1, r7, #16
 800638a:	2300      	movs	r3, #0
 800638c:	2200      	movs	r2, #0
 800638e:	f7fe fbe1 	bl	8004b54 <xQueueGenericSend>
 8006392:	6278      	str	r0, [r7, #36]	; 0x24
 8006394:	e008      	b.n	80063a8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006396:	4b07      	ldr	r3, [pc, #28]	; (80063b4 <xTimerGenericCommand+0x98>)
 8006398:	6818      	ldr	r0, [r3, #0]
 800639a:	f107 0110 	add.w	r1, r7, #16
 800639e:	2300      	movs	r3, #0
 80063a0:	683a      	ldr	r2, [r7, #0]
 80063a2:	f7fe fcd5 	bl	8004d50 <xQueueGenericSendFromISR>
 80063a6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80063a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80063aa:	4618      	mov	r0, r3
 80063ac:	3728      	adds	r7, #40	; 0x28
 80063ae:	46bd      	mov	sp, r7
 80063b0:	bd80      	pop	{r7, pc}
 80063b2:	bf00      	nop
 80063b4:	20000c1c 	.word	0x20000c1c

080063b8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b088      	sub	sp, #32
 80063bc:	af02      	add	r7, sp, #8
 80063be:	6078      	str	r0, [r7, #4]
 80063c0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80063c2:	4b22      	ldr	r3, [pc, #136]	; (800644c <prvProcessExpiredTimer+0x94>)
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	68db      	ldr	r3, [r3, #12]
 80063c8:	68db      	ldr	r3, [r3, #12]
 80063ca:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80063cc:	697b      	ldr	r3, [r7, #20]
 80063ce:	3304      	adds	r3, #4
 80063d0:	4618      	mov	r0, r3
 80063d2:	f7fe fa91 	bl	80048f8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80063d6:	697b      	ldr	r3, [r7, #20]
 80063d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80063dc:	f003 0304 	and.w	r3, r3, #4
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d022      	beq.n	800642a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80063e4:	697b      	ldr	r3, [r7, #20]
 80063e6:	699a      	ldr	r2, [r3, #24]
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	18d1      	adds	r1, r2, r3
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	683a      	ldr	r2, [r7, #0]
 80063f0:	6978      	ldr	r0, [r7, #20]
 80063f2:	f000 f8d1 	bl	8006598 <prvInsertTimerInActiveList>
 80063f6:	4603      	mov	r3, r0
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d01f      	beq.n	800643c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80063fc:	2300      	movs	r3, #0
 80063fe:	9300      	str	r3, [sp, #0]
 8006400:	2300      	movs	r3, #0
 8006402:	687a      	ldr	r2, [r7, #4]
 8006404:	2100      	movs	r1, #0
 8006406:	6978      	ldr	r0, [r7, #20]
 8006408:	f7ff ff88 	bl	800631c <xTimerGenericCommand>
 800640c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800640e:	693b      	ldr	r3, [r7, #16]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d113      	bne.n	800643c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8006414:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006418:	f383 8811 	msr	BASEPRI, r3
 800641c:	f3bf 8f6f 	isb	sy
 8006420:	f3bf 8f4f 	dsb	sy
 8006424:	60fb      	str	r3, [r7, #12]
}
 8006426:	bf00      	nop
 8006428:	e7fe      	b.n	8006428 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800642a:	697b      	ldr	r3, [r7, #20]
 800642c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006430:	f023 0301 	bic.w	r3, r3, #1
 8006434:	b2da      	uxtb	r2, r3
 8006436:	697b      	ldr	r3, [r7, #20]
 8006438:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800643c:	697b      	ldr	r3, [r7, #20]
 800643e:	6a1b      	ldr	r3, [r3, #32]
 8006440:	6978      	ldr	r0, [r7, #20]
 8006442:	4798      	blx	r3
}
 8006444:	bf00      	nop
 8006446:	3718      	adds	r7, #24
 8006448:	46bd      	mov	sp, r7
 800644a:	bd80      	pop	{r7, pc}
 800644c:	20000c14 	.word	0x20000c14

08006450 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006450:	b580      	push	{r7, lr}
 8006452:	b084      	sub	sp, #16
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006458:	f107 0308 	add.w	r3, r7, #8
 800645c:	4618      	mov	r0, r3
 800645e:	f000 f857 	bl	8006510 <prvGetNextExpireTime>
 8006462:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006464:	68bb      	ldr	r3, [r7, #8]
 8006466:	4619      	mov	r1, r3
 8006468:	68f8      	ldr	r0, [r7, #12]
 800646a:	f000 f803 	bl	8006474 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800646e:	f000 f8d5 	bl	800661c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006472:	e7f1      	b.n	8006458 <prvTimerTask+0x8>

08006474 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006474:	b580      	push	{r7, lr}
 8006476:	b084      	sub	sp, #16
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
 800647c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800647e:	f7ff f98d 	bl	800579c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006482:	f107 0308 	add.w	r3, r7, #8
 8006486:	4618      	mov	r0, r3
 8006488:	f000 f866 	bl	8006558 <prvSampleTimeNow>
 800648c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800648e:	68bb      	ldr	r3, [r7, #8]
 8006490:	2b00      	cmp	r3, #0
 8006492:	d130      	bne.n	80064f6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d10a      	bne.n	80064b0 <prvProcessTimerOrBlockTask+0x3c>
 800649a:	687a      	ldr	r2, [r7, #4]
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	429a      	cmp	r2, r3
 80064a0:	d806      	bhi.n	80064b0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80064a2:	f7ff f989 	bl	80057b8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80064a6:	68f9      	ldr	r1, [r7, #12]
 80064a8:	6878      	ldr	r0, [r7, #4]
 80064aa:	f7ff ff85 	bl	80063b8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80064ae:	e024      	b.n	80064fa <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d008      	beq.n	80064c8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80064b6:	4b13      	ldr	r3, [pc, #76]	; (8006504 <prvProcessTimerOrBlockTask+0x90>)
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d101      	bne.n	80064c4 <prvProcessTimerOrBlockTask+0x50>
 80064c0:	2301      	movs	r3, #1
 80064c2:	e000      	b.n	80064c6 <prvProcessTimerOrBlockTask+0x52>
 80064c4:	2300      	movs	r3, #0
 80064c6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80064c8:	4b0f      	ldr	r3, [pc, #60]	; (8006508 <prvProcessTimerOrBlockTask+0x94>)
 80064ca:	6818      	ldr	r0, [r3, #0]
 80064cc:	687a      	ldr	r2, [r7, #4]
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	1ad3      	subs	r3, r2, r3
 80064d2:	683a      	ldr	r2, [r7, #0]
 80064d4:	4619      	mov	r1, r3
 80064d6:	f7fe fef1 	bl	80052bc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80064da:	f7ff f96d 	bl	80057b8 <xTaskResumeAll>
 80064de:	4603      	mov	r3, r0
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d10a      	bne.n	80064fa <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80064e4:	4b09      	ldr	r3, [pc, #36]	; (800650c <prvProcessTimerOrBlockTask+0x98>)
 80064e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064ea:	601a      	str	r2, [r3, #0]
 80064ec:	f3bf 8f4f 	dsb	sy
 80064f0:	f3bf 8f6f 	isb	sy
}
 80064f4:	e001      	b.n	80064fa <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80064f6:	f7ff f95f 	bl	80057b8 <xTaskResumeAll>
}
 80064fa:	bf00      	nop
 80064fc:	3710      	adds	r7, #16
 80064fe:	46bd      	mov	sp, r7
 8006500:	bd80      	pop	{r7, pc}
 8006502:	bf00      	nop
 8006504:	20000c18 	.word	0x20000c18
 8006508:	20000c1c 	.word	0x20000c1c
 800650c:	e000ed04 	.word	0xe000ed04

08006510 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006510:	b480      	push	{r7}
 8006512:	b085      	sub	sp, #20
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006518:	4b0e      	ldr	r3, [pc, #56]	; (8006554 <prvGetNextExpireTime+0x44>)
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d101      	bne.n	8006526 <prvGetNextExpireTime+0x16>
 8006522:	2201      	movs	r2, #1
 8006524:	e000      	b.n	8006528 <prvGetNextExpireTime+0x18>
 8006526:	2200      	movs	r2, #0
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	2b00      	cmp	r3, #0
 8006532:	d105      	bne.n	8006540 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006534:	4b07      	ldr	r3, [pc, #28]	; (8006554 <prvGetNextExpireTime+0x44>)
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	68db      	ldr	r3, [r3, #12]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	60fb      	str	r3, [r7, #12]
 800653e:	e001      	b.n	8006544 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006540:	2300      	movs	r3, #0
 8006542:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006544:	68fb      	ldr	r3, [r7, #12]
}
 8006546:	4618      	mov	r0, r3
 8006548:	3714      	adds	r7, #20
 800654a:	46bd      	mov	sp, r7
 800654c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006550:	4770      	bx	lr
 8006552:	bf00      	nop
 8006554:	20000c14 	.word	0x20000c14

08006558 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006558:	b580      	push	{r7, lr}
 800655a:	b084      	sub	sp, #16
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006560:	f7ff f9c8 	bl	80058f4 <xTaskGetTickCount>
 8006564:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006566:	4b0b      	ldr	r3, [pc, #44]	; (8006594 <prvSampleTimeNow+0x3c>)
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	68fa      	ldr	r2, [r7, #12]
 800656c:	429a      	cmp	r2, r3
 800656e:	d205      	bcs.n	800657c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006570:	f000 f936 	bl	80067e0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2201      	movs	r2, #1
 8006578:	601a      	str	r2, [r3, #0]
 800657a:	e002      	b.n	8006582 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2200      	movs	r2, #0
 8006580:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006582:	4a04      	ldr	r2, [pc, #16]	; (8006594 <prvSampleTimeNow+0x3c>)
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006588:	68fb      	ldr	r3, [r7, #12]
}
 800658a:	4618      	mov	r0, r3
 800658c:	3710      	adds	r7, #16
 800658e:	46bd      	mov	sp, r7
 8006590:	bd80      	pop	{r7, pc}
 8006592:	bf00      	nop
 8006594:	20000c24 	.word	0x20000c24

08006598 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006598:	b580      	push	{r7, lr}
 800659a:	b086      	sub	sp, #24
 800659c:	af00      	add	r7, sp, #0
 800659e:	60f8      	str	r0, [r7, #12]
 80065a0:	60b9      	str	r1, [r7, #8]
 80065a2:	607a      	str	r2, [r7, #4]
 80065a4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80065a6:	2300      	movs	r3, #0
 80065a8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	68ba      	ldr	r2, [r7, #8]
 80065ae:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	68fa      	ldr	r2, [r7, #12]
 80065b4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80065b6:	68ba      	ldr	r2, [r7, #8]
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	429a      	cmp	r2, r3
 80065bc:	d812      	bhi.n	80065e4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80065be:	687a      	ldr	r2, [r7, #4]
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	1ad2      	subs	r2, r2, r3
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	699b      	ldr	r3, [r3, #24]
 80065c8:	429a      	cmp	r2, r3
 80065ca:	d302      	bcc.n	80065d2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80065cc:	2301      	movs	r3, #1
 80065ce:	617b      	str	r3, [r7, #20]
 80065d0:	e01b      	b.n	800660a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80065d2:	4b10      	ldr	r3, [pc, #64]	; (8006614 <prvInsertTimerInActiveList+0x7c>)
 80065d4:	681a      	ldr	r2, [r3, #0]
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	3304      	adds	r3, #4
 80065da:	4619      	mov	r1, r3
 80065dc:	4610      	mov	r0, r2
 80065de:	f7fe f952 	bl	8004886 <vListInsert>
 80065e2:	e012      	b.n	800660a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80065e4:	687a      	ldr	r2, [r7, #4]
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	429a      	cmp	r2, r3
 80065ea:	d206      	bcs.n	80065fa <prvInsertTimerInActiveList+0x62>
 80065ec:	68ba      	ldr	r2, [r7, #8]
 80065ee:	683b      	ldr	r3, [r7, #0]
 80065f0:	429a      	cmp	r2, r3
 80065f2:	d302      	bcc.n	80065fa <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80065f4:	2301      	movs	r3, #1
 80065f6:	617b      	str	r3, [r7, #20]
 80065f8:	e007      	b.n	800660a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80065fa:	4b07      	ldr	r3, [pc, #28]	; (8006618 <prvInsertTimerInActiveList+0x80>)
 80065fc:	681a      	ldr	r2, [r3, #0]
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	3304      	adds	r3, #4
 8006602:	4619      	mov	r1, r3
 8006604:	4610      	mov	r0, r2
 8006606:	f7fe f93e 	bl	8004886 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800660a:	697b      	ldr	r3, [r7, #20]
}
 800660c:	4618      	mov	r0, r3
 800660e:	3718      	adds	r7, #24
 8006610:	46bd      	mov	sp, r7
 8006612:	bd80      	pop	{r7, pc}
 8006614:	20000c18 	.word	0x20000c18
 8006618:	20000c14 	.word	0x20000c14

0800661c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800661c:	b580      	push	{r7, lr}
 800661e:	b08e      	sub	sp, #56	; 0x38
 8006620:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006622:	e0ca      	b.n	80067ba <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2b00      	cmp	r3, #0
 8006628:	da18      	bge.n	800665c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800662a:	1d3b      	adds	r3, r7, #4
 800662c:	3304      	adds	r3, #4
 800662e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006630:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006632:	2b00      	cmp	r3, #0
 8006634:	d10a      	bne.n	800664c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8006636:	f04f 0350 	mov.w	r3, #80	; 0x50
 800663a:	f383 8811 	msr	BASEPRI, r3
 800663e:	f3bf 8f6f 	isb	sy
 8006642:	f3bf 8f4f 	dsb	sy
 8006646:	61fb      	str	r3, [r7, #28]
}
 8006648:	bf00      	nop
 800664a:	e7fe      	b.n	800664a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800664c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006652:	6850      	ldr	r0, [r2, #4]
 8006654:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006656:	6892      	ldr	r2, [r2, #8]
 8006658:	4611      	mov	r1, r2
 800665a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2b00      	cmp	r3, #0
 8006660:	f2c0 80aa 	blt.w	80067b8 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800666a:	695b      	ldr	r3, [r3, #20]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d004      	beq.n	800667a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006672:	3304      	adds	r3, #4
 8006674:	4618      	mov	r0, r3
 8006676:	f7fe f93f 	bl	80048f8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800667a:	463b      	mov	r3, r7
 800667c:	4618      	mov	r0, r3
 800667e:	f7ff ff6b 	bl	8006558 <prvSampleTimeNow>
 8006682:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2b09      	cmp	r3, #9
 8006688:	f200 8097 	bhi.w	80067ba <prvProcessReceivedCommands+0x19e>
 800668c:	a201      	add	r2, pc, #4	; (adr r2, 8006694 <prvProcessReceivedCommands+0x78>)
 800668e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006692:	bf00      	nop
 8006694:	080066bd 	.word	0x080066bd
 8006698:	080066bd 	.word	0x080066bd
 800669c:	080066bd 	.word	0x080066bd
 80066a0:	08006731 	.word	0x08006731
 80066a4:	08006745 	.word	0x08006745
 80066a8:	0800678f 	.word	0x0800678f
 80066ac:	080066bd 	.word	0x080066bd
 80066b0:	080066bd 	.word	0x080066bd
 80066b4:	08006731 	.word	0x08006731
 80066b8:	08006745 	.word	0x08006745
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80066bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066be:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80066c2:	f043 0301 	orr.w	r3, r3, #1
 80066c6:	b2da      	uxtb	r2, r3
 80066c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066ca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80066ce:	68ba      	ldr	r2, [r7, #8]
 80066d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066d2:	699b      	ldr	r3, [r3, #24]
 80066d4:	18d1      	adds	r1, r2, r3
 80066d6:	68bb      	ldr	r3, [r7, #8]
 80066d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80066dc:	f7ff ff5c 	bl	8006598 <prvInsertTimerInActiveList>
 80066e0:	4603      	mov	r3, r0
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d069      	beq.n	80067ba <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80066e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066e8:	6a1b      	ldr	r3, [r3, #32]
 80066ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80066ec:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80066ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80066f4:	f003 0304 	and.w	r3, r3, #4
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d05e      	beq.n	80067ba <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80066fc:	68ba      	ldr	r2, [r7, #8]
 80066fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006700:	699b      	ldr	r3, [r3, #24]
 8006702:	441a      	add	r2, r3
 8006704:	2300      	movs	r3, #0
 8006706:	9300      	str	r3, [sp, #0]
 8006708:	2300      	movs	r3, #0
 800670a:	2100      	movs	r1, #0
 800670c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800670e:	f7ff fe05 	bl	800631c <xTimerGenericCommand>
 8006712:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006714:	6a3b      	ldr	r3, [r7, #32]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d14f      	bne.n	80067ba <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800671a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800671e:	f383 8811 	msr	BASEPRI, r3
 8006722:	f3bf 8f6f 	isb	sy
 8006726:	f3bf 8f4f 	dsb	sy
 800672a:	61bb      	str	r3, [r7, #24]
}
 800672c:	bf00      	nop
 800672e:	e7fe      	b.n	800672e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006732:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006736:	f023 0301 	bic.w	r3, r3, #1
 800673a:	b2da      	uxtb	r2, r3
 800673c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800673e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8006742:	e03a      	b.n	80067ba <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006746:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800674a:	f043 0301 	orr.w	r3, r3, #1
 800674e:	b2da      	uxtb	r2, r3
 8006750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006752:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006756:	68ba      	ldr	r2, [r7, #8]
 8006758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800675a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800675c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800675e:	699b      	ldr	r3, [r3, #24]
 8006760:	2b00      	cmp	r3, #0
 8006762:	d10a      	bne.n	800677a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8006764:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006768:	f383 8811 	msr	BASEPRI, r3
 800676c:	f3bf 8f6f 	isb	sy
 8006770:	f3bf 8f4f 	dsb	sy
 8006774:	617b      	str	r3, [r7, #20]
}
 8006776:	bf00      	nop
 8006778:	e7fe      	b.n	8006778 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800677a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800677c:	699a      	ldr	r2, [r3, #24]
 800677e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006780:	18d1      	adds	r1, r2, r3
 8006782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006784:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006786:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006788:	f7ff ff06 	bl	8006598 <prvInsertTimerInActiveList>
					break;
 800678c:	e015      	b.n	80067ba <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800678e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006790:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006794:	f003 0302 	and.w	r3, r3, #2
 8006798:	2b00      	cmp	r3, #0
 800679a:	d103      	bne.n	80067a4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800679c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800679e:	f000 fbff 	bl	8006fa0 <vPortFree>
 80067a2:	e00a      	b.n	80067ba <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80067a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067a6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80067aa:	f023 0301 	bic.w	r3, r3, #1
 80067ae:	b2da      	uxtb	r2, r3
 80067b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067b2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80067b6:	e000      	b.n	80067ba <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80067b8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80067ba:	4b08      	ldr	r3, [pc, #32]	; (80067dc <prvProcessReceivedCommands+0x1c0>)
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	1d39      	adds	r1, r7, #4
 80067c0:	2200      	movs	r2, #0
 80067c2:	4618      	mov	r0, r3
 80067c4:	f7fe fb60 	bl	8004e88 <xQueueReceive>
 80067c8:	4603      	mov	r3, r0
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	f47f af2a 	bne.w	8006624 <prvProcessReceivedCommands+0x8>
	}
}
 80067d0:	bf00      	nop
 80067d2:	bf00      	nop
 80067d4:	3730      	adds	r7, #48	; 0x30
 80067d6:	46bd      	mov	sp, r7
 80067d8:	bd80      	pop	{r7, pc}
 80067da:	bf00      	nop
 80067dc:	20000c1c 	.word	0x20000c1c

080067e0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80067e0:	b580      	push	{r7, lr}
 80067e2:	b088      	sub	sp, #32
 80067e4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80067e6:	e048      	b.n	800687a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80067e8:	4b2d      	ldr	r3, [pc, #180]	; (80068a0 <prvSwitchTimerLists+0xc0>)
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	68db      	ldr	r3, [r3, #12]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80067f2:	4b2b      	ldr	r3, [pc, #172]	; (80068a0 <prvSwitchTimerLists+0xc0>)
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	68db      	ldr	r3, [r3, #12]
 80067f8:	68db      	ldr	r3, [r3, #12]
 80067fa:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	3304      	adds	r3, #4
 8006800:	4618      	mov	r0, r3
 8006802:	f7fe f879 	bl	80048f8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	6a1b      	ldr	r3, [r3, #32]
 800680a:	68f8      	ldr	r0, [r7, #12]
 800680c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006814:	f003 0304 	and.w	r3, r3, #4
 8006818:	2b00      	cmp	r3, #0
 800681a:	d02e      	beq.n	800687a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	699b      	ldr	r3, [r3, #24]
 8006820:	693a      	ldr	r2, [r7, #16]
 8006822:	4413      	add	r3, r2
 8006824:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006826:	68ba      	ldr	r2, [r7, #8]
 8006828:	693b      	ldr	r3, [r7, #16]
 800682a:	429a      	cmp	r2, r3
 800682c:	d90e      	bls.n	800684c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	68ba      	ldr	r2, [r7, #8]
 8006832:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	68fa      	ldr	r2, [r7, #12]
 8006838:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800683a:	4b19      	ldr	r3, [pc, #100]	; (80068a0 <prvSwitchTimerLists+0xc0>)
 800683c:	681a      	ldr	r2, [r3, #0]
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	3304      	adds	r3, #4
 8006842:	4619      	mov	r1, r3
 8006844:	4610      	mov	r0, r2
 8006846:	f7fe f81e 	bl	8004886 <vListInsert>
 800684a:	e016      	b.n	800687a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800684c:	2300      	movs	r3, #0
 800684e:	9300      	str	r3, [sp, #0]
 8006850:	2300      	movs	r3, #0
 8006852:	693a      	ldr	r2, [r7, #16]
 8006854:	2100      	movs	r1, #0
 8006856:	68f8      	ldr	r0, [r7, #12]
 8006858:	f7ff fd60 	bl	800631c <xTimerGenericCommand>
 800685c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	2b00      	cmp	r3, #0
 8006862:	d10a      	bne.n	800687a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8006864:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006868:	f383 8811 	msr	BASEPRI, r3
 800686c:	f3bf 8f6f 	isb	sy
 8006870:	f3bf 8f4f 	dsb	sy
 8006874:	603b      	str	r3, [r7, #0]
}
 8006876:	bf00      	nop
 8006878:	e7fe      	b.n	8006878 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800687a:	4b09      	ldr	r3, [pc, #36]	; (80068a0 <prvSwitchTimerLists+0xc0>)
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	2b00      	cmp	r3, #0
 8006882:	d1b1      	bne.n	80067e8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006884:	4b06      	ldr	r3, [pc, #24]	; (80068a0 <prvSwitchTimerLists+0xc0>)
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800688a:	4b06      	ldr	r3, [pc, #24]	; (80068a4 <prvSwitchTimerLists+0xc4>)
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	4a04      	ldr	r2, [pc, #16]	; (80068a0 <prvSwitchTimerLists+0xc0>)
 8006890:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006892:	4a04      	ldr	r2, [pc, #16]	; (80068a4 <prvSwitchTimerLists+0xc4>)
 8006894:	697b      	ldr	r3, [r7, #20]
 8006896:	6013      	str	r3, [r2, #0]
}
 8006898:	bf00      	nop
 800689a:	3718      	adds	r7, #24
 800689c:	46bd      	mov	sp, r7
 800689e:	bd80      	pop	{r7, pc}
 80068a0:	20000c14 	.word	0x20000c14
 80068a4:	20000c18 	.word	0x20000c18

080068a8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b082      	sub	sp, #8
 80068ac:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80068ae:	f000 f989 	bl	8006bc4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80068b2:	4b15      	ldr	r3, [pc, #84]	; (8006908 <prvCheckForValidListAndQueue+0x60>)
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d120      	bne.n	80068fc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80068ba:	4814      	ldr	r0, [pc, #80]	; (800690c <prvCheckForValidListAndQueue+0x64>)
 80068bc:	f7fd ff92 	bl	80047e4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80068c0:	4813      	ldr	r0, [pc, #76]	; (8006910 <prvCheckForValidListAndQueue+0x68>)
 80068c2:	f7fd ff8f 	bl	80047e4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80068c6:	4b13      	ldr	r3, [pc, #76]	; (8006914 <prvCheckForValidListAndQueue+0x6c>)
 80068c8:	4a10      	ldr	r2, [pc, #64]	; (800690c <prvCheckForValidListAndQueue+0x64>)
 80068ca:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80068cc:	4b12      	ldr	r3, [pc, #72]	; (8006918 <prvCheckForValidListAndQueue+0x70>)
 80068ce:	4a10      	ldr	r2, [pc, #64]	; (8006910 <prvCheckForValidListAndQueue+0x68>)
 80068d0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80068d2:	2300      	movs	r3, #0
 80068d4:	9300      	str	r3, [sp, #0]
 80068d6:	4b11      	ldr	r3, [pc, #68]	; (800691c <prvCheckForValidListAndQueue+0x74>)
 80068d8:	4a11      	ldr	r2, [pc, #68]	; (8006920 <prvCheckForValidListAndQueue+0x78>)
 80068da:	2110      	movs	r1, #16
 80068dc:	200a      	movs	r0, #10
 80068de:	f7fe f89d 	bl	8004a1c <xQueueGenericCreateStatic>
 80068e2:	4603      	mov	r3, r0
 80068e4:	4a08      	ldr	r2, [pc, #32]	; (8006908 <prvCheckForValidListAndQueue+0x60>)
 80068e6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80068e8:	4b07      	ldr	r3, [pc, #28]	; (8006908 <prvCheckForValidListAndQueue+0x60>)
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d005      	beq.n	80068fc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80068f0:	4b05      	ldr	r3, [pc, #20]	; (8006908 <prvCheckForValidListAndQueue+0x60>)
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	490b      	ldr	r1, [pc, #44]	; (8006924 <prvCheckForValidListAndQueue+0x7c>)
 80068f6:	4618      	mov	r0, r3
 80068f8:	f7fe fcb6 	bl	8005268 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80068fc:	f000 f992 	bl	8006c24 <vPortExitCritical>
}
 8006900:	bf00      	nop
 8006902:	46bd      	mov	sp, r7
 8006904:	bd80      	pop	{r7, pc}
 8006906:	bf00      	nop
 8006908:	20000c1c 	.word	0x20000c1c
 800690c:	20000bec 	.word	0x20000bec
 8006910:	20000c00 	.word	0x20000c00
 8006914:	20000c14 	.word	0x20000c14
 8006918:	20000c18 	.word	0x20000c18
 800691c:	20000cc8 	.word	0x20000cc8
 8006920:	20000c28 	.word	0x20000c28
 8006924:	080072b8 	.word	0x080072b8

08006928 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8006928:	b580      	push	{r7, lr}
 800692a:	b08a      	sub	sp, #40	; 0x28
 800692c:	af00      	add	r7, sp, #0
 800692e:	60f8      	str	r0, [r7, #12]
 8006930:	60b9      	str	r1, [r7, #8]
 8006932:	607a      	str	r2, [r7, #4]
 8006934:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 8006936:	f06f 0301 	mvn.w	r3, #1
 800693a:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8006940:	68bb      	ldr	r3, [r7, #8]
 8006942:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006948:	4b06      	ldr	r3, [pc, #24]	; (8006964 <xTimerPendFunctionCallFromISR+0x3c>)
 800694a:	6818      	ldr	r0, [r3, #0]
 800694c:	f107 0114 	add.w	r1, r7, #20
 8006950:	2300      	movs	r3, #0
 8006952:	683a      	ldr	r2, [r7, #0]
 8006954:	f7fe f9fc 	bl	8004d50 <xQueueGenericSendFromISR>
 8006958:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 800695a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800695c:	4618      	mov	r0, r3
 800695e:	3728      	adds	r7, #40	; 0x28
 8006960:	46bd      	mov	sp, r7
 8006962:	bd80      	pop	{r7, pc}
 8006964:	20000c1c 	.word	0x20000c1c

08006968 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006968:	b480      	push	{r7}
 800696a:	b085      	sub	sp, #20
 800696c:	af00      	add	r7, sp, #0
 800696e:	60f8      	str	r0, [r7, #12]
 8006970:	60b9      	str	r1, [r7, #8]
 8006972:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	3b04      	subs	r3, #4
 8006978:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006980:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	3b04      	subs	r3, #4
 8006986:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006988:	68bb      	ldr	r3, [r7, #8]
 800698a:	f023 0201 	bic.w	r2, r3, #1
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	3b04      	subs	r3, #4
 8006996:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006998:	4a0c      	ldr	r2, [pc, #48]	; (80069cc <pxPortInitialiseStack+0x64>)
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	3b14      	subs	r3, #20
 80069a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80069a4:	687a      	ldr	r2, [r7, #4]
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	3b04      	subs	r3, #4
 80069ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	f06f 0202 	mvn.w	r2, #2
 80069b6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	3b20      	subs	r3, #32
 80069bc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80069be:	68fb      	ldr	r3, [r7, #12]
}
 80069c0:	4618      	mov	r0, r3
 80069c2:	3714      	adds	r7, #20
 80069c4:	46bd      	mov	sp, r7
 80069c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ca:	4770      	bx	lr
 80069cc:	080069d1 	.word	0x080069d1

080069d0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80069d0:	b480      	push	{r7}
 80069d2:	b085      	sub	sp, #20
 80069d4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80069d6:	2300      	movs	r3, #0
 80069d8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80069da:	4b12      	ldr	r3, [pc, #72]	; (8006a24 <prvTaskExitError+0x54>)
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80069e2:	d00a      	beq.n	80069fa <prvTaskExitError+0x2a>
	__asm volatile
 80069e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069e8:	f383 8811 	msr	BASEPRI, r3
 80069ec:	f3bf 8f6f 	isb	sy
 80069f0:	f3bf 8f4f 	dsb	sy
 80069f4:	60fb      	str	r3, [r7, #12]
}
 80069f6:	bf00      	nop
 80069f8:	e7fe      	b.n	80069f8 <prvTaskExitError+0x28>
	__asm volatile
 80069fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069fe:	f383 8811 	msr	BASEPRI, r3
 8006a02:	f3bf 8f6f 	isb	sy
 8006a06:	f3bf 8f4f 	dsb	sy
 8006a0a:	60bb      	str	r3, [r7, #8]
}
 8006a0c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006a0e:	bf00      	nop
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d0fc      	beq.n	8006a10 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006a16:	bf00      	nop
 8006a18:	bf00      	nop
 8006a1a:	3714      	adds	r7, #20
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a22:	4770      	bx	lr
 8006a24:	20000010 	.word	0x20000010
	...

08006a30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006a30:	4b07      	ldr	r3, [pc, #28]	; (8006a50 <pxCurrentTCBConst2>)
 8006a32:	6819      	ldr	r1, [r3, #0]
 8006a34:	6808      	ldr	r0, [r1, #0]
 8006a36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a3a:	f380 8809 	msr	PSP, r0
 8006a3e:	f3bf 8f6f 	isb	sy
 8006a42:	f04f 0000 	mov.w	r0, #0
 8006a46:	f380 8811 	msr	BASEPRI, r0
 8006a4a:	4770      	bx	lr
 8006a4c:	f3af 8000 	nop.w

08006a50 <pxCurrentTCBConst2>:
 8006a50:	200006ec 	.word	0x200006ec
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006a54:	bf00      	nop
 8006a56:	bf00      	nop

08006a58 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006a58:	4808      	ldr	r0, [pc, #32]	; (8006a7c <prvPortStartFirstTask+0x24>)
 8006a5a:	6800      	ldr	r0, [r0, #0]
 8006a5c:	6800      	ldr	r0, [r0, #0]
 8006a5e:	f380 8808 	msr	MSP, r0
 8006a62:	f04f 0000 	mov.w	r0, #0
 8006a66:	f380 8814 	msr	CONTROL, r0
 8006a6a:	b662      	cpsie	i
 8006a6c:	b661      	cpsie	f
 8006a6e:	f3bf 8f4f 	dsb	sy
 8006a72:	f3bf 8f6f 	isb	sy
 8006a76:	df00      	svc	0
 8006a78:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006a7a:	bf00      	nop
 8006a7c:	e000ed08 	.word	0xe000ed08

08006a80 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006a80:	b580      	push	{r7, lr}
 8006a82:	b086      	sub	sp, #24
 8006a84:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006a86:	4b46      	ldr	r3, [pc, #280]	; (8006ba0 <xPortStartScheduler+0x120>)
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	4a46      	ldr	r2, [pc, #280]	; (8006ba4 <xPortStartScheduler+0x124>)
 8006a8c:	4293      	cmp	r3, r2
 8006a8e:	d10a      	bne.n	8006aa6 <xPortStartScheduler+0x26>
	__asm volatile
 8006a90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a94:	f383 8811 	msr	BASEPRI, r3
 8006a98:	f3bf 8f6f 	isb	sy
 8006a9c:	f3bf 8f4f 	dsb	sy
 8006aa0:	613b      	str	r3, [r7, #16]
}
 8006aa2:	bf00      	nop
 8006aa4:	e7fe      	b.n	8006aa4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006aa6:	4b3e      	ldr	r3, [pc, #248]	; (8006ba0 <xPortStartScheduler+0x120>)
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	4a3f      	ldr	r2, [pc, #252]	; (8006ba8 <xPortStartScheduler+0x128>)
 8006aac:	4293      	cmp	r3, r2
 8006aae:	d10a      	bne.n	8006ac6 <xPortStartScheduler+0x46>
	__asm volatile
 8006ab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ab4:	f383 8811 	msr	BASEPRI, r3
 8006ab8:	f3bf 8f6f 	isb	sy
 8006abc:	f3bf 8f4f 	dsb	sy
 8006ac0:	60fb      	str	r3, [r7, #12]
}
 8006ac2:	bf00      	nop
 8006ac4:	e7fe      	b.n	8006ac4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006ac6:	4b39      	ldr	r3, [pc, #228]	; (8006bac <xPortStartScheduler+0x12c>)
 8006ac8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006aca:	697b      	ldr	r3, [r7, #20]
 8006acc:	781b      	ldrb	r3, [r3, #0]
 8006ace:	b2db      	uxtb	r3, r3
 8006ad0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006ad2:	697b      	ldr	r3, [r7, #20]
 8006ad4:	22ff      	movs	r2, #255	; 0xff
 8006ad6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006ad8:	697b      	ldr	r3, [r7, #20]
 8006ada:	781b      	ldrb	r3, [r3, #0]
 8006adc:	b2db      	uxtb	r3, r3
 8006ade:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006ae0:	78fb      	ldrb	r3, [r7, #3]
 8006ae2:	b2db      	uxtb	r3, r3
 8006ae4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006ae8:	b2da      	uxtb	r2, r3
 8006aea:	4b31      	ldr	r3, [pc, #196]	; (8006bb0 <xPortStartScheduler+0x130>)
 8006aec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006aee:	4b31      	ldr	r3, [pc, #196]	; (8006bb4 <xPortStartScheduler+0x134>)
 8006af0:	2207      	movs	r2, #7
 8006af2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006af4:	e009      	b.n	8006b0a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006af6:	4b2f      	ldr	r3, [pc, #188]	; (8006bb4 <xPortStartScheduler+0x134>)
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	3b01      	subs	r3, #1
 8006afc:	4a2d      	ldr	r2, [pc, #180]	; (8006bb4 <xPortStartScheduler+0x134>)
 8006afe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006b00:	78fb      	ldrb	r3, [r7, #3]
 8006b02:	b2db      	uxtb	r3, r3
 8006b04:	005b      	lsls	r3, r3, #1
 8006b06:	b2db      	uxtb	r3, r3
 8006b08:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006b0a:	78fb      	ldrb	r3, [r7, #3]
 8006b0c:	b2db      	uxtb	r3, r3
 8006b0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b12:	2b80      	cmp	r3, #128	; 0x80
 8006b14:	d0ef      	beq.n	8006af6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006b16:	4b27      	ldr	r3, [pc, #156]	; (8006bb4 <xPortStartScheduler+0x134>)
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	f1c3 0307 	rsb	r3, r3, #7
 8006b1e:	2b04      	cmp	r3, #4
 8006b20:	d00a      	beq.n	8006b38 <xPortStartScheduler+0xb8>
	__asm volatile
 8006b22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b26:	f383 8811 	msr	BASEPRI, r3
 8006b2a:	f3bf 8f6f 	isb	sy
 8006b2e:	f3bf 8f4f 	dsb	sy
 8006b32:	60bb      	str	r3, [r7, #8]
}
 8006b34:	bf00      	nop
 8006b36:	e7fe      	b.n	8006b36 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006b38:	4b1e      	ldr	r3, [pc, #120]	; (8006bb4 <xPortStartScheduler+0x134>)
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	021b      	lsls	r3, r3, #8
 8006b3e:	4a1d      	ldr	r2, [pc, #116]	; (8006bb4 <xPortStartScheduler+0x134>)
 8006b40:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006b42:	4b1c      	ldr	r3, [pc, #112]	; (8006bb4 <xPortStartScheduler+0x134>)
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006b4a:	4a1a      	ldr	r2, [pc, #104]	; (8006bb4 <xPortStartScheduler+0x134>)
 8006b4c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	b2da      	uxtb	r2, r3
 8006b52:	697b      	ldr	r3, [r7, #20]
 8006b54:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006b56:	4b18      	ldr	r3, [pc, #96]	; (8006bb8 <xPortStartScheduler+0x138>)
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	4a17      	ldr	r2, [pc, #92]	; (8006bb8 <xPortStartScheduler+0x138>)
 8006b5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006b60:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006b62:	4b15      	ldr	r3, [pc, #84]	; (8006bb8 <xPortStartScheduler+0x138>)
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	4a14      	ldr	r2, [pc, #80]	; (8006bb8 <xPortStartScheduler+0x138>)
 8006b68:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006b6c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006b6e:	f000 f8dd 	bl	8006d2c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006b72:	4b12      	ldr	r3, [pc, #72]	; (8006bbc <xPortStartScheduler+0x13c>)
 8006b74:	2200      	movs	r2, #0
 8006b76:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006b78:	f000 f8fc 	bl	8006d74 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006b7c:	4b10      	ldr	r3, [pc, #64]	; (8006bc0 <xPortStartScheduler+0x140>)
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	4a0f      	ldr	r2, [pc, #60]	; (8006bc0 <xPortStartScheduler+0x140>)
 8006b82:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006b86:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006b88:	f7ff ff66 	bl	8006a58 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006b8c:	f7fe ff7c 	bl	8005a88 <vTaskSwitchContext>
	prvTaskExitError();
 8006b90:	f7ff ff1e 	bl	80069d0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006b94:	2300      	movs	r3, #0
}
 8006b96:	4618      	mov	r0, r3
 8006b98:	3718      	adds	r7, #24
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	bd80      	pop	{r7, pc}
 8006b9e:	bf00      	nop
 8006ba0:	e000ed00 	.word	0xe000ed00
 8006ba4:	410fc271 	.word	0x410fc271
 8006ba8:	410fc270 	.word	0x410fc270
 8006bac:	e000e400 	.word	0xe000e400
 8006bb0:	20000d18 	.word	0x20000d18
 8006bb4:	20000d1c 	.word	0x20000d1c
 8006bb8:	e000ed20 	.word	0xe000ed20
 8006bbc:	20000010 	.word	0x20000010
 8006bc0:	e000ef34 	.word	0xe000ef34

08006bc4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006bc4:	b480      	push	{r7}
 8006bc6:	b083      	sub	sp, #12
 8006bc8:	af00      	add	r7, sp, #0
	__asm volatile
 8006bca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bce:	f383 8811 	msr	BASEPRI, r3
 8006bd2:	f3bf 8f6f 	isb	sy
 8006bd6:	f3bf 8f4f 	dsb	sy
 8006bda:	607b      	str	r3, [r7, #4]
}
 8006bdc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006bde:	4b0f      	ldr	r3, [pc, #60]	; (8006c1c <vPortEnterCritical+0x58>)
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	3301      	adds	r3, #1
 8006be4:	4a0d      	ldr	r2, [pc, #52]	; (8006c1c <vPortEnterCritical+0x58>)
 8006be6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006be8:	4b0c      	ldr	r3, [pc, #48]	; (8006c1c <vPortEnterCritical+0x58>)
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	2b01      	cmp	r3, #1
 8006bee:	d10f      	bne.n	8006c10 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006bf0:	4b0b      	ldr	r3, [pc, #44]	; (8006c20 <vPortEnterCritical+0x5c>)
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	b2db      	uxtb	r3, r3
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d00a      	beq.n	8006c10 <vPortEnterCritical+0x4c>
	__asm volatile
 8006bfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bfe:	f383 8811 	msr	BASEPRI, r3
 8006c02:	f3bf 8f6f 	isb	sy
 8006c06:	f3bf 8f4f 	dsb	sy
 8006c0a:	603b      	str	r3, [r7, #0]
}
 8006c0c:	bf00      	nop
 8006c0e:	e7fe      	b.n	8006c0e <vPortEnterCritical+0x4a>
	}
}
 8006c10:	bf00      	nop
 8006c12:	370c      	adds	r7, #12
 8006c14:	46bd      	mov	sp, r7
 8006c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1a:	4770      	bx	lr
 8006c1c:	20000010 	.word	0x20000010
 8006c20:	e000ed04 	.word	0xe000ed04

08006c24 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006c24:	b480      	push	{r7}
 8006c26:	b083      	sub	sp, #12
 8006c28:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006c2a:	4b12      	ldr	r3, [pc, #72]	; (8006c74 <vPortExitCritical+0x50>)
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d10a      	bne.n	8006c48 <vPortExitCritical+0x24>
	__asm volatile
 8006c32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c36:	f383 8811 	msr	BASEPRI, r3
 8006c3a:	f3bf 8f6f 	isb	sy
 8006c3e:	f3bf 8f4f 	dsb	sy
 8006c42:	607b      	str	r3, [r7, #4]
}
 8006c44:	bf00      	nop
 8006c46:	e7fe      	b.n	8006c46 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006c48:	4b0a      	ldr	r3, [pc, #40]	; (8006c74 <vPortExitCritical+0x50>)
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	3b01      	subs	r3, #1
 8006c4e:	4a09      	ldr	r2, [pc, #36]	; (8006c74 <vPortExitCritical+0x50>)
 8006c50:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006c52:	4b08      	ldr	r3, [pc, #32]	; (8006c74 <vPortExitCritical+0x50>)
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d105      	bne.n	8006c66 <vPortExitCritical+0x42>
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006c5e:	683b      	ldr	r3, [r7, #0]
 8006c60:	f383 8811 	msr	BASEPRI, r3
}
 8006c64:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006c66:	bf00      	nop
 8006c68:	370c      	adds	r7, #12
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c70:	4770      	bx	lr
 8006c72:	bf00      	nop
 8006c74:	20000010 	.word	0x20000010
	...

08006c80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006c80:	f3ef 8009 	mrs	r0, PSP
 8006c84:	f3bf 8f6f 	isb	sy
 8006c88:	4b15      	ldr	r3, [pc, #84]	; (8006ce0 <pxCurrentTCBConst>)
 8006c8a:	681a      	ldr	r2, [r3, #0]
 8006c8c:	f01e 0f10 	tst.w	lr, #16
 8006c90:	bf08      	it	eq
 8006c92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006c96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c9a:	6010      	str	r0, [r2, #0]
 8006c9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006ca0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006ca4:	f380 8811 	msr	BASEPRI, r0
 8006ca8:	f3bf 8f4f 	dsb	sy
 8006cac:	f3bf 8f6f 	isb	sy
 8006cb0:	f7fe feea 	bl	8005a88 <vTaskSwitchContext>
 8006cb4:	f04f 0000 	mov.w	r0, #0
 8006cb8:	f380 8811 	msr	BASEPRI, r0
 8006cbc:	bc09      	pop	{r0, r3}
 8006cbe:	6819      	ldr	r1, [r3, #0]
 8006cc0:	6808      	ldr	r0, [r1, #0]
 8006cc2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cc6:	f01e 0f10 	tst.w	lr, #16
 8006cca:	bf08      	it	eq
 8006ccc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006cd0:	f380 8809 	msr	PSP, r0
 8006cd4:	f3bf 8f6f 	isb	sy
 8006cd8:	4770      	bx	lr
 8006cda:	bf00      	nop
 8006cdc:	f3af 8000 	nop.w

08006ce0 <pxCurrentTCBConst>:
 8006ce0:	200006ec 	.word	0x200006ec
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006ce4:	bf00      	nop
 8006ce6:	bf00      	nop

08006ce8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b082      	sub	sp, #8
 8006cec:	af00      	add	r7, sp, #0
	__asm volatile
 8006cee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cf2:	f383 8811 	msr	BASEPRI, r3
 8006cf6:	f3bf 8f6f 	isb	sy
 8006cfa:	f3bf 8f4f 	dsb	sy
 8006cfe:	607b      	str	r3, [r7, #4]
}
 8006d00:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006d02:	f7fe fe07 	bl	8005914 <xTaskIncrementTick>
 8006d06:	4603      	mov	r3, r0
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d003      	beq.n	8006d14 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006d0c:	4b06      	ldr	r3, [pc, #24]	; (8006d28 <xPortSysTickHandler+0x40>)
 8006d0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d12:	601a      	str	r2, [r3, #0]
 8006d14:	2300      	movs	r3, #0
 8006d16:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	f383 8811 	msr	BASEPRI, r3
}
 8006d1e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006d20:	bf00      	nop
 8006d22:	3708      	adds	r7, #8
 8006d24:	46bd      	mov	sp, r7
 8006d26:	bd80      	pop	{r7, pc}
 8006d28:	e000ed04 	.word	0xe000ed04

08006d2c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006d2c:	b480      	push	{r7}
 8006d2e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006d30:	4b0b      	ldr	r3, [pc, #44]	; (8006d60 <vPortSetupTimerInterrupt+0x34>)
 8006d32:	2200      	movs	r2, #0
 8006d34:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006d36:	4b0b      	ldr	r3, [pc, #44]	; (8006d64 <vPortSetupTimerInterrupt+0x38>)
 8006d38:	2200      	movs	r2, #0
 8006d3a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006d3c:	4b0a      	ldr	r3, [pc, #40]	; (8006d68 <vPortSetupTimerInterrupt+0x3c>)
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	4a0a      	ldr	r2, [pc, #40]	; (8006d6c <vPortSetupTimerInterrupt+0x40>)
 8006d42:	fba2 2303 	umull	r2, r3, r2, r3
 8006d46:	099b      	lsrs	r3, r3, #6
 8006d48:	4a09      	ldr	r2, [pc, #36]	; (8006d70 <vPortSetupTimerInterrupt+0x44>)
 8006d4a:	3b01      	subs	r3, #1
 8006d4c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006d4e:	4b04      	ldr	r3, [pc, #16]	; (8006d60 <vPortSetupTimerInterrupt+0x34>)
 8006d50:	2207      	movs	r2, #7
 8006d52:	601a      	str	r2, [r3, #0]
}
 8006d54:	bf00      	nop
 8006d56:	46bd      	mov	sp, r7
 8006d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5c:	4770      	bx	lr
 8006d5e:	bf00      	nop
 8006d60:	e000e010 	.word	0xe000e010
 8006d64:	e000e018 	.word	0xe000e018
 8006d68:	20000004 	.word	0x20000004
 8006d6c:	10624dd3 	.word	0x10624dd3
 8006d70:	e000e014 	.word	0xe000e014

08006d74 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006d74:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006d84 <vPortEnableVFP+0x10>
 8006d78:	6801      	ldr	r1, [r0, #0]
 8006d7a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006d7e:	6001      	str	r1, [r0, #0]
 8006d80:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006d82:	bf00      	nop
 8006d84:	e000ed88 	.word	0xe000ed88

08006d88 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006d88:	b480      	push	{r7}
 8006d8a:	b085      	sub	sp, #20
 8006d8c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006d8e:	f3ef 8305 	mrs	r3, IPSR
 8006d92:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	2b0f      	cmp	r3, #15
 8006d98:	d914      	bls.n	8006dc4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006d9a:	4a17      	ldr	r2, [pc, #92]	; (8006df8 <vPortValidateInterruptPriority+0x70>)
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	4413      	add	r3, r2
 8006da0:	781b      	ldrb	r3, [r3, #0]
 8006da2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006da4:	4b15      	ldr	r3, [pc, #84]	; (8006dfc <vPortValidateInterruptPriority+0x74>)
 8006da6:	781b      	ldrb	r3, [r3, #0]
 8006da8:	7afa      	ldrb	r2, [r7, #11]
 8006daa:	429a      	cmp	r2, r3
 8006dac:	d20a      	bcs.n	8006dc4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8006dae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006db2:	f383 8811 	msr	BASEPRI, r3
 8006db6:	f3bf 8f6f 	isb	sy
 8006dba:	f3bf 8f4f 	dsb	sy
 8006dbe:	607b      	str	r3, [r7, #4]
}
 8006dc0:	bf00      	nop
 8006dc2:	e7fe      	b.n	8006dc2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006dc4:	4b0e      	ldr	r3, [pc, #56]	; (8006e00 <vPortValidateInterruptPriority+0x78>)
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006dcc:	4b0d      	ldr	r3, [pc, #52]	; (8006e04 <vPortValidateInterruptPriority+0x7c>)
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	429a      	cmp	r2, r3
 8006dd2:	d90a      	bls.n	8006dea <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006dd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dd8:	f383 8811 	msr	BASEPRI, r3
 8006ddc:	f3bf 8f6f 	isb	sy
 8006de0:	f3bf 8f4f 	dsb	sy
 8006de4:	603b      	str	r3, [r7, #0]
}
 8006de6:	bf00      	nop
 8006de8:	e7fe      	b.n	8006de8 <vPortValidateInterruptPriority+0x60>
	}
 8006dea:	bf00      	nop
 8006dec:	3714      	adds	r7, #20
 8006dee:	46bd      	mov	sp, r7
 8006df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df4:	4770      	bx	lr
 8006df6:	bf00      	nop
 8006df8:	e000e3f0 	.word	0xe000e3f0
 8006dfc:	20000d18 	.word	0x20000d18
 8006e00:	e000ed0c 	.word	0xe000ed0c
 8006e04:	20000d1c 	.word	0x20000d1c

08006e08 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	b08a      	sub	sp, #40	; 0x28
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006e10:	2300      	movs	r3, #0
 8006e12:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006e14:	f7fe fcc2 	bl	800579c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006e18:	4b5b      	ldr	r3, [pc, #364]	; (8006f88 <pvPortMalloc+0x180>)
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d101      	bne.n	8006e24 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006e20:	f000 f920 	bl	8007064 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006e24:	4b59      	ldr	r3, [pc, #356]	; (8006f8c <pvPortMalloc+0x184>)
 8006e26:	681a      	ldr	r2, [r3, #0]
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	4013      	ands	r3, r2
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	f040 8093 	bne.w	8006f58 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d01d      	beq.n	8006e74 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006e38:	2208      	movs	r2, #8
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	4413      	add	r3, r2
 8006e3e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	f003 0307 	and.w	r3, r3, #7
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d014      	beq.n	8006e74 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	f023 0307 	bic.w	r3, r3, #7
 8006e50:	3308      	adds	r3, #8
 8006e52:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	f003 0307 	and.w	r3, r3, #7
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d00a      	beq.n	8006e74 <pvPortMalloc+0x6c>
	__asm volatile
 8006e5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e62:	f383 8811 	msr	BASEPRI, r3
 8006e66:	f3bf 8f6f 	isb	sy
 8006e6a:	f3bf 8f4f 	dsb	sy
 8006e6e:	617b      	str	r3, [r7, #20]
}
 8006e70:	bf00      	nop
 8006e72:	e7fe      	b.n	8006e72 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d06e      	beq.n	8006f58 <pvPortMalloc+0x150>
 8006e7a:	4b45      	ldr	r3, [pc, #276]	; (8006f90 <pvPortMalloc+0x188>)
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	687a      	ldr	r2, [r7, #4]
 8006e80:	429a      	cmp	r2, r3
 8006e82:	d869      	bhi.n	8006f58 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006e84:	4b43      	ldr	r3, [pc, #268]	; (8006f94 <pvPortMalloc+0x18c>)
 8006e86:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006e88:	4b42      	ldr	r3, [pc, #264]	; (8006f94 <pvPortMalloc+0x18c>)
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006e8e:	e004      	b.n	8006e9a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e92:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e9c:	685b      	ldr	r3, [r3, #4]
 8006e9e:	687a      	ldr	r2, [r7, #4]
 8006ea0:	429a      	cmp	r2, r3
 8006ea2:	d903      	bls.n	8006eac <pvPortMalloc+0xa4>
 8006ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d1f1      	bne.n	8006e90 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006eac:	4b36      	ldr	r3, [pc, #216]	; (8006f88 <pvPortMalloc+0x180>)
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006eb2:	429a      	cmp	r2, r3
 8006eb4:	d050      	beq.n	8006f58 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006eb6:	6a3b      	ldr	r3, [r7, #32]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	2208      	movs	r2, #8
 8006ebc:	4413      	add	r3, r2
 8006ebe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ec2:	681a      	ldr	r2, [r3, #0]
 8006ec4:	6a3b      	ldr	r3, [r7, #32]
 8006ec6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eca:	685a      	ldr	r2, [r3, #4]
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	1ad2      	subs	r2, r2, r3
 8006ed0:	2308      	movs	r3, #8
 8006ed2:	005b      	lsls	r3, r3, #1
 8006ed4:	429a      	cmp	r2, r3
 8006ed6:	d91f      	bls.n	8006f18 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006ed8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	4413      	add	r3, r2
 8006ede:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006ee0:	69bb      	ldr	r3, [r7, #24]
 8006ee2:	f003 0307 	and.w	r3, r3, #7
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d00a      	beq.n	8006f00 <pvPortMalloc+0xf8>
	__asm volatile
 8006eea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eee:	f383 8811 	msr	BASEPRI, r3
 8006ef2:	f3bf 8f6f 	isb	sy
 8006ef6:	f3bf 8f4f 	dsb	sy
 8006efa:	613b      	str	r3, [r7, #16]
}
 8006efc:	bf00      	nop
 8006efe:	e7fe      	b.n	8006efe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f02:	685a      	ldr	r2, [r3, #4]
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	1ad2      	subs	r2, r2, r3
 8006f08:	69bb      	ldr	r3, [r7, #24]
 8006f0a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f0e:	687a      	ldr	r2, [r7, #4]
 8006f10:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006f12:	69b8      	ldr	r0, [r7, #24]
 8006f14:	f000 f908 	bl	8007128 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006f18:	4b1d      	ldr	r3, [pc, #116]	; (8006f90 <pvPortMalloc+0x188>)
 8006f1a:	681a      	ldr	r2, [r3, #0]
 8006f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f1e:	685b      	ldr	r3, [r3, #4]
 8006f20:	1ad3      	subs	r3, r2, r3
 8006f22:	4a1b      	ldr	r2, [pc, #108]	; (8006f90 <pvPortMalloc+0x188>)
 8006f24:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006f26:	4b1a      	ldr	r3, [pc, #104]	; (8006f90 <pvPortMalloc+0x188>)
 8006f28:	681a      	ldr	r2, [r3, #0]
 8006f2a:	4b1b      	ldr	r3, [pc, #108]	; (8006f98 <pvPortMalloc+0x190>)
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	429a      	cmp	r2, r3
 8006f30:	d203      	bcs.n	8006f3a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006f32:	4b17      	ldr	r3, [pc, #92]	; (8006f90 <pvPortMalloc+0x188>)
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	4a18      	ldr	r2, [pc, #96]	; (8006f98 <pvPortMalloc+0x190>)
 8006f38:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f3c:	685a      	ldr	r2, [r3, #4]
 8006f3e:	4b13      	ldr	r3, [pc, #76]	; (8006f8c <pvPortMalloc+0x184>)
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	431a      	orrs	r2, r3
 8006f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f46:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006f4e:	4b13      	ldr	r3, [pc, #76]	; (8006f9c <pvPortMalloc+0x194>)
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	3301      	adds	r3, #1
 8006f54:	4a11      	ldr	r2, [pc, #68]	; (8006f9c <pvPortMalloc+0x194>)
 8006f56:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006f58:	f7fe fc2e 	bl	80057b8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006f5c:	69fb      	ldr	r3, [r7, #28]
 8006f5e:	f003 0307 	and.w	r3, r3, #7
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d00a      	beq.n	8006f7c <pvPortMalloc+0x174>
	__asm volatile
 8006f66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f6a:	f383 8811 	msr	BASEPRI, r3
 8006f6e:	f3bf 8f6f 	isb	sy
 8006f72:	f3bf 8f4f 	dsb	sy
 8006f76:	60fb      	str	r3, [r7, #12]
}
 8006f78:	bf00      	nop
 8006f7a:	e7fe      	b.n	8006f7a <pvPortMalloc+0x172>
	return pvReturn;
 8006f7c:	69fb      	ldr	r3, [r7, #28]
}
 8006f7e:	4618      	mov	r0, r3
 8006f80:	3728      	adds	r7, #40	; 0x28
 8006f82:	46bd      	mov	sp, r7
 8006f84:	bd80      	pop	{r7, pc}
 8006f86:	bf00      	nop
 8006f88:	20004928 	.word	0x20004928
 8006f8c:	2000493c 	.word	0x2000493c
 8006f90:	2000492c 	.word	0x2000492c
 8006f94:	20004920 	.word	0x20004920
 8006f98:	20004930 	.word	0x20004930
 8006f9c:	20004934 	.word	0x20004934

08006fa0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006fa0:	b580      	push	{r7, lr}
 8006fa2:	b086      	sub	sp, #24
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d04d      	beq.n	800704e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006fb2:	2308      	movs	r3, #8
 8006fb4:	425b      	negs	r3, r3
 8006fb6:	697a      	ldr	r2, [r7, #20]
 8006fb8:	4413      	add	r3, r2
 8006fba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006fbc:	697b      	ldr	r3, [r7, #20]
 8006fbe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006fc0:	693b      	ldr	r3, [r7, #16]
 8006fc2:	685a      	ldr	r2, [r3, #4]
 8006fc4:	4b24      	ldr	r3, [pc, #144]	; (8007058 <vPortFree+0xb8>)
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	4013      	ands	r3, r2
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d10a      	bne.n	8006fe4 <vPortFree+0x44>
	__asm volatile
 8006fce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fd2:	f383 8811 	msr	BASEPRI, r3
 8006fd6:	f3bf 8f6f 	isb	sy
 8006fda:	f3bf 8f4f 	dsb	sy
 8006fde:	60fb      	str	r3, [r7, #12]
}
 8006fe0:	bf00      	nop
 8006fe2:	e7fe      	b.n	8006fe2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006fe4:	693b      	ldr	r3, [r7, #16]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d00a      	beq.n	8007002 <vPortFree+0x62>
	__asm volatile
 8006fec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ff0:	f383 8811 	msr	BASEPRI, r3
 8006ff4:	f3bf 8f6f 	isb	sy
 8006ff8:	f3bf 8f4f 	dsb	sy
 8006ffc:	60bb      	str	r3, [r7, #8]
}
 8006ffe:	bf00      	nop
 8007000:	e7fe      	b.n	8007000 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007002:	693b      	ldr	r3, [r7, #16]
 8007004:	685a      	ldr	r2, [r3, #4]
 8007006:	4b14      	ldr	r3, [pc, #80]	; (8007058 <vPortFree+0xb8>)
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	4013      	ands	r3, r2
 800700c:	2b00      	cmp	r3, #0
 800700e:	d01e      	beq.n	800704e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007010:	693b      	ldr	r3, [r7, #16]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	2b00      	cmp	r3, #0
 8007016:	d11a      	bne.n	800704e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007018:	693b      	ldr	r3, [r7, #16]
 800701a:	685a      	ldr	r2, [r3, #4]
 800701c:	4b0e      	ldr	r3, [pc, #56]	; (8007058 <vPortFree+0xb8>)
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	43db      	mvns	r3, r3
 8007022:	401a      	ands	r2, r3
 8007024:	693b      	ldr	r3, [r7, #16]
 8007026:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007028:	f7fe fbb8 	bl	800579c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800702c:	693b      	ldr	r3, [r7, #16]
 800702e:	685a      	ldr	r2, [r3, #4]
 8007030:	4b0a      	ldr	r3, [pc, #40]	; (800705c <vPortFree+0xbc>)
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	4413      	add	r3, r2
 8007036:	4a09      	ldr	r2, [pc, #36]	; (800705c <vPortFree+0xbc>)
 8007038:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800703a:	6938      	ldr	r0, [r7, #16]
 800703c:	f000 f874 	bl	8007128 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007040:	4b07      	ldr	r3, [pc, #28]	; (8007060 <vPortFree+0xc0>)
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	3301      	adds	r3, #1
 8007046:	4a06      	ldr	r2, [pc, #24]	; (8007060 <vPortFree+0xc0>)
 8007048:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800704a:	f7fe fbb5 	bl	80057b8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800704e:	bf00      	nop
 8007050:	3718      	adds	r7, #24
 8007052:	46bd      	mov	sp, r7
 8007054:	bd80      	pop	{r7, pc}
 8007056:	bf00      	nop
 8007058:	2000493c 	.word	0x2000493c
 800705c:	2000492c 	.word	0x2000492c
 8007060:	20004938 	.word	0x20004938

08007064 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007064:	b480      	push	{r7}
 8007066:	b085      	sub	sp, #20
 8007068:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800706a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800706e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007070:	4b27      	ldr	r3, [pc, #156]	; (8007110 <prvHeapInit+0xac>)
 8007072:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	f003 0307 	and.w	r3, r3, #7
 800707a:	2b00      	cmp	r3, #0
 800707c:	d00c      	beq.n	8007098 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	3307      	adds	r3, #7
 8007082:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	f023 0307 	bic.w	r3, r3, #7
 800708a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800708c:	68ba      	ldr	r2, [r7, #8]
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	1ad3      	subs	r3, r2, r3
 8007092:	4a1f      	ldr	r2, [pc, #124]	; (8007110 <prvHeapInit+0xac>)
 8007094:	4413      	add	r3, r2
 8007096:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800709c:	4a1d      	ldr	r2, [pc, #116]	; (8007114 <prvHeapInit+0xb0>)
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80070a2:	4b1c      	ldr	r3, [pc, #112]	; (8007114 <prvHeapInit+0xb0>)
 80070a4:	2200      	movs	r2, #0
 80070a6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	68ba      	ldr	r2, [r7, #8]
 80070ac:	4413      	add	r3, r2
 80070ae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80070b0:	2208      	movs	r2, #8
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	1a9b      	subs	r3, r3, r2
 80070b6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	f023 0307 	bic.w	r3, r3, #7
 80070be:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	4a15      	ldr	r2, [pc, #84]	; (8007118 <prvHeapInit+0xb4>)
 80070c4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80070c6:	4b14      	ldr	r3, [pc, #80]	; (8007118 <prvHeapInit+0xb4>)
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	2200      	movs	r2, #0
 80070cc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80070ce:	4b12      	ldr	r3, [pc, #72]	; (8007118 <prvHeapInit+0xb4>)
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	2200      	movs	r2, #0
 80070d4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	68fa      	ldr	r2, [r7, #12]
 80070de:	1ad2      	subs	r2, r2, r3
 80070e0:	683b      	ldr	r3, [r7, #0]
 80070e2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80070e4:	4b0c      	ldr	r3, [pc, #48]	; (8007118 <prvHeapInit+0xb4>)
 80070e6:	681a      	ldr	r2, [r3, #0]
 80070e8:	683b      	ldr	r3, [r7, #0]
 80070ea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80070ec:	683b      	ldr	r3, [r7, #0]
 80070ee:	685b      	ldr	r3, [r3, #4]
 80070f0:	4a0a      	ldr	r2, [pc, #40]	; (800711c <prvHeapInit+0xb8>)
 80070f2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80070f4:	683b      	ldr	r3, [r7, #0]
 80070f6:	685b      	ldr	r3, [r3, #4]
 80070f8:	4a09      	ldr	r2, [pc, #36]	; (8007120 <prvHeapInit+0xbc>)
 80070fa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80070fc:	4b09      	ldr	r3, [pc, #36]	; (8007124 <prvHeapInit+0xc0>)
 80070fe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007102:	601a      	str	r2, [r3, #0]
}
 8007104:	bf00      	nop
 8007106:	3714      	adds	r7, #20
 8007108:	46bd      	mov	sp, r7
 800710a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710e:	4770      	bx	lr
 8007110:	20000d20 	.word	0x20000d20
 8007114:	20004920 	.word	0x20004920
 8007118:	20004928 	.word	0x20004928
 800711c:	20004930 	.word	0x20004930
 8007120:	2000492c 	.word	0x2000492c
 8007124:	2000493c 	.word	0x2000493c

08007128 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007128:	b480      	push	{r7}
 800712a:	b085      	sub	sp, #20
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007130:	4b28      	ldr	r3, [pc, #160]	; (80071d4 <prvInsertBlockIntoFreeList+0xac>)
 8007132:	60fb      	str	r3, [r7, #12]
 8007134:	e002      	b.n	800713c <prvInsertBlockIntoFreeList+0x14>
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	60fb      	str	r3, [r7, #12]
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	687a      	ldr	r2, [r7, #4]
 8007142:	429a      	cmp	r2, r3
 8007144:	d8f7      	bhi.n	8007136 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	685b      	ldr	r3, [r3, #4]
 800714e:	68ba      	ldr	r2, [r7, #8]
 8007150:	4413      	add	r3, r2
 8007152:	687a      	ldr	r2, [r7, #4]
 8007154:	429a      	cmp	r2, r3
 8007156:	d108      	bne.n	800716a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	685a      	ldr	r2, [r3, #4]
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	685b      	ldr	r3, [r3, #4]
 8007160:	441a      	add	r2, r3
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	685b      	ldr	r3, [r3, #4]
 8007172:	68ba      	ldr	r2, [r7, #8]
 8007174:	441a      	add	r2, r3
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	429a      	cmp	r2, r3
 800717c:	d118      	bne.n	80071b0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	681a      	ldr	r2, [r3, #0]
 8007182:	4b15      	ldr	r3, [pc, #84]	; (80071d8 <prvInsertBlockIntoFreeList+0xb0>)
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	429a      	cmp	r2, r3
 8007188:	d00d      	beq.n	80071a6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	685a      	ldr	r2, [r3, #4]
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	685b      	ldr	r3, [r3, #4]
 8007194:	441a      	add	r2, r3
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	681a      	ldr	r2, [r3, #0]
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	601a      	str	r2, [r3, #0]
 80071a4:	e008      	b.n	80071b8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80071a6:	4b0c      	ldr	r3, [pc, #48]	; (80071d8 <prvInsertBlockIntoFreeList+0xb0>)
 80071a8:	681a      	ldr	r2, [r3, #0]
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	601a      	str	r2, [r3, #0]
 80071ae:	e003      	b.n	80071b8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	681a      	ldr	r2, [r3, #0]
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80071b8:	68fa      	ldr	r2, [r7, #12]
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	429a      	cmp	r2, r3
 80071be:	d002      	beq.n	80071c6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	687a      	ldr	r2, [r7, #4]
 80071c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80071c6:	bf00      	nop
 80071c8:	3714      	adds	r7, #20
 80071ca:	46bd      	mov	sp, r7
 80071cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d0:	4770      	bx	lr
 80071d2:	bf00      	nop
 80071d4:	20004920 	.word	0x20004920
 80071d8:	20004928 	.word	0x20004928

080071dc <__libc_init_array>:
 80071dc:	b570      	push	{r4, r5, r6, lr}
 80071de:	4d0d      	ldr	r5, [pc, #52]	; (8007214 <__libc_init_array+0x38>)
 80071e0:	4c0d      	ldr	r4, [pc, #52]	; (8007218 <__libc_init_array+0x3c>)
 80071e2:	1b64      	subs	r4, r4, r5
 80071e4:	10a4      	asrs	r4, r4, #2
 80071e6:	2600      	movs	r6, #0
 80071e8:	42a6      	cmp	r6, r4
 80071ea:	d109      	bne.n	8007200 <__libc_init_array+0x24>
 80071ec:	4d0b      	ldr	r5, [pc, #44]	; (800721c <__libc_init_array+0x40>)
 80071ee:	4c0c      	ldr	r4, [pc, #48]	; (8007220 <__libc_init_array+0x44>)
 80071f0:	f000 f82e 	bl	8007250 <_init>
 80071f4:	1b64      	subs	r4, r4, r5
 80071f6:	10a4      	asrs	r4, r4, #2
 80071f8:	2600      	movs	r6, #0
 80071fa:	42a6      	cmp	r6, r4
 80071fc:	d105      	bne.n	800720a <__libc_init_array+0x2e>
 80071fe:	bd70      	pop	{r4, r5, r6, pc}
 8007200:	f855 3b04 	ldr.w	r3, [r5], #4
 8007204:	4798      	blx	r3
 8007206:	3601      	adds	r6, #1
 8007208:	e7ee      	b.n	80071e8 <__libc_init_array+0xc>
 800720a:	f855 3b04 	ldr.w	r3, [r5], #4
 800720e:	4798      	blx	r3
 8007210:	3601      	adds	r6, #1
 8007212:	e7f2      	b.n	80071fa <__libc_init_array+0x1e>
 8007214:	08007394 	.word	0x08007394
 8007218:	08007394 	.word	0x08007394
 800721c:	08007394 	.word	0x08007394
 8007220:	08007398 	.word	0x08007398

08007224 <memcpy>:
 8007224:	440a      	add	r2, r1
 8007226:	4291      	cmp	r1, r2
 8007228:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800722c:	d100      	bne.n	8007230 <memcpy+0xc>
 800722e:	4770      	bx	lr
 8007230:	b510      	push	{r4, lr}
 8007232:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007236:	f803 4f01 	strb.w	r4, [r3, #1]!
 800723a:	4291      	cmp	r1, r2
 800723c:	d1f9      	bne.n	8007232 <memcpy+0xe>
 800723e:	bd10      	pop	{r4, pc}

08007240 <memset>:
 8007240:	4402      	add	r2, r0
 8007242:	4603      	mov	r3, r0
 8007244:	4293      	cmp	r3, r2
 8007246:	d100      	bne.n	800724a <memset+0xa>
 8007248:	4770      	bx	lr
 800724a:	f803 1b01 	strb.w	r1, [r3], #1
 800724e:	e7f9      	b.n	8007244 <memset+0x4>

08007250 <_init>:
 8007250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007252:	bf00      	nop
 8007254:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007256:	bc08      	pop	{r3}
 8007258:	469e      	mov	lr, r3
 800725a:	4770      	bx	lr

0800725c <_fini>:
 800725c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800725e:	bf00      	nop
 8007260:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007262:	bc08      	pop	{r3}
 8007264:	469e      	mov	lr, r3
 8007266:	4770      	bx	lr
