
Projeto6_FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005cb4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002cc  08005e84  08005e84  00015e84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006150  08006150  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08006150  08006150  00016150  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006158  08006158  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006158  08006158  00016158  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800615c  0800615c  0001615c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006160  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004168  20000074  080061d4  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200041dc  080061d4  000241dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c6af  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000372c  00000000  00000000  0003c753  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001478  00000000  00000000  0003fe80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001348  00000000  00000000  000412f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000253f5  00000000  00000000  00042640  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018daf  00000000  00000000  00067a35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dcc13  00000000  00000000  000807e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0015d3f7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005b40  00000000  00000000  0015d44c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000074 	.word	0x20000074
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005e6c 	.word	0x08005e6c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000078 	.word	0x20000078
 800020c:	08005e6c 	.word	0x08005e6c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002c4:	f000 b96e 	b.w	80005a4 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468c      	mov	ip, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	f040 8083 	bne.w	80003f6 <__udivmoddi4+0x116>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d947      	bls.n	8000386 <__udivmoddi4+0xa6>
 80002f6:	fab2 f282 	clz	r2, r2
 80002fa:	b142      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fc:	f1c2 0020 	rsb	r0, r2, #32
 8000300:	fa24 f000 	lsr.w	r0, r4, r0
 8000304:	4091      	lsls	r1, r2
 8000306:	4097      	lsls	r7, r2
 8000308:	ea40 0c01 	orr.w	ip, r0, r1
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbbc f6f8 	udiv	r6, ip, r8
 8000318:	fa1f fe87 	uxth.w	lr, r7
 800031c:	fb08 c116 	mls	r1, r8, r6, ip
 8000320:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000324:	fb06 f10e 	mul.w	r1, r6, lr
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000332:	f080 8119 	bcs.w	8000568 <__udivmoddi4+0x288>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8116 	bls.w	8000568 <__udivmoddi4+0x288>
 800033c:	3e02      	subs	r6, #2
 800033e:	443b      	add	r3, r7
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0f8 	udiv	r0, r3, r8
 8000348:	fb08 3310 	mls	r3, r8, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fe0e 	mul.w	lr, r0, lr
 8000354:	45a6      	cmp	lr, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	193c      	adds	r4, r7, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800035e:	f080 8105 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000362:	45a6      	cmp	lr, r4
 8000364:	f240 8102 	bls.w	800056c <__udivmoddi4+0x28c>
 8000368:	3802      	subs	r0, #2
 800036a:	443c      	add	r4, r7
 800036c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000370:	eba4 040e 	sub.w	r4, r4, lr
 8000374:	2600      	movs	r6, #0
 8000376:	b11d      	cbz	r5, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c5 4300 	strd	r4, r3, [r5]
 8000380:	4631      	mov	r1, r6
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	b902      	cbnz	r2, 800038a <__udivmoddi4+0xaa>
 8000388:	deff      	udf	#255	; 0xff
 800038a:	fab2 f282 	clz	r2, r2
 800038e:	2a00      	cmp	r2, #0
 8000390:	d150      	bne.n	8000434 <__udivmoddi4+0x154>
 8000392:	1bcb      	subs	r3, r1, r7
 8000394:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000398:	fa1f f887 	uxth.w	r8, r7
 800039c:	2601      	movs	r6, #1
 800039e:	fbb3 fcfe 	udiv	ip, r3, lr
 80003a2:	0c21      	lsrs	r1, r4, #16
 80003a4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ac:	fb08 f30c 	mul.w	r3, r8, ip
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80003b4:	1879      	adds	r1, r7, r1
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0xe2>
 80003bc:	428b      	cmp	r3, r1
 80003be:	f200 80e9 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1ac9      	subs	r1, r1, r3
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003d0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x10c>
 80003dc:	193c      	adds	r4, r7, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x10a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80d9 	bhi.w	800059c <__udivmoddi4+0x2bc>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e7bf      	b.n	8000376 <__udivmoddi4+0x96>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d909      	bls.n	800040e <__udivmoddi4+0x12e>
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	f000 80b1 	beq.w	8000562 <__udivmoddi4+0x282>
 8000400:	2600      	movs	r6, #0
 8000402:	e9c5 0100 	strd	r0, r1, [r5]
 8000406:	4630      	mov	r0, r6
 8000408:	4631      	mov	r1, r6
 800040a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040e:	fab3 f683 	clz	r6, r3
 8000412:	2e00      	cmp	r6, #0
 8000414:	d14a      	bne.n	80004ac <__udivmoddi4+0x1cc>
 8000416:	428b      	cmp	r3, r1
 8000418:	d302      	bcc.n	8000420 <__udivmoddi4+0x140>
 800041a:	4282      	cmp	r2, r0
 800041c:	f200 80b8 	bhi.w	8000590 <__udivmoddi4+0x2b0>
 8000420:	1a84      	subs	r4, r0, r2
 8000422:	eb61 0103 	sbc.w	r1, r1, r3
 8000426:	2001      	movs	r0, #1
 8000428:	468c      	mov	ip, r1
 800042a:	2d00      	cmp	r5, #0
 800042c:	d0a8      	beq.n	8000380 <__udivmoddi4+0xa0>
 800042e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000432:	e7a5      	b.n	8000380 <__udivmoddi4+0xa0>
 8000434:	f1c2 0320 	rsb	r3, r2, #32
 8000438:	fa20 f603 	lsr.w	r6, r0, r3
 800043c:	4097      	lsls	r7, r2
 800043e:	fa01 f002 	lsl.w	r0, r1, r2
 8000442:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000446:	40d9      	lsrs	r1, r3
 8000448:	4330      	orrs	r0, r6
 800044a:	0c03      	lsrs	r3, r0, #16
 800044c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000450:	fa1f f887 	uxth.w	r8, r7
 8000454:	fb0e 1116 	mls	r1, lr, r6, r1
 8000458:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800045c:	fb06 f108 	mul.w	r1, r6, r8
 8000460:	4299      	cmp	r1, r3
 8000462:	fa04 f402 	lsl.w	r4, r4, r2
 8000466:	d909      	bls.n	800047c <__udivmoddi4+0x19c>
 8000468:	18fb      	adds	r3, r7, r3
 800046a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800046e:	f080 808d 	bcs.w	800058c <__udivmoddi4+0x2ac>
 8000472:	4299      	cmp	r1, r3
 8000474:	f240 808a 	bls.w	800058c <__udivmoddi4+0x2ac>
 8000478:	3e02      	subs	r6, #2
 800047a:	443b      	add	r3, r7
 800047c:	1a5b      	subs	r3, r3, r1
 800047e:	b281      	uxth	r1, r0
 8000480:	fbb3 f0fe 	udiv	r0, r3, lr
 8000484:	fb0e 3310 	mls	r3, lr, r0, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb00 f308 	mul.w	r3, r0, r8
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0x1c4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800049a:	d273      	bcs.n	8000584 <__udivmoddi4+0x2a4>
 800049c:	428b      	cmp	r3, r1
 800049e:	d971      	bls.n	8000584 <__udivmoddi4+0x2a4>
 80004a0:	3802      	subs	r0, #2
 80004a2:	4439      	add	r1, r7
 80004a4:	1acb      	subs	r3, r1, r3
 80004a6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004aa:	e778      	b.n	800039e <__udivmoddi4+0xbe>
 80004ac:	f1c6 0c20 	rsb	ip, r6, #32
 80004b0:	fa03 f406 	lsl.w	r4, r3, r6
 80004b4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004b8:	431c      	orrs	r4, r3
 80004ba:	fa20 f70c 	lsr.w	r7, r0, ip
 80004be:	fa01 f306 	lsl.w	r3, r1, r6
 80004c2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004c6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ca:	431f      	orrs	r7, r3
 80004cc:	0c3b      	lsrs	r3, r7, #16
 80004ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80004d2:	fa1f f884 	uxth.w	r8, r4
 80004d6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004da:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004de:	fb09 fa08 	mul.w	sl, r9, r8
 80004e2:	458a      	cmp	sl, r1
 80004e4:	fa02 f206 	lsl.w	r2, r2, r6
 80004e8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x220>
 80004ee:	1861      	adds	r1, r4, r1
 80004f0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004f4:	d248      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 80004f6:	458a      	cmp	sl, r1
 80004f8:	d946      	bls.n	8000588 <__udivmoddi4+0x2a8>
 80004fa:	f1a9 0902 	sub.w	r9, r9, #2
 80004fe:	4421      	add	r1, r4
 8000500:	eba1 010a 	sub.w	r1, r1, sl
 8000504:	b2bf      	uxth	r7, r7
 8000506:	fbb1 f0fe 	udiv	r0, r1, lr
 800050a:	fb0e 1110 	mls	r1, lr, r0, r1
 800050e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000512:	fb00 f808 	mul.w	r8, r0, r8
 8000516:	45b8      	cmp	r8, r7
 8000518:	d907      	bls.n	800052a <__udivmoddi4+0x24a>
 800051a:	19e7      	adds	r7, r4, r7
 800051c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000520:	d22e      	bcs.n	8000580 <__udivmoddi4+0x2a0>
 8000522:	45b8      	cmp	r8, r7
 8000524:	d92c      	bls.n	8000580 <__udivmoddi4+0x2a0>
 8000526:	3802      	subs	r0, #2
 8000528:	4427      	add	r7, r4
 800052a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800052e:	eba7 0708 	sub.w	r7, r7, r8
 8000532:	fba0 8902 	umull	r8, r9, r0, r2
 8000536:	454f      	cmp	r7, r9
 8000538:	46c6      	mov	lr, r8
 800053a:	4649      	mov	r1, r9
 800053c:	d31a      	bcc.n	8000574 <__udivmoddi4+0x294>
 800053e:	d017      	beq.n	8000570 <__udivmoddi4+0x290>
 8000540:	b15d      	cbz	r5, 800055a <__udivmoddi4+0x27a>
 8000542:	ebb3 020e 	subs.w	r2, r3, lr
 8000546:	eb67 0701 	sbc.w	r7, r7, r1
 800054a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800054e:	40f2      	lsrs	r2, r6
 8000550:	ea4c 0202 	orr.w	r2, ip, r2
 8000554:	40f7      	lsrs	r7, r6
 8000556:	e9c5 2700 	strd	r2, r7, [r5]
 800055a:	2600      	movs	r6, #0
 800055c:	4631      	mov	r1, r6
 800055e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e70b      	b.n	8000380 <__udivmoddi4+0xa0>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0x60>
 800056c:	4618      	mov	r0, r3
 800056e:	e6fd      	b.n	800036c <__udivmoddi4+0x8c>
 8000570:	4543      	cmp	r3, r8
 8000572:	d2e5      	bcs.n	8000540 <__udivmoddi4+0x260>
 8000574:	ebb8 0e02 	subs.w	lr, r8, r2
 8000578:	eb69 0104 	sbc.w	r1, r9, r4
 800057c:	3801      	subs	r0, #1
 800057e:	e7df      	b.n	8000540 <__udivmoddi4+0x260>
 8000580:	4608      	mov	r0, r1
 8000582:	e7d2      	b.n	800052a <__udivmoddi4+0x24a>
 8000584:	4660      	mov	r0, ip
 8000586:	e78d      	b.n	80004a4 <__udivmoddi4+0x1c4>
 8000588:	4681      	mov	r9, r0
 800058a:	e7b9      	b.n	8000500 <__udivmoddi4+0x220>
 800058c:	4666      	mov	r6, ip
 800058e:	e775      	b.n	800047c <__udivmoddi4+0x19c>
 8000590:	4630      	mov	r0, r6
 8000592:	e74a      	b.n	800042a <__udivmoddi4+0x14a>
 8000594:	f1ac 0c02 	sub.w	ip, ip, #2
 8000598:	4439      	add	r1, r7
 800059a:	e713      	b.n	80003c4 <__udivmoddi4+0xe4>
 800059c:	3802      	subs	r0, #2
 800059e:	443c      	add	r4, r7
 80005a0:	e724      	b.n	80003ec <__udivmoddi4+0x10c>
 80005a2:	bf00      	nop

080005a4 <__aeabi_idiv0>:
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop

080005a8 <configMotor>:

#include <L293D.h>


void configMotor(motor_dc* motor, TIM_HandleTypeDef timer, uint32_t timerChannel)
{
 80005a8:	b084      	sub	sp, #16
 80005aa:	b580      	push	{r7, lr}
 80005ac:	b082      	sub	sp, #8
 80005ae:	af00      	add	r7, sp, #0
 80005b0:	6078      	str	r0, [r7, #4]
 80005b2:	f107 0014 	add.w	r0, r7, #20
 80005b6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	motor->timer = timer;
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	3304      	adds	r3, #4
 80005be:	f107 0114 	add.w	r1, r7, #20
 80005c2:	2248      	movs	r2, #72	; 0x48
 80005c4:	4618      	mov	r0, r3
 80005c6:	f005 f81b 	bl	8005600 <memcpy>
	motor->timerChannel = timerChannel;
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80005ce:	64da      	str	r2, [r3, #76]	; 0x4c
	motor->configured = 1;
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	2201      	movs	r2, #1
 80005d4:	701a      	strb	r2, [r3, #0]
}
 80005d6:	bf00      	nop
 80005d8:	3708      	adds	r7, #8
 80005da:	46bd      	mov	sp, r7
 80005dc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80005e0:	b004      	add	sp, #16
 80005e2:	4770      	bx	lr

080005e4 <configHC595>:

void configHC595(HC595* hc595, GPIO_TypeDef* SRCLK_port, uint16_t SRCLK_pin, GPIO_TypeDef* RCLK_port, uint16_t RCLK_pin, GPIO_TypeDef* SER_DATA_port, uint16_t SER_DATA_pin)
{
 80005e4:	b480      	push	{r7}
 80005e6:	b085      	sub	sp, #20
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	60f8      	str	r0, [r7, #12]
 80005ec:	60b9      	str	r1, [r7, #8]
 80005ee:	603b      	str	r3, [r7, #0]
 80005f0:	4613      	mov	r3, r2
 80005f2:	80fb      	strh	r3, [r7, #6]
	hc595->SRCLK.port = SRCLK_port;
 80005f4:	68fb      	ldr	r3, [r7, #12]
 80005f6:	68ba      	ldr	r2, [r7, #8]
 80005f8:	605a      	str	r2, [r3, #4]
	hc595->SRCLK.pin = SRCLK_pin;
 80005fa:	88fa      	ldrh	r2, [r7, #6]
 80005fc:	68fb      	ldr	r3, [r7, #12]
 80005fe:	601a      	str	r2, [r3, #0]
	hc595->RCLK.port = RCLK_port;
 8000600:	68fb      	ldr	r3, [r7, #12]
 8000602:	683a      	ldr	r2, [r7, #0]
 8000604:	60da      	str	r2, [r3, #12]
	hc595->RCLK.pin = RCLK_pin;
 8000606:	8b3a      	ldrh	r2, [r7, #24]
 8000608:	68fb      	ldr	r3, [r7, #12]
 800060a:	609a      	str	r2, [r3, #8]
	hc595->SER_DATA.port = SER_DATA_port;
 800060c:	68fb      	ldr	r3, [r7, #12]
 800060e:	69fa      	ldr	r2, [r7, #28]
 8000610:	615a      	str	r2, [r3, #20]
	hc595->SER_DATA.pin = SER_DATA_pin;
 8000612:	8c3a      	ldrh	r2, [r7, #32]
 8000614:	68fb      	ldr	r3, [r7, #12]
 8000616:	611a      	str	r2, [r3, #16]
	hc595->currentConfiguration = 0;
 8000618:	68fb      	ldr	r3, [r7, #12]
 800061a:	2200      	movs	r2, #0
 800061c:	761a      	strb	r2, [r3, #24]
	hc595->configured = 1;
 800061e:	68fb      	ldr	r3, [r7, #12]
 8000620:	2201      	movs	r2, #1
 8000622:	765a      	strb	r2, [r3, #25]
}
 8000624:	bf00      	nop
 8000626:	3714      	adds	r7, #20
 8000628:	46bd      	mov	sp, r7
 800062a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062e:	4770      	bx	lr

08000630 <configuraMagnetometro>:
/*
 * Configura os registradores de taxa de aquisição, ganho e modo de operação.
 *
*/
void configuraMagnetometro(I2C_HandleTypeDef i2c, uint8_t taxaAquisicao, uint8_t ganho, uint8_t modoOperacao)
{
 8000630:	b084      	sub	sp, #16
 8000632:	b580      	push	{r7, lr}
 8000634:	b084      	sub	sp, #16
 8000636:	af04      	add	r7, sp, #16
 8000638:	f107 0c08 	add.w	ip, r7, #8
 800063c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	  // Configuração do ganho, taxa de aquisição e modo de operação do magnetômetro
	  HAL_I2C_Mem_Write(&i2c, HMC5883l_ADDRESS, CONFIG_A_REGISTER , 1, &taxaAquisicao , 1, 100);
 8000640:	2364      	movs	r3, #100	; 0x64
 8000642:	9302      	str	r3, [sp, #8]
 8000644:	2301      	movs	r3, #1
 8000646:	9301      	str	r3, [sp, #4]
 8000648:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800064c:	9300      	str	r3, [sp, #0]
 800064e:	2301      	movs	r3, #1
 8000650:	2200      	movs	r2, #0
 8000652:	213c      	movs	r1, #60	; 0x3c
 8000654:	f107 0008 	add.w	r0, r7, #8
 8000658:	f001 fa34 	bl	8001ac4 <HAL_I2C_Mem_Write>
	  HAL_I2C_Mem_Write(&i2c, HMC5883l_ADDRESS, CONFIG_B_REGISTER , 1, &ganho, 1, 100);
 800065c:	2364      	movs	r3, #100	; 0x64
 800065e:	9302      	str	r3, [sp, #8]
 8000660:	2301      	movs	r3, #1
 8000662:	9301      	str	r3, [sp, #4]
 8000664:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000668:	9300      	str	r3, [sp, #0]
 800066a:	2301      	movs	r3, #1
 800066c:	2201      	movs	r2, #1
 800066e:	213c      	movs	r1, #60	; 0x3c
 8000670:	f107 0008 	add.w	r0, r7, #8
 8000674:	f001 fa26 	bl	8001ac4 <HAL_I2C_Mem_Write>
	  HAL_I2C_Mem_Write(&i2c, HMC5883l_ADDRESS, MODE_REGISTER, 1, &modoOperacao, 1, 100);
 8000678:	2364      	movs	r3, #100	; 0x64
 800067a:	9302      	str	r3, [sp, #8]
 800067c:	2301      	movs	r3, #1
 800067e:	9301      	str	r3, [sp, #4]
 8000680:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000684:	9300      	str	r3, [sp, #0]
 8000686:	2301      	movs	r3, #1
 8000688:	2202      	movs	r2, #2
 800068a:	213c      	movs	r1, #60	; 0x3c
 800068c:	f107 0008 	add.w	r0, r7, #8
 8000690:	f001 fa18 	bl	8001ac4 <HAL_I2C_Mem_Write>
}
 8000694:	bf00      	nop
 8000696:	46bd      	mov	sp, r7
 8000698:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800069c:	b004      	add	sp, #16
 800069e:	4770      	bx	lr

080006a0 <getResponse>:
	char envio[12] = {0};
	sprintf(envio,"AT+NAME\r\n");
	HAL_UART_Transmit(&huart, (uint8_t *) envio, strlen(envio), 100);
}

void getResponse(UART_HandleTypeDef huart, char * resposta){
 80006a0:	b084      	sub	sp, #16
 80006a2:	b580      	push	{r7, lr}
 80006a4:	b088      	sub	sp, #32
 80006a6:	af00      	add	r7, sp, #0
 80006a8:	f107 0c28 	add.w	ip, r7, #40	; 0x28
 80006ac:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	char envio[32] = {0};
 80006b0:	2300      	movs	r3, #0
 80006b2:	603b      	str	r3, [r7, #0]
 80006b4:	1d3b      	adds	r3, r7, #4
 80006b6:	2200      	movs	r2, #0
 80006b8:	601a      	str	r2, [r3, #0]
 80006ba:	605a      	str	r2, [r3, #4]
 80006bc:	609a      	str	r2, [r3, #8]
 80006be:	60da      	str	r2, [r3, #12]
 80006c0:	611a      	str	r2, [r3, #16]
 80006c2:	615a      	str	r2, [r3, #20]
 80006c4:	619a      	str	r2, [r3, #24]
	//char resposta[32] = {0};
	sprintf(envio,"AT+BAUD\r\n");
 80006c6:	463b      	mov	r3, r7
 80006c8:	490b      	ldr	r1, [pc, #44]	; (80006f8 <getResponse+0x58>)
 80006ca:	4618      	mov	r0, r3
 80006cc:	f005 f868 	bl	80057a0 <siprintf>


	HAL_UART_Receive(&huart, (uint8_t *)resposta, 8, 1000);
 80006d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006d4:	2208      	movs	r2, #8
 80006d6:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80006d8:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80006dc:	f003 fa41 	bl	8003b62 <HAL_UART_Receive>
	HAL_Delay(1000);
 80006e0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006e4:	f000 fdf6 	bl	80012d4 <HAL_Delay>

	//return resposta;
}
 80006e8:	bf00      	nop
 80006ea:	3720      	adds	r7, #32
 80006ec:	46bd      	mov	sp, r7
 80006ee:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80006f2:	b004      	add	sp, #16
 80006f4:	4770      	bx	lr
 80006f6:	bf00      	nop
 80006f8:	08005e9c 	.word	0x08005e9c

080006fc <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80006fc:	b480      	push	{r7}
 80006fe:	b085      	sub	sp, #20
 8000700:	af00      	add	r7, sp, #0
 8000702:	60f8      	str	r0, [r7, #12]
 8000704:	60b9      	str	r1, [r7, #8]
 8000706:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000708:	68fb      	ldr	r3, [r7, #12]
 800070a:	4a07      	ldr	r2, [pc, #28]	; (8000728 <vApplicationGetIdleTaskMemory+0x2c>)
 800070c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800070e:	68bb      	ldr	r3, [r7, #8]
 8000710:	4a06      	ldr	r2, [pc, #24]	; (800072c <vApplicationGetIdleTaskMemory+0x30>)
 8000712:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	2280      	movs	r2, #128	; 0x80
 8000718:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800071a:	bf00      	nop
 800071c:	3714      	adds	r7, #20
 800071e:	46bd      	mov	sp, r7
 8000720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000724:	4770      	bx	lr
 8000726:	bf00      	nop
 8000728:	20000090 	.word	0x20000090
 800072c:	200000e4 	.word	0x200000e4

08000730 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000730:	b5b0      	push	{r4, r5, r7, lr}
 8000732:	b0a4      	sub	sp, #144	; 0x90
 8000734:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000736:	f000 fd8b 	bl	8001250 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800073a:	f000 f87f 	bl	800083c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800073e:	f000 fa05 	bl	8000b4c <MX_GPIO_Init>
  MX_I2C1_Init();
 8000742:	f000 f8e7 	bl	8000914 <MX_I2C1_Init>
  MX_TIM4_Init();
 8000746:	f000 f913 	bl	8000970 <MX_TIM4_Init>
  MX_TIM14_Init();
 800074a:	f000 f987 	bl	8000a5c <MX_TIM14_Init>
  MX_USART3_UART_Init();
 800074e:	f000 f9d3 	bl	8000af8 <MX_USART3_UART_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of controlador */
  osThreadDef(controlador, startControlador, osPriorityNormal, 0, 128);
 8000752:	4b30      	ldr	r3, [pc, #192]	; (8000814 <main+0xe4>)
 8000754:	f107 0474 	add.w	r4, r7, #116	; 0x74
 8000758:	461d      	mov	r5, r3
 800075a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800075c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800075e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000762:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  controladorHandle = osThreadCreate(osThread(controlador), NULL);
 8000766:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800076a:	2100      	movs	r1, #0
 800076c:	4618      	mov	r0, r3
 800076e:	f003 fcf0 	bl	8004152 <osThreadCreate>
 8000772:	4603      	mov	r3, r0
 8000774:	4a28      	ldr	r2, [pc, #160]	; (8000818 <main+0xe8>)
 8000776:	6013      	str	r3, [r2, #0]

  /* definition and creation of magnetometro */
  osThreadDef(magnetometro, startMagnetometro, osPriorityNormal, 0, 128);
 8000778:	4b28      	ldr	r3, [pc, #160]	; (800081c <main+0xec>)
 800077a:	f107 0458 	add.w	r4, r7, #88	; 0x58
 800077e:	461d      	mov	r5, r3
 8000780:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000782:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000784:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000788:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  magnetometroHandle = osThreadCreate(osThread(magnetometro), NULL);
 800078c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000790:	2100      	movs	r1, #0
 8000792:	4618      	mov	r0, r3
 8000794:	f003 fcdd 	bl	8004152 <osThreadCreate>
 8000798:	4603      	mov	r3, r0
 800079a:	4a21      	ldr	r2, [pc, #132]	; (8000820 <main+0xf0>)
 800079c:	6013      	str	r3, [r2, #0]

  /* definition and creation of servoMotor */
  osThreadDef(servoMotor, startServoMotor, osPriorityNormal, 0, 128);
 800079e:	4b21      	ldr	r3, [pc, #132]	; (8000824 <main+0xf4>)
 80007a0:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80007a4:	461d      	mov	r5, r3
 80007a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007aa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80007ae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  servoMotorHandle = osThreadCreate(osThread(servoMotor), NULL);
 80007b2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80007b6:	2100      	movs	r1, #0
 80007b8:	4618      	mov	r0, r3
 80007ba:	f003 fcca 	bl	8004152 <osThreadCreate>
 80007be:	4603      	mov	r3, r0
 80007c0:	4a19      	ldr	r2, [pc, #100]	; (8000828 <main+0xf8>)
 80007c2:	6013      	str	r3, [r2, #0]

  /* definition and creation of bluetooth */
  osThreadDef(bluetooth, startBluetooth, osPriorityNormal, 0, 128);
 80007c4:	4b19      	ldr	r3, [pc, #100]	; (800082c <main+0xfc>)
 80007c6:	f107 0420 	add.w	r4, r7, #32
 80007ca:	461d      	mov	r5, r3
 80007cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007d0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80007d4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  bluetoothHandle = osThreadCreate(osThread(bluetooth), NULL);
 80007d8:	f107 0320 	add.w	r3, r7, #32
 80007dc:	2100      	movs	r1, #0
 80007de:	4618      	mov	r0, r3
 80007e0:	f003 fcb7 	bl	8004152 <osThreadCreate>
 80007e4:	4603      	mov	r3, r0
 80007e6:	4a12      	ldr	r2, [pc, #72]	; (8000830 <main+0x100>)
 80007e8:	6013      	str	r3, [r2, #0]

  /* definition and creation of motorDC */
  osThreadDef(motorDC, startMotorDC, osPriorityNormal, 0, 128);
 80007ea:	4b12      	ldr	r3, [pc, #72]	; (8000834 <main+0x104>)
 80007ec:	1d3c      	adds	r4, r7, #4
 80007ee:	461d      	mov	r5, r3
 80007f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007f4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80007f8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  motorDCHandle = osThreadCreate(osThread(motorDC), NULL);
 80007fc:	1d3b      	adds	r3, r7, #4
 80007fe:	2100      	movs	r1, #0
 8000800:	4618      	mov	r0, r3
 8000802:	f003 fca6 	bl	8004152 <osThreadCreate>
 8000806:	4603      	mov	r3, r0
 8000808:	4a0b      	ldr	r2, [pc, #44]	; (8000838 <main+0x108>)
 800080a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800080c:	f003 fc9a 	bl	8004144 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000810:	e7fe      	b.n	8000810 <main+0xe0>
 8000812:	bf00      	nop
 8000814:	0800600c 	.word	0x0800600c
 8000818:	20004124 	.word	0x20004124
 800081c:	08006028 	.word	0x08006028
 8000820:	20004128 	.word	0x20004128
 8000824:	08006044 	.word	0x08006044
 8000828:	20004130 	.word	0x20004130
 800082c:	08006060 	.word	0x08006060
 8000830:	2000412c 	.word	0x2000412c
 8000834:	0800607c 	.word	0x0800607c
 8000838:	20004134 	.word	0x20004134

0800083c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b094      	sub	sp, #80	; 0x50
 8000840:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000842:	f107 031c 	add.w	r3, r7, #28
 8000846:	2234      	movs	r2, #52	; 0x34
 8000848:	2100      	movs	r1, #0
 800084a:	4618      	mov	r0, r3
 800084c:	f004 fee6 	bl	800561c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000850:	f107 0308 	add.w	r3, r7, #8
 8000854:	2200      	movs	r2, #0
 8000856:	601a      	str	r2, [r3, #0]
 8000858:	605a      	str	r2, [r3, #4]
 800085a:	609a      	str	r2, [r3, #8]
 800085c:	60da      	str	r2, [r3, #12]
 800085e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000860:	2300      	movs	r3, #0
 8000862:	607b      	str	r3, [r7, #4]
 8000864:	4b29      	ldr	r3, [pc, #164]	; (800090c <SystemClock_Config+0xd0>)
 8000866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000868:	4a28      	ldr	r2, [pc, #160]	; (800090c <SystemClock_Config+0xd0>)
 800086a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800086e:	6413      	str	r3, [r2, #64]	; 0x40
 8000870:	4b26      	ldr	r3, [pc, #152]	; (800090c <SystemClock_Config+0xd0>)
 8000872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000874:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000878:	607b      	str	r3, [r7, #4]
 800087a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800087c:	2300      	movs	r3, #0
 800087e:	603b      	str	r3, [r7, #0]
 8000880:	4b23      	ldr	r3, [pc, #140]	; (8000910 <SystemClock_Config+0xd4>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000888:	4a21      	ldr	r2, [pc, #132]	; (8000910 <SystemClock_Config+0xd4>)
 800088a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800088e:	6013      	str	r3, [r2, #0]
 8000890:	4b1f      	ldr	r3, [pc, #124]	; (8000910 <SystemClock_Config+0xd4>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000898:	603b      	str	r3, [r7, #0]
 800089a:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800089c:	2302      	movs	r3, #2
 800089e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008a0:	2301      	movs	r3, #1
 80008a2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008a4:	2310      	movs	r3, #16
 80008a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008a8:	2302      	movs	r3, #2
 80008aa:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008ac:	2300      	movs	r3, #0
 80008ae:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80008b0:	2308      	movs	r3, #8
 80008b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 80;
 80008b4:	2350      	movs	r3, #80	; 0x50
 80008b6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008b8:	2302      	movs	r3, #2
 80008ba:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80008bc:	2302      	movs	r3, #2
 80008be:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80008c0:	2302      	movs	r3, #2
 80008c2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008c4:	f107 031c 	add.w	r3, r7, #28
 80008c8:	4618      	mov	r0, r3
 80008ca:	f001 ff11 	bl	80026f0 <HAL_RCC_OscConfig>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d001      	beq.n	80008d8 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80008d4:	f000 fa56 	bl	8000d84 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008d8:	230f      	movs	r3, #15
 80008da:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008dc:	2302      	movs	r3, #2
 80008de:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80008e0:	2380      	movs	r3, #128	; 0x80
 80008e2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008e8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008ea:	2300      	movs	r3, #0
 80008ec:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80008ee:	f107 0308 	add.w	r3, r7, #8
 80008f2:	2101      	movs	r1, #1
 80008f4:	4618      	mov	r0, r3
 80008f6:	f001 fbfd 	bl	80020f4 <HAL_RCC_ClockConfig>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d001      	beq.n	8000904 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000900:	f000 fa40 	bl	8000d84 <Error_Handler>
  }
}
 8000904:	bf00      	nop
 8000906:	3750      	adds	r7, #80	; 0x50
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}
 800090c:	40023800 	.word	0x40023800
 8000910:	40007000 	.word	0x40007000

08000914 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000918:	4b12      	ldr	r3, [pc, #72]	; (8000964 <MX_I2C1_Init+0x50>)
 800091a:	4a13      	ldr	r2, [pc, #76]	; (8000968 <MX_I2C1_Init+0x54>)
 800091c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800091e:	4b11      	ldr	r3, [pc, #68]	; (8000964 <MX_I2C1_Init+0x50>)
 8000920:	4a12      	ldr	r2, [pc, #72]	; (800096c <MX_I2C1_Init+0x58>)
 8000922:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000924:	4b0f      	ldr	r3, [pc, #60]	; (8000964 <MX_I2C1_Init+0x50>)
 8000926:	2200      	movs	r2, #0
 8000928:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800092a:	4b0e      	ldr	r3, [pc, #56]	; (8000964 <MX_I2C1_Init+0x50>)
 800092c:	2200      	movs	r2, #0
 800092e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000930:	4b0c      	ldr	r3, [pc, #48]	; (8000964 <MX_I2C1_Init+0x50>)
 8000932:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000936:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000938:	4b0a      	ldr	r3, [pc, #40]	; (8000964 <MX_I2C1_Init+0x50>)
 800093a:	2200      	movs	r2, #0
 800093c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800093e:	4b09      	ldr	r3, [pc, #36]	; (8000964 <MX_I2C1_Init+0x50>)
 8000940:	2200      	movs	r2, #0
 8000942:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000944:	4b07      	ldr	r3, [pc, #28]	; (8000964 <MX_I2C1_Init+0x50>)
 8000946:	2200      	movs	r2, #0
 8000948:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800094a:	4b06      	ldr	r3, [pc, #24]	; (8000964 <MX_I2C1_Init+0x50>)
 800094c:	2200      	movs	r2, #0
 800094e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000950:	4804      	ldr	r0, [pc, #16]	; (8000964 <MX_I2C1_Init+0x50>)
 8000952:	f000 ff73 	bl	800183c <HAL_I2C_Init>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d001      	beq.n	8000960 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800095c:	f000 fa12 	bl	8000d84 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000960:	bf00      	nop
 8000962:	bd80      	pop	{r7, pc}
 8000964:	200040d0 	.word	0x200040d0
 8000968:	40005400 	.word	0x40005400
 800096c:	000186a0 	.word	0x000186a0

08000970 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b08e      	sub	sp, #56	; 0x38
 8000974:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000976:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800097a:	2200      	movs	r2, #0
 800097c:	601a      	str	r2, [r3, #0]
 800097e:	605a      	str	r2, [r3, #4]
 8000980:	609a      	str	r2, [r3, #8]
 8000982:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000984:	f107 0320 	add.w	r3, r7, #32
 8000988:	2200      	movs	r2, #0
 800098a:	601a      	str	r2, [r3, #0]
 800098c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800098e:	1d3b      	adds	r3, r7, #4
 8000990:	2200      	movs	r2, #0
 8000992:	601a      	str	r2, [r3, #0]
 8000994:	605a      	str	r2, [r3, #4]
 8000996:	609a      	str	r2, [r3, #8]
 8000998:	60da      	str	r2, [r3, #12]
 800099a:	611a      	str	r2, [r3, #16]
 800099c:	615a      	str	r2, [r3, #20]
 800099e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80009a0:	4b2c      	ldr	r3, [pc, #176]	; (8000a54 <MX_TIM4_Init+0xe4>)
 80009a2:	4a2d      	ldr	r2, [pc, #180]	; (8000a58 <MX_TIM4_Init+0xe8>)
 80009a4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80009a6:	4b2b      	ldr	r3, [pc, #172]	; (8000a54 <MX_TIM4_Init+0xe4>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009ac:	4b29      	ldr	r3, [pc, #164]	; (8000a54 <MX_TIM4_Init+0xe4>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80009b2:	4b28      	ldr	r3, [pc, #160]	; (8000a54 <MX_TIM4_Init+0xe4>)
 80009b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80009b8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009ba:	4b26      	ldr	r3, [pc, #152]	; (8000a54 <MX_TIM4_Init+0xe4>)
 80009bc:	2200      	movs	r2, #0
 80009be:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009c0:	4b24      	ldr	r3, [pc, #144]	; (8000a54 <MX_TIM4_Init+0xe4>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80009c6:	4823      	ldr	r0, [pc, #140]	; (8000a54 <MX_TIM4_Init+0xe4>)
 80009c8:	f002 f930 	bl	8002c2c <HAL_TIM_Base_Init>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 80009d2:	f000 f9d7 	bl	8000d84 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009da:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80009dc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80009e0:	4619      	mov	r1, r3
 80009e2:	481c      	ldr	r0, [pc, #112]	; (8000a54 <MX_TIM4_Init+0xe4>)
 80009e4:	f002 fc06 	bl	80031f4 <HAL_TIM_ConfigClockSource>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 80009ee:	f000 f9c9 	bl	8000d84 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80009f2:	4818      	ldr	r0, [pc, #96]	; (8000a54 <MX_TIM4_Init+0xe4>)
 80009f4:	f002 f9da 	bl	8002dac <HAL_TIM_PWM_Init>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 80009fe:	f000 f9c1 	bl	8000d84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a02:	2300      	movs	r3, #0
 8000a04:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a06:	2300      	movs	r3, #0
 8000a08:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000a0a:	f107 0320 	add.w	r3, r7, #32
 8000a0e:	4619      	mov	r1, r3
 8000a10:	4810      	ldr	r0, [pc, #64]	; (8000a54 <MX_TIM4_Init+0xe4>)
 8000a12:	f002 ffc9 	bl	80039a8 <HAL_TIMEx_MasterConfigSynchronization>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d001      	beq.n	8000a20 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8000a1c:	f000 f9b2 	bl	8000d84 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a20:	2360      	movs	r3, #96	; 0x60
 8000a22:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000a24:	2300      	movs	r3, #0
 8000a26:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a30:	1d3b      	adds	r3, r7, #4
 8000a32:	2200      	movs	r2, #0
 8000a34:	4619      	mov	r1, r3
 8000a36:	4807      	ldr	r0, [pc, #28]	; (8000a54 <MX_TIM4_Init+0xe4>)
 8000a38:	f002 fb1a 	bl	8003070 <HAL_TIM_PWM_ConfigChannel>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d001      	beq.n	8000a46 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8000a42:	f000 f99f 	bl	8000d84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000a46:	4803      	ldr	r0, [pc, #12]	; (8000a54 <MX_TIM4_Init+0xe4>)
 8000a48:	f000 fa4e 	bl	8000ee8 <HAL_TIM_MspPostInit>

}
 8000a4c:	bf00      	nop
 8000a4e:	3738      	adds	r7, #56	; 0x38
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	20004044 	.word	0x20004044
 8000a58:	40000800 	.word	0x40000800

08000a5c <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b088      	sub	sp, #32
 8000a60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a62:	1d3b      	adds	r3, r7, #4
 8000a64:	2200      	movs	r2, #0
 8000a66:	601a      	str	r2, [r3, #0]
 8000a68:	605a      	str	r2, [r3, #4]
 8000a6a:	609a      	str	r2, [r3, #8]
 8000a6c:	60da      	str	r2, [r3, #12]
 8000a6e:	611a      	str	r2, [r3, #16]
 8000a70:	615a      	str	r2, [r3, #20]
 8000a72:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000a74:	4b1e      	ldr	r3, [pc, #120]	; (8000af0 <MX_TIM14_Init+0x94>)
 8000a76:	4a1f      	ldr	r2, [pc, #124]	; (8000af4 <MX_TIM14_Init+0x98>)
 8000a78:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 0;
 8000a7a:	4b1d      	ldr	r3, [pc, #116]	; (8000af0 <MX_TIM14_Init+0x94>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a80:	4b1b      	ldr	r3, [pc, #108]	; (8000af0 <MX_TIM14_Init+0x94>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 8000a86:	4b1a      	ldr	r3, [pc, #104]	; (8000af0 <MX_TIM14_Init+0x94>)
 8000a88:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a8c:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a8e:	4b18      	ldr	r3, [pc, #96]	; (8000af0 <MX_TIM14_Init+0x94>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a94:	4b16      	ldr	r3, [pc, #88]	; (8000af0 <MX_TIM14_Init+0x94>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000a9a:	4815      	ldr	r0, [pc, #84]	; (8000af0 <MX_TIM14_Init+0x94>)
 8000a9c:	f002 f8c6 	bl	8002c2c <HAL_TIM_Base_Init>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d001      	beq.n	8000aaa <MX_TIM14_Init+0x4e>
  {
    Error_Handler();
 8000aa6:	f000 f96d 	bl	8000d84 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 8000aaa:	4811      	ldr	r0, [pc, #68]	; (8000af0 <MX_TIM14_Init+0x94>)
 8000aac:	f002 f97e 	bl	8002dac <HAL_TIM_PWM_Init>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d001      	beq.n	8000aba <MX_TIM14_Init+0x5e>
  {
    Error_Handler();
 8000ab6:	f000 f965 	bl	8000d84 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000aba:	2360      	movs	r3, #96	; 0x60
 8000abc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000aca:	1d3b      	adds	r3, r7, #4
 8000acc:	2200      	movs	r2, #0
 8000ace:	4619      	mov	r1, r3
 8000ad0:	4807      	ldr	r0, [pc, #28]	; (8000af0 <MX_TIM14_Init+0x94>)
 8000ad2:	f002 facd 	bl	8003070 <HAL_TIM_PWM_ConfigChannel>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d001      	beq.n	8000ae0 <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 8000adc:	f000 f952 	bl	8000d84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 8000ae0:	4803      	ldr	r0, [pc, #12]	; (8000af0 <MX_TIM14_Init+0x94>)
 8000ae2:	f000 fa01 	bl	8000ee8 <HAL_TIM_MspPostInit>

}
 8000ae6:	bf00      	nop
 8000ae8:	3720      	adds	r7, #32
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	20004138 	.word	0x20004138
 8000af4:	40002000 	.word	0x40002000

08000af8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000afc:	4b11      	ldr	r3, [pc, #68]	; (8000b44 <MX_USART3_UART_Init+0x4c>)
 8000afe:	4a12      	ldr	r2, [pc, #72]	; (8000b48 <MX_USART3_UART_Init+0x50>)
 8000b00:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000b02:	4b10      	ldr	r3, [pc, #64]	; (8000b44 <MX_USART3_UART_Init+0x4c>)
 8000b04:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b08:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b0a:	4b0e      	ldr	r3, [pc, #56]	; (8000b44 <MX_USART3_UART_Init+0x4c>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b10:	4b0c      	ldr	r3, [pc, #48]	; (8000b44 <MX_USART3_UART_Init+0x4c>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b16:	4b0b      	ldr	r3, [pc, #44]	; (8000b44 <MX_USART3_UART_Init+0x4c>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b1c:	4b09      	ldr	r3, [pc, #36]	; (8000b44 <MX_USART3_UART_Init+0x4c>)
 8000b1e:	220c      	movs	r2, #12
 8000b20:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b22:	4b08      	ldr	r3, [pc, #32]	; (8000b44 <MX_USART3_UART_Init+0x4c>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b28:	4b06      	ldr	r3, [pc, #24]	; (8000b44 <MX_USART3_UART_Init+0x4c>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b2e:	4805      	ldr	r0, [pc, #20]	; (8000b44 <MX_USART3_UART_Init+0x4c>)
 8000b30:	f002 ffca 	bl	8003ac8 <HAL_UART_Init>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d001      	beq.n	8000b3e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000b3a:	f000 f923 	bl	8000d84 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b3e:	bf00      	nop
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	2000408c 	.word	0x2000408c
 8000b48:	40004800 	.word	0x40004800

08000b4c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b088      	sub	sp, #32
 8000b50:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b52:	f107 030c 	add.w	r3, r7, #12
 8000b56:	2200      	movs	r2, #0
 8000b58:	601a      	str	r2, [r3, #0]
 8000b5a:	605a      	str	r2, [r3, #4]
 8000b5c:	609a      	str	r2, [r3, #8]
 8000b5e:	60da      	str	r2, [r3, #12]
 8000b60:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b62:	2300      	movs	r3, #0
 8000b64:	60bb      	str	r3, [r7, #8]
 8000b66:	4b31      	ldr	r3, [pc, #196]	; (8000c2c <MX_GPIO_Init+0xe0>)
 8000b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6a:	4a30      	ldr	r2, [pc, #192]	; (8000c2c <MX_GPIO_Init+0xe0>)
 8000b6c:	f043 0304 	orr.w	r3, r3, #4
 8000b70:	6313      	str	r3, [r2, #48]	; 0x30
 8000b72:	4b2e      	ldr	r3, [pc, #184]	; (8000c2c <MX_GPIO_Init+0xe0>)
 8000b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b76:	f003 0304 	and.w	r3, r3, #4
 8000b7a:	60bb      	str	r3, [r7, #8]
 8000b7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b7e:	2300      	movs	r3, #0
 8000b80:	607b      	str	r3, [r7, #4]
 8000b82:	4b2a      	ldr	r3, [pc, #168]	; (8000c2c <MX_GPIO_Init+0xe0>)
 8000b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b86:	4a29      	ldr	r2, [pc, #164]	; (8000c2c <MX_GPIO_Init+0xe0>)
 8000b88:	f043 0301 	orr.w	r3, r3, #1
 8000b8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b8e:	4b27      	ldr	r3, [pc, #156]	; (8000c2c <MX_GPIO_Init+0xe0>)
 8000b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b92:	f003 0301 	and.w	r3, r3, #1
 8000b96:	607b      	str	r3, [r7, #4]
 8000b98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	603b      	str	r3, [r7, #0]
 8000b9e:	4b23      	ldr	r3, [pc, #140]	; (8000c2c <MX_GPIO_Init+0xe0>)
 8000ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba2:	4a22      	ldr	r2, [pc, #136]	; (8000c2c <MX_GPIO_Init+0xe0>)
 8000ba4:	f043 0302 	orr.w	r3, r3, #2
 8000ba8:	6313      	str	r3, [r2, #48]	; 0x30
 8000baa:	4b20      	ldr	r3, [pc, #128]	; (8000c2c <MX_GPIO_Init+0xe0>)
 8000bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bae:	f003 0302 	and.w	r3, r3, #2
 8000bb2:	603b      	str	r3, [r7, #0]
 8000bb4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|L293D_LATCH_Pin|L293D_EN_Pin|L293D_SER_Pin, GPIO_PIN_RESET);
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	f44f 7158 	mov.w	r1, #864	; 0x360
 8000bbc:	481c      	ldr	r0, [pc, #112]	; (8000c30 <MX_GPIO_Init+0xe4>)
 8000bbe:	f000 fe23 	bl	8001808 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(L293D_CLK_GPIO_Port, L293D_CLK_Pin, GPIO_PIN_RESET);
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	2120      	movs	r1, #32
 8000bc6:	481b      	ldr	r0, [pc, #108]	; (8000c34 <MX_GPIO_Init+0xe8>)
 8000bc8:	f000 fe1e 	bl	8001808 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000bcc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bd0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000bd2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000bd6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000bdc:	f107 030c 	add.w	r3, r7, #12
 8000be0:	4619      	mov	r1, r3
 8000be2:	4815      	ldr	r0, [pc, #84]	; (8000c38 <MX_GPIO_Init+0xec>)
 8000be4:	f000 fc7c 	bl	80014e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin L293D_LATCH_Pin L293D_EN_Pin L293D_SER_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|L293D_LATCH_Pin|L293D_EN_Pin|L293D_SER_Pin;
 8000be8:	f44f 7358 	mov.w	r3, #864	; 0x360
 8000bec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bee:	2301      	movs	r3, #1
 8000bf0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bfa:	f107 030c 	add.w	r3, r7, #12
 8000bfe:	4619      	mov	r1, r3
 8000c00:	480b      	ldr	r0, [pc, #44]	; (8000c30 <MX_GPIO_Init+0xe4>)
 8000c02:	f000 fc6d 	bl	80014e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : L293D_CLK_Pin */
  GPIO_InitStruct.Pin = L293D_CLK_Pin;
 8000c06:	2320      	movs	r3, #32
 8000c08:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c0a:	2301      	movs	r3, #1
 8000c0c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c12:	2300      	movs	r3, #0
 8000c14:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(L293D_CLK_GPIO_Port, &GPIO_InitStruct);
 8000c16:	f107 030c 	add.w	r3, r7, #12
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	4805      	ldr	r0, [pc, #20]	; (8000c34 <MX_GPIO_Init+0xe8>)
 8000c1e:	f000 fc5f 	bl	80014e0 <HAL_GPIO_Init>

}
 8000c22:	bf00      	nop
 8000c24:	3720      	adds	r7, #32
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	40023800 	.word	0x40023800
 8000c30:	40020000 	.word	0x40020000
 8000c34:	40020400 	.word	0x40020400
 8000c38:	40020800 	.word	0x40020800

08000c3c <startControlador>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_startControlador */
void startControlador(void const * argument)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b082      	sub	sp, #8
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000c44:	2001      	movs	r0, #1
 8000c46:	f003 fad0 	bl	80041ea <osDelay>
 8000c4a:	e7fb      	b.n	8000c44 <startControlador+0x8>

08000c4c <startMagnetometro>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startMagnetometro */
void startMagnetometro(void const * argument)
{
 8000c4c:	b590      	push	{r4, r7, lr}
 8000c4e:	b099      	sub	sp, #100	; 0x64
 8000c50:	af14      	add	r7, sp, #80	; 0x50
 8000c52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startMagnetometro */

  // Parâmetros magnetômetro
  uint8_t config[3] = {0x70, 0xA0, 0x00}; // Valores de exemplo para CONTROL REG A, CONTROL REG B e MODE REGISTER
 8000c54:	4a0f      	ldr	r2, [pc, #60]	; (8000c94 <startMagnetometro+0x48>)
 8000c56:	f107 030c 	add.w	r3, r7, #12
 8000c5a:	6812      	ldr	r2, [r2, #0]
 8000c5c:	4611      	mov	r1, r2
 8000c5e:	8019      	strh	r1, [r3, #0]
 8000c60:	3302      	adds	r3, #2
 8000c62:	0c12      	lsrs	r2, r2, #16
 8000c64:	701a      	strb	r2, [r3, #0]
  // config[0] = 0x70 = 01110000 -> Configuração de medição normal, output de dados de 15 Hz e média de 8 amostras por medição
  // config[1] = 0xA0 = 10100000 -> Ganho de 4.7 GA
  // config[2] = 0x00 = 00000000 -> Modo de leitura contínua
  configuraMagnetometro(hi2c1, config[0], config[1], config[2]);
 8000c66:	7b3b      	ldrb	r3, [r7, #12]
 8000c68:	7b7a      	ldrb	r2, [r7, #13]
 8000c6a:	7bb9      	ldrb	r1, [r7, #14]
 8000c6c:	4c0a      	ldr	r4, [pc, #40]	; (8000c98 <startMagnetometro+0x4c>)
 8000c6e:	9113      	str	r1, [sp, #76]	; 0x4c
 8000c70:	9212      	str	r2, [sp, #72]	; 0x48
 8000c72:	9311      	str	r3, [sp, #68]	; 0x44
 8000c74:	4668      	mov	r0, sp
 8000c76:	f104 0310 	add.w	r3, r4, #16
 8000c7a:	2244      	movs	r2, #68	; 0x44
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	f004 fcbf 	bl	8005600 <memcpy>
 8000c82:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000c86:	f7ff fcd3 	bl	8000630 <configuraMagnetometro>
  // TODO: Mensagem de debug

  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000c8a:	2001      	movs	r0, #1
 8000c8c:	f003 faad 	bl	80041ea <osDelay>
 8000c90:	e7fb      	b.n	8000c8a <startMagnetometro+0x3e>
 8000c92:	bf00      	nop
 8000c94:	08006098 	.word	0x08006098
 8000c98:	200040d0 	.word	0x200040d0

08000c9c <startServoMotor>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startServoMotor */
void startServoMotor(void const * argument)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b082      	sub	sp, #8
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
	// Nenhuma configuração inicial é necessária para o servomotor

  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000ca4:	2001      	movs	r0, #1
 8000ca6:	f003 faa0 	bl	80041ea <osDelay>
 8000caa:	e7fb      	b.n	8000ca4 <startServoMotor+0x8>

08000cac <startBluetooth>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startBluetooth */
void startBluetooth(void const * argument)
{
 8000cac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000cae:	b0b1      	sub	sp, #196	; 0xc4
 8000cb0:	af0e      	add	r7, sp, #56	; 0x38
 8000cb2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startBluetooth */

	// String que armazena os resultados lidos pelo módulo bluetooth
	char respostaBluetooth[128] = {0};
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	60bb      	str	r3, [r7, #8]
 8000cb8:	f107 030c 	add.w	r3, r7, #12
 8000cbc:	227c      	movs	r2, #124	; 0x7c
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f004 fcab 	bl	800561c <memset>
	// Verifica se o módulo bluetooth está respondendo aos comandos
	getResponse(huart3, respostaBluetooth);
 8000cc6:	4e0b      	ldr	r6, [pc, #44]	; (8000cf4 <startBluetooth+0x48>)
 8000cc8:	f107 0308 	add.w	r3, r7, #8
 8000ccc:	930d      	str	r3, [sp, #52]	; 0x34
 8000cce:	466d      	mov	r5, sp
 8000cd0:	f106 0410 	add.w	r4, r6, #16
 8000cd4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000cd6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000cd8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000cda:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000cdc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000cde:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ce0:	6823      	ldr	r3, [r4, #0]
 8000ce2:	602b      	str	r3, [r5, #0]
 8000ce4:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000ce8:	f7ff fcda 	bl	80006a0 <getResponse>
	// TODO: Mensagem de debug aqui

  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000cec:	2001      	movs	r0, #1
 8000cee:	f003 fa7c 	bl	80041ea <osDelay>
 8000cf2:	e7fb      	b.n	8000cec <startBluetooth+0x40>
 8000cf4:	2000408c 	.word	0x2000408c

08000cf8 <startMotorDC>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startMotorDC */
void startMotorDC(void const * argument)
{
 8000cf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000cfa:	b0af      	sub	sp, #188	; 0xbc
 8000cfc:	af10      	add	r7, sp, #64	; 0x40
 8000cfe:	6078      	str	r0, [r7, #4]
  // Structs de configuração para o PWM e o HC595
  motor_dc motorTeste;
  HC595 hc595;

  // Configuração das structs de interação com o motor e com o HC595
  configHC595(&hc595, L293D_EN_GPIO_Port, L293D_EN_Pin, L293D_CLK_GPIO_Port, L293D_CLK_Pin, L293D_SER_GPIO_Port, L293D_SER_Pin);
 8000d00:	f107 000c 	add.w	r0, r7, #12
 8000d04:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d08:	9302      	str	r3, [sp, #8]
 8000d0a:	4b12      	ldr	r3, [pc, #72]	; (8000d54 <startMotorDC+0x5c>)
 8000d0c:	9301      	str	r3, [sp, #4]
 8000d0e:	2320      	movs	r3, #32
 8000d10:	9300      	str	r3, [sp, #0]
 8000d12:	4b11      	ldr	r3, [pc, #68]	; (8000d58 <startMotorDC+0x60>)
 8000d14:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d18:	490e      	ldr	r1, [pc, #56]	; (8000d54 <startMotorDC+0x5c>)
 8000d1a:	f7ff fc63 	bl	80005e4 <configHC595>
  configMotor(&motorTeste, htim14, TIM_CHANNEL_1);
 8000d1e:	4e0f      	ldr	r6, [pc, #60]	; (8000d5c <startMotorDC+0x64>)
 8000d20:	f107 0c28 	add.w	ip, r7, #40	; 0x28
 8000d24:	2300      	movs	r3, #0
 8000d26:	930f      	str	r3, [sp, #60]	; 0x3c
 8000d28:	466d      	mov	r5, sp
 8000d2a:	f106 040c 	add.w	r4, r6, #12
 8000d2e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d30:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d32:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d34:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d36:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d38:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d3a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000d3e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8000d42:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8000d46:	4660      	mov	r0, ip
 8000d48:	f7ff fc2e 	bl	80005a8 <configMotor>
  // TODO: Configurar orientação do motor DC

  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000d4c:	2001      	movs	r0, #1
 8000d4e:	f003 fa4c 	bl	80041ea <osDelay>
 8000d52:	e7fb      	b.n	8000d4c <startMotorDC+0x54>
 8000d54:	40020000 	.word	0x40020000
 8000d58:	40020400 	.word	0x40020400
 8000d5c:	20004138 	.word	0x20004138

08000d60 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b082      	sub	sp, #8
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	4a04      	ldr	r2, [pc, #16]	; (8000d80 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000d6e:	4293      	cmp	r3, r2
 8000d70:	d101      	bne.n	8000d76 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000d72:	f000 fa8f 	bl	8001294 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000d76:	bf00      	nop
 8000d78:	3708      	adds	r7, #8
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	40010000 	.word	0x40010000

08000d84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d88:	b672      	cpsid	i
}
 8000d8a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d8c:	e7fe      	b.n	8000d8c <Error_Handler+0x8>
	...

08000d90 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b082      	sub	sp, #8
 8000d94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d96:	2300      	movs	r3, #0
 8000d98:	607b      	str	r3, [r7, #4]
 8000d9a:	4b12      	ldr	r3, [pc, #72]	; (8000de4 <HAL_MspInit+0x54>)
 8000d9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d9e:	4a11      	ldr	r2, [pc, #68]	; (8000de4 <HAL_MspInit+0x54>)
 8000da0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000da4:	6453      	str	r3, [r2, #68]	; 0x44
 8000da6:	4b0f      	ldr	r3, [pc, #60]	; (8000de4 <HAL_MspInit+0x54>)
 8000da8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000daa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dae:	607b      	str	r3, [r7, #4]
 8000db0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000db2:	2300      	movs	r3, #0
 8000db4:	603b      	str	r3, [r7, #0]
 8000db6:	4b0b      	ldr	r3, [pc, #44]	; (8000de4 <HAL_MspInit+0x54>)
 8000db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dba:	4a0a      	ldr	r2, [pc, #40]	; (8000de4 <HAL_MspInit+0x54>)
 8000dbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dc0:	6413      	str	r3, [r2, #64]	; 0x40
 8000dc2:	4b08      	ldr	r3, [pc, #32]	; (8000de4 <HAL_MspInit+0x54>)
 8000dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dca:	603b      	str	r3, [r7, #0]
 8000dcc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000dce:	2200      	movs	r2, #0
 8000dd0:	210f      	movs	r1, #15
 8000dd2:	f06f 0001 	mvn.w	r0, #1
 8000dd6:	f000 fb59 	bl	800148c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dda:	bf00      	nop
 8000ddc:	3708      	adds	r7, #8
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	40023800 	.word	0x40023800

08000de8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b08a      	sub	sp, #40	; 0x28
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df0:	f107 0314 	add.w	r3, r7, #20
 8000df4:	2200      	movs	r2, #0
 8000df6:	601a      	str	r2, [r3, #0]
 8000df8:	605a      	str	r2, [r3, #4]
 8000dfa:	609a      	str	r2, [r3, #8]
 8000dfc:	60da      	str	r2, [r3, #12]
 8000dfe:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	4a19      	ldr	r2, [pc, #100]	; (8000e6c <HAL_I2C_MspInit+0x84>)
 8000e06:	4293      	cmp	r3, r2
 8000e08:	d12c      	bne.n	8000e64 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	613b      	str	r3, [r7, #16]
 8000e0e:	4b18      	ldr	r3, [pc, #96]	; (8000e70 <HAL_I2C_MspInit+0x88>)
 8000e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e12:	4a17      	ldr	r2, [pc, #92]	; (8000e70 <HAL_I2C_MspInit+0x88>)
 8000e14:	f043 0302 	orr.w	r3, r3, #2
 8000e18:	6313      	str	r3, [r2, #48]	; 0x30
 8000e1a:	4b15      	ldr	r3, [pc, #84]	; (8000e70 <HAL_I2C_MspInit+0x88>)
 8000e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1e:	f003 0302 	and.w	r3, r3, #2
 8000e22:	613b      	str	r3, [r7, #16]
 8000e24:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8000e26:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000e2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e2c:	2312      	movs	r3, #18
 8000e2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e30:	2301      	movs	r3, #1
 8000e32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e34:	2303      	movs	r3, #3
 8000e36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e38:	2304      	movs	r3, #4
 8000e3a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e3c:	f107 0314 	add.w	r3, r7, #20
 8000e40:	4619      	mov	r1, r3
 8000e42:	480c      	ldr	r0, [pc, #48]	; (8000e74 <HAL_I2C_MspInit+0x8c>)
 8000e44:	f000 fb4c 	bl	80014e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e48:	2300      	movs	r3, #0
 8000e4a:	60fb      	str	r3, [r7, #12]
 8000e4c:	4b08      	ldr	r3, [pc, #32]	; (8000e70 <HAL_I2C_MspInit+0x88>)
 8000e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e50:	4a07      	ldr	r2, [pc, #28]	; (8000e70 <HAL_I2C_MspInit+0x88>)
 8000e52:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e56:	6413      	str	r3, [r2, #64]	; 0x40
 8000e58:	4b05      	ldr	r3, [pc, #20]	; (8000e70 <HAL_I2C_MspInit+0x88>)
 8000e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e60:	60fb      	str	r3, [r7, #12]
 8000e62:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000e64:	bf00      	nop
 8000e66:	3728      	adds	r7, #40	; 0x28
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	40005400 	.word	0x40005400
 8000e70:	40023800 	.word	0x40023800
 8000e74:	40020400 	.word	0x40020400

08000e78 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b085      	sub	sp, #20
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	4a15      	ldr	r2, [pc, #84]	; (8000edc <HAL_TIM_Base_MspInit+0x64>)
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d10e      	bne.n	8000ea8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	60fb      	str	r3, [r7, #12]
 8000e8e:	4b14      	ldr	r3, [pc, #80]	; (8000ee0 <HAL_TIM_Base_MspInit+0x68>)
 8000e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e92:	4a13      	ldr	r2, [pc, #76]	; (8000ee0 <HAL_TIM_Base_MspInit+0x68>)
 8000e94:	f043 0304 	orr.w	r3, r3, #4
 8000e98:	6413      	str	r3, [r2, #64]	; 0x40
 8000e9a:	4b11      	ldr	r3, [pc, #68]	; (8000ee0 <HAL_TIM_Base_MspInit+0x68>)
 8000e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e9e:	f003 0304 	and.w	r3, r3, #4
 8000ea2:	60fb      	str	r3, [r7, #12]
 8000ea4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8000ea6:	e012      	b.n	8000ece <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM14)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	4a0d      	ldr	r2, [pc, #52]	; (8000ee4 <HAL_TIM_Base_MspInit+0x6c>)
 8000eae:	4293      	cmp	r3, r2
 8000eb0:	d10d      	bne.n	8000ece <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	60bb      	str	r3, [r7, #8]
 8000eb6:	4b0a      	ldr	r3, [pc, #40]	; (8000ee0 <HAL_TIM_Base_MspInit+0x68>)
 8000eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eba:	4a09      	ldr	r2, [pc, #36]	; (8000ee0 <HAL_TIM_Base_MspInit+0x68>)
 8000ebc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ec0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ec2:	4b07      	ldr	r3, [pc, #28]	; (8000ee0 <HAL_TIM_Base_MspInit+0x68>)
 8000ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ec6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000eca:	60bb      	str	r3, [r7, #8]
 8000ecc:	68bb      	ldr	r3, [r7, #8]
}
 8000ece:	bf00      	nop
 8000ed0:	3714      	adds	r7, #20
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop
 8000edc:	40000800 	.word	0x40000800
 8000ee0:	40023800 	.word	0x40023800
 8000ee4:	40002000 	.word	0x40002000

08000ee8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b08a      	sub	sp, #40	; 0x28
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef0:	f107 0314 	add.w	r3, r7, #20
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	601a      	str	r2, [r3, #0]
 8000ef8:	605a      	str	r2, [r3, #4]
 8000efa:	609a      	str	r2, [r3, #8]
 8000efc:	60da      	str	r2, [r3, #12]
 8000efe:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	4a24      	ldr	r2, [pc, #144]	; (8000f98 <HAL_TIM_MspPostInit+0xb0>)
 8000f06:	4293      	cmp	r3, r2
 8000f08:	d11e      	bne.n	8000f48 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	613b      	str	r3, [r7, #16]
 8000f0e:	4b23      	ldr	r3, [pc, #140]	; (8000f9c <HAL_TIM_MspPostInit+0xb4>)
 8000f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f12:	4a22      	ldr	r2, [pc, #136]	; (8000f9c <HAL_TIM_MspPostInit+0xb4>)
 8000f14:	f043 0302 	orr.w	r3, r3, #2
 8000f18:	6313      	str	r3, [r2, #48]	; 0x30
 8000f1a:	4b20      	ldr	r3, [pc, #128]	; (8000f9c <HAL_TIM_MspPostInit+0xb4>)
 8000f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1e:	f003 0302 	and.w	r3, r3, #2
 8000f22:	613b      	str	r3, [r7, #16]
 8000f24:	693b      	ldr	r3, [r7, #16]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = SG90_PWM_Pin;
 8000f26:	2340      	movs	r3, #64	; 0x40
 8000f28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f2a:	2302      	movs	r3, #2
 8000f2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f32:	2300      	movs	r3, #0
 8000f34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000f36:	2302      	movs	r3, #2
 8000f38:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SG90_PWM_GPIO_Port, &GPIO_InitStruct);
 8000f3a:	f107 0314 	add.w	r3, r7, #20
 8000f3e:	4619      	mov	r1, r3
 8000f40:	4817      	ldr	r0, [pc, #92]	; (8000fa0 <HAL_TIM_MspPostInit+0xb8>)
 8000f42:	f000 facd 	bl	80014e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM14_MspPostInit 1 */

  /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 8000f46:	e022      	b.n	8000f8e <HAL_TIM_MspPostInit+0xa6>
  else if(htim->Instance==TIM14)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4a15      	ldr	r2, [pc, #84]	; (8000fa4 <HAL_TIM_MspPostInit+0xbc>)
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	d11d      	bne.n	8000f8e <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f52:	2300      	movs	r3, #0
 8000f54:	60fb      	str	r3, [r7, #12]
 8000f56:	4b11      	ldr	r3, [pc, #68]	; (8000f9c <HAL_TIM_MspPostInit+0xb4>)
 8000f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5a:	4a10      	ldr	r2, [pc, #64]	; (8000f9c <HAL_TIM_MspPostInit+0xb4>)
 8000f5c:	f043 0301 	orr.w	r3, r3, #1
 8000f60:	6313      	str	r3, [r2, #48]	; 0x30
 8000f62:	4b0e      	ldr	r3, [pc, #56]	; (8000f9c <HAL_TIM_MspPostInit+0xb4>)
 8000f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f66:	f003 0301 	and.w	r3, r3, #1
 8000f6a:	60fb      	str	r3, [r7, #12]
 8000f6c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = L293D_PWM_Pin;
 8000f6e:	2380      	movs	r3, #128	; 0x80
 8000f70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f72:	2302      	movs	r3, #2
 8000f74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f76:	2300      	movs	r3, #0
 8000f78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 8000f7e:	2309      	movs	r3, #9
 8000f80:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(L293D_PWM_GPIO_Port, &GPIO_InitStruct);
 8000f82:	f107 0314 	add.w	r3, r7, #20
 8000f86:	4619      	mov	r1, r3
 8000f88:	4807      	ldr	r0, [pc, #28]	; (8000fa8 <HAL_TIM_MspPostInit+0xc0>)
 8000f8a:	f000 faa9 	bl	80014e0 <HAL_GPIO_Init>
}
 8000f8e:	bf00      	nop
 8000f90:	3728      	adds	r7, #40	; 0x28
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	40000800 	.word	0x40000800
 8000f9c:	40023800 	.word	0x40023800
 8000fa0:	40020400 	.word	0x40020400
 8000fa4:	40002000 	.word	0x40002000
 8000fa8:	40020000 	.word	0x40020000

08000fac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b08a      	sub	sp, #40	; 0x28
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb4:	f107 0314 	add.w	r3, r7, #20
 8000fb8:	2200      	movs	r2, #0
 8000fba:	601a      	str	r2, [r3, #0]
 8000fbc:	605a      	str	r2, [r3, #4]
 8000fbe:	609a      	str	r2, [r3, #8]
 8000fc0:	60da      	str	r2, [r3, #12]
 8000fc2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	4a28      	ldr	r2, [pc, #160]	; (800106c <HAL_UART_MspInit+0xc0>)
 8000fca:	4293      	cmp	r3, r2
 8000fcc:	d14a      	bne.n	8001064 <HAL_UART_MspInit+0xb8>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000fce:	2300      	movs	r3, #0
 8000fd0:	613b      	str	r3, [r7, #16]
 8000fd2:	4b27      	ldr	r3, [pc, #156]	; (8001070 <HAL_UART_MspInit+0xc4>)
 8000fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd6:	4a26      	ldr	r2, [pc, #152]	; (8001070 <HAL_UART_MspInit+0xc4>)
 8000fd8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fdc:	6413      	str	r3, [r2, #64]	; 0x40
 8000fde:	4b24      	ldr	r3, [pc, #144]	; (8001070 <HAL_UART_MspInit+0xc4>)
 8000fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000fe6:	613b      	str	r3, [r7, #16]
 8000fe8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fea:	2300      	movs	r3, #0
 8000fec:	60fb      	str	r3, [r7, #12]
 8000fee:	4b20      	ldr	r3, [pc, #128]	; (8001070 <HAL_UART_MspInit+0xc4>)
 8000ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff2:	4a1f      	ldr	r2, [pc, #124]	; (8001070 <HAL_UART_MspInit+0xc4>)
 8000ff4:	f043 0304 	orr.w	r3, r3, #4
 8000ff8:	6313      	str	r3, [r2, #48]	; 0x30
 8000ffa:	4b1d      	ldr	r3, [pc, #116]	; (8001070 <HAL_UART_MspInit+0xc4>)
 8000ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffe:	f003 0304 	and.w	r3, r3, #4
 8001002:	60fb      	str	r3, [r7, #12]
 8001004:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001006:	2300      	movs	r3, #0
 8001008:	60bb      	str	r3, [r7, #8]
 800100a:	4b19      	ldr	r3, [pc, #100]	; (8001070 <HAL_UART_MspInit+0xc4>)
 800100c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100e:	4a18      	ldr	r2, [pc, #96]	; (8001070 <HAL_UART_MspInit+0xc4>)
 8001010:	f043 0302 	orr.w	r3, r3, #2
 8001014:	6313      	str	r3, [r2, #48]	; 0x30
 8001016:	4b16      	ldr	r3, [pc, #88]	; (8001070 <HAL_UART_MspInit+0xc4>)
 8001018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101a:	f003 0302 	and.w	r3, r3, #2
 800101e:	60bb      	str	r3, [r7, #8]
 8001020:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PC5     ------> USART3_RX
    PB10     ------> USART3_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001022:	2320      	movs	r3, #32
 8001024:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001026:	2302      	movs	r3, #2
 8001028:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102a:	2300      	movs	r3, #0
 800102c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800102e:	2303      	movs	r3, #3
 8001030:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001032:	2307      	movs	r3, #7
 8001034:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001036:	f107 0314 	add.w	r3, r7, #20
 800103a:	4619      	mov	r1, r3
 800103c:	480d      	ldr	r0, [pc, #52]	; (8001074 <HAL_UART_MspInit+0xc8>)
 800103e:	f000 fa4f 	bl	80014e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001042:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001046:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001048:	2302      	movs	r3, #2
 800104a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104c:	2300      	movs	r3, #0
 800104e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001050:	2303      	movs	r3, #3
 8001052:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001054:	2307      	movs	r3, #7
 8001056:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001058:	f107 0314 	add.w	r3, r7, #20
 800105c:	4619      	mov	r1, r3
 800105e:	4806      	ldr	r0, [pc, #24]	; (8001078 <HAL_UART_MspInit+0xcc>)
 8001060:	f000 fa3e 	bl	80014e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001064:	bf00      	nop
 8001066:	3728      	adds	r7, #40	; 0x28
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}
 800106c:	40004800 	.word	0x40004800
 8001070:	40023800 	.word	0x40023800
 8001074:	40020800 	.word	0x40020800
 8001078:	40020400 	.word	0x40020400

0800107c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b08c      	sub	sp, #48	; 0x30
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001084:	2300      	movs	r3, #0
 8001086:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001088:	2300      	movs	r3, #0
 800108a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 800108c:	2200      	movs	r2, #0
 800108e:	6879      	ldr	r1, [r7, #4]
 8001090:	2019      	movs	r0, #25
 8001092:	f000 f9fb 	bl	800148c <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001096:	2019      	movs	r0, #25
 8001098:	f000 fa14 	bl	80014c4 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800109c:	2300      	movs	r3, #0
 800109e:	60fb      	str	r3, [r7, #12]
 80010a0:	4b1e      	ldr	r3, [pc, #120]	; (800111c <HAL_InitTick+0xa0>)
 80010a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010a4:	4a1d      	ldr	r2, [pc, #116]	; (800111c <HAL_InitTick+0xa0>)
 80010a6:	f043 0301 	orr.w	r3, r3, #1
 80010aa:	6453      	str	r3, [r2, #68]	; 0x44
 80010ac:	4b1b      	ldr	r3, [pc, #108]	; (800111c <HAL_InitTick+0xa0>)
 80010ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010b0:	f003 0301 	and.w	r3, r3, #1
 80010b4:	60fb      	str	r3, [r7, #12]
 80010b6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80010b8:	f107 0210 	add.w	r2, r7, #16
 80010bc:	f107 0314 	add.w	r3, r7, #20
 80010c0:	4611      	mov	r1, r2
 80010c2:	4618      	mov	r0, r3
 80010c4:	f001 f930 	bl	8002328 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80010c8:	f001 f91a 	bl	8002300 <HAL_RCC_GetPCLK2Freq>
 80010cc:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80010ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010d0:	4a13      	ldr	r2, [pc, #76]	; (8001120 <HAL_InitTick+0xa4>)
 80010d2:	fba2 2303 	umull	r2, r3, r2, r3
 80010d6:	0c9b      	lsrs	r3, r3, #18
 80010d8:	3b01      	subs	r3, #1
 80010da:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80010dc:	4b11      	ldr	r3, [pc, #68]	; (8001124 <HAL_InitTick+0xa8>)
 80010de:	4a12      	ldr	r2, [pc, #72]	; (8001128 <HAL_InitTick+0xac>)
 80010e0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80010e2:	4b10      	ldr	r3, [pc, #64]	; (8001124 <HAL_InitTick+0xa8>)
 80010e4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80010e8:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80010ea:	4a0e      	ldr	r2, [pc, #56]	; (8001124 <HAL_InitTick+0xa8>)
 80010ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010ee:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80010f0:	4b0c      	ldr	r3, [pc, #48]	; (8001124 <HAL_InitTick+0xa8>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010f6:	4b0b      	ldr	r3, [pc, #44]	; (8001124 <HAL_InitTick+0xa8>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80010fc:	4809      	ldr	r0, [pc, #36]	; (8001124 <HAL_InitTick+0xa8>)
 80010fe:	f001 fd95 	bl	8002c2c <HAL_TIM_Base_Init>
 8001102:	4603      	mov	r3, r0
 8001104:	2b00      	cmp	r3, #0
 8001106:	d104      	bne.n	8001112 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001108:	4806      	ldr	r0, [pc, #24]	; (8001124 <HAL_InitTick+0xa8>)
 800110a:	f001 fddf 	bl	8002ccc <HAL_TIM_Base_Start_IT>
 800110e:	4603      	mov	r3, r0
 8001110:	e000      	b.n	8001114 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8001112:	2301      	movs	r3, #1
}
 8001114:	4618      	mov	r0, r3
 8001116:	3730      	adds	r7, #48	; 0x30
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}
 800111c:	40023800 	.word	0x40023800
 8001120:	431bde83 	.word	0x431bde83
 8001124:	20004180 	.word	0x20004180
 8001128:	40010000 	.word	0x40010000

0800112c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001130:	e7fe      	b.n	8001130 <NMI_Handler+0x4>

08001132 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001132:	b480      	push	{r7}
 8001134:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001136:	e7fe      	b.n	8001136 <HardFault_Handler+0x4>

08001138 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800113c:	e7fe      	b.n	800113c <MemManage_Handler+0x4>

0800113e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800113e:	b480      	push	{r7}
 8001140:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001142:	e7fe      	b.n	8001142 <BusFault_Handler+0x4>

08001144 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001148:	e7fe      	b.n	8001148 <UsageFault_Handler+0x4>

0800114a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800114a:	b480      	push	{r7}
 800114c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800114e:	bf00      	nop
 8001150:	46bd      	mov	sp, r7
 8001152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001156:	4770      	bx	lr

08001158 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800115c:	4802      	ldr	r0, [pc, #8]	; (8001168 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800115e:	f001 fe7e 	bl	8002e5e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001162:	bf00      	nop
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	20004180 	.word	0x20004180

0800116c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b086      	sub	sp, #24
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001174:	4a14      	ldr	r2, [pc, #80]	; (80011c8 <_sbrk+0x5c>)
 8001176:	4b15      	ldr	r3, [pc, #84]	; (80011cc <_sbrk+0x60>)
 8001178:	1ad3      	subs	r3, r2, r3
 800117a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800117c:	697b      	ldr	r3, [r7, #20]
 800117e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001180:	4b13      	ldr	r3, [pc, #76]	; (80011d0 <_sbrk+0x64>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d102      	bne.n	800118e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001188:	4b11      	ldr	r3, [pc, #68]	; (80011d0 <_sbrk+0x64>)
 800118a:	4a12      	ldr	r2, [pc, #72]	; (80011d4 <_sbrk+0x68>)
 800118c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800118e:	4b10      	ldr	r3, [pc, #64]	; (80011d0 <_sbrk+0x64>)
 8001190:	681a      	ldr	r2, [r3, #0]
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	4413      	add	r3, r2
 8001196:	693a      	ldr	r2, [r7, #16]
 8001198:	429a      	cmp	r2, r3
 800119a:	d207      	bcs.n	80011ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800119c:	f004 fa06 	bl	80055ac <__errno>
 80011a0:	4603      	mov	r3, r0
 80011a2:	220c      	movs	r2, #12
 80011a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80011aa:	e009      	b.n	80011c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011ac:	4b08      	ldr	r3, [pc, #32]	; (80011d0 <_sbrk+0x64>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011b2:	4b07      	ldr	r3, [pc, #28]	; (80011d0 <_sbrk+0x64>)
 80011b4:	681a      	ldr	r2, [r3, #0]
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	4413      	add	r3, r2
 80011ba:	4a05      	ldr	r2, [pc, #20]	; (80011d0 <_sbrk+0x64>)
 80011bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011be:	68fb      	ldr	r3, [r7, #12]
}
 80011c0:	4618      	mov	r0, r3
 80011c2:	3718      	adds	r7, #24
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	20020000 	.word	0x20020000
 80011cc:	00000400 	.word	0x00000400
 80011d0:	200002e4 	.word	0x200002e4
 80011d4:	200041e0 	.word	0x200041e0

080011d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011dc:	4b06      	ldr	r3, [pc, #24]	; (80011f8 <SystemInit+0x20>)
 80011de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011e2:	4a05      	ldr	r2, [pc, #20]	; (80011f8 <SystemInit+0x20>)
 80011e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011ec:	bf00      	nop
 80011ee:	46bd      	mov	sp, r7
 80011f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f4:	4770      	bx	lr
 80011f6:	bf00      	nop
 80011f8:	e000ed00 	.word	0xe000ed00

080011fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80011fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001234 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001200:	480d      	ldr	r0, [pc, #52]	; (8001238 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001202:	490e      	ldr	r1, [pc, #56]	; (800123c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001204:	4a0e      	ldr	r2, [pc, #56]	; (8001240 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001206:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001208:	e002      	b.n	8001210 <LoopCopyDataInit>

0800120a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800120a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800120c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800120e:	3304      	adds	r3, #4

08001210 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001210:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001212:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001214:	d3f9      	bcc.n	800120a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001216:	4a0b      	ldr	r2, [pc, #44]	; (8001244 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001218:	4c0b      	ldr	r4, [pc, #44]	; (8001248 <LoopFillZerobss+0x26>)
  movs r3, #0
 800121a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800121c:	e001      	b.n	8001222 <LoopFillZerobss>

0800121e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800121e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001220:	3204      	adds	r2, #4

08001222 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001222:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001224:	d3fb      	bcc.n	800121e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001226:	f7ff ffd7 	bl	80011d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800122a:	f004 f9c5 	bl	80055b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800122e:	f7ff fa7f 	bl	8000730 <main>
  bx  lr    
 8001232:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001234:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001238:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800123c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001240:	08006160 	.word	0x08006160
  ldr r2, =_sbss
 8001244:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001248:	200041dc 	.word	0x200041dc

0800124c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800124c:	e7fe      	b.n	800124c <ADC_IRQHandler>
	...

08001250 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001254:	4b0e      	ldr	r3, [pc, #56]	; (8001290 <HAL_Init+0x40>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4a0d      	ldr	r2, [pc, #52]	; (8001290 <HAL_Init+0x40>)
 800125a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800125e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001260:	4b0b      	ldr	r3, [pc, #44]	; (8001290 <HAL_Init+0x40>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4a0a      	ldr	r2, [pc, #40]	; (8001290 <HAL_Init+0x40>)
 8001266:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800126a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800126c:	4b08      	ldr	r3, [pc, #32]	; (8001290 <HAL_Init+0x40>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	4a07      	ldr	r2, [pc, #28]	; (8001290 <HAL_Init+0x40>)
 8001272:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001276:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001278:	2003      	movs	r0, #3
 800127a:	f000 f8fc 	bl	8001476 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800127e:	2000      	movs	r0, #0
 8001280:	f7ff fefc 	bl	800107c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001284:	f7ff fd84 	bl	8000d90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001288:	2300      	movs	r3, #0
}
 800128a:	4618      	mov	r0, r3
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	40023c00 	.word	0x40023c00

08001294 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001298:	4b06      	ldr	r3, [pc, #24]	; (80012b4 <HAL_IncTick+0x20>)
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	461a      	mov	r2, r3
 800129e:	4b06      	ldr	r3, [pc, #24]	; (80012b8 <HAL_IncTick+0x24>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	4413      	add	r3, r2
 80012a4:	4a04      	ldr	r2, [pc, #16]	; (80012b8 <HAL_IncTick+0x24>)
 80012a6:	6013      	str	r3, [r2, #0]
}
 80012a8:	bf00      	nop
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr
 80012b2:	bf00      	nop
 80012b4:	20000008 	.word	0x20000008
 80012b8:	200041c8 	.word	0x200041c8

080012bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0
  return uwTick;
 80012c0:	4b03      	ldr	r3, [pc, #12]	; (80012d0 <HAL_GetTick+0x14>)
 80012c2:	681b      	ldr	r3, [r3, #0]
}
 80012c4:	4618      	mov	r0, r3
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr
 80012ce:	bf00      	nop
 80012d0:	200041c8 	.word	0x200041c8

080012d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b084      	sub	sp, #16
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012dc:	f7ff ffee 	bl	80012bc <HAL_GetTick>
 80012e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80012ec:	d005      	beq.n	80012fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012ee:	4b0a      	ldr	r3, [pc, #40]	; (8001318 <HAL_Delay+0x44>)
 80012f0:	781b      	ldrb	r3, [r3, #0]
 80012f2:	461a      	mov	r2, r3
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	4413      	add	r3, r2
 80012f8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80012fa:	bf00      	nop
 80012fc:	f7ff ffde 	bl	80012bc <HAL_GetTick>
 8001300:	4602      	mov	r2, r0
 8001302:	68bb      	ldr	r3, [r7, #8]
 8001304:	1ad3      	subs	r3, r2, r3
 8001306:	68fa      	ldr	r2, [r7, #12]
 8001308:	429a      	cmp	r2, r3
 800130a:	d8f7      	bhi.n	80012fc <HAL_Delay+0x28>
  {
  }
}
 800130c:	bf00      	nop
 800130e:	bf00      	nop
 8001310:	3710      	adds	r7, #16
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	20000008 	.word	0x20000008

0800131c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800131c:	b480      	push	{r7}
 800131e:	b085      	sub	sp, #20
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	f003 0307 	and.w	r3, r3, #7
 800132a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800132c:	4b0c      	ldr	r3, [pc, #48]	; (8001360 <__NVIC_SetPriorityGrouping+0x44>)
 800132e:	68db      	ldr	r3, [r3, #12]
 8001330:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001332:	68ba      	ldr	r2, [r7, #8]
 8001334:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001338:	4013      	ands	r3, r2
 800133a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001340:	68bb      	ldr	r3, [r7, #8]
 8001342:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001344:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001348:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800134c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800134e:	4a04      	ldr	r2, [pc, #16]	; (8001360 <__NVIC_SetPriorityGrouping+0x44>)
 8001350:	68bb      	ldr	r3, [r7, #8]
 8001352:	60d3      	str	r3, [r2, #12]
}
 8001354:	bf00      	nop
 8001356:	3714      	adds	r7, #20
 8001358:	46bd      	mov	sp, r7
 800135a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135e:	4770      	bx	lr
 8001360:	e000ed00 	.word	0xe000ed00

08001364 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001368:	4b04      	ldr	r3, [pc, #16]	; (800137c <__NVIC_GetPriorityGrouping+0x18>)
 800136a:	68db      	ldr	r3, [r3, #12]
 800136c:	0a1b      	lsrs	r3, r3, #8
 800136e:	f003 0307 	and.w	r3, r3, #7
}
 8001372:	4618      	mov	r0, r3
 8001374:	46bd      	mov	sp, r7
 8001376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137a:	4770      	bx	lr
 800137c:	e000ed00 	.word	0xe000ed00

08001380 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001380:	b480      	push	{r7}
 8001382:	b083      	sub	sp, #12
 8001384:	af00      	add	r7, sp, #0
 8001386:	4603      	mov	r3, r0
 8001388:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800138a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800138e:	2b00      	cmp	r3, #0
 8001390:	db0b      	blt.n	80013aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001392:	79fb      	ldrb	r3, [r7, #7]
 8001394:	f003 021f 	and.w	r2, r3, #31
 8001398:	4907      	ldr	r1, [pc, #28]	; (80013b8 <__NVIC_EnableIRQ+0x38>)
 800139a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800139e:	095b      	lsrs	r3, r3, #5
 80013a0:	2001      	movs	r0, #1
 80013a2:	fa00 f202 	lsl.w	r2, r0, r2
 80013a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80013aa:	bf00      	nop
 80013ac:	370c      	adds	r7, #12
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr
 80013b6:	bf00      	nop
 80013b8:	e000e100 	.word	0xe000e100

080013bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013bc:	b480      	push	{r7}
 80013be:	b083      	sub	sp, #12
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	4603      	mov	r3, r0
 80013c4:	6039      	str	r1, [r7, #0]
 80013c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	db0a      	blt.n	80013e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	b2da      	uxtb	r2, r3
 80013d4:	490c      	ldr	r1, [pc, #48]	; (8001408 <__NVIC_SetPriority+0x4c>)
 80013d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013da:	0112      	lsls	r2, r2, #4
 80013dc:	b2d2      	uxtb	r2, r2
 80013de:	440b      	add	r3, r1
 80013e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013e4:	e00a      	b.n	80013fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	b2da      	uxtb	r2, r3
 80013ea:	4908      	ldr	r1, [pc, #32]	; (800140c <__NVIC_SetPriority+0x50>)
 80013ec:	79fb      	ldrb	r3, [r7, #7]
 80013ee:	f003 030f 	and.w	r3, r3, #15
 80013f2:	3b04      	subs	r3, #4
 80013f4:	0112      	lsls	r2, r2, #4
 80013f6:	b2d2      	uxtb	r2, r2
 80013f8:	440b      	add	r3, r1
 80013fa:	761a      	strb	r2, [r3, #24]
}
 80013fc:	bf00      	nop
 80013fe:	370c      	adds	r7, #12
 8001400:	46bd      	mov	sp, r7
 8001402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001406:	4770      	bx	lr
 8001408:	e000e100 	.word	0xe000e100
 800140c:	e000ed00 	.word	0xe000ed00

08001410 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001410:	b480      	push	{r7}
 8001412:	b089      	sub	sp, #36	; 0x24
 8001414:	af00      	add	r7, sp, #0
 8001416:	60f8      	str	r0, [r7, #12]
 8001418:	60b9      	str	r1, [r7, #8]
 800141a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	f003 0307 	and.w	r3, r3, #7
 8001422:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001424:	69fb      	ldr	r3, [r7, #28]
 8001426:	f1c3 0307 	rsb	r3, r3, #7
 800142a:	2b04      	cmp	r3, #4
 800142c:	bf28      	it	cs
 800142e:	2304      	movcs	r3, #4
 8001430:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001432:	69fb      	ldr	r3, [r7, #28]
 8001434:	3304      	adds	r3, #4
 8001436:	2b06      	cmp	r3, #6
 8001438:	d902      	bls.n	8001440 <NVIC_EncodePriority+0x30>
 800143a:	69fb      	ldr	r3, [r7, #28]
 800143c:	3b03      	subs	r3, #3
 800143e:	e000      	b.n	8001442 <NVIC_EncodePriority+0x32>
 8001440:	2300      	movs	r3, #0
 8001442:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001444:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001448:	69bb      	ldr	r3, [r7, #24]
 800144a:	fa02 f303 	lsl.w	r3, r2, r3
 800144e:	43da      	mvns	r2, r3
 8001450:	68bb      	ldr	r3, [r7, #8]
 8001452:	401a      	ands	r2, r3
 8001454:	697b      	ldr	r3, [r7, #20]
 8001456:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001458:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800145c:	697b      	ldr	r3, [r7, #20]
 800145e:	fa01 f303 	lsl.w	r3, r1, r3
 8001462:	43d9      	mvns	r1, r3
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001468:	4313      	orrs	r3, r2
         );
}
 800146a:	4618      	mov	r0, r3
 800146c:	3724      	adds	r7, #36	; 0x24
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr

08001476 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001476:	b580      	push	{r7, lr}
 8001478:	b082      	sub	sp, #8
 800147a:	af00      	add	r7, sp, #0
 800147c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800147e:	6878      	ldr	r0, [r7, #4]
 8001480:	f7ff ff4c 	bl	800131c <__NVIC_SetPriorityGrouping>
}
 8001484:	bf00      	nop
 8001486:	3708      	adds	r7, #8
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}

0800148c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800148c:	b580      	push	{r7, lr}
 800148e:	b086      	sub	sp, #24
 8001490:	af00      	add	r7, sp, #0
 8001492:	4603      	mov	r3, r0
 8001494:	60b9      	str	r1, [r7, #8]
 8001496:	607a      	str	r2, [r7, #4]
 8001498:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800149a:	2300      	movs	r3, #0
 800149c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800149e:	f7ff ff61 	bl	8001364 <__NVIC_GetPriorityGrouping>
 80014a2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014a4:	687a      	ldr	r2, [r7, #4]
 80014a6:	68b9      	ldr	r1, [r7, #8]
 80014a8:	6978      	ldr	r0, [r7, #20]
 80014aa:	f7ff ffb1 	bl	8001410 <NVIC_EncodePriority>
 80014ae:	4602      	mov	r2, r0
 80014b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014b4:	4611      	mov	r1, r2
 80014b6:	4618      	mov	r0, r3
 80014b8:	f7ff ff80 	bl	80013bc <__NVIC_SetPriority>
}
 80014bc:	bf00      	nop
 80014be:	3718      	adds	r7, #24
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}

080014c4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b082      	sub	sp, #8
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	4603      	mov	r3, r0
 80014cc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014d2:	4618      	mov	r0, r3
 80014d4:	f7ff ff54 	bl	8001380 <__NVIC_EnableIRQ>
}
 80014d8:	bf00      	nop
 80014da:	3708      	adds	r7, #8
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}

080014e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b089      	sub	sp, #36	; 0x24
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
 80014e8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80014ea:	2300      	movs	r3, #0
 80014ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80014ee:	2300      	movs	r3, #0
 80014f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80014f2:	2300      	movs	r3, #0
 80014f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014f6:	2300      	movs	r3, #0
 80014f8:	61fb      	str	r3, [r7, #28]
 80014fa:	e165      	b.n	80017c8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80014fc:	2201      	movs	r2, #1
 80014fe:	69fb      	ldr	r3, [r7, #28]
 8001500:	fa02 f303 	lsl.w	r3, r2, r3
 8001504:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	697a      	ldr	r2, [r7, #20]
 800150c:	4013      	ands	r3, r2
 800150e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001510:	693a      	ldr	r2, [r7, #16]
 8001512:	697b      	ldr	r3, [r7, #20]
 8001514:	429a      	cmp	r2, r3
 8001516:	f040 8154 	bne.w	80017c2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	f003 0303 	and.w	r3, r3, #3
 8001522:	2b01      	cmp	r3, #1
 8001524:	d005      	beq.n	8001532 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800152e:	2b02      	cmp	r3, #2
 8001530:	d130      	bne.n	8001594 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	689b      	ldr	r3, [r3, #8]
 8001536:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001538:	69fb      	ldr	r3, [r7, #28]
 800153a:	005b      	lsls	r3, r3, #1
 800153c:	2203      	movs	r2, #3
 800153e:	fa02 f303 	lsl.w	r3, r2, r3
 8001542:	43db      	mvns	r3, r3
 8001544:	69ba      	ldr	r2, [r7, #24]
 8001546:	4013      	ands	r3, r2
 8001548:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	68da      	ldr	r2, [r3, #12]
 800154e:	69fb      	ldr	r3, [r7, #28]
 8001550:	005b      	lsls	r3, r3, #1
 8001552:	fa02 f303 	lsl.w	r3, r2, r3
 8001556:	69ba      	ldr	r2, [r7, #24]
 8001558:	4313      	orrs	r3, r2
 800155a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	69ba      	ldr	r2, [r7, #24]
 8001560:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001568:	2201      	movs	r2, #1
 800156a:	69fb      	ldr	r3, [r7, #28]
 800156c:	fa02 f303 	lsl.w	r3, r2, r3
 8001570:	43db      	mvns	r3, r3
 8001572:	69ba      	ldr	r2, [r7, #24]
 8001574:	4013      	ands	r3, r2
 8001576:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	091b      	lsrs	r3, r3, #4
 800157e:	f003 0201 	and.w	r2, r3, #1
 8001582:	69fb      	ldr	r3, [r7, #28]
 8001584:	fa02 f303 	lsl.w	r3, r2, r3
 8001588:	69ba      	ldr	r2, [r7, #24]
 800158a:	4313      	orrs	r3, r2
 800158c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	69ba      	ldr	r2, [r7, #24]
 8001592:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	f003 0303 	and.w	r3, r3, #3
 800159c:	2b03      	cmp	r3, #3
 800159e:	d017      	beq.n	80015d0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	68db      	ldr	r3, [r3, #12]
 80015a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80015a6:	69fb      	ldr	r3, [r7, #28]
 80015a8:	005b      	lsls	r3, r3, #1
 80015aa:	2203      	movs	r2, #3
 80015ac:	fa02 f303 	lsl.w	r3, r2, r3
 80015b0:	43db      	mvns	r3, r3
 80015b2:	69ba      	ldr	r2, [r7, #24]
 80015b4:	4013      	ands	r3, r2
 80015b6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	689a      	ldr	r2, [r3, #8]
 80015bc:	69fb      	ldr	r3, [r7, #28]
 80015be:	005b      	lsls	r3, r3, #1
 80015c0:	fa02 f303 	lsl.w	r3, r2, r3
 80015c4:	69ba      	ldr	r2, [r7, #24]
 80015c6:	4313      	orrs	r3, r2
 80015c8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	69ba      	ldr	r2, [r7, #24]
 80015ce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	f003 0303 	and.w	r3, r3, #3
 80015d8:	2b02      	cmp	r3, #2
 80015da:	d123      	bne.n	8001624 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80015dc:	69fb      	ldr	r3, [r7, #28]
 80015de:	08da      	lsrs	r2, r3, #3
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	3208      	adds	r2, #8
 80015e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80015ea:	69fb      	ldr	r3, [r7, #28]
 80015ec:	f003 0307 	and.w	r3, r3, #7
 80015f0:	009b      	lsls	r3, r3, #2
 80015f2:	220f      	movs	r2, #15
 80015f4:	fa02 f303 	lsl.w	r3, r2, r3
 80015f8:	43db      	mvns	r3, r3
 80015fa:	69ba      	ldr	r2, [r7, #24]
 80015fc:	4013      	ands	r3, r2
 80015fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	691a      	ldr	r2, [r3, #16]
 8001604:	69fb      	ldr	r3, [r7, #28]
 8001606:	f003 0307 	and.w	r3, r3, #7
 800160a:	009b      	lsls	r3, r3, #2
 800160c:	fa02 f303 	lsl.w	r3, r2, r3
 8001610:	69ba      	ldr	r2, [r7, #24]
 8001612:	4313      	orrs	r3, r2
 8001614:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001616:	69fb      	ldr	r3, [r7, #28]
 8001618:	08da      	lsrs	r2, r3, #3
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	3208      	adds	r2, #8
 800161e:	69b9      	ldr	r1, [r7, #24]
 8001620:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800162a:	69fb      	ldr	r3, [r7, #28]
 800162c:	005b      	lsls	r3, r3, #1
 800162e:	2203      	movs	r2, #3
 8001630:	fa02 f303 	lsl.w	r3, r2, r3
 8001634:	43db      	mvns	r3, r3
 8001636:	69ba      	ldr	r2, [r7, #24]
 8001638:	4013      	ands	r3, r2
 800163a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	f003 0203 	and.w	r2, r3, #3
 8001644:	69fb      	ldr	r3, [r7, #28]
 8001646:	005b      	lsls	r3, r3, #1
 8001648:	fa02 f303 	lsl.w	r3, r2, r3
 800164c:	69ba      	ldr	r2, [r7, #24]
 800164e:	4313      	orrs	r3, r2
 8001650:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	69ba      	ldr	r2, [r7, #24]
 8001656:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001660:	2b00      	cmp	r3, #0
 8001662:	f000 80ae 	beq.w	80017c2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001666:	2300      	movs	r3, #0
 8001668:	60fb      	str	r3, [r7, #12]
 800166a:	4b5d      	ldr	r3, [pc, #372]	; (80017e0 <HAL_GPIO_Init+0x300>)
 800166c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800166e:	4a5c      	ldr	r2, [pc, #368]	; (80017e0 <HAL_GPIO_Init+0x300>)
 8001670:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001674:	6453      	str	r3, [r2, #68]	; 0x44
 8001676:	4b5a      	ldr	r3, [pc, #360]	; (80017e0 <HAL_GPIO_Init+0x300>)
 8001678:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800167a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800167e:	60fb      	str	r3, [r7, #12]
 8001680:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001682:	4a58      	ldr	r2, [pc, #352]	; (80017e4 <HAL_GPIO_Init+0x304>)
 8001684:	69fb      	ldr	r3, [r7, #28]
 8001686:	089b      	lsrs	r3, r3, #2
 8001688:	3302      	adds	r3, #2
 800168a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800168e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001690:	69fb      	ldr	r3, [r7, #28]
 8001692:	f003 0303 	and.w	r3, r3, #3
 8001696:	009b      	lsls	r3, r3, #2
 8001698:	220f      	movs	r2, #15
 800169a:	fa02 f303 	lsl.w	r3, r2, r3
 800169e:	43db      	mvns	r3, r3
 80016a0:	69ba      	ldr	r2, [r7, #24]
 80016a2:	4013      	ands	r3, r2
 80016a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	4a4f      	ldr	r2, [pc, #316]	; (80017e8 <HAL_GPIO_Init+0x308>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d025      	beq.n	80016fa <HAL_GPIO_Init+0x21a>
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	4a4e      	ldr	r2, [pc, #312]	; (80017ec <HAL_GPIO_Init+0x30c>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d01f      	beq.n	80016f6 <HAL_GPIO_Init+0x216>
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	4a4d      	ldr	r2, [pc, #308]	; (80017f0 <HAL_GPIO_Init+0x310>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d019      	beq.n	80016f2 <HAL_GPIO_Init+0x212>
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	4a4c      	ldr	r2, [pc, #304]	; (80017f4 <HAL_GPIO_Init+0x314>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d013      	beq.n	80016ee <HAL_GPIO_Init+0x20e>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	4a4b      	ldr	r2, [pc, #300]	; (80017f8 <HAL_GPIO_Init+0x318>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d00d      	beq.n	80016ea <HAL_GPIO_Init+0x20a>
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	4a4a      	ldr	r2, [pc, #296]	; (80017fc <HAL_GPIO_Init+0x31c>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d007      	beq.n	80016e6 <HAL_GPIO_Init+0x206>
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	4a49      	ldr	r2, [pc, #292]	; (8001800 <HAL_GPIO_Init+0x320>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d101      	bne.n	80016e2 <HAL_GPIO_Init+0x202>
 80016de:	2306      	movs	r3, #6
 80016e0:	e00c      	b.n	80016fc <HAL_GPIO_Init+0x21c>
 80016e2:	2307      	movs	r3, #7
 80016e4:	e00a      	b.n	80016fc <HAL_GPIO_Init+0x21c>
 80016e6:	2305      	movs	r3, #5
 80016e8:	e008      	b.n	80016fc <HAL_GPIO_Init+0x21c>
 80016ea:	2304      	movs	r3, #4
 80016ec:	e006      	b.n	80016fc <HAL_GPIO_Init+0x21c>
 80016ee:	2303      	movs	r3, #3
 80016f0:	e004      	b.n	80016fc <HAL_GPIO_Init+0x21c>
 80016f2:	2302      	movs	r3, #2
 80016f4:	e002      	b.n	80016fc <HAL_GPIO_Init+0x21c>
 80016f6:	2301      	movs	r3, #1
 80016f8:	e000      	b.n	80016fc <HAL_GPIO_Init+0x21c>
 80016fa:	2300      	movs	r3, #0
 80016fc:	69fa      	ldr	r2, [r7, #28]
 80016fe:	f002 0203 	and.w	r2, r2, #3
 8001702:	0092      	lsls	r2, r2, #2
 8001704:	4093      	lsls	r3, r2
 8001706:	69ba      	ldr	r2, [r7, #24]
 8001708:	4313      	orrs	r3, r2
 800170a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800170c:	4935      	ldr	r1, [pc, #212]	; (80017e4 <HAL_GPIO_Init+0x304>)
 800170e:	69fb      	ldr	r3, [r7, #28]
 8001710:	089b      	lsrs	r3, r3, #2
 8001712:	3302      	adds	r3, #2
 8001714:	69ba      	ldr	r2, [r7, #24]
 8001716:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800171a:	4b3a      	ldr	r3, [pc, #232]	; (8001804 <HAL_GPIO_Init+0x324>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001720:	693b      	ldr	r3, [r7, #16]
 8001722:	43db      	mvns	r3, r3
 8001724:	69ba      	ldr	r2, [r7, #24]
 8001726:	4013      	ands	r3, r2
 8001728:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001732:	2b00      	cmp	r3, #0
 8001734:	d003      	beq.n	800173e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001736:	69ba      	ldr	r2, [r7, #24]
 8001738:	693b      	ldr	r3, [r7, #16]
 800173a:	4313      	orrs	r3, r2
 800173c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800173e:	4a31      	ldr	r2, [pc, #196]	; (8001804 <HAL_GPIO_Init+0x324>)
 8001740:	69bb      	ldr	r3, [r7, #24]
 8001742:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001744:	4b2f      	ldr	r3, [pc, #188]	; (8001804 <HAL_GPIO_Init+0x324>)
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800174a:	693b      	ldr	r3, [r7, #16]
 800174c:	43db      	mvns	r3, r3
 800174e:	69ba      	ldr	r2, [r7, #24]
 8001750:	4013      	ands	r3, r2
 8001752:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800175c:	2b00      	cmp	r3, #0
 800175e:	d003      	beq.n	8001768 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001760:	69ba      	ldr	r2, [r7, #24]
 8001762:	693b      	ldr	r3, [r7, #16]
 8001764:	4313      	orrs	r3, r2
 8001766:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001768:	4a26      	ldr	r2, [pc, #152]	; (8001804 <HAL_GPIO_Init+0x324>)
 800176a:	69bb      	ldr	r3, [r7, #24]
 800176c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800176e:	4b25      	ldr	r3, [pc, #148]	; (8001804 <HAL_GPIO_Init+0x324>)
 8001770:	689b      	ldr	r3, [r3, #8]
 8001772:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001774:	693b      	ldr	r3, [r7, #16]
 8001776:	43db      	mvns	r3, r3
 8001778:	69ba      	ldr	r2, [r7, #24]
 800177a:	4013      	ands	r3, r2
 800177c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001786:	2b00      	cmp	r3, #0
 8001788:	d003      	beq.n	8001792 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800178a:	69ba      	ldr	r2, [r7, #24]
 800178c:	693b      	ldr	r3, [r7, #16]
 800178e:	4313      	orrs	r3, r2
 8001790:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001792:	4a1c      	ldr	r2, [pc, #112]	; (8001804 <HAL_GPIO_Init+0x324>)
 8001794:	69bb      	ldr	r3, [r7, #24]
 8001796:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001798:	4b1a      	ldr	r3, [pc, #104]	; (8001804 <HAL_GPIO_Init+0x324>)
 800179a:	68db      	ldr	r3, [r3, #12]
 800179c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800179e:	693b      	ldr	r3, [r7, #16]
 80017a0:	43db      	mvns	r3, r3
 80017a2:	69ba      	ldr	r2, [r7, #24]
 80017a4:	4013      	ands	r3, r2
 80017a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d003      	beq.n	80017bc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80017b4:	69ba      	ldr	r2, [r7, #24]
 80017b6:	693b      	ldr	r3, [r7, #16]
 80017b8:	4313      	orrs	r3, r2
 80017ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80017bc:	4a11      	ldr	r2, [pc, #68]	; (8001804 <HAL_GPIO_Init+0x324>)
 80017be:	69bb      	ldr	r3, [r7, #24]
 80017c0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017c2:	69fb      	ldr	r3, [r7, #28]
 80017c4:	3301      	adds	r3, #1
 80017c6:	61fb      	str	r3, [r7, #28]
 80017c8:	69fb      	ldr	r3, [r7, #28]
 80017ca:	2b0f      	cmp	r3, #15
 80017cc:	f67f ae96 	bls.w	80014fc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80017d0:	bf00      	nop
 80017d2:	bf00      	nop
 80017d4:	3724      	adds	r7, #36	; 0x24
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr
 80017de:	bf00      	nop
 80017e0:	40023800 	.word	0x40023800
 80017e4:	40013800 	.word	0x40013800
 80017e8:	40020000 	.word	0x40020000
 80017ec:	40020400 	.word	0x40020400
 80017f0:	40020800 	.word	0x40020800
 80017f4:	40020c00 	.word	0x40020c00
 80017f8:	40021000 	.word	0x40021000
 80017fc:	40021400 	.word	0x40021400
 8001800:	40021800 	.word	0x40021800
 8001804:	40013c00 	.word	0x40013c00

08001808 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001808:	b480      	push	{r7}
 800180a:	b083      	sub	sp, #12
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
 8001810:	460b      	mov	r3, r1
 8001812:	807b      	strh	r3, [r7, #2]
 8001814:	4613      	mov	r3, r2
 8001816:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001818:	787b      	ldrb	r3, [r7, #1]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d003      	beq.n	8001826 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800181e:	887a      	ldrh	r2, [r7, #2]
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001824:	e003      	b.n	800182e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001826:	887b      	ldrh	r3, [r7, #2]
 8001828:	041a      	lsls	r2, r3, #16
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	619a      	str	r2, [r3, #24]
}
 800182e:	bf00      	nop
 8001830:	370c      	adds	r7, #12
 8001832:	46bd      	mov	sp, r7
 8001834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001838:	4770      	bx	lr
	...

0800183c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b084      	sub	sp, #16
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d101      	bne.n	800184e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800184a:	2301      	movs	r3, #1
 800184c:	e12b      	b.n	8001aa6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001854:	b2db      	uxtb	r3, r3
 8001856:	2b00      	cmp	r3, #0
 8001858:	d106      	bne.n	8001868 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	2200      	movs	r2, #0
 800185e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001862:	6878      	ldr	r0, [r7, #4]
 8001864:	f7ff fac0 	bl	8000de8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2224      	movs	r2, #36	; 0x24
 800186c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	681a      	ldr	r2, [r3, #0]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f022 0201 	bic.w	r2, r2, #1
 800187e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	681a      	ldr	r2, [r3, #0]
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800188e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	681a      	ldr	r2, [r3, #0]
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800189e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80018a0:	f000 fd1a 	bl	80022d8 <HAL_RCC_GetPCLK1Freq>
 80018a4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	4a81      	ldr	r2, [pc, #516]	; (8001ab0 <HAL_I2C_Init+0x274>)
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d807      	bhi.n	80018c0 <HAL_I2C_Init+0x84>
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	4a80      	ldr	r2, [pc, #512]	; (8001ab4 <HAL_I2C_Init+0x278>)
 80018b4:	4293      	cmp	r3, r2
 80018b6:	bf94      	ite	ls
 80018b8:	2301      	movls	r3, #1
 80018ba:	2300      	movhi	r3, #0
 80018bc:	b2db      	uxtb	r3, r3
 80018be:	e006      	b.n	80018ce <HAL_I2C_Init+0x92>
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	4a7d      	ldr	r2, [pc, #500]	; (8001ab8 <HAL_I2C_Init+0x27c>)
 80018c4:	4293      	cmp	r3, r2
 80018c6:	bf94      	ite	ls
 80018c8:	2301      	movls	r3, #1
 80018ca:	2300      	movhi	r3, #0
 80018cc:	b2db      	uxtb	r3, r3
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d001      	beq.n	80018d6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80018d2:	2301      	movs	r3, #1
 80018d4:	e0e7      	b.n	8001aa6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	4a78      	ldr	r2, [pc, #480]	; (8001abc <HAL_I2C_Init+0x280>)
 80018da:	fba2 2303 	umull	r2, r3, r2, r3
 80018de:	0c9b      	lsrs	r3, r3, #18
 80018e0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	68ba      	ldr	r2, [r7, #8]
 80018f2:	430a      	orrs	r2, r1
 80018f4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	6a1b      	ldr	r3, [r3, #32]
 80018fc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	4a6a      	ldr	r2, [pc, #424]	; (8001ab0 <HAL_I2C_Init+0x274>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d802      	bhi.n	8001910 <HAL_I2C_Init+0xd4>
 800190a:	68bb      	ldr	r3, [r7, #8]
 800190c:	3301      	adds	r3, #1
 800190e:	e009      	b.n	8001924 <HAL_I2C_Init+0xe8>
 8001910:	68bb      	ldr	r3, [r7, #8]
 8001912:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001916:	fb02 f303 	mul.w	r3, r2, r3
 800191a:	4a69      	ldr	r2, [pc, #420]	; (8001ac0 <HAL_I2C_Init+0x284>)
 800191c:	fba2 2303 	umull	r2, r3, r2, r3
 8001920:	099b      	lsrs	r3, r3, #6
 8001922:	3301      	adds	r3, #1
 8001924:	687a      	ldr	r2, [r7, #4]
 8001926:	6812      	ldr	r2, [r2, #0]
 8001928:	430b      	orrs	r3, r1
 800192a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	69db      	ldr	r3, [r3, #28]
 8001932:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001936:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	495c      	ldr	r1, [pc, #368]	; (8001ab0 <HAL_I2C_Init+0x274>)
 8001940:	428b      	cmp	r3, r1
 8001942:	d819      	bhi.n	8001978 <HAL_I2C_Init+0x13c>
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	1e59      	subs	r1, r3, #1
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	005b      	lsls	r3, r3, #1
 800194e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001952:	1c59      	adds	r1, r3, #1
 8001954:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001958:	400b      	ands	r3, r1
 800195a:	2b00      	cmp	r3, #0
 800195c:	d00a      	beq.n	8001974 <HAL_I2C_Init+0x138>
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	1e59      	subs	r1, r3, #1
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	005b      	lsls	r3, r3, #1
 8001968:	fbb1 f3f3 	udiv	r3, r1, r3
 800196c:	3301      	adds	r3, #1
 800196e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001972:	e051      	b.n	8001a18 <HAL_I2C_Init+0x1dc>
 8001974:	2304      	movs	r3, #4
 8001976:	e04f      	b.n	8001a18 <HAL_I2C_Init+0x1dc>
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	689b      	ldr	r3, [r3, #8]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d111      	bne.n	80019a4 <HAL_I2C_Init+0x168>
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	1e58      	subs	r0, r3, #1
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6859      	ldr	r1, [r3, #4]
 8001988:	460b      	mov	r3, r1
 800198a:	005b      	lsls	r3, r3, #1
 800198c:	440b      	add	r3, r1
 800198e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001992:	3301      	adds	r3, #1
 8001994:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001998:	2b00      	cmp	r3, #0
 800199a:	bf0c      	ite	eq
 800199c:	2301      	moveq	r3, #1
 800199e:	2300      	movne	r3, #0
 80019a0:	b2db      	uxtb	r3, r3
 80019a2:	e012      	b.n	80019ca <HAL_I2C_Init+0x18e>
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	1e58      	subs	r0, r3, #1
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6859      	ldr	r1, [r3, #4]
 80019ac:	460b      	mov	r3, r1
 80019ae:	009b      	lsls	r3, r3, #2
 80019b0:	440b      	add	r3, r1
 80019b2:	0099      	lsls	r1, r3, #2
 80019b4:	440b      	add	r3, r1
 80019b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80019ba:	3301      	adds	r3, #1
 80019bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	bf0c      	ite	eq
 80019c4:	2301      	moveq	r3, #1
 80019c6:	2300      	movne	r3, #0
 80019c8:	b2db      	uxtb	r3, r3
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d001      	beq.n	80019d2 <HAL_I2C_Init+0x196>
 80019ce:	2301      	movs	r3, #1
 80019d0:	e022      	b.n	8001a18 <HAL_I2C_Init+0x1dc>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	689b      	ldr	r3, [r3, #8]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d10e      	bne.n	80019f8 <HAL_I2C_Init+0x1bc>
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	1e58      	subs	r0, r3, #1
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6859      	ldr	r1, [r3, #4]
 80019e2:	460b      	mov	r3, r1
 80019e4:	005b      	lsls	r3, r3, #1
 80019e6:	440b      	add	r3, r1
 80019e8:	fbb0 f3f3 	udiv	r3, r0, r3
 80019ec:	3301      	adds	r3, #1
 80019ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80019f6:	e00f      	b.n	8001a18 <HAL_I2C_Init+0x1dc>
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	1e58      	subs	r0, r3, #1
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6859      	ldr	r1, [r3, #4]
 8001a00:	460b      	mov	r3, r1
 8001a02:	009b      	lsls	r3, r3, #2
 8001a04:	440b      	add	r3, r1
 8001a06:	0099      	lsls	r1, r3, #2
 8001a08:	440b      	add	r3, r1
 8001a0a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a0e:	3301      	adds	r3, #1
 8001a10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a14:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001a18:	6879      	ldr	r1, [r7, #4]
 8001a1a:	6809      	ldr	r1, [r1, #0]
 8001a1c:	4313      	orrs	r3, r2
 8001a1e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	69da      	ldr	r2, [r3, #28]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6a1b      	ldr	r3, [r3, #32]
 8001a32:	431a      	orrs	r2, r3
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	430a      	orrs	r2, r1
 8001a3a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	689b      	ldr	r3, [r3, #8]
 8001a42:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001a46:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001a4a:	687a      	ldr	r2, [r7, #4]
 8001a4c:	6911      	ldr	r1, [r2, #16]
 8001a4e:	687a      	ldr	r2, [r7, #4]
 8001a50:	68d2      	ldr	r2, [r2, #12]
 8001a52:	4311      	orrs	r1, r2
 8001a54:	687a      	ldr	r2, [r7, #4]
 8001a56:	6812      	ldr	r2, [r2, #0]
 8001a58:	430b      	orrs	r3, r1
 8001a5a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	68db      	ldr	r3, [r3, #12]
 8001a62:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	695a      	ldr	r2, [r3, #20]
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	699b      	ldr	r3, [r3, #24]
 8001a6e:	431a      	orrs	r2, r3
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	430a      	orrs	r2, r1
 8001a76:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	681a      	ldr	r2, [r3, #0]
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f042 0201 	orr.w	r2, r2, #1
 8001a86:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2220      	movs	r2, #32
 8001a92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2200      	movs	r2, #0
 8001a9a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001aa4:	2300      	movs	r3, #0
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	3710      	adds	r7, #16
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	000186a0 	.word	0x000186a0
 8001ab4:	001e847f 	.word	0x001e847f
 8001ab8:	003d08ff 	.word	0x003d08ff
 8001abc:	431bde83 	.word	0x431bde83
 8001ac0:	10624dd3 	.word	0x10624dd3

08001ac4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b088      	sub	sp, #32
 8001ac8:	af02      	add	r7, sp, #8
 8001aca:	60f8      	str	r0, [r7, #12]
 8001acc:	4608      	mov	r0, r1
 8001ace:	4611      	mov	r1, r2
 8001ad0:	461a      	mov	r2, r3
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	817b      	strh	r3, [r7, #10]
 8001ad6:	460b      	mov	r3, r1
 8001ad8:	813b      	strh	r3, [r7, #8]
 8001ada:	4613      	mov	r3, r2
 8001adc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001ade:	f7ff fbed 	bl	80012bc <HAL_GetTick>
 8001ae2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001aea:	b2db      	uxtb	r3, r3
 8001aec:	2b20      	cmp	r3, #32
 8001aee:	f040 80d9 	bne.w	8001ca4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001af2:	697b      	ldr	r3, [r7, #20]
 8001af4:	9300      	str	r3, [sp, #0]
 8001af6:	2319      	movs	r3, #25
 8001af8:	2201      	movs	r2, #1
 8001afa:	496d      	ldr	r1, [pc, #436]	; (8001cb0 <HAL_I2C_Mem_Write+0x1ec>)
 8001afc:	68f8      	ldr	r0, [r7, #12]
 8001afe:	f000 f971 	bl	8001de4 <I2C_WaitOnFlagUntilTimeout>
 8001b02:	4603      	mov	r3, r0
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d001      	beq.n	8001b0c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001b08:	2302      	movs	r3, #2
 8001b0a:	e0cc      	b.n	8001ca6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b12:	2b01      	cmp	r3, #1
 8001b14:	d101      	bne.n	8001b1a <HAL_I2C_Mem_Write+0x56>
 8001b16:	2302      	movs	r3, #2
 8001b18:	e0c5      	b.n	8001ca6 <HAL_I2C_Mem_Write+0x1e2>
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	2201      	movs	r2, #1
 8001b1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f003 0301 	and.w	r3, r3, #1
 8001b2c:	2b01      	cmp	r3, #1
 8001b2e:	d007      	beq.n	8001b40 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	681a      	ldr	r2, [r3, #0]
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f042 0201 	orr.w	r2, r2, #1
 8001b3e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	681a      	ldr	r2, [r3, #0]
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001b4e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	2221      	movs	r2, #33	; 0x21
 8001b54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	2240      	movs	r2, #64	; 0x40
 8001b5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	2200      	movs	r2, #0
 8001b64:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	6a3a      	ldr	r2, [r7, #32]
 8001b6a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001b70:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b76:	b29a      	uxth	r2, r3
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	4a4d      	ldr	r2, [pc, #308]	; (8001cb4 <HAL_I2C_Mem_Write+0x1f0>)
 8001b80:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001b82:	88f8      	ldrh	r0, [r7, #6]
 8001b84:	893a      	ldrh	r2, [r7, #8]
 8001b86:	8979      	ldrh	r1, [r7, #10]
 8001b88:	697b      	ldr	r3, [r7, #20]
 8001b8a:	9301      	str	r3, [sp, #4]
 8001b8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b8e:	9300      	str	r3, [sp, #0]
 8001b90:	4603      	mov	r3, r0
 8001b92:	68f8      	ldr	r0, [r7, #12]
 8001b94:	f000 f890 	bl	8001cb8 <I2C_RequestMemoryWrite>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d052      	beq.n	8001c44 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	e081      	b.n	8001ca6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ba2:	697a      	ldr	r2, [r7, #20]
 8001ba4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001ba6:	68f8      	ldr	r0, [r7, #12]
 8001ba8:	f000 f9f2 	bl	8001f90 <I2C_WaitOnTXEFlagUntilTimeout>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d00d      	beq.n	8001bce <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb6:	2b04      	cmp	r3, #4
 8001bb8:	d107      	bne.n	8001bca <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	681a      	ldr	r2, [r3, #0]
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001bc8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	e06b      	b.n	8001ca6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bd2:	781a      	ldrb	r2, [r3, #0]
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bde:	1c5a      	adds	r2, r3, #1
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001be8:	3b01      	subs	r3, #1
 8001bea:	b29a      	uxth	r2, r3
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bf4:	b29b      	uxth	r3, r3
 8001bf6:	3b01      	subs	r3, #1
 8001bf8:	b29a      	uxth	r2, r3
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	695b      	ldr	r3, [r3, #20]
 8001c04:	f003 0304 	and.w	r3, r3, #4
 8001c08:	2b04      	cmp	r3, #4
 8001c0a:	d11b      	bne.n	8001c44 <HAL_I2C_Mem_Write+0x180>
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d017      	beq.n	8001c44 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c18:	781a      	ldrb	r2, [r3, #0]
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c24:	1c5a      	adds	r2, r3, #1
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c2e:	3b01      	subs	r3, #1
 8001c30:	b29a      	uxth	r2, r3
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c3a:	b29b      	uxth	r3, r3
 8001c3c:	3b01      	subs	r3, #1
 8001c3e:	b29a      	uxth	r2, r3
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d1aa      	bne.n	8001ba2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c4c:	697a      	ldr	r2, [r7, #20]
 8001c4e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001c50:	68f8      	ldr	r0, [r7, #12]
 8001c52:	f000 f9de 	bl	8002012 <I2C_WaitOnBTFFlagUntilTimeout>
 8001c56:	4603      	mov	r3, r0
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d00d      	beq.n	8001c78 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c60:	2b04      	cmp	r3, #4
 8001c62:	d107      	bne.n	8001c74 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	681a      	ldr	r2, [r3, #0]
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c72:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001c74:	2301      	movs	r3, #1
 8001c76:	e016      	b.n	8001ca6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	681a      	ldr	r2, [r3, #0]
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c86:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	2220      	movs	r2, #32
 8001c8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	2200      	movs	r2, #0
 8001c94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	e000      	b.n	8001ca6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001ca4:	2302      	movs	r3, #2
  }
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	3718      	adds	r7, #24
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	00100002 	.word	0x00100002
 8001cb4:	ffff0000 	.word	0xffff0000

08001cb8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b088      	sub	sp, #32
 8001cbc:	af02      	add	r7, sp, #8
 8001cbe:	60f8      	str	r0, [r7, #12]
 8001cc0:	4608      	mov	r0, r1
 8001cc2:	4611      	mov	r1, r2
 8001cc4:	461a      	mov	r2, r3
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	817b      	strh	r3, [r7, #10]
 8001cca:	460b      	mov	r3, r1
 8001ccc:	813b      	strh	r3, [r7, #8]
 8001cce:	4613      	mov	r3, r2
 8001cd0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	681a      	ldr	r2, [r3, #0]
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001ce0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce4:	9300      	str	r3, [sp, #0]
 8001ce6:	6a3b      	ldr	r3, [r7, #32]
 8001ce8:	2200      	movs	r2, #0
 8001cea:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001cee:	68f8      	ldr	r0, [r7, #12]
 8001cf0:	f000 f878 	bl	8001de4 <I2C_WaitOnFlagUntilTimeout>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d00d      	beq.n	8001d16 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d08:	d103      	bne.n	8001d12 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d10:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001d12:	2303      	movs	r3, #3
 8001d14:	e05f      	b.n	8001dd6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001d16:	897b      	ldrh	r3, [r7, #10]
 8001d18:	b2db      	uxtb	r3, r3
 8001d1a:	461a      	mov	r2, r3
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001d24:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d28:	6a3a      	ldr	r2, [r7, #32]
 8001d2a:	492d      	ldr	r1, [pc, #180]	; (8001de0 <I2C_RequestMemoryWrite+0x128>)
 8001d2c:	68f8      	ldr	r0, [r7, #12]
 8001d2e:	f000 f8b0 	bl	8001e92 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001d32:	4603      	mov	r3, r0
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d001      	beq.n	8001d3c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	e04c      	b.n	8001dd6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	617b      	str	r3, [r7, #20]
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	695b      	ldr	r3, [r3, #20]
 8001d46:	617b      	str	r3, [r7, #20]
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	699b      	ldr	r3, [r3, #24]
 8001d4e:	617b      	str	r3, [r7, #20]
 8001d50:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d54:	6a39      	ldr	r1, [r7, #32]
 8001d56:	68f8      	ldr	r0, [r7, #12]
 8001d58:	f000 f91a 	bl	8001f90 <I2C_WaitOnTXEFlagUntilTimeout>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d00d      	beq.n	8001d7e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d66:	2b04      	cmp	r3, #4
 8001d68:	d107      	bne.n	8001d7a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	681a      	ldr	r2, [r3, #0]
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d78:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	e02b      	b.n	8001dd6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001d7e:	88fb      	ldrh	r3, [r7, #6]
 8001d80:	2b01      	cmp	r3, #1
 8001d82:	d105      	bne.n	8001d90 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001d84:	893b      	ldrh	r3, [r7, #8]
 8001d86:	b2da      	uxtb	r2, r3
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	611a      	str	r2, [r3, #16]
 8001d8e:	e021      	b.n	8001dd4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001d90:	893b      	ldrh	r3, [r7, #8]
 8001d92:	0a1b      	lsrs	r3, r3, #8
 8001d94:	b29b      	uxth	r3, r3
 8001d96:	b2da      	uxtb	r2, r3
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001da0:	6a39      	ldr	r1, [r7, #32]
 8001da2:	68f8      	ldr	r0, [r7, #12]
 8001da4:	f000 f8f4 	bl	8001f90 <I2C_WaitOnTXEFlagUntilTimeout>
 8001da8:	4603      	mov	r3, r0
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d00d      	beq.n	8001dca <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db2:	2b04      	cmp	r3, #4
 8001db4:	d107      	bne.n	8001dc6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	681a      	ldr	r2, [r3, #0]
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001dc4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	e005      	b.n	8001dd6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001dca:	893b      	ldrh	r3, [r7, #8]
 8001dcc:	b2da      	uxtb	r2, r3
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8001dd4:	2300      	movs	r3, #0
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	3718      	adds	r7, #24
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	bf00      	nop
 8001de0:	00010002 	.word	0x00010002

08001de4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b084      	sub	sp, #16
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	60f8      	str	r0, [r7, #12]
 8001dec:	60b9      	str	r1, [r7, #8]
 8001dee:	603b      	str	r3, [r7, #0]
 8001df0:	4613      	mov	r3, r2
 8001df2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001df4:	e025      	b.n	8001e42 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001dfc:	d021      	beq.n	8001e42 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001dfe:	f7ff fa5d 	bl	80012bc <HAL_GetTick>
 8001e02:	4602      	mov	r2, r0
 8001e04:	69bb      	ldr	r3, [r7, #24]
 8001e06:	1ad3      	subs	r3, r2, r3
 8001e08:	683a      	ldr	r2, [r7, #0]
 8001e0a:	429a      	cmp	r2, r3
 8001e0c:	d302      	bcc.n	8001e14 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d116      	bne.n	8001e42 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	2200      	movs	r2, #0
 8001e18:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	2220      	movs	r2, #32
 8001e1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	2200      	movs	r2, #0
 8001e26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e2e:	f043 0220 	orr.w	r2, r3, #32
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	2200      	movs	r2, #0
 8001e3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	e023      	b.n	8001e8a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001e42:	68bb      	ldr	r3, [r7, #8]
 8001e44:	0c1b      	lsrs	r3, r3, #16
 8001e46:	b2db      	uxtb	r3, r3
 8001e48:	2b01      	cmp	r3, #1
 8001e4a:	d10d      	bne.n	8001e68 <I2C_WaitOnFlagUntilTimeout+0x84>
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	695b      	ldr	r3, [r3, #20]
 8001e52:	43da      	mvns	r2, r3
 8001e54:	68bb      	ldr	r3, [r7, #8]
 8001e56:	4013      	ands	r3, r2
 8001e58:	b29b      	uxth	r3, r3
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	bf0c      	ite	eq
 8001e5e:	2301      	moveq	r3, #1
 8001e60:	2300      	movne	r3, #0
 8001e62:	b2db      	uxtb	r3, r3
 8001e64:	461a      	mov	r2, r3
 8001e66:	e00c      	b.n	8001e82 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	699b      	ldr	r3, [r3, #24]
 8001e6e:	43da      	mvns	r2, r3
 8001e70:	68bb      	ldr	r3, [r7, #8]
 8001e72:	4013      	ands	r3, r2
 8001e74:	b29b      	uxth	r3, r3
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	bf0c      	ite	eq
 8001e7a:	2301      	moveq	r3, #1
 8001e7c:	2300      	movne	r3, #0
 8001e7e:	b2db      	uxtb	r3, r3
 8001e80:	461a      	mov	r2, r3
 8001e82:	79fb      	ldrb	r3, [r7, #7]
 8001e84:	429a      	cmp	r2, r3
 8001e86:	d0b6      	beq.n	8001df6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001e88:	2300      	movs	r3, #0
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	3710      	adds	r7, #16
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}

08001e92 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001e92:	b580      	push	{r7, lr}
 8001e94:	b084      	sub	sp, #16
 8001e96:	af00      	add	r7, sp, #0
 8001e98:	60f8      	str	r0, [r7, #12]
 8001e9a:	60b9      	str	r1, [r7, #8]
 8001e9c:	607a      	str	r2, [r7, #4]
 8001e9e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001ea0:	e051      	b.n	8001f46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	695b      	ldr	r3, [r3, #20]
 8001ea8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001eac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001eb0:	d123      	bne.n	8001efa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	681a      	ldr	r2, [r3, #0]
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ec0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001eca:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	2200      	movs	r2, #0
 8001ed0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	2220      	movs	r2, #32
 8001ed6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	2200      	movs	r2, #0
 8001ede:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee6:	f043 0204 	orr.w	r2, r3, #4
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	e046      	b.n	8001f88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001f00:	d021      	beq.n	8001f46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f02:	f7ff f9db 	bl	80012bc <HAL_GetTick>
 8001f06:	4602      	mov	r2, r0
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	1ad3      	subs	r3, r2, r3
 8001f0c:	687a      	ldr	r2, [r7, #4]
 8001f0e:	429a      	cmp	r2, r3
 8001f10:	d302      	bcc.n	8001f18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d116      	bne.n	8001f46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	2220      	movs	r2, #32
 8001f22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	2200      	movs	r2, #0
 8001f2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f32:	f043 0220 	orr.w	r2, r3, #32
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001f42:	2301      	movs	r3, #1
 8001f44:	e020      	b.n	8001f88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001f46:	68bb      	ldr	r3, [r7, #8]
 8001f48:	0c1b      	lsrs	r3, r3, #16
 8001f4a:	b2db      	uxtb	r3, r3
 8001f4c:	2b01      	cmp	r3, #1
 8001f4e:	d10c      	bne.n	8001f6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	695b      	ldr	r3, [r3, #20]
 8001f56:	43da      	mvns	r2, r3
 8001f58:	68bb      	ldr	r3, [r7, #8]
 8001f5a:	4013      	ands	r3, r2
 8001f5c:	b29b      	uxth	r3, r3
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	bf14      	ite	ne
 8001f62:	2301      	movne	r3, #1
 8001f64:	2300      	moveq	r3, #0
 8001f66:	b2db      	uxtb	r3, r3
 8001f68:	e00b      	b.n	8001f82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	699b      	ldr	r3, [r3, #24]
 8001f70:	43da      	mvns	r2, r3
 8001f72:	68bb      	ldr	r3, [r7, #8]
 8001f74:	4013      	ands	r3, r2
 8001f76:	b29b      	uxth	r3, r3
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	bf14      	ite	ne
 8001f7c:	2301      	movne	r3, #1
 8001f7e:	2300      	moveq	r3, #0
 8001f80:	b2db      	uxtb	r3, r3
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d18d      	bne.n	8001ea2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8001f86:	2300      	movs	r3, #0
}
 8001f88:	4618      	mov	r0, r3
 8001f8a:	3710      	adds	r7, #16
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}

08001f90 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b084      	sub	sp, #16
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	60f8      	str	r0, [r7, #12]
 8001f98:	60b9      	str	r1, [r7, #8]
 8001f9a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001f9c:	e02d      	b.n	8001ffa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001f9e:	68f8      	ldr	r0, [r7, #12]
 8001fa0:	f000 f878 	bl	8002094 <I2C_IsAcknowledgeFailed>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d001      	beq.n	8001fae <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
 8001fac:	e02d      	b.n	800200a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001fae:	68bb      	ldr	r3, [r7, #8]
 8001fb0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001fb4:	d021      	beq.n	8001ffa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001fb6:	f7ff f981 	bl	80012bc <HAL_GetTick>
 8001fba:	4602      	mov	r2, r0
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	1ad3      	subs	r3, r2, r3
 8001fc0:	68ba      	ldr	r2, [r7, #8]
 8001fc2:	429a      	cmp	r2, r3
 8001fc4:	d302      	bcc.n	8001fcc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001fc6:	68bb      	ldr	r3, [r7, #8]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d116      	bne.n	8001ffa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	2200      	movs	r2, #0
 8001fd0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	2220      	movs	r2, #32
 8001fd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	2200      	movs	r2, #0
 8001fde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe6:	f043 0220 	orr.w	r2, r3, #32
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	e007      	b.n	800200a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	695b      	ldr	r3, [r3, #20]
 8002000:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002004:	2b80      	cmp	r3, #128	; 0x80
 8002006:	d1ca      	bne.n	8001f9e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002008:	2300      	movs	r3, #0
}
 800200a:	4618      	mov	r0, r3
 800200c:	3710      	adds	r7, #16
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}

08002012 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002012:	b580      	push	{r7, lr}
 8002014:	b084      	sub	sp, #16
 8002016:	af00      	add	r7, sp, #0
 8002018:	60f8      	str	r0, [r7, #12]
 800201a:	60b9      	str	r1, [r7, #8]
 800201c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800201e:	e02d      	b.n	800207c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002020:	68f8      	ldr	r0, [r7, #12]
 8002022:	f000 f837 	bl	8002094 <I2C_IsAcknowledgeFailed>
 8002026:	4603      	mov	r3, r0
 8002028:	2b00      	cmp	r3, #0
 800202a:	d001      	beq.n	8002030 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800202c:	2301      	movs	r3, #1
 800202e:	e02d      	b.n	800208c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002030:	68bb      	ldr	r3, [r7, #8]
 8002032:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002036:	d021      	beq.n	800207c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002038:	f7ff f940 	bl	80012bc <HAL_GetTick>
 800203c:	4602      	mov	r2, r0
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	1ad3      	subs	r3, r2, r3
 8002042:	68ba      	ldr	r2, [r7, #8]
 8002044:	429a      	cmp	r2, r3
 8002046:	d302      	bcc.n	800204e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002048:	68bb      	ldr	r3, [r7, #8]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d116      	bne.n	800207c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	2200      	movs	r2, #0
 8002052:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	2220      	movs	r2, #32
 8002058:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	2200      	movs	r2, #0
 8002060:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002068:	f043 0220 	orr.w	r2, r3, #32
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	2200      	movs	r2, #0
 8002074:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002078:	2301      	movs	r3, #1
 800207a:	e007      	b.n	800208c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	695b      	ldr	r3, [r3, #20]
 8002082:	f003 0304 	and.w	r3, r3, #4
 8002086:	2b04      	cmp	r3, #4
 8002088:	d1ca      	bne.n	8002020 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800208a:	2300      	movs	r3, #0
}
 800208c:	4618      	mov	r0, r3
 800208e:	3710      	adds	r7, #16
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}

08002094 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002094:	b480      	push	{r7}
 8002096:	b083      	sub	sp, #12
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	695b      	ldr	r3, [r3, #20]
 80020a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020aa:	d11b      	bne.n	80020e4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80020b4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2200      	movs	r2, #0
 80020ba:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2220      	movs	r2, #32
 80020c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2200      	movs	r2, #0
 80020c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d0:	f043 0204 	orr.w	r2, r3, #4
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2200      	movs	r2, #0
 80020dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80020e0:	2301      	movs	r3, #1
 80020e2:	e000      	b.n	80020e6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80020e4:	2300      	movs	r3, #0
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	370c      	adds	r7, #12
 80020ea:	46bd      	mov	sp, r7
 80020ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f0:	4770      	bx	lr
	...

080020f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b084      	sub	sp, #16
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
 80020fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d101      	bne.n	8002108 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002104:	2301      	movs	r3, #1
 8002106:	e0cc      	b.n	80022a2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002108:	4b68      	ldr	r3, [pc, #416]	; (80022ac <HAL_RCC_ClockConfig+0x1b8>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f003 030f 	and.w	r3, r3, #15
 8002110:	683a      	ldr	r2, [r7, #0]
 8002112:	429a      	cmp	r2, r3
 8002114:	d90c      	bls.n	8002130 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002116:	4b65      	ldr	r3, [pc, #404]	; (80022ac <HAL_RCC_ClockConfig+0x1b8>)
 8002118:	683a      	ldr	r2, [r7, #0]
 800211a:	b2d2      	uxtb	r2, r2
 800211c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800211e:	4b63      	ldr	r3, [pc, #396]	; (80022ac <HAL_RCC_ClockConfig+0x1b8>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f003 030f 	and.w	r3, r3, #15
 8002126:	683a      	ldr	r2, [r7, #0]
 8002128:	429a      	cmp	r2, r3
 800212a:	d001      	beq.n	8002130 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800212c:	2301      	movs	r3, #1
 800212e:	e0b8      	b.n	80022a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f003 0302 	and.w	r3, r3, #2
 8002138:	2b00      	cmp	r3, #0
 800213a:	d020      	beq.n	800217e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f003 0304 	and.w	r3, r3, #4
 8002144:	2b00      	cmp	r3, #0
 8002146:	d005      	beq.n	8002154 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002148:	4b59      	ldr	r3, [pc, #356]	; (80022b0 <HAL_RCC_ClockConfig+0x1bc>)
 800214a:	689b      	ldr	r3, [r3, #8]
 800214c:	4a58      	ldr	r2, [pc, #352]	; (80022b0 <HAL_RCC_ClockConfig+0x1bc>)
 800214e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002152:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f003 0308 	and.w	r3, r3, #8
 800215c:	2b00      	cmp	r3, #0
 800215e:	d005      	beq.n	800216c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002160:	4b53      	ldr	r3, [pc, #332]	; (80022b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	4a52      	ldr	r2, [pc, #328]	; (80022b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002166:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800216a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800216c:	4b50      	ldr	r3, [pc, #320]	; (80022b0 <HAL_RCC_ClockConfig+0x1bc>)
 800216e:	689b      	ldr	r3, [r3, #8]
 8002170:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	689b      	ldr	r3, [r3, #8]
 8002178:	494d      	ldr	r1, [pc, #308]	; (80022b0 <HAL_RCC_ClockConfig+0x1bc>)
 800217a:	4313      	orrs	r3, r2
 800217c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f003 0301 	and.w	r3, r3, #1
 8002186:	2b00      	cmp	r3, #0
 8002188:	d044      	beq.n	8002214 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	2b01      	cmp	r3, #1
 8002190:	d107      	bne.n	80021a2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002192:	4b47      	ldr	r3, [pc, #284]	; (80022b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800219a:	2b00      	cmp	r3, #0
 800219c:	d119      	bne.n	80021d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800219e:	2301      	movs	r3, #1
 80021a0:	e07f      	b.n	80022a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	2b02      	cmp	r3, #2
 80021a8:	d003      	beq.n	80021b2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80021ae:	2b03      	cmp	r3, #3
 80021b0:	d107      	bne.n	80021c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021b2:	4b3f      	ldr	r3, [pc, #252]	; (80022b0 <HAL_RCC_ClockConfig+0x1bc>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d109      	bne.n	80021d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021be:	2301      	movs	r3, #1
 80021c0:	e06f      	b.n	80022a2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021c2:	4b3b      	ldr	r3, [pc, #236]	; (80022b0 <HAL_RCC_ClockConfig+0x1bc>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f003 0302 	and.w	r3, r3, #2
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d101      	bne.n	80021d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021ce:	2301      	movs	r3, #1
 80021d0:	e067      	b.n	80022a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021d2:	4b37      	ldr	r3, [pc, #220]	; (80022b0 <HAL_RCC_ClockConfig+0x1bc>)
 80021d4:	689b      	ldr	r3, [r3, #8]
 80021d6:	f023 0203 	bic.w	r2, r3, #3
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	4934      	ldr	r1, [pc, #208]	; (80022b0 <HAL_RCC_ClockConfig+0x1bc>)
 80021e0:	4313      	orrs	r3, r2
 80021e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80021e4:	f7ff f86a 	bl	80012bc <HAL_GetTick>
 80021e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021ea:	e00a      	b.n	8002202 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021ec:	f7ff f866 	bl	80012bc <HAL_GetTick>
 80021f0:	4602      	mov	r2, r0
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	1ad3      	subs	r3, r2, r3
 80021f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d901      	bls.n	8002202 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80021fe:	2303      	movs	r3, #3
 8002200:	e04f      	b.n	80022a2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002202:	4b2b      	ldr	r3, [pc, #172]	; (80022b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002204:	689b      	ldr	r3, [r3, #8]
 8002206:	f003 020c 	and.w	r2, r3, #12
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	009b      	lsls	r3, r3, #2
 8002210:	429a      	cmp	r2, r3
 8002212:	d1eb      	bne.n	80021ec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002214:	4b25      	ldr	r3, [pc, #148]	; (80022ac <HAL_RCC_ClockConfig+0x1b8>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f003 030f 	and.w	r3, r3, #15
 800221c:	683a      	ldr	r2, [r7, #0]
 800221e:	429a      	cmp	r2, r3
 8002220:	d20c      	bcs.n	800223c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002222:	4b22      	ldr	r3, [pc, #136]	; (80022ac <HAL_RCC_ClockConfig+0x1b8>)
 8002224:	683a      	ldr	r2, [r7, #0]
 8002226:	b2d2      	uxtb	r2, r2
 8002228:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800222a:	4b20      	ldr	r3, [pc, #128]	; (80022ac <HAL_RCC_ClockConfig+0x1b8>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f003 030f 	and.w	r3, r3, #15
 8002232:	683a      	ldr	r2, [r7, #0]
 8002234:	429a      	cmp	r2, r3
 8002236:	d001      	beq.n	800223c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002238:	2301      	movs	r3, #1
 800223a:	e032      	b.n	80022a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f003 0304 	and.w	r3, r3, #4
 8002244:	2b00      	cmp	r3, #0
 8002246:	d008      	beq.n	800225a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002248:	4b19      	ldr	r3, [pc, #100]	; (80022b0 <HAL_RCC_ClockConfig+0x1bc>)
 800224a:	689b      	ldr	r3, [r3, #8]
 800224c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	68db      	ldr	r3, [r3, #12]
 8002254:	4916      	ldr	r1, [pc, #88]	; (80022b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002256:	4313      	orrs	r3, r2
 8002258:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f003 0308 	and.w	r3, r3, #8
 8002262:	2b00      	cmp	r3, #0
 8002264:	d009      	beq.n	800227a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002266:	4b12      	ldr	r3, [pc, #72]	; (80022b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002268:	689b      	ldr	r3, [r3, #8]
 800226a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	691b      	ldr	r3, [r3, #16]
 8002272:	00db      	lsls	r3, r3, #3
 8002274:	490e      	ldr	r1, [pc, #56]	; (80022b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002276:	4313      	orrs	r3, r2
 8002278:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800227a:	f000 f887 	bl	800238c <HAL_RCC_GetSysClockFreq>
 800227e:	4602      	mov	r2, r0
 8002280:	4b0b      	ldr	r3, [pc, #44]	; (80022b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002282:	689b      	ldr	r3, [r3, #8]
 8002284:	091b      	lsrs	r3, r3, #4
 8002286:	f003 030f 	and.w	r3, r3, #15
 800228a:	490a      	ldr	r1, [pc, #40]	; (80022b4 <HAL_RCC_ClockConfig+0x1c0>)
 800228c:	5ccb      	ldrb	r3, [r1, r3]
 800228e:	fa22 f303 	lsr.w	r3, r2, r3
 8002292:	4a09      	ldr	r2, [pc, #36]	; (80022b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002294:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002296:	4b09      	ldr	r3, [pc, #36]	; (80022bc <HAL_RCC_ClockConfig+0x1c8>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4618      	mov	r0, r3
 800229c:	f7fe feee 	bl	800107c <HAL_InitTick>

  return HAL_OK;
 80022a0:	2300      	movs	r3, #0
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	3710      	adds	r7, #16
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	40023c00 	.word	0x40023c00
 80022b0:	40023800 	.word	0x40023800
 80022b4:	080060a4 	.word	0x080060a4
 80022b8:	20000000 	.word	0x20000000
 80022bc:	20000004 	.word	0x20000004

080022c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022c0:	b480      	push	{r7}
 80022c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80022c4:	4b03      	ldr	r3, [pc, #12]	; (80022d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80022c6:	681b      	ldr	r3, [r3, #0]
}
 80022c8:	4618      	mov	r0, r3
 80022ca:	46bd      	mov	sp, r7
 80022cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d0:	4770      	bx	lr
 80022d2:	bf00      	nop
 80022d4:	20000000 	.word	0x20000000

080022d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80022dc:	f7ff fff0 	bl	80022c0 <HAL_RCC_GetHCLKFreq>
 80022e0:	4602      	mov	r2, r0
 80022e2:	4b05      	ldr	r3, [pc, #20]	; (80022f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80022e4:	689b      	ldr	r3, [r3, #8]
 80022e6:	0a9b      	lsrs	r3, r3, #10
 80022e8:	f003 0307 	and.w	r3, r3, #7
 80022ec:	4903      	ldr	r1, [pc, #12]	; (80022fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80022ee:	5ccb      	ldrb	r3, [r1, r3]
 80022f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	bd80      	pop	{r7, pc}
 80022f8:	40023800 	.word	0x40023800
 80022fc:	080060b4 	.word	0x080060b4

08002300 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002304:	f7ff ffdc 	bl	80022c0 <HAL_RCC_GetHCLKFreq>
 8002308:	4602      	mov	r2, r0
 800230a:	4b05      	ldr	r3, [pc, #20]	; (8002320 <HAL_RCC_GetPCLK2Freq+0x20>)
 800230c:	689b      	ldr	r3, [r3, #8]
 800230e:	0b5b      	lsrs	r3, r3, #13
 8002310:	f003 0307 	and.w	r3, r3, #7
 8002314:	4903      	ldr	r1, [pc, #12]	; (8002324 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002316:	5ccb      	ldrb	r3, [r1, r3]
 8002318:	fa22 f303 	lsr.w	r3, r2, r3
}
 800231c:	4618      	mov	r0, r3
 800231e:	bd80      	pop	{r7, pc}
 8002320:	40023800 	.word	0x40023800
 8002324:	080060b4 	.word	0x080060b4

08002328 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002328:	b480      	push	{r7}
 800232a:	b083      	sub	sp, #12
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
 8002330:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	220f      	movs	r2, #15
 8002336:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002338:	4b12      	ldr	r3, [pc, #72]	; (8002384 <HAL_RCC_GetClockConfig+0x5c>)
 800233a:	689b      	ldr	r3, [r3, #8]
 800233c:	f003 0203 	and.w	r2, r3, #3
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002344:	4b0f      	ldr	r3, [pc, #60]	; (8002384 <HAL_RCC_GetClockConfig+0x5c>)
 8002346:	689b      	ldr	r3, [r3, #8]
 8002348:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002350:	4b0c      	ldr	r3, [pc, #48]	; (8002384 <HAL_RCC_GetClockConfig+0x5c>)
 8002352:	689b      	ldr	r3, [r3, #8]
 8002354:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800235c:	4b09      	ldr	r3, [pc, #36]	; (8002384 <HAL_RCC_GetClockConfig+0x5c>)
 800235e:	689b      	ldr	r3, [r3, #8]
 8002360:	08db      	lsrs	r3, r3, #3
 8002362:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800236a:	4b07      	ldr	r3, [pc, #28]	; (8002388 <HAL_RCC_GetClockConfig+0x60>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f003 020f 	and.w	r2, r3, #15
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	601a      	str	r2, [r3, #0]
}
 8002376:	bf00      	nop
 8002378:	370c      	adds	r7, #12
 800237a:	46bd      	mov	sp, r7
 800237c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002380:	4770      	bx	lr
 8002382:	bf00      	nop
 8002384:	40023800 	.word	0x40023800
 8002388:	40023c00 	.word	0x40023c00

0800238c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800238c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002390:	b088      	sub	sp, #32
 8002392:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002394:	2300      	movs	r3, #0
 8002396:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8002398:	2300      	movs	r3, #0
 800239a:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 800239c:	2300      	movs	r3, #0
 800239e:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 80023a0:	2300      	movs	r3, #0
 80023a2:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 80023a4:	2300      	movs	r3, #0
 80023a6:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80023a8:	4bce      	ldr	r3, [pc, #824]	; (80026e4 <HAL_RCC_GetSysClockFreq+0x358>)
 80023aa:	689b      	ldr	r3, [r3, #8]
 80023ac:	f003 030c 	and.w	r3, r3, #12
 80023b0:	2b0c      	cmp	r3, #12
 80023b2:	f200 818d 	bhi.w	80026d0 <HAL_RCC_GetSysClockFreq+0x344>
 80023b6:	a201      	add	r2, pc, #4	; (adr r2, 80023bc <HAL_RCC_GetSysClockFreq+0x30>)
 80023b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023bc:	080023f1 	.word	0x080023f1
 80023c0:	080026d1 	.word	0x080026d1
 80023c4:	080026d1 	.word	0x080026d1
 80023c8:	080026d1 	.word	0x080026d1
 80023cc:	080023f7 	.word	0x080023f7
 80023d0:	080026d1 	.word	0x080026d1
 80023d4:	080026d1 	.word	0x080026d1
 80023d8:	080026d1 	.word	0x080026d1
 80023dc:	080023fd 	.word	0x080023fd
 80023e0:	080026d1 	.word	0x080026d1
 80023e4:	080026d1 	.word	0x080026d1
 80023e8:	080026d1 	.word	0x080026d1
 80023ec:	08002571 	.word	0x08002571
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80023f0:	4bbd      	ldr	r3, [pc, #756]	; (80026e8 <HAL_RCC_GetSysClockFreq+0x35c>)
 80023f2:	61bb      	str	r3, [r7, #24]
       break;
 80023f4:	e16f      	b.n	80026d6 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80023f6:	4bbd      	ldr	r3, [pc, #756]	; (80026ec <HAL_RCC_GetSysClockFreq+0x360>)
 80023f8:	61bb      	str	r3, [r7, #24]
      break;
 80023fa:	e16c      	b.n	80026d6 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80023fc:	4bb9      	ldr	r3, [pc, #740]	; (80026e4 <HAL_RCC_GetSysClockFreq+0x358>)
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002404:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002406:	4bb7      	ldr	r3, [pc, #732]	; (80026e4 <HAL_RCC_GetSysClockFreq+0x358>)
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800240e:	2b00      	cmp	r3, #0
 8002410:	d053      	beq.n	80024ba <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002412:	4bb4      	ldr	r3, [pc, #720]	; (80026e4 <HAL_RCC_GetSysClockFreq+0x358>)
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	099b      	lsrs	r3, r3, #6
 8002418:	461a      	mov	r2, r3
 800241a:	f04f 0300 	mov.w	r3, #0
 800241e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002422:	f04f 0100 	mov.w	r1, #0
 8002426:	ea02 0400 	and.w	r4, r2, r0
 800242a:	603c      	str	r4, [r7, #0]
 800242c:	400b      	ands	r3, r1
 800242e:	607b      	str	r3, [r7, #4]
 8002430:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002434:	4620      	mov	r0, r4
 8002436:	4629      	mov	r1, r5
 8002438:	f04f 0200 	mov.w	r2, #0
 800243c:	f04f 0300 	mov.w	r3, #0
 8002440:	014b      	lsls	r3, r1, #5
 8002442:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002446:	0142      	lsls	r2, r0, #5
 8002448:	4610      	mov	r0, r2
 800244a:	4619      	mov	r1, r3
 800244c:	4623      	mov	r3, r4
 800244e:	1ac0      	subs	r0, r0, r3
 8002450:	462b      	mov	r3, r5
 8002452:	eb61 0103 	sbc.w	r1, r1, r3
 8002456:	f04f 0200 	mov.w	r2, #0
 800245a:	f04f 0300 	mov.w	r3, #0
 800245e:	018b      	lsls	r3, r1, #6
 8002460:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002464:	0182      	lsls	r2, r0, #6
 8002466:	1a12      	subs	r2, r2, r0
 8002468:	eb63 0301 	sbc.w	r3, r3, r1
 800246c:	f04f 0000 	mov.w	r0, #0
 8002470:	f04f 0100 	mov.w	r1, #0
 8002474:	00d9      	lsls	r1, r3, #3
 8002476:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800247a:	00d0      	lsls	r0, r2, #3
 800247c:	4602      	mov	r2, r0
 800247e:	460b      	mov	r3, r1
 8002480:	4621      	mov	r1, r4
 8002482:	1852      	adds	r2, r2, r1
 8002484:	4629      	mov	r1, r5
 8002486:	eb43 0101 	adc.w	r1, r3, r1
 800248a:	460b      	mov	r3, r1
 800248c:	f04f 0000 	mov.w	r0, #0
 8002490:	f04f 0100 	mov.w	r1, #0
 8002494:	0259      	lsls	r1, r3, #9
 8002496:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800249a:	0250      	lsls	r0, r2, #9
 800249c:	4602      	mov	r2, r0
 800249e:	460b      	mov	r3, r1
 80024a0:	4610      	mov	r0, r2
 80024a2:	4619      	mov	r1, r3
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	461a      	mov	r2, r3
 80024a8:	f04f 0300 	mov.w	r3, #0
 80024ac:	f7fd ff00 	bl	80002b0 <__aeabi_uldivmod>
 80024b0:	4602      	mov	r2, r0
 80024b2:	460b      	mov	r3, r1
 80024b4:	4613      	mov	r3, r2
 80024b6:	61fb      	str	r3, [r7, #28]
 80024b8:	e04c      	b.n	8002554 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024ba:	4b8a      	ldr	r3, [pc, #552]	; (80026e4 <HAL_RCC_GetSysClockFreq+0x358>)
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	099b      	lsrs	r3, r3, #6
 80024c0:	461a      	mov	r2, r3
 80024c2:	f04f 0300 	mov.w	r3, #0
 80024c6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80024ca:	f04f 0100 	mov.w	r1, #0
 80024ce:	ea02 0a00 	and.w	sl, r2, r0
 80024d2:	ea03 0b01 	and.w	fp, r3, r1
 80024d6:	4650      	mov	r0, sl
 80024d8:	4659      	mov	r1, fp
 80024da:	f04f 0200 	mov.w	r2, #0
 80024de:	f04f 0300 	mov.w	r3, #0
 80024e2:	014b      	lsls	r3, r1, #5
 80024e4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80024e8:	0142      	lsls	r2, r0, #5
 80024ea:	4610      	mov	r0, r2
 80024ec:	4619      	mov	r1, r3
 80024ee:	ebb0 000a 	subs.w	r0, r0, sl
 80024f2:	eb61 010b 	sbc.w	r1, r1, fp
 80024f6:	f04f 0200 	mov.w	r2, #0
 80024fa:	f04f 0300 	mov.w	r3, #0
 80024fe:	018b      	lsls	r3, r1, #6
 8002500:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002504:	0182      	lsls	r2, r0, #6
 8002506:	1a12      	subs	r2, r2, r0
 8002508:	eb63 0301 	sbc.w	r3, r3, r1
 800250c:	f04f 0000 	mov.w	r0, #0
 8002510:	f04f 0100 	mov.w	r1, #0
 8002514:	00d9      	lsls	r1, r3, #3
 8002516:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800251a:	00d0      	lsls	r0, r2, #3
 800251c:	4602      	mov	r2, r0
 800251e:	460b      	mov	r3, r1
 8002520:	eb12 020a 	adds.w	r2, r2, sl
 8002524:	eb43 030b 	adc.w	r3, r3, fp
 8002528:	f04f 0000 	mov.w	r0, #0
 800252c:	f04f 0100 	mov.w	r1, #0
 8002530:	0299      	lsls	r1, r3, #10
 8002532:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002536:	0290      	lsls	r0, r2, #10
 8002538:	4602      	mov	r2, r0
 800253a:	460b      	mov	r3, r1
 800253c:	4610      	mov	r0, r2
 800253e:	4619      	mov	r1, r3
 8002540:	697b      	ldr	r3, [r7, #20]
 8002542:	461a      	mov	r2, r3
 8002544:	f04f 0300 	mov.w	r3, #0
 8002548:	f7fd feb2 	bl	80002b0 <__aeabi_uldivmod>
 800254c:	4602      	mov	r2, r0
 800254e:	460b      	mov	r3, r1
 8002550:	4613      	mov	r3, r2
 8002552:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002554:	4b63      	ldr	r3, [pc, #396]	; (80026e4 <HAL_RCC_GetSysClockFreq+0x358>)
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	0c1b      	lsrs	r3, r3, #16
 800255a:	f003 0303 	and.w	r3, r3, #3
 800255e:	3301      	adds	r3, #1
 8002560:	005b      	lsls	r3, r3, #1
 8002562:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 8002564:	69fa      	ldr	r2, [r7, #28]
 8002566:	693b      	ldr	r3, [r7, #16]
 8002568:	fbb2 f3f3 	udiv	r3, r2, r3
 800256c:	61bb      	str	r3, [r7, #24]
      break;
 800256e:	e0b2      	b.n	80026d6 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002570:	4b5c      	ldr	r3, [pc, #368]	; (80026e4 <HAL_RCC_GetSysClockFreq+0x358>)
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002578:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800257a:	4b5a      	ldr	r3, [pc, #360]	; (80026e4 <HAL_RCC_GetSysClockFreq+0x358>)
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002582:	2b00      	cmp	r3, #0
 8002584:	d04d      	beq.n	8002622 <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002586:	4b57      	ldr	r3, [pc, #348]	; (80026e4 <HAL_RCC_GetSysClockFreq+0x358>)
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	099b      	lsrs	r3, r3, #6
 800258c:	461a      	mov	r2, r3
 800258e:	f04f 0300 	mov.w	r3, #0
 8002592:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002596:	f04f 0100 	mov.w	r1, #0
 800259a:	ea02 0800 	and.w	r8, r2, r0
 800259e:	ea03 0901 	and.w	r9, r3, r1
 80025a2:	4640      	mov	r0, r8
 80025a4:	4649      	mov	r1, r9
 80025a6:	f04f 0200 	mov.w	r2, #0
 80025aa:	f04f 0300 	mov.w	r3, #0
 80025ae:	014b      	lsls	r3, r1, #5
 80025b0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80025b4:	0142      	lsls	r2, r0, #5
 80025b6:	4610      	mov	r0, r2
 80025b8:	4619      	mov	r1, r3
 80025ba:	ebb0 0008 	subs.w	r0, r0, r8
 80025be:	eb61 0109 	sbc.w	r1, r1, r9
 80025c2:	f04f 0200 	mov.w	r2, #0
 80025c6:	f04f 0300 	mov.w	r3, #0
 80025ca:	018b      	lsls	r3, r1, #6
 80025cc:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80025d0:	0182      	lsls	r2, r0, #6
 80025d2:	1a12      	subs	r2, r2, r0
 80025d4:	eb63 0301 	sbc.w	r3, r3, r1
 80025d8:	f04f 0000 	mov.w	r0, #0
 80025dc:	f04f 0100 	mov.w	r1, #0
 80025e0:	00d9      	lsls	r1, r3, #3
 80025e2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80025e6:	00d0      	lsls	r0, r2, #3
 80025e8:	4602      	mov	r2, r0
 80025ea:	460b      	mov	r3, r1
 80025ec:	eb12 0208 	adds.w	r2, r2, r8
 80025f0:	eb43 0309 	adc.w	r3, r3, r9
 80025f4:	f04f 0000 	mov.w	r0, #0
 80025f8:	f04f 0100 	mov.w	r1, #0
 80025fc:	0259      	lsls	r1, r3, #9
 80025fe:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002602:	0250      	lsls	r0, r2, #9
 8002604:	4602      	mov	r2, r0
 8002606:	460b      	mov	r3, r1
 8002608:	4610      	mov	r0, r2
 800260a:	4619      	mov	r1, r3
 800260c:	697b      	ldr	r3, [r7, #20]
 800260e:	461a      	mov	r2, r3
 8002610:	f04f 0300 	mov.w	r3, #0
 8002614:	f7fd fe4c 	bl	80002b0 <__aeabi_uldivmod>
 8002618:	4602      	mov	r2, r0
 800261a:	460b      	mov	r3, r1
 800261c:	4613      	mov	r3, r2
 800261e:	61fb      	str	r3, [r7, #28]
 8002620:	e04a      	b.n	80026b8 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002622:	4b30      	ldr	r3, [pc, #192]	; (80026e4 <HAL_RCC_GetSysClockFreq+0x358>)
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	099b      	lsrs	r3, r3, #6
 8002628:	461a      	mov	r2, r3
 800262a:	f04f 0300 	mov.w	r3, #0
 800262e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002632:	f04f 0100 	mov.w	r1, #0
 8002636:	ea02 0400 	and.w	r4, r2, r0
 800263a:	ea03 0501 	and.w	r5, r3, r1
 800263e:	4620      	mov	r0, r4
 8002640:	4629      	mov	r1, r5
 8002642:	f04f 0200 	mov.w	r2, #0
 8002646:	f04f 0300 	mov.w	r3, #0
 800264a:	014b      	lsls	r3, r1, #5
 800264c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002650:	0142      	lsls	r2, r0, #5
 8002652:	4610      	mov	r0, r2
 8002654:	4619      	mov	r1, r3
 8002656:	1b00      	subs	r0, r0, r4
 8002658:	eb61 0105 	sbc.w	r1, r1, r5
 800265c:	f04f 0200 	mov.w	r2, #0
 8002660:	f04f 0300 	mov.w	r3, #0
 8002664:	018b      	lsls	r3, r1, #6
 8002666:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800266a:	0182      	lsls	r2, r0, #6
 800266c:	1a12      	subs	r2, r2, r0
 800266e:	eb63 0301 	sbc.w	r3, r3, r1
 8002672:	f04f 0000 	mov.w	r0, #0
 8002676:	f04f 0100 	mov.w	r1, #0
 800267a:	00d9      	lsls	r1, r3, #3
 800267c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002680:	00d0      	lsls	r0, r2, #3
 8002682:	4602      	mov	r2, r0
 8002684:	460b      	mov	r3, r1
 8002686:	1912      	adds	r2, r2, r4
 8002688:	eb45 0303 	adc.w	r3, r5, r3
 800268c:	f04f 0000 	mov.w	r0, #0
 8002690:	f04f 0100 	mov.w	r1, #0
 8002694:	0299      	lsls	r1, r3, #10
 8002696:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800269a:	0290      	lsls	r0, r2, #10
 800269c:	4602      	mov	r2, r0
 800269e:	460b      	mov	r3, r1
 80026a0:	4610      	mov	r0, r2
 80026a2:	4619      	mov	r1, r3
 80026a4:	697b      	ldr	r3, [r7, #20]
 80026a6:	461a      	mov	r2, r3
 80026a8:	f04f 0300 	mov.w	r3, #0
 80026ac:	f7fd fe00 	bl	80002b0 <__aeabi_uldivmod>
 80026b0:	4602      	mov	r2, r0
 80026b2:	460b      	mov	r3, r1
 80026b4:	4613      	mov	r3, r2
 80026b6:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80026b8:	4b0a      	ldr	r3, [pc, #40]	; (80026e4 <HAL_RCC_GetSysClockFreq+0x358>)
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	0f1b      	lsrs	r3, r3, #28
 80026be:	f003 0307 	and.w	r3, r3, #7
 80026c2:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 80026c4:	69fa      	ldr	r2, [r7, #28]
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80026cc:	61bb      	str	r3, [r7, #24]
      break;
 80026ce:	e002      	b.n	80026d6 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80026d0:	4b05      	ldr	r3, [pc, #20]	; (80026e8 <HAL_RCC_GetSysClockFreq+0x35c>)
 80026d2:	61bb      	str	r3, [r7, #24]
      break;
 80026d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80026d6:	69bb      	ldr	r3, [r7, #24]
}
 80026d8:	4618      	mov	r0, r3
 80026da:	3720      	adds	r7, #32
 80026dc:	46bd      	mov	sp, r7
 80026de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80026e2:	bf00      	nop
 80026e4:	40023800 	.word	0x40023800
 80026e8:	00f42400 	.word	0x00f42400
 80026ec:	007a1200 	.word	0x007a1200

080026f0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b086      	sub	sp, #24
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d101      	bne.n	8002702 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80026fe:	2301      	movs	r3, #1
 8002700:	e28d      	b.n	8002c1e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f003 0301 	and.w	r3, r3, #1
 800270a:	2b00      	cmp	r3, #0
 800270c:	f000 8083 	beq.w	8002816 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002710:	4b94      	ldr	r3, [pc, #592]	; (8002964 <HAL_RCC_OscConfig+0x274>)
 8002712:	689b      	ldr	r3, [r3, #8]
 8002714:	f003 030c 	and.w	r3, r3, #12
 8002718:	2b04      	cmp	r3, #4
 800271a:	d019      	beq.n	8002750 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800271c:	4b91      	ldr	r3, [pc, #580]	; (8002964 <HAL_RCC_OscConfig+0x274>)
 800271e:	689b      	ldr	r3, [r3, #8]
 8002720:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002724:	2b08      	cmp	r3, #8
 8002726:	d106      	bne.n	8002736 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002728:	4b8e      	ldr	r3, [pc, #568]	; (8002964 <HAL_RCC_OscConfig+0x274>)
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002730:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002734:	d00c      	beq.n	8002750 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002736:	4b8b      	ldr	r3, [pc, #556]	; (8002964 <HAL_RCC_OscConfig+0x274>)
 8002738:	689b      	ldr	r3, [r3, #8]
 800273a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800273e:	2b0c      	cmp	r3, #12
 8002740:	d112      	bne.n	8002768 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002742:	4b88      	ldr	r3, [pc, #544]	; (8002964 <HAL_RCC_OscConfig+0x274>)
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800274a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800274e:	d10b      	bne.n	8002768 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002750:	4b84      	ldr	r3, [pc, #528]	; (8002964 <HAL_RCC_OscConfig+0x274>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002758:	2b00      	cmp	r3, #0
 800275a:	d05b      	beq.n	8002814 <HAL_RCC_OscConfig+0x124>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d157      	bne.n	8002814 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002764:	2301      	movs	r3, #1
 8002766:	e25a      	b.n	8002c1e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002770:	d106      	bne.n	8002780 <HAL_RCC_OscConfig+0x90>
 8002772:	4b7c      	ldr	r3, [pc, #496]	; (8002964 <HAL_RCC_OscConfig+0x274>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4a7b      	ldr	r2, [pc, #492]	; (8002964 <HAL_RCC_OscConfig+0x274>)
 8002778:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800277c:	6013      	str	r3, [r2, #0]
 800277e:	e01d      	b.n	80027bc <HAL_RCC_OscConfig+0xcc>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002788:	d10c      	bne.n	80027a4 <HAL_RCC_OscConfig+0xb4>
 800278a:	4b76      	ldr	r3, [pc, #472]	; (8002964 <HAL_RCC_OscConfig+0x274>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4a75      	ldr	r2, [pc, #468]	; (8002964 <HAL_RCC_OscConfig+0x274>)
 8002790:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002794:	6013      	str	r3, [r2, #0]
 8002796:	4b73      	ldr	r3, [pc, #460]	; (8002964 <HAL_RCC_OscConfig+0x274>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4a72      	ldr	r2, [pc, #456]	; (8002964 <HAL_RCC_OscConfig+0x274>)
 800279c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027a0:	6013      	str	r3, [r2, #0]
 80027a2:	e00b      	b.n	80027bc <HAL_RCC_OscConfig+0xcc>
 80027a4:	4b6f      	ldr	r3, [pc, #444]	; (8002964 <HAL_RCC_OscConfig+0x274>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a6e      	ldr	r2, [pc, #440]	; (8002964 <HAL_RCC_OscConfig+0x274>)
 80027aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027ae:	6013      	str	r3, [r2, #0]
 80027b0:	4b6c      	ldr	r3, [pc, #432]	; (8002964 <HAL_RCC_OscConfig+0x274>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a6b      	ldr	r2, [pc, #428]	; (8002964 <HAL_RCC_OscConfig+0x274>)
 80027b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d013      	beq.n	80027ec <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027c4:	f7fe fd7a 	bl	80012bc <HAL_GetTick>
 80027c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027ca:	e008      	b.n	80027de <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027cc:	f7fe fd76 	bl	80012bc <HAL_GetTick>
 80027d0:	4602      	mov	r2, r0
 80027d2:	693b      	ldr	r3, [r7, #16]
 80027d4:	1ad3      	subs	r3, r2, r3
 80027d6:	2b64      	cmp	r3, #100	; 0x64
 80027d8:	d901      	bls.n	80027de <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80027da:	2303      	movs	r3, #3
 80027dc:	e21f      	b.n	8002c1e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027de:	4b61      	ldr	r3, [pc, #388]	; (8002964 <HAL_RCC_OscConfig+0x274>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d0f0      	beq.n	80027cc <HAL_RCC_OscConfig+0xdc>
 80027ea:	e014      	b.n	8002816 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027ec:	f7fe fd66 	bl	80012bc <HAL_GetTick>
 80027f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027f2:	e008      	b.n	8002806 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027f4:	f7fe fd62 	bl	80012bc <HAL_GetTick>
 80027f8:	4602      	mov	r2, r0
 80027fa:	693b      	ldr	r3, [r7, #16]
 80027fc:	1ad3      	subs	r3, r2, r3
 80027fe:	2b64      	cmp	r3, #100	; 0x64
 8002800:	d901      	bls.n	8002806 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002802:	2303      	movs	r3, #3
 8002804:	e20b      	b.n	8002c1e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002806:	4b57      	ldr	r3, [pc, #348]	; (8002964 <HAL_RCC_OscConfig+0x274>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800280e:	2b00      	cmp	r3, #0
 8002810:	d1f0      	bne.n	80027f4 <HAL_RCC_OscConfig+0x104>
 8002812:	e000      	b.n	8002816 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002814:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f003 0302 	and.w	r3, r3, #2
 800281e:	2b00      	cmp	r3, #0
 8002820:	d06f      	beq.n	8002902 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002822:	4b50      	ldr	r3, [pc, #320]	; (8002964 <HAL_RCC_OscConfig+0x274>)
 8002824:	689b      	ldr	r3, [r3, #8]
 8002826:	f003 030c 	and.w	r3, r3, #12
 800282a:	2b00      	cmp	r3, #0
 800282c:	d017      	beq.n	800285e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800282e:	4b4d      	ldr	r3, [pc, #308]	; (8002964 <HAL_RCC_OscConfig+0x274>)
 8002830:	689b      	ldr	r3, [r3, #8]
 8002832:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002836:	2b08      	cmp	r3, #8
 8002838:	d105      	bne.n	8002846 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800283a:	4b4a      	ldr	r3, [pc, #296]	; (8002964 <HAL_RCC_OscConfig+0x274>)
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002842:	2b00      	cmp	r3, #0
 8002844:	d00b      	beq.n	800285e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002846:	4b47      	ldr	r3, [pc, #284]	; (8002964 <HAL_RCC_OscConfig+0x274>)
 8002848:	689b      	ldr	r3, [r3, #8]
 800284a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800284e:	2b0c      	cmp	r3, #12
 8002850:	d11c      	bne.n	800288c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002852:	4b44      	ldr	r3, [pc, #272]	; (8002964 <HAL_RCC_OscConfig+0x274>)
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800285a:	2b00      	cmp	r3, #0
 800285c:	d116      	bne.n	800288c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800285e:	4b41      	ldr	r3, [pc, #260]	; (8002964 <HAL_RCC_OscConfig+0x274>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f003 0302 	and.w	r3, r3, #2
 8002866:	2b00      	cmp	r3, #0
 8002868:	d005      	beq.n	8002876 <HAL_RCC_OscConfig+0x186>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	68db      	ldr	r3, [r3, #12]
 800286e:	2b01      	cmp	r3, #1
 8002870:	d001      	beq.n	8002876 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002872:	2301      	movs	r3, #1
 8002874:	e1d3      	b.n	8002c1e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002876:	4b3b      	ldr	r3, [pc, #236]	; (8002964 <HAL_RCC_OscConfig+0x274>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	691b      	ldr	r3, [r3, #16]
 8002882:	00db      	lsls	r3, r3, #3
 8002884:	4937      	ldr	r1, [pc, #220]	; (8002964 <HAL_RCC_OscConfig+0x274>)
 8002886:	4313      	orrs	r3, r2
 8002888:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800288a:	e03a      	b.n	8002902 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	68db      	ldr	r3, [r3, #12]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d020      	beq.n	80028d6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002894:	4b34      	ldr	r3, [pc, #208]	; (8002968 <HAL_RCC_OscConfig+0x278>)
 8002896:	2201      	movs	r2, #1
 8002898:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800289a:	f7fe fd0f 	bl	80012bc <HAL_GetTick>
 800289e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028a0:	e008      	b.n	80028b4 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028a2:	f7fe fd0b 	bl	80012bc <HAL_GetTick>
 80028a6:	4602      	mov	r2, r0
 80028a8:	693b      	ldr	r3, [r7, #16]
 80028aa:	1ad3      	subs	r3, r2, r3
 80028ac:	2b02      	cmp	r3, #2
 80028ae:	d901      	bls.n	80028b4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80028b0:	2303      	movs	r3, #3
 80028b2:	e1b4      	b.n	8002c1e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028b4:	4b2b      	ldr	r3, [pc, #172]	; (8002964 <HAL_RCC_OscConfig+0x274>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f003 0302 	and.w	r3, r3, #2
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d0f0      	beq.n	80028a2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028c0:	4b28      	ldr	r3, [pc, #160]	; (8002964 <HAL_RCC_OscConfig+0x274>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	691b      	ldr	r3, [r3, #16]
 80028cc:	00db      	lsls	r3, r3, #3
 80028ce:	4925      	ldr	r1, [pc, #148]	; (8002964 <HAL_RCC_OscConfig+0x274>)
 80028d0:	4313      	orrs	r3, r2
 80028d2:	600b      	str	r3, [r1, #0]
 80028d4:	e015      	b.n	8002902 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028d6:	4b24      	ldr	r3, [pc, #144]	; (8002968 <HAL_RCC_OscConfig+0x278>)
 80028d8:	2200      	movs	r2, #0
 80028da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028dc:	f7fe fcee 	bl	80012bc <HAL_GetTick>
 80028e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028e2:	e008      	b.n	80028f6 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028e4:	f7fe fcea 	bl	80012bc <HAL_GetTick>
 80028e8:	4602      	mov	r2, r0
 80028ea:	693b      	ldr	r3, [r7, #16]
 80028ec:	1ad3      	subs	r3, r2, r3
 80028ee:	2b02      	cmp	r3, #2
 80028f0:	d901      	bls.n	80028f6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80028f2:	2303      	movs	r3, #3
 80028f4:	e193      	b.n	8002c1e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028f6:	4b1b      	ldr	r3, [pc, #108]	; (8002964 <HAL_RCC_OscConfig+0x274>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f003 0302 	and.w	r3, r3, #2
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d1f0      	bne.n	80028e4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f003 0308 	and.w	r3, r3, #8
 800290a:	2b00      	cmp	r3, #0
 800290c:	d036      	beq.n	800297c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	695b      	ldr	r3, [r3, #20]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d016      	beq.n	8002944 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002916:	4b15      	ldr	r3, [pc, #84]	; (800296c <HAL_RCC_OscConfig+0x27c>)
 8002918:	2201      	movs	r2, #1
 800291a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800291c:	f7fe fcce 	bl	80012bc <HAL_GetTick>
 8002920:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002922:	e008      	b.n	8002936 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002924:	f7fe fcca 	bl	80012bc <HAL_GetTick>
 8002928:	4602      	mov	r2, r0
 800292a:	693b      	ldr	r3, [r7, #16]
 800292c:	1ad3      	subs	r3, r2, r3
 800292e:	2b02      	cmp	r3, #2
 8002930:	d901      	bls.n	8002936 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002932:	2303      	movs	r3, #3
 8002934:	e173      	b.n	8002c1e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002936:	4b0b      	ldr	r3, [pc, #44]	; (8002964 <HAL_RCC_OscConfig+0x274>)
 8002938:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800293a:	f003 0302 	and.w	r3, r3, #2
 800293e:	2b00      	cmp	r3, #0
 8002940:	d0f0      	beq.n	8002924 <HAL_RCC_OscConfig+0x234>
 8002942:	e01b      	b.n	800297c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002944:	4b09      	ldr	r3, [pc, #36]	; (800296c <HAL_RCC_OscConfig+0x27c>)
 8002946:	2200      	movs	r2, #0
 8002948:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800294a:	f7fe fcb7 	bl	80012bc <HAL_GetTick>
 800294e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002950:	e00e      	b.n	8002970 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002952:	f7fe fcb3 	bl	80012bc <HAL_GetTick>
 8002956:	4602      	mov	r2, r0
 8002958:	693b      	ldr	r3, [r7, #16]
 800295a:	1ad3      	subs	r3, r2, r3
 800295c:	2b02      	cmp	r3, #2
 800295e:	d907      	bls.n	8002970 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002960:	2303      	movs	r3, #3
 8002962:	e15c      	b.n	8002c1e <HAL_RCC_OscConfig+0x52e>
 8002964:	40023800 	.word	0x40023800
 8002968:	42470000 	.word	0x42470000
 800296c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002970:	4b8a      	ldr	r3, [pc, #552]	; (8002b9c <HAL_RCC_OscConfig+0x4ac>)
 8002972:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002974:	f003 0302 	and.w	r3, r3, #2
 8002978:	2b00      	cmp	r3, #0
 800297a:	d1ea      	bne.n	8002952 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f003 0304 	and.w	r3, r3, #4
 8002984:	2b00      	cmp	r3, #0
 8002986:	f000 8097 	beq.w	8002ab8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800298a:	2300      	movs	r3, #0
 800298c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800298e:	4b83      	ldr	r3, [pc, #524]	; (8002b9c <HAL_RCC_OscConfig+0x4ac>)
 8002990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002992:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002996:	2b00      	cmp	r3, #0
 8002998:	d10f      	bne.n	80029ba <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800299a:	2300      	movs	r3, #0
 800299c:	60bb      	str	r3, [r7, #8]
 800299e:	4b7f      	ldr	r3, [pc, #508]	; (8002b9c <HAL_RCC_OscConfig+0x4ac>)
 80029a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a2:	4a7e      	ldr	r2, [pc, #504]	; (8002b9c <HAL_RCC_OscConfig+0x4ac>)
 80029a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029a8:	6413      	str	r3, [r2, #64]	; 0x40
 80029aa:	4b7c      	ldr	r3, [pc, #496]	; (8002b9c <HAL_RCC_OscConfig+0x4ac>)
 80029ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029b2:	60bb      	str	r3, [r7, #8]
 80029b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029b6:	2301      	movs	r3, #1
 80029b8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029ba:	4b79      	ldr	r3, [pc, #484]	; (8002ba0 <HAL_RCC_OscConfig+0x4b0>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d118      	bne.n	80029f8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029c6:	4b76      	ldr	r3, [pc, #472]	; (8002ba0 <HAL_RCC_OscConfig+0x4b0>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a75      	ldr	r2, [pc, #468]	; (8002ba0 <HAL_RCC_OscConfig+0x4b0>)
 80029cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029d2:	f7fe fc73 	bl	80012bc <HAL_GetTick>
 80029d6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029d8:	e008      	b.n	80029ec <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029da:	f7fe fc6f 	bl	80012bc <HAL_GetTick>
 80029de:	4602      	mov	r2, r0
 80029e0:	693b      	ldr	r3, [r7, #16]
 80029e2:	1ad3      	subs	r3, r2, r3
 80029e4:	2b02      	cmp	r3, #2
 80029e6:	d901      	bls.n	80029ec <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80029e8:	2303      	movs	r3, #3
 80029ea:	e118      	b.n	8002c1e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029ec:	4b6c      	ldr	r3, [pc, #432]	; (8002ba0 <HAL_RCC_OscConfig+0x4b0>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d0f0      	beq.n	80029da <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	689b      	ldr	r3, [r3, #8]
 80029fc:	2b01      	cmp	r3, #1
 80029fe:	d106      	bne.n	8002a0e <HAL_RCC_OscConfig+0x31e>
 8002a00:	4b66      	ldr	r3, [pc, #408]	; (8002b9c <HAL_RCC_OscConfig+0x4ac>)
 8002a02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a04:	4a65      	ldr	r2, [pc, #404]	; (8002b9c <HAL_RCC_OscConfig+0x4ac>)
 8002a06:	f043 0301 	orr.w	r3, r3, #1
 8002a0a:	6713      	str	r3, [r2, #112]	; 0x70
 8002a0c:	e01c      	b.n	8002a48 <HAL_RCC_OscConfig+0x358>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	689b      	ldr	r3, [r3, #8]
 8002a12:	2b05      	cmp	r3, #5
 8002a14:	d10c      	bne.n	8002a30 <HAL_RCC_OscConfig+0x340>
 8002a16:	4b61      	ldr	r3, [pc, #388]	; (8002b9c <HAL_RCC_OscConfig+0x4ac>)
 8002a18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a1a:	4a60      	ldr	r2, [pc, #384]	; (8002b9c <HAL_RCC_OscConfig+0x4ac>)
 8002a1c:	f043 0304 	orr.w	r3, r3, #4
 8002a20:	6713      	str	r3, [r2, #112]	; 0x70
 8002a22:	4b5e      	ldr	r3, [pc, #376]	; (8002b9c <HAL_RCC_OscConfig+0x4ac>)
 8002a24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a26:	4a5d      	ldr	r2, [pc, #372]	; (8002b9c <HAL_RCC_OscConfig+0x4ac>)
 8002a28:	f043 0301 	orr.w	r3, r3, #1
 8002a2c:	6713      	str	r3, [r2, #112]	; 0x70
 8002a2e:	e00b      	b.n	8002a48 <HAL_RCC_OscConfig+0x358>
 8002a30:	4b5a      	ldr	r3, [pc, #360]	; (8002b9c <HAL_RCC_OscConfig+0x4ac>)
 8002a32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a34:	4a59      	ldr	r2, [pc, #356]	; (8002b9c <HAL_RCC_OscConfig+0x4ac>)
 8002a36:	f023 0301 	bic.w	r3, r3, #1
 8002a3a:	6713      	str	r3, [r2, #112]	; 0x70
 8002a3c:	4b57      	ldr	r3, [pc, #348]	; (8002b9c <HAL_RCC_OscConfig+0x4ac>)
 8002a3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a40:	4a56      	ldr	r2, [pc, #344]	; (8002b9c <HAL_RCC_OscConfig+0x4ac>)
 8002a42:	f023 0304 	bic.w	r3, r3, #4
 8002a46:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	689b      	ldr	r3, [r3, #8]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d015      	beq.n	8002a7c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a50:	f7fe fc34 	bl	80012bc <HAL_GetTick>
 8002a54:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a56:	e00a      	b.n	8002a6e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a58:	f7fe fc30 	bl	80012bc <HAL_GetTick>
 8002a5c:	4602      	mov	r2, r0
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	1ad3      	subs	r3, r2, r3
 8002a62:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d901      	bls.n	8002a6e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002a6a:	2303      	movs	r3, #3
 8002a6c:	e0d7      	b.n	8002c1e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a6e:	4b4b      	ldr	r3, [pc, #300]	; (8002b9c <HAL_RCC_OscConfig+0x4ac>)
 8002a70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a72:	f003 0302 	and.w	r3, r3, #2
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d0ee      	beq.n	8002a58 <HAL_RCC_OscConfig+0x368>
 8002a7a:	e014      	b.n	8002aa6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a7c:	f7fe fc1e 	bl	80012bc <HAL_GetTick>
 8002a80:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a82:	e00a      	b.n	8002a9a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a84:	f7fe fc1a 	bl	80012bc <HAL_GetTick>
 8002a88:	4602      	mov	r2, r0
 8002a8a:	693b      	ldr	r3, [r7, #16]
 8002a8c:	1ad3      	subs	r3, r2, r3
 8002a8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d901      	bls.n	8002a9a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002a96:	2303      	movs	r3, #3
 8002a98:	e0c1      	b.n	8002c1e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a9a:	4b40      	ldr	r3, [pc, #256]	; (8002b9c <HAL_RCC_OscConfig+0x4ac>)
 8002a9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a9e:	f003 0302 	and.w	r3, r3, #2
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d1ee      	bne.n	8002a84 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002aa6:	7dfb      	ldrb	r3, [r7, #23]
 8002aa8:	2b01      	cmp	r3, #1
 8002aaa:	d105      	bne.n	8002ab8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002aac:	4b3b      	ldr	r3, [pc, #236]	; (8002b9c <HAL_RCC_OscConfig+0x4ac>)
 8002aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab0:	4a3a      	ldr	r2, [pc, #232]	; (8002b9c <HAL_RCC_OscConfig+0x4ac>)
 8002ab2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ab6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	699b      	ldr	r3, [r3, #24]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	f000 80ad 	beq.w	8002c1c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002ac2:	4b36      	ldr	r3, [pc, #216]	; (8002b9c <HAL_RCC_OscConfig+0x4ac>)
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	f003 030c 	and.w	r3, r3, #12
 8002aca:	2b08      	cmp	r3, #8
 8002acc:	d060      	beq.n	8002b90 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	699b      	ldr	r3, [r3, #24]
 8002ad2:	2b02      	cmp	r3, #2
 8002ad4:	d145      	bne.n	8002b62 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ad6:	4b33      	ldr	r3, [pc, #204]	; (8002ba4 <HAL_RCC_OscConfig+0x4b4>)
 8002ad8:	2200      	movs	r2, #0
 8002ada:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002adc:	f7fe fbee 	bl	80012bc <HAL_GetTick>
 8002ae0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ae2:	e008      	b.n	8002af6 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ae4:	f7fe fbea 	bl	80012bc <HAL_GetTick>
 8002ae8:	4602      	mov	r2, r0
 8002aea:	693b      	ldr	r3, [r7, #16]
 8002aec:	1ad3      	subs	r3, r2, r3
 8002aee:	2b02      	cmp	r3, #2
 8002af0:	d901      	bls.n	8002af6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002af2:	2303      	movs	r3, #3
 8002af4:	e093      	b.n	8002c1e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002af6:	4b29      	ldr	r3, [pc, #164]	; (8002b9c <HAL_RCC_OscConfig+0x4ac>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d1f0      	bne.n	8002ae4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	69da      	ldr	r2, [r3, #28]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6a1b      	ldr	r3, [r3, #32]
 8002b0a:	431a      	orrs	r2, r3
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b10:	019b      	lsls	r3, r3, #6
 8002b12:	431a      	orrs	r2, r3
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b18:	085b      	lsrs	r3, r3, #1
 8002b1a:	3b01      	subs	r3, #1
 8002b1c:	041b      	lsls	r3, r3, #16
 8002b1e:	431a      	orrs	r2, r3
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b24:	061b      	lsls	r3, r3, #24
 8002b26:	431a      	orrs	r2, r3
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b2c:	071b      	lsls	r3, r3, #28
 8002b2e:	491b      	ldr	r1, [pc, #108]	; (8002b9c <HAL_RCC_OscConfig+0x4ac>)
 8002b30:	4313      	orrs	r3, r2
 8002b32:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b34:	4b1b      	ldr	r3, [pc, #108]	; (8002ba4 <HAL_RCC_OscConfig+0x4b4>)
 8002b36:	2201      	movs	r2, #1
 8002b38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b3a:	f7fe fbbf 	bl	80012bc <HAL_GetTick>
 8002b3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b40:	e008      	b.n	8002b54 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b42:	f7fe fbbb 	bl	80012bc <HAL_GetTick>
 8002b46:	4602      	mov	r2, r0
 8002b48:	693b      	ldr	r3, [r7, #16]
 8002b4a:	1ad3      	subs	r3, r2, r3
 8002b4c:	2b02      	cmp	r3, #2
 8002b4e:	d901      	bls.n	8002b54 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002b50:	2303      	movs	r3, #3
 8002b52:	e064      	b.n	8002c1e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b54:	4b11      	ldr	r3, [pc, #68]	; (8002b9c <HAL_RCC_OscConfig+0x4ac>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d0f0      	beq.n	8002b42 <HAL_RCC_OscConfig+0x452>
 8002b60:	e05c      	b.n	8002c1c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b62:	4b10      	ldr	r3, [pc, #64]	; (8002ba4 <HAL_RCC_OscConfig+0x4b4>)
 8002b64:	2200      	movs	r2, #0
 8002b66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b68:	f7fe fba8 	bl	80012bc <HAL_GetTick>
 8002b6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b6e:	e008      	b.n	8002b82 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b70:	f7fe fba4 	bl	80012bc <HAL_GetTick>
 8002b74:	4602      	mov	r2, r0
 8002b76:	693b      	ldr	r3, [r7, #16]
 8002b78:	1ad3      	subs	r3, r2, r3
 8002b7a:	2b02      	cmp	r3, #2
 8002b7c:	d901      	bls.n	8002b82 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002b7e:	2303      	movs	r3, #3
 8002b80:	e04d      	b.n	8002c1e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b82:	4b06      	ldr	r3, [pc, #24]	; (8002b9c <HAL_RCC_OscConfig+0x4ac>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d1f0      	bne.n	8002b70 <HAL_RCC_OscConfig+0x480>
 8002b8e:	e045      	b.n	8002c1c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	699b      	ldr	r3, [r3, #24]
 8002b94:	2b01      	cmp	r3, #1
 8002b96:	d107      	bne.n	8002ba8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	e040      	b.n	8002c1e <HAL_RCC_OscConfig+0x52e>
 8002b9c:	40023800 	.word	0x40023800
 8002ba0:	40007000 	.word	0x40007000
 8002ba4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002ba8:	4b1f      	ldr	r3, [pc, #124]	; (8002c28 <HAL_RCC_OscConfig+0x538>)
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	699b      	ldr	r3, [r3, #24]
 8002bb2:	2b01      	cmp	r3, #1
 8002bb4:	d030      	beq.n	8002c18 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002bc0:	429a      	cmp	r2, r3
 8002bc2:	d129      	bne.n	8002c18 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bce:	429a      	cmp	r2, r3
 8002bd0:	d122      	bne.n	8002c18 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002bd2:	68fa      	ldr	r2, [r7, #12]
 8002bd4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002bd8:	4013      	ands	r3, r2
 8002bda:	687a      	ldr	r2, [r7, #4]
 8002bdc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002bde:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d119      	bne.n	8002c18 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bee:	085b      	lsrs	r3, r3, #1
 8002bf0:	3b01      	subs	r3, #1
 8002bf2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002bf4:	429a      	cmp	r2, r3
 8002bf6:	d10f      	bne.n	8002c18 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c02:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c04:	429a      	cmp	r2, r3
 8002c06:	d107      	bne.n	8002c18 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c12:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c14:	429a      	cmp	r2, r3
 8002c16:	d001      	beq.n	8002c1c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002c18:	2301      	movs	r3, #1
 8002c1a:	e000      	b.n	8002c1e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002c1c:	2300      	movs	r3, #0
}
 8002c1e:	4618      	mov	r0, r3
 8002c20:	3718      	adds	r7, #24
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}
 8002c26:	bf00      	nop
 8002c28:	40023800 	.word	0x40023800

08002c2c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b082      	sub	sp, #8
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d101      	bne.n	8002c3e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	e041      	b.n	8002cc2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c44:	b2db      	uxtb	r3, r3
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d106      	bne.n	8002c58 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002c52:	6878      	ldr	r0, [r7, #4]
 8002c54:	f7fe f910 	bl	8000e78 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2202      	movs	r2, #2
 8002c5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681a      	ldr	r2, [r3, #0]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	3304      	adds	r3, #4
 8002c68:	4619      	mov	r1, r3
 8002c6a:	4610      	mov	r0, r2
 8002c6c:	f000 fbb2 	bl	80033d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2201      	movs	r2, #1
 8002c74:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2201      	movs	r2, #1
 8002c7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2201      	movs	r2, #1
 8002c84:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2201      	movs	r2, #1
 8002c8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2201      	movs	r2, #1
 8002c94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2201      	movs	r2, #1
 8002c9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2201      	movs	r2, #1
 8002cac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2201      	movs	r2, #1
 8002cb4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2201      	movs	r2, #1
 8002cbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002cc0:	2300      	movs	r3, #0
}
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	3708      	adds	r7, #8
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}
	...

08002ccc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b085      	sub	sp, #20
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cda:	b2db      	uxtb	r3, r3
 8002cdc:	2b01      	cmp	r3, #1
 8002cde:	d001      	beq.n	8002ce4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	e04e      	b.n	8002d82 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2202      	movs	r2, #2
 8002ce8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	68da      	ldr	r2, [r3, #12]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f042 0201 	orr.w	r2, r2, #1
 8002cfa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a23      	ldr	r2, [pc, #140]	; (8002d90 <HAL_TIM_Base_Start_IT+0xc4>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d022      	beq.n	8002d4c <HAL_TIM_Base_Start_IT+0x80>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d0e:	d01d      	beq.n	8002d4c <HAL_TIM_Base_Start_IT+0x80>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a1f      	ldr	r2, [pc, #124]	; (8002d94 <HAL_TIM_Base_Start_IT+0xc8>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d018      	beq.n	8002d4c <HAL_TIM_Base_Start_IT+0x80>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4a1e      	ldr	r2, [pc, #120]	; (8002d98 <HAL_TIM_Base_Start_IT+0xcc>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d013      	beq.n	8002d4c <HAL_TIM_Base_Start_IT+0x80>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a1c      	ldr	r2, [pc, #112]	; (8002d9c <HAL_TIM_Base_Start_IT+0xd0>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d00e      	beq.n	8002d4c <HAL_TIM_Base_Start_IT+0x80>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a1b      	ldr	r2, [pc, #108]	; (8002da0 <HAL_TIM_Base_Start_IT+0xd4>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d009      	beq.n	8002d4c <HAL_TIM_Base_Start_IT+0x80>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a19      	ldr	r2, [pc, #100]	; (8002da4 <HAL_TIM_Base_Start_IT+0xd8>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d004      	beq.n	8002d4c <HAL_TIM_Base_Start_IT+0x80>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a18      	ldr	r2, [pc, #96]	; (8002da8 <HAL_TIM_Base_Start_IT+0xdc>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d111      	bne.n	8002d70 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	689b      	ldr	r3, [r3, #8]
 8002d52:	f003 0307 	and.w	r3, r3, #7
 8002d56:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	2b06      	cmp	r3, #6
 8002d5c:	d010      	beq.n	8002d80 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	681a      	ldr	r2, [r3, #0]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f042 0201 	orr.w	r2, r2, #1
 8002d6c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d6e:	e007      	b.n	8002d80 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	681a      	ldr	r2, [r3, #0]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f042 0201 	orr.w	r2, r2, #1
 8002d7e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002d80:	2300      	movs	r3, #0
}
 8002d82:	4618      	mov	r0, r3
 8002d84:	3714      	adds	r7, #20
 8002d86:	46bd      	mov	sp, r7
 8002d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8c:	4770      	bx	lr
 8002d8e:	bf00      	nop
 8002d90:	40010000 	.word	0x40010000
 8002d94:	40000400 	.word	0x40000400
 8002d98:	40000800 	.word	0x40000800
 8002d9c:	40000c00 	.word	0x40000c00
 8002da0:	40010400 	.word	0x40010400
 8002da4:	40014000 	.word	0x40014000
 8002da8:	40001800 	.word	0x40001800

08002dac <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b082      	sub	sp, #8
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d101      	bne.n	8002dbe <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e041      	b.n	8002e42 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dc4:	b2db      	uxtb	r3, r3
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d106      	bne.n	8002dd8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2200      	movs	r2, #0
 8002dce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002dd2:	6878      	ldr	r0, [r7, #4]
 8002dd4:	f000 f839 	bl	8002e4a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2202      	movs	r2, #2
 8002ddc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681a      	ldr	r2, [r3, #0]
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	3304      	adds	r3, #4
 8002de8:	4619      	mov	r1, r3
 8002dea:	4610      	mov	r0, r2
 8002dec:	f000 faf2 	bl	80033d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2201      	movs	r2, #1
 8002df4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2201      	movs	r2, #1
 8002dfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2201      	movs	r2, #1
 8002e04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2201      	movs	r2, #1
 8002e0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2201      	movs	r2, #1
 8002e14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2201      	movs	r2, #1
 8002e24:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2201      	movs	r2, #1
 8002e34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002e40:	2300      	movs	r3, #0
}
 8002e42:	4618      	mov	r0, r3
 8002e44:	3708      	adds	r7, #8
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd80      	pop	{r7, pc}

08002e4a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002e4a:	b480      	push	{r7}
 8002e4c:	b083      	sub	sp, #12
 8002e4e:	af00      	add	r7, sp, #0
 8002e50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002e52:	bf00      	nop
 8002e54:	370c      	adds	r7, #12
 8002e56:	46bd      	mov	sp, r7
 8002e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5c:	4770      	bx	lr

08002e5e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002e5e:	b580      	push	{r7, lr}
 8002e60:	b082      	sub	sp, #8
 8002e62:	af00      	add	r7, sp, #0
 8002e64:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	691b      	ldr	r3, [r3, #16]
 8002e6c:	f003 0302 	and.w	r3, r3, #2
 8002e70:	2b02      	cmp	r3, #2
 8002e72:	d122      	bne.n	8002eba <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	68db      	ldr	r3, [r3, #12]
 8002e7a:	f003 0302 	and.w	r3, r3, #2
 8002e7e:	2b02      	cmp	r3, #2
 8002e80:	d11b      	bne.n	8002eba <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f06f 0202 	mvn.w	r2, #2
 8002e8a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2201      	movs	r2, #1
 8002e90:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	699b      	ldr	r3, [r3, #24]
 8002e98:	f003 0303 	and.w	r3, r3, #3
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d003      	beq.n	8002ea8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002ea0:	6878      	ldr	r0, [r7, #4]
 8002ea2:	f000 fa78 	bl	8003396 <HAL_TIM_IC_CaptureCallback>
 8002ea6:	e005      	b.n	8002eb4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ea8:	6878      	ldr	r0, [r7, #4]
 8002eaa:	f000 fa6a 	bl	8003382 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002eae:	6878      	ldr	r0, [r7, #4]
 8002eb0:	f000 fa7b 	bl	80033aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	691b      	ldr	r3, [r3, #16]
 8002ec0:	f003 0304 	and.w	r3, r3, #4
 8002ec4:	2b04      	cmp	r3, #4
 8002ec6:	d122      	bne.n	8002f0e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	68db      	ldr	r3, [r3, #12]
 8002ece:	f003 0304 	and.w	r3, r3, #4
 8002ed2:	2b04      	cmp	r3, #4
 8002ed4:	d11b      	bne.n	8002f0e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f06f 0204 	mvn.w	r2, #4
 8002ede:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2202      	movs	r2, #2
 8002ee4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	699b      	ldr	r3, [r3, #24]
 8002eec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d003      	beq.n	8002efc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ef4:	6878      	ldr	r0, [r7, #4]
 8002ef6:	f000 fa4e 	bl	8003396 <HAL_TIM_IC_CaptureCallback>
 8002efa:	e005      	b.n	8002f08 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002efc:	6878      	ldr	r0, [r7, #4]
 8002efe:	f000 fa40 	bl	8003382 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f02:	6878      	ldr	r0, [r7, #4]
 8002f04:	f000 fa51 	bl	80033aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	691b      	ldr	r3, [r3, #16]
 8002f14:	f003 0308 	and.w	r3, r3, #8
 8002f18:	2b08      	cmp	r3, #8
 8002f1a:	d122      	bne.n	8002f62 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	68db      	ldr	r3, [r3, #12]
 8002f22:	f003 0308 	and.w	r3, r3, #8
 8002f26:	2b08      	cmp	r3, #8
 8002f28:	d11b      	bne.n	8002f62 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f06f 0208 	mvn.w	r2, #8
 8002f32:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2204      	movs	r2, #4
 8002f38:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	69db      	ldr	r3, [r3, #28]
 8002f40:	f003 0303 	and.w	r3, r3, #3
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d003      	beq.n	8002f50 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f48:	6878      	ldr	r0, [r7, #4]
 8002f4a:	f000 fa24 	bl	8003396 <HAL_TIM_IC_CaptureCallback>
 8002f4e:	e005      	b.n	8002f5c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f50:	6878      	ldr	r0, [r7, #4]
 8002f52:	f000 fa16 	bl	8003382 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f56:	6878      	ldr	r0, [r7, #4]
 8002f58:	f000 fa27 	bl	80033aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	691b      	ldr	r3, [r3, #16]
 8002f68:	f003 0310 	and.w	r3, r3, #16
 8002f6c:	2b10      	cmp	r3, #16
 8002f6e:	d122      	bne.n	8002fb6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	68db      	ldr	r3, [r3, #12]
 8002f76:	f003 0310 	and.w	r3, r3, #16
 8002f7a:	2b10      	cmp	r3, #16
 8002f7c:	d11b      	bne.n	8002fb6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f06f 0210 	mvn.w	r2, #16
 8002f86:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2208      	movs	r2, #8
 8002f8c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	69db      	ldr	r3, [r3, #28]
 8002f94:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d003      	beq.n	8002fa4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f9c:	6878      	ldr	r0, [r7, #4]
 8002f9e:	f000 f9fa 	bl	8003396 <HAL_TIM_IC_CaptureCallback>
 8002fa2:	e005      	b.n	8002fb0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fa4:	6878      	ldr	r0, [r7, #4]
 8002fa6:	f000 f9ec 	bl	8003382 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002faa:	6878      	ldr	r0, [r7, #4]
 8002fac:	f000 f9fd 	bl	80033aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	691b      	ldr	r3, [r3, #16]
 8002fbc:	f003 0301 	and.w	r3, r3, #1
 8002fc0:	2b01      	cmp	r3, #1
 8002fc2:	d10e      	bne.n	8002fe2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	68db      	ldr	r3, [r3, #12]
 8002fca:	f003 0301 	and.w	r3, r3, #1
 8002fce:	2b01      	cmp	r3, #1
 8002fd0:	d107      	bne.n	8002fe2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f06f 0201 	mvn.w	r2, #1
 8002fda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002fdc:	6878      	ldr	r0, [r7, #4]
 8002fde:	f7fd febf 	bl	8000d60 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	691b      	ldr	r3, [r3, #16]
 8002fe8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fec:	2b80      	cmp	r3, #128	; 0x80
 8002fee:	d10e      	bne.n	800300e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	68db      	ldr	r3, [r3, #12]
 8002ff6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ffa:	2b80      	cmp	r3, #128	; 0x80
 8002ffc:	d107      	bne.n	800300e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003006:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003008:	6878      	ldr	r0, [r7, #4]
 800300a:	f000 fd53 	bl	8003ab4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	691b      	ldr	r3, [r3, #16]
 8003014:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003018:	2b40      	cmp	r3, #64	; 0x40
 800301a:	d10e      	bne.n	800303a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	68db      	ldr	r3, [r3, #12]
 8003022:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003026:	2b40      	cmp	r3, #64	; 0x40
 8003028:	d107      	bne.n	800303a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003032:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003034:	6878      	ldr	r0, [r7, #4]
 8003036:	f000 f9c2 	bl	80033be <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	691b      	ldr	r3, [r3, #16]
 8003040:	f003 0320 	and.w	r3, r3, #32
 8003044:	2b20      	cmp	r3, #32
 8003046:	d10e      	bne.n	8003066 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	68db      	ldr	r3, [r3, #12]
 800304e:	f003 0320 	and.w	r3, r3, #32
 8003052:	2b20      	cmp	r3, #32
 8003054:	d107      	bne.n	8003066 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f06f 0220 	mvn.w	r2, #32
 800305e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003060:	6878      	ldr	r0, [r7, #4]
 8003062:	f000 fd1d 	bl	8003aa0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003066:	bf00      	nop
 8003068:	3708      	adds	r7, #8
 800306a:	46bd      	mov	sp, r7
 800306c:	bd80      	pop	{r7, pc}
	...

08003070 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b086      	sub	sp, #24
 8003074:	af00      	add	r7, sp, #0
 8003076:	60f8      	str	r0, [r7, #12]
 8003078:	60b9      	str	r1, [r7, #8]
 800307a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800307c:	2300      	movs	r3, #0
 800307e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003086:	2b01      	cmp	r3, #1
 8003088:	d101      	bne.n	800308e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800308a:	2302      	movs	r3, #2
 800308c:	e0ae      	b.n	80031ec <HAL_TIM_PWM_ConfigChannel+0x17c>
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	2201      	movs	r2, #1
 8003092:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2b0c      	cmp	r3, #12
 800309a:	f200 809f 	bhi.w	80031dc <HAL_TIM_PWM_ConfigChannel+0x16c>
 800309e:	a201      	add	r2, pc, #4	; (adr r2, 80030a4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80030a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030a4:	080030d9 	.word	0x080030d9
 80030a8:	080031dd 	.word	0x080031dd
 80030ac:	080031dd 	.word	0x080031dd
 80030b0:	080031dd 	.word	0x080031dd
 80030b4:	08003119 	.word	0x08003119
 80030b8:	080031dd 	.word	0x080031dd
 80030bc:	080031dd 	.word	0x080031dd
 80030c0:	080031dd 	.word	0x080031dd
 80030c4:	0800315b 	.word	0x0800315b
 80030c8:	080031dd 	.word	0x080031dd
 80030cc:	080031dd 	.word	0x080031dd
 80030d0:	080031dd 	.word	0x080031dd
 80030d4:	0800319b 	.word	0x0800319b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	68b9      	ldr	r1, [r7, #8]
 80030de:	4618      	mov	r0, r3
 80030e0:	f000 fa18 	bl	8003514 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	699a      	ldr	r2, [r3, #24]
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f042 0208 	orr.w	r2, r2, #8
 80030f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	699a      	ldr	r2, [r3, #24]
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f022 0204 	bic.w	r2, r2, #4
 8003102:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	6999      	ldr	r1, [r3, #24]
 800310a:	68bb      	ldr	r3, [r7, #8]
 800310c:	691a      	ldr	r2, [r3, #16]
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	430a      	orrs	r2, r1
 8003114:	619a      	str	r2, [r3, #24]
      break;
 8003116:	e064      	b.n	80031e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	68b9      	ldr	r1, [r7, #8]
 800311e:	4618      	mov	r0, r3
 8003120:	f000 fa68 	bl	80035f4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	699a      	ldr	r2, [r3, #24]
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003132:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	699a      	ldr	r2, [r3, #24]
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003142:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	6999      	ldr	r1, [r3, #24]
 800314a:	68bb      	ldr	r3, [r7, #8]
 800314c:	691b      	ldr	r3, [r3, #16]
 800314e:	021a      	lsls	r2, r3, #8
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	430a      	orrs	r2, r1
 8003156:	619a      	str	r2, [r3, #24]
      break;
 8003158:	e043      	b.n	80031e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	68b9      	ldr	r1, [r7, #8]
 8003160:	4618      	mov	r0, r3
 8003162:	f000 fabd 	bl	80036e0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	69da      	ldr	r2, [r3, #28]
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f042 0208 	orr.w	r2, r2, #8
 8003174:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	69da      	ldr	r2, [r3, #28]
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f022 0204 	bic.w	r2, r2, #4
 8003184:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	69d9      	ldr	r1, [r3, #28]
 800318c:	68bb      	ldr	r3, [r7, #8]
 800318e:	691a      	ldr	r2, [r3, #16]
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	430a      	orrs	r2, r1
 8003196:	61da      	str	r2, [r3, #28]
      break;
 8003198:	e023      	b.n	80031e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	68b9      	ldr	r1, [r7, #8]
 80031a0:	4618      	mov	r0, r3
 80031a2:	f000 fb11 	bl	80037c8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	69da      	ldr	r2, [r3, #28]
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80031b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	69da      	ldr	r2, [r3, #28]
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	69d9      	ldr	r1, [r3, #28]
 80031cc:	68bb      	ldr	r3, [r7, #8]
 80031ce:	691b      	ldr	r3, [r3, #16]
 80031d0:	021a      	lsls	r2, r3, #8
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	430a      	orrs	r2, r1
 80031d8:	61da      	str	r2, [r3, #28]
      break;
 80031da:	e002      	b.n	80031e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80031dc:	2301      	movs	r3, #1
 80031de:	75fb      	strb	r3, [r7, #23]
      break;
 80031e0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	2200      	movs	r2, #0
 80031e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80031ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80031ec:	4618      	mov	r0, r3
 80031ee:	3718      	adds	r7, #24
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bd80      	pop	{r7, pc}

080031f4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b084      	sub	sp, #16
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
 80031fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80031fe:	2300      	movs	r3, #0
 8003200:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003208:	2b01      	cmp	r3, #1
 800320a:	d101      	bne.n	8003210 <HAL_TIM_ConfigClockSource+0x1c>
 800320c:	2302      	movs	r3, #2
 800320e:	e0b4      	b.n	800337a <HAL_TIM_ConfigClockSource+0x186>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2201      	movs	r2, #1
 8003214:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2202      	movs	r2, #2
 800321c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	689b      	ldr	r3, [r3, #8]
 8003226:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003228:	68bb      	ldr	r3, [r7, #8]
 800322a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800322e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003236:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	68ba      	ldr	r2, [r7, #8]
 800323e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003248:	d03e      	beq.n	80032c8 <HAL_TIM_ConfigClockSource+0xd4>
 800324a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800324e:	f200 8087 	bhi.w	8003360 <HAL_TIM_ConfigClockSource+0x16c>
 8003252:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003256:	f000 8086 	beq.w	8003366 <HAL_TIM_ConfigClockSource+0x172>
 800325a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800325e:	d87f      	bhi.n	8003360 <HAL_TIM_ConfigClockSource+0x16c>
 8003260:	2b70      	cmp	r3, #112	; 0x70
 8003262:	d01a      	beq.n	800329a <HAL_TIM_ConfigClockSource+0xa6>
 8003264:	2b70      	cmp	r3, #112	; 0x70
 8003266:	d87b      	bhi.n	8003360 <HAL_TIM_ConfigClockSource+0x16c>
 8003268:	2b60      	cmp	r3, #96	; 0x60
 800326a:	d050      	beq.n	800330e <HAL_TIM_ConfigClockSource+0x11a>
 800326c:	2b60      	cmp	r3, #96	; 0x60
 800326e:	d877      	bhi.n	8003360 <HAL_TIM_ConfigClockSource+0x16c>
 8003270:	2b50      	cmp	r3, #80	; 0x50
 8003272:	d03c      	beq.n	80032ee <HAL_TIM_ConfigClockSource+0xfa>
 8003274:	2b50      	cmp	r3, #80	; 0x50
 8003276:	d873      	bhi.n	8003360 <HAL_TIM_ConfigClockSource+0x16c>
 8003278:	2b40      	cmp	r3, #64	; 0x40
 800327a:	d058      	beq.n	800332e <HAL_TIM_ConfigClockSource+0x13a>
 800327c:	2b40      	cmp	r3, #64	; 0x40
 800327e:	d86f      	bhi.n	8003360 <HAL_TIM_ConfigClockSource+0x16c>
 8003280:	2b30      	cmp	r3, #48	; 0x30
 8003282:	d064      	beq.n	800334e <HAL_TIM_ConfigClockSource+0x15a>
 8003284:	2b30      	cmp	r3, #48	; 0x30
 8003286:	d86b      	bhi.n	8003360 <HAL_TIM_ConfigClockSource+0x16c>
 8003288:	2b20      	cmp	r3, #32
 800328a:	d060      	beq.n	800334e <HAL_TIM_ConfigClockSource+0x15a>
 800328c:	2b20      	cmp	r3, #32
 800328e:	d867      	bhi.n	8003360 <HAL_TIM_ConfigClockSource+0x16c>
 8003290:	2b00      	cmp	r3, #0
 8003292:	d05c      	beq.n	800334e <HAL_TIM_ConfigClockSource+0x15a>
 8003294:	2b10      	cmp	r3, #16
 8003296:	d05a      	beq.n	800334e <HAL_TIM_ConfigClockSource+0x15a>
 8003298:	e062      	b.n	8003360 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6818      	ldr	r0, [r3, #0]
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	6899      	ldr	r1, [r3, #8]
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	685a      	ldr	r2, [r3, #4]
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	68db      	ldr	r3, [r3, #12]
 80032aa:	f000 fb5d 	bl	8003968 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	689b      	ldr	r3, [r3, #8]
 80032b4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80032b6:	68bb      	ldr	r3, [r7, #8]
 80032b8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80032bc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	68ba      	ldr	r2, [r7, #8]
 80032c4:	609a      	str	r2, [r3, #8]
      break;
 80032c6:	e04f      	b.n	8003368 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6818      	ldr	r0, [r3, #0]
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	6899      	ldr	r1, [r3, #8]
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	685a      	ldr	r2, [r3, #4]
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	68db      	ldr	r3, [r3, #12]
 80032d8:	f000 fb46 	bl	8003968 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	689a      	ldr	r2, [r3, #8]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80032ea:	609a      	str	r2, [r3, #8]
      break;
 80032ec:	e03c      	b.n	8003368 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6818      	ldr	r0, [r3, #0]
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	6859      	ldr	r1, [r3, #4]
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	68db      	ldr	r3, [r3, #12]
 80032fa:	461a      	mov	r2, r3
 80032fc:	f000 faba 	bl	8003874 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	2150      	movs	r1, #80	; 0x50
 8003306:	4618      	mov	r0, r3
 8003308:	f000 fb13 	bl	8003932 <TIM_ITRx_SetConfig>
      break;
 800330c:	e02c      	b.n	8003368 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6818      	ldr	r0, [r3, #0]
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	6859      	ldr	r1, [r3, #4]
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	68db      	ldr	r3, [r3, #12]
 800331a:	461a      	mov	r2, r3
 800331c:	f000 fad9 	bl	80038d2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	2160      	movs	r1, #96	; 0x60
 8003326:	4618      	mov	r0, r3
 8003328:	f000 fb03 	bl	8003932 <TIM_ITRx_SetConfig>
      break;
 800332c:	e01c      	b.n	8003368 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6818      	ldr	r0, [r3, #0]
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	6859      	ldr	r1, [r3, #4]
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	68db      	ldr	r3, [r3, #12]
 800333a:	461a      	mov	r2, r3
 800333c:	f000 fa9a 	bl	8003874 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	2140      	movs	r1, #64	; 0x40
 8003346:	4618      	mov	r0, r3
 8003348:	f000 faf3 	bl	8003932 <TIM_ITRx_SetConfig>
      break;
 800334c:	e00c      	b.n	8003368 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681a      	ldr	r2, [r3, #0]
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4619      	mov	r1, r3
 8003358:	4610      	mov	r0, r2
 800335a:	f000 faea 	bl	8003932 <TIM_ITRx_SetConfig>
      break;
 800335e:	e003      	b.n	8003368 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003360:	2301      	movs	r3, #1
 8003362:	73fb      	strb	r3, [r7, #15]
      break;
 8003364:	e000      	b.n	8003368 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003366:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2201      	movs	r2, #1
 800336c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2200      	movs	r2, #0
 8003374:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003378:	7bfb      	ldrb	r3, [r7, #15]
}
 800337a:	4618      	mov	r0, r3
 800337c:	3710      	adds	r7, #16
 800337e:	46bd      	mov	sp, r7
 8003380:	bd80      	pop	{r7, pc}

08003382 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003382:	b480      	push	{r7}
 8003384:	b083      	sub	sp, #12
 8003386:	af00      	add	r7, sp, #0
 8003388:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800338a:	bf00      	nop
 800338c:	370c      	adds	r7, #12
 800338e:	46bd      	mov	sp, r7
 8003390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003394:	4770      	bx	lr

08003396 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003396:	b480      	push	{r7}
 8003398:	b083      	sub	sp, #12
 800339a:	af00      	add	r7, sp, #0
 800339c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800339e:	bf00      	nop
 80033a0:	370c      	adds	r7, #12
 80033a2:	46bd      	mov	sp, r7
 80033a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a8:	4770      	bx	lr

080033aa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80033aa:	b480      	push	{r7}
 80033ac:	b083      	sub	sp, #12
 80033ae:	af00      	add	r7, sp, #0
 80033b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80033b2:	bf00      	nop
 80033b4:	370c      	adds	r7, #12
 80033b6:	46bd      	mov	sp, r7
 80033b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033bc:	4770      	bx	lr

080033be <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80033be:	b480      	push	{r7}
 80033c0:	b083      	sub	sp, #12
 80033c2:	af00      	add	r7, sp, #0
 80033c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80033c6:	bf00      	nop
 80033c8:	370c      	adds	r7, #12
 80033ca:	46bd      	mov	sp, r7
 80033cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d0:	4770      	bx	lr
	...

080033d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80033d4:	b480      	push	{r7}
 80033d6:	b085      	sub	sp, #20
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
 80033dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	4a40      	ldr	r2, [pc, #256]	; (80034e8 <TIM_Base_SetConfig+0x114>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d013      	beq.n	8003414 <TIM_Base_SetConfig+0x40>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033f2:	d00f      	beq.n	8003414 <TIM_Base_SetConfig+0x40>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	4a3d      	ldr	r2, [pc, #244]	; (80034ec <TIM_Base_SetConfig+0x118>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d00b      	beq.n	8003414 <TIM_Base_SetConfig+0x40>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	4a3c      	ldr	r2, [pc, #240]	; (80034f0 <TIM_Base_SetConfig+0x11c>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d007      	beq.n	8003414 <TIM_Base_SetConfig+0x40>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	4a3b      	ldr	r2, [pc, #236]	; (80034f4 <TIM_Base_SetConfig+0x120>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d003      	beq.n	8003414 <TIM_Base_SetConfig+0x40>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	4a3a      	ldr	r2, [pc, #232]	; (80034f8 <TIM_Base_SetConfig+0x124>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d108      	bne.n	8003426 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800341a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	68fa      	ldr	r2, [r7, #12]
 8003422:	4313      	orrs	r3, r2
 8003424:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	4a2f      	ldr	r2, [pc, #188]	; (80034e8 <TIM_Base_SetConfig+0x114>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d02b      	beq.n	8003486 <TIM_Base_SetConfig+0xb2>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003434:	d027      	beq.n	8003486 <TIM_Base_SetConfig+0xb2>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	4a2c      	ldr	r2, [pc, #176]	; (80034ec <TIM_Base_SetConfig+0x118>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d023      	beq.n	8003486 <TIM_Base_SetConfig+0xb2>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	4a2b      	ldr	r2, [pc, #172]	; (80034f0 <TIM_Base_SetConfig+0x11c>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d01f      	beq.n	8003486 <TIM_Base_SetConfig+0xb2>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	4a2a      	ldr	r2, [pc, #168]	; (80034f4 <TIM_Base_SetConfig+0x120>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d01b      	beq.n	8003486 <TIM_Base_SetConfig+0xb2>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	4a29      	ldr	r2, [pc, #164]	; (80034f8 <TIM_Base_SetConfig+0x124>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d017      	beq.n	8003486 <TIM_Base_SetConfig+0xb2>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	4a28      	ldr	r2, [pc, #160]	; (80034fc <TIM_Base_SetConfig+0x128>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d013      	beq.n	8003486 <TIM_Base_SetConfig+0xb2>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	4a27      	ldr	r2, [pc, #156]	; (8003500 <TIM_Base_SetConfig+0x12c>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d00f      	beq.n	8003486 <TIM_Base_SetConfig+0xb2>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	4a26      	ldr	r2, [pc, #152]	; (8003504 <TIM_Base_SetConfig+0x130>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d00b      	beq.n	8003486 <TIM_Base_SetConfig+0xb2>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	4a25      	ldr	r2, [pc, #148]	; (8003508 <TIM_Base_SetConfig+0x134>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d007      	beq.n	8003486 <TIM_Base_SetConfig+0xb2>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	4a24      	ldr	r2, [pc, #144]	; (800350c <TIM_Base_SetConfig+0x138>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d003      	beq.n	8003486 <TIM_Base_SetConfig+0xb2>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	4a23      	ldr	r2, [pc, #140]	; (8003510 <TIM_Base_SetConfig+0x13c>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d108      	bne.n	8003498 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800348c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	68db      	ldr	r3, [r3, #12]
 8003492:	68fa      	ldr	r2, [r7, #12]
 8003494:	4313      	orrs	r3, r2
 8003496:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	695b      	ldr	r3, [r3, #20]
 80034a2:	4313      	orrs	r3, r2
 80034a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	68fa      	ldr	r2, [r7, #12]
 80034aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	689a      	ldr	r2, [r3, #8]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	681a      	ldr	r2, [r3, #0]
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	4a0a      	ldr	r2, [pc, #40]	; (80034e8 <TIM_Base_SetConfig+0x114>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d003      	beq.n	80034cc <TIM_Base_SetConfig+0xf8>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	4a0c      	ldr	r2, [pc, #48]	; (80034f8 <TIM_Base_SetConfig+0x124>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d103      	bne.n	80034d4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	691a      	ldr	r2, [r3, #16]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2201      	movs	r2, #1
 80034d8:	615a      	str	r2, [r3, #20]
}
 80034da:	bf00      	nop
 80034dc:	3714      	adds	r7, #20
 80034de:	46bd      	mov	sp, r7
 80034e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e4:	4770      	bx	lr
 80034e6:	bf00      	nop
 80034e8:	40010000 	.word	0x40010000
 80034ec:	40000400 	.word	0x40000400
 80034f0:	40000800 	.word	0x40000800
 80034f4:	40000c00 	.word	0x40000c00
 80034f8:	40010400 	.word	0x40010400
 80034fc:	40014000 	.word	0x40014000
 8003500:	40014400 	.word	0x40014400
 8003504:	40014800 	.word	0x40014800
 8003508:	40001800 	.word	0x40001800
 800350c:	40001c00 	.word	0x40001c00
 8003510:	40002000 	.word	0x40002000

08003514 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003514:	b480      	push	{r7}
 8003516:	b087      	sub	sp, #28
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
 800351c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6a1b      	ldr	r3, [r3, #32]
 8003522:	f023 0201 	bic.w	r2, r3, #1
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6a1b      	ldr	r3, [r3, #32]
 800352e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	699b      	ldr	r3, [r3, #24]
 800353a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003542:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	f023 0303 	bic.w	r3, r3, #3
 800354a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	68fa      	ldr	r2, [r7, #12]
 8003552:	4313      	orrs	r3, r2
 8003554:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	f023 0302 	bic.w	r3, r3, #2
 800355c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	689b      	ldr	r3, [r3, #8]
 8003562:	697a      	ldr	r2, [r7, #20]
 8003564:	4313      	orrs	r3, r2
 8003566:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	4a20      	ldr	r2, [pc, #128]	; (80035ec <TIM_OC1_SetConfig+0xd8>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d003      	beq.n	8003578 <TIM_OC1_SetConfig+0x64>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	4a1f      	ldr	r2, [pc, #124]	; (80035f0 <TIM_OC1_SetConfig+0xdc>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d10c      	bne.n	8003592 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003578:	697b      	ldr	r3, [r7, #20]
 800357a:	f023 0308 	bic.w	r3, r3, #8
 800357e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	68db      	ldr	r3, [r3, #12]
 8003584:	697a      	ldr	r2, [r7, #20]
 8003586:	4313      	orrs	r3, r2
 8003588:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800358a:	697b      	ldr	r3, [r7, #20]
 800358c:	f023 0304 	bic.w	r3, r3, #4
 8003590:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	4a15      	ldr	r2, [pc, #84]	; (80035ec <TIM_OC1_SetConfig+0xd8>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d003      	beq.n	80035a2 <TIM_OC1_SetConfig+0x8e>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	4a14      	ldr	r2, [pc, #80]	; (80035f0 <TIM_OC1_SetConfig+0xdc>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d111      	bne.n	80035c6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80035a2:	693b      	ldr	r3, [r7, #16]
 80035a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80035a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80035aa:	693b      	ldr	r3, [r7, #16]
 80035ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80035b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	695b      	ldr	r3, [r3, #20]
 80035b6:	693a      	ldr	r2, [r7, #16]
 80035b8:	4313      	orrs	r3, r2
 80035ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	699b      	ldr	r3, [r3, #24]
 80035c0:	693a      	ldr	r2, [r7, #16]
 80035c2:	4313      	orrs	r3, r2
 80035c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	693a      	ldr	r2, [r7, #16]
 80035ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	68fa      	ldr	r2, [r7, #12]
 80035d0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	685a      	ldr	r2, [r3, #4]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	697a      	ldr	r2, [r7, #20]
 80035de:	621a      	str	r2, [r3, #32]
}
 80035e0:	bf00      	nop
 80035e2:	371c      	adds	r7, #28
 80035e4:	46bd      	mov	sp, r7
 80035e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ea:	4770      	bx	lr
 80035ec:	40010000 	.word	0x40010000
 80035f0:	40010400 	.word	0x40010400

080035f4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80035f4:	b480      	push	{r7}
 80035f6:	b087      	sub	sp, #28
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
 80035fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6a1b      	ldr	r3, [r3, #32]
 8003602:	f023 0210 	bic.w	r2, r3, #16
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6a1b      	ldr	r3, [r3, #32]
 800360e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	699b      	ldr	r3, [r3, #24]
 800361a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003622:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800362a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	021b      	lsls	r3, r3, #8
 8003632:	68fa      	ldr	r2, [r7, #12]
 8003634:	4313      	orrs	r3, r2
 8003636:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003638:	697b      	ldr	r3, [r7, #20]
 800363a:	f023 0320 	bic.w	r3, r3, #32
 800363e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	689b      	ldr	r3, [r3, #8]
 8003644:	011b      	lsls	r3, r3, #4
 8003646:	697a      	ldr	r2, [r7, #20]
 8003648:	4313      	orrs	r3, r2
 800364a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	4a22      	ldr	r2, [pc, #136]	; (80036d8 <TIM_OC2_SetConfig+0xe4>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d003      	beq.n	800365c <TIM_OC2_SetConfig+0x68>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	4a21      	ldr	r2, [pc, #132]	; (80036dc <TIM_OC2_SetConfig+0xe8>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d10d      	bne.n	8003678 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800365c:	697b      	ldr	r3, [r7, #20]
 800365e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003662:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	68db      	ldr	r3, [r3, #12]
 8003668:	011b      	lsls	r3, r3, #4
 800366a:	697a      	ldr	r2, [r7, #20]
 800366c:	4313      	orrs	r3, r2
 800366e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003670:	697b      	ldr	r3, [r7, #20]
 8003672:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003676:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	4a17      	ldr	r2, [pc, #92]	; (80036d8 <TIM_OC2_SetConfig+0xe4>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d003      	beq.n	8003688 <TIM_OC2_SetConfig+0x94>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	4a16      	ldr	r2, [pc, #88]	; (80036dc <TIM_OC2_SetConfig+0xe8>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d113      	bne.n	80036b0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003688:	693b      	ldr	r3, [r7, #16]
 800368a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800368e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003690:	693b      	ldr	r3, [r7, #16]
 8003692:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003696:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	695b      	ldr	r3, [r3, #20]
 800369c:	009b      	lsls	r3, r3, #2
 800369e:	693a      	ldr	r2, [r7, #16]
 80036a0:	4313      	orrs	r3, r2
 80036a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	699b      	ldr	r3, [r3, #24]
 80036a8:	009b      	lsls	r3, r3, #2
 80036aa:	693a      	ldr	r2, [r7, #16]
 80036ac:	4313      	orrs	r3, r2
 80036ae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	693a      	ldr	r2, [r7, #16]
 80036b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	68fa      	ldr	r2, [r7, #12]
 80036ba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	685a      	ldr	r2, [r3, #4]
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	697a      	ldr	r2, [r7, #20]
 80036c8:	621a      	str	r2, [r3, #32]
}
 80036ca:	bf00      	nop
 80036cc:	371c      	adds	r7, #28
 80036ce:	46bd      	mov	sp, r7
 80036d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d4:	4770      	bx	lr
 80036d6:	bf00      	nop
 80036d8:	40010000 	.word	0x40010000
 80036dc:	40010400 	.word	0x40010400

080036e0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80036e0:	b480      	push	{r7}
 80036e2:	b087      	sub	sp, #28
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
 80036e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6a1b      	ldr	r3, [r3, #32]
 80036ee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6a1b      	ldr	r3, [r3, #32]
 80036fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	69db      	ldr	r3, [r3, #28]
 8003706:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800370e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	f023 0303 	bic.w	r3, r3, #3
 8003716:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	68fa      	ldr	r2, [r7, #12]
 800371e:	4313      	orrs	r3, r2
 8003720:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003722:	697b      	ldr	r3, [r7, #20]
 8003724:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003728:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	689b      	ldr	r3, [r3, #8]
 800372e:	021b      	lsls	r3, r3, #8
 8003730:	697a      	ldr	r2, [r7, #20]
 8003732:	4313      	orrs	r3, r2
 8003734:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	4a21      	ldr	r2, [pc, #132]	; (80037c0 <TIM_OC3_SetConfig+0xe0>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d003      	beq.n	8003746 <TIM_OC3_SetConfig+0x66>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	4a20      	ldr	r2, [pc, #128]	; (80037c4 <TIM_OC3_SetConfig+0xe4>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d10d      	bne.n	8003762 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003746:	697b      	ldr	r3, [r7, #20]
 8003748:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800374c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	68db      	ldr	r3, [r3, #12]
 8003752:	021b      	lsls	r3, r3, #8
 8003754:	697a      	ldr	r2, [r7, #20]
 8003756:	4313      	orrs	r3, r2
 8003758:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800375a:	697b      	ldr	r3, [r7, #20]
 800375c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003760:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	4a16      	ldr	r2, [pc, #88]	; (80037c0 <TIM_OC3_SetConfig+0xe0>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d003      	beq.n	8003772 <TIM_OC3_SetConfig+0x92>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	4a15      	ldr	r2, [pc, #84]	; (80037c4 <TIM_OC3_SetConfig+0xe4>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d113      	bne.n	800379a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003772:	693b      	ldr	r3, [r7, #16]
 8003774:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003778:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800377a:	693b      	ldr	r3, [r7, #16]
 800377c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003780:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	695b      	ldr	r3, [r3, #20]
 8003786:	011b      	lsls	r3, r3, #4
 8003788:	693a      	ldr	r2, [r7, #16]
 800378a:	4313      	orrs	r3, r2
 800378c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	699b      	ldr	r3, [r3, #24]
 8003792:	011b      	lsls	r3, r3, #4
 8003794:	693a      	ldr	r2, [r7, #16]
 8003796:	4313      	orrs	r3, r2
 8003798:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	693a      	ldr	r2, [r7, #16]
 800379e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	68fa      	ldr	r2, [r7, #12]
 80037a4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	685a      	ldr	r2, [r3, #4]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	697a      	ldr	r2, [r7, #20]
 80037b2:	621a      	str	r2, [r3, #32]
}
 80037b4:	bf00      	nop
 80037b6:	371c      	adds	r7, #28
 80037b8:	46bd      	mov	sp, r7
 80037ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037be:	4770      	bx	lr
 80037c0:	40010000 	.word	0x40010000
 80037c4:	40010400 	.word	0x40010400

080037c8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80037c8:	b480      	push	{r7}
 80037ca:	b087      	sub	sp, #28
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
 80037d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6a1b      	ldr	r3, [r3, #32]
 80037d6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6a1b      	ldr	r3, [r3, #32]
 80037e2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	69db      	ldr	r3, [r3, #28]
 80037ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80037f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	021b      	lsls	r3, r3, #8
 8003806:	68fa      	ldr	r2, [r7, #12]
 8003808:	4313      	orrs	r3, r2
 800380a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800380c:	693b      	ldr	r3, [r7, #16]
 800380e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003812:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	689b      	ldr	r3, [r3, #8]
 8003818:	031b      	lsls	r3, r3, #12
 800381a:	693a      	ldr	r2, [r7, #16]
 800381c:	4313      	orrs	r3, r2
 800381e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	4a12      	ldr	r2, [pc, #72]	; (800386c <TIM_OC4_SetConfig+0xa4>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d003      	beq.n	8003830 <TIM_OC4_SetConfig+0x68>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	4a11      	ldr	r2, [pc, #68]	; (8003870 <TIM_OC4_SetConfig+0xa8>)
 800382c:	4293      	cmp	r3, r2
 800382e:	d109      	bne.n	8003844 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003830:	697b      	ldr	r3, [r7, #20]
 8003832:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003836:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	695b      	ldr	r3, [r3, #20]
 800383c:	019b      	lsls	r3, r3, #6
 800383e:	697a      	ldr	r2, [r7, #20]
 8003840:	4313      	orrs	r3, r2
 8003842:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	697a      	ldr	r2, [r7, #20]
 8003848:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	68fa      	ldr	r2, [r7, #12]
 800384e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	685a      	ldr	r2, [r3, #4]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	693a      	ldr	r2, [r7, #16]
 800385c:	621a      	str	r2, [r3, #32]
}
 800385e:	bf00      	nop
 8003860:	371c      	adds	r7, #28
 8003862:	46bd      	mov	sp, r7
 8003864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003868:	4770      	bx	lr
 800386a:	bf00      	nop
 800386c:	40010000 	.word	0x40010000
 8003870:	40010400 	.word	0x40010400

08003874 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003874:	b480      	push	{r7}
 8003876:	b087      	sub	sp, #28
 8003878:	af00      	add	r7, sp, #0
 800387a:	60f8      	str	r0, [r7, #12]
 800387c:	60b9      	str	r1, [r7, #8]
 800387e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	6a1b      	ldr	r3, [r3, #32]
 8003884:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	6a1b      	ldr	r3, [r3, #32]
 800388a:	f023 0201 	bic.w	r2, r3, #1
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	699b      	ldr	r3, [r3, #24]
 8003896:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003898:	693b      	ldr	r3, [r7, #16]
 800389a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800389e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	011b      	lsls	r3, r3, #4
 80038a4:	693a      	ldr	r2, [r7, #16]
 80038a6:	4313      	orrs	r3, r2
 80038a8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80038aa:	697b      	ldr	r3, [r7, #20]
 80038ac:	f023 030a 	bic.w	r3, r3, #10
 80038b0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80038b2:	697a      	ldr	r2, [r7, #20]
 80038b4:	68bb      	ldr	r3, [r7, #8]
 80038b6:	4313      	orrs	r3, r2
 80038b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	693a      	ldr	r2, [r7, #16]
 80038be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	697a      	ldr	r2, [r7, #20]
 80038c4:	621a      	str	r2, [r3, #32]
}
 80038c6:	bf00      	nop
 80038c8:	371c      	adds	r7, #28
 80038ca:	46bd      	mov	sp, r7
 80038cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d0:	4770      	bx	lr

080038d2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80038d2:	b480      	push	{r7}
 80038d4:	b087      	sub	sp, #28
 80038d6:	af00      	add	r7, sp, #0
 80038d8:	60f8      	str	r0, [r7, #12]
 80038da:	60b9      	str	r1, [r7, #8]
 80038dc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	6a1b      	ldr	r3, [r3, #32]
 80038e2:	f023 0210 	bic.w	r2, r3, #16
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	699b      	ldr	r3, [r3, #24]
 80038ee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	6a1b      	ldr	r3, [r3, #32]
 80038f4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80038f6:	697b      	ldr	r3, [r7, #20]
 80038f8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80038fc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	031b      	lsls	r3, r3, #12
 8003902:	697a      	ldr	r2, [r7, #20]
 8003904:	4313      	orrs	r3, r2
 8003906:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003908:	693b      	ldr	r3, [r7, #16]
 800390a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800390e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003910:	68bb      	ldr	r3, [r7, #8]
 8003912:	011b      	lsls	r3, r3, #4
 8003914:	693a      	ldr	r2, [r7, #16]
 8003916:	4313      	orrs	r3, r2
 8003918:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	697a      	ldr	r2, [r7, #20]
 800391e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	693a      	ldr	r2, [r7, #16]
 8003924:	621a      	str	r2, [r3, #32]
}
 8003926:	bf00      	nop
 8003928:	371c      	adds	r7, #28
 800392a:	46bd      	mov	sp, r7
 800392c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003930:	4770      	bx	lr

08003932 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003932:	b480      	push	{r7}
 8003934:	b085      	sub	sp, #20
 8003936:	af00      	add	r7, sp, #0
 8003938:	6078      	str	r0, [r7, #4]
 800393a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	689b      	ldr	r3, [r3, #8]
 8003940:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003948:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800394a:	683a      	ldr	r2, [r7, #0]
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	4313      	orrs	r3, r2
 8003950:	f043 0307 	orr.w	r3, r3, #7
 8003954:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	68fa      	ldr	r2, [r7, #12]
 800395a:	609a      	str	r2, [r3, #8]
}
 800395c:	bf00      	nop
 800395e:	3714      	adds	r7, #20
 8003960:	46bd      	mov	sp, r7
 8003962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003966:	4770      	bx	lr

08003968 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003968:	b480      	push	{r7}
 800396a:	b087      	sub	sp, #28
 800396c:	af00      	add	r7, sp, #0
 800396e:	60f8      	str	r0, [r7, #12]
 8003970:	60b9      	str	r1, [r7, #8]
 8003972:	607a      	str	r2, [r7, #4]
 8003974:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	689b      	ldr	r3, [r3, #8]
 800397a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800397c:	697b      	ldr	r3, [r7, #20]
 800397e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003982:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	021a      	lsls	r2, r3, #8
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	431a      	orrs	r2, r3
 800398c:	68bb      	ldr	r3, [r7, #8]
 800398e:	4313      	orrs	r3, r2
 8003990:	697a      	ldr	r2, [r7, #20]
 8003992:	4313      	orrs	r3, r2
 8003994:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	697a      	ldr	r2, [r7, #20]
 800399a:	609a      	str	r2, [r3, #8]
}
 800399c:	bf00      	nop
 800399e:	371c      	adds	r7, #28
 80039a0:	46bd      	mov	sp, r7
 80039a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a6:	4770      	bx	lr

080039a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80039a8:	b480      	push	{r7}
 80039aa:	b085      	sub	sp, #20
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
 80039b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039b8:	2b01      	cmp	r3, #1
 80039ba:	d101      	bne.n	80039c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80039bc:	2302      	movs	r3, #2
 80039be:	e05a      	b.n	8003a76 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2201      	movs	r2, #1
 80039c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2202      	movs	r2, #2
 80039cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	689b      	ldr	r3, [r3, #8]
 80039de:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039e6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	68fa      	ldr	r2, [r7, #12]
 80039ee:	4313      	orrs	r3, r2
 80039f0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	68fa      	ldr	r2, [r7, #12]
 80039f8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4a21      	ldr	r2, [pc, #132]	; (8003a84 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d022      	beq.n	8003a4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a0c:	d01d      	beq.n	8003a4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4a1d      	ldr	r2, [pc, #116]	; (8003a88 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d018      	beq.n	8003a4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a1b      	ldr	r2, [pc, #108]	; (8003a8c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d013      	beq.n	8003a4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4a1a      	ldr	r2, [pc, #104]	; (8003a90 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d00e      	beq.n	8003a4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4a18      	ldr	r2, [pc, #96]	; (8003a94 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d009      	beq.n	8003a4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4a17      	ldr	r2, [pc, #92]	; (8003a98 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d004      	beq.n	8003a4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a15      	ldr	r2, [pc, #84]	; (8003a9c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d10c      	bne.n	8003a64 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003a4a:	68bb      	ldr	r3, [r7, #8]
 8003a4c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a50:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	68ba      	ldr	r2, [r7, #8]
 8003a58:	4313      	orrs	r3, r2
 8003a5a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	68ba      	ldr	r2, [r7, #8]
 8003a62:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2201      	movs	r2, #1
 8003a68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2200      	movs	r2, #0
 8003a70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003a74:	2300      	movs	r3, #0
}
 8003a76:	4618      	mov	r0, r3
 8003a78:	3714      	adds	r7, #20
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a80:	4770      	bx	lr
 8003a82:	bf00      	nop
 8003a84:	40010000 	.word	0x40010000
 8003a88:	40000400 	.word	0x40000400
 8003a8c:	40000800 	.word	0x40000800
 8003a90:	40000c00 	.word	0x40000c00
 8003a94:	40010400 	.word	0x40010400
 8003a98:	40014000 	.word	0x40014000
 8003a9c:	40001800 	.word	0x40001800

08003aa0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	b083      	sub	sp, #12
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003aa8:	bf00      	nop
 8003aaa:	370c      	adds	r7, #12
 8003aac:	46bd      	mov	sp, r7
 8003aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab2:	4770      	bx	lr

08003ab4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	b083      	sub	sp, #12
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003abc:	bf00      	nop
 8003abe:	370c      	adds	r7, #12
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac6:	4770      	bx	lr

08003ac8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b082      	sub	sp, #8
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d101      	bne.n	8003ada <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	e03f      	b.n	8003b5a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ae0:	b2db      	uxtb	r3, r3
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d106      	bne.n	8003af4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2200      	movs	r2, #0
 8003aea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003aee:	6878      	ldr	r0, [r7, #4]
 8003af0:	f7fd fa5c 	bl	8000fac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2224      	movs	r2, #36	; 0x24
 8003af8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	68da      	ldr	r2, [r3, #12]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003b0a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003b0c:	6878      	ldr	r0, [r7, #4]
 8003b0e:	f000 f939 	bl	8003d84 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	691a      	ldr	r2, [r3, #16]
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003b20:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	695a      	ldr	r2, [r3, #20]
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003b30:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	68da      	ldr	r2, [r3, #12]
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003b40:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2200      	movs	r2, #0
 8003b46:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2220      	movs	r2, #32
 8003b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2220      	movs	r2, #32
 8003b54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003b58:	2300      	movs	r3, #0
}
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	3708      	adds	r7, #8
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bd80      	pop	{r7, pc}

08003b62 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b62:	b580      	push	{r7, lr}
 8003b64:	b08a      	sub	sp, #40	; 0x28
 8003b66:	af02      	add	r7, sp, #8
 8003b68:	60f8      	str	r0, [r7, #12]
 8003b6a:	60b9      	str	r1, [r7, #8]
 8003b6c:	603b      	str	r3, [r7, #0]
 8003b6e:	4613      	mov	r3, r2
 8003b70:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003b72:	2300      	movs	r3, #0
 8003b74:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b7c:	b2db      	uxtb	r3, r3
 8003b7e:	2b20      	cmp	r3, #32
 8003b80:	f040 808c 	bne.w	8003c9c <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d002      	beq.n	8003b90 <HAL_UART_Receive+0x2e>
 8003b8a:	88fb      	ldrh	r3, [r7, #6]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d101      	bne.n	8003b94 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003b90:	2301      	movs	r3, #1
 8003b92:	e084      	b.n	8003c9e <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b9a:	2b01      	cmp	r3, #1
 8003b9c:	d101      	bne.n	8003ba2 <HAL_UART_Receive+0x40>
 8003b9e:	2302      	movs	r3, #2
 8003ba0:	e07d      	b.n	8003c9e <HAL_UART_Receive+0x13c>
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	2201      	movs	r2, #1
 8003ba6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	2200      	movs	r2, #0
 8003bae:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	2222      	movs	r2, #34	; 0x22
 8003bb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003bbe:	f7fd fb7d 	bl	80012bc <HAL_GetTick>
 8003bc2:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	88fa      	ldrh	r2, [r7, #6]
 8003bc8:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	88fa      	ldrh	r2, [r7, #6]
 8003bce:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	689b      	ldr	r3, [r3, #8]
 8003bd4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bd8:	d108      	bne.n	8003bec <HAL_UART_Receive+0x8a>
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	691b      	ldr	r3, [r3, #16]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d104      	bne.n	8003bec <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8003be2:	2300      	movs	r3, #0
 8003be4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003be6:	68bb      	ldr	r3, [r7, #8]
 8003be8:	61bb      	str	r3, [r7, #24]
 8003bea:	e003      	b.n	8003bf4 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8003bec:	68bb      	ldr	r3, [r7, #8]
 8003bee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003bfc:	e043      	b.n	8003c86 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	9300      	str	r3, [sp, #0]
 8003c02:	697b      	ldr	r3, [r7, #20]
 8003c04:	2200      	movs	r2, #0
 8003c06:	2120      	movs	r1, #32
 8003c08:	68f8      	ldr	r0, [r7, #12]
 8003c0a:	f000 f84c 	bl	8003ca6 <UART_WaitOnFlagUntilTimeout>
 8003c0e:	4603      	mov	r3, r0
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d001      	beq.n	8003c18 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8003c14:	2303      	movs	r3, #3
 8003c16:	e042      	b.n	8003c9e <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8003c18:	69fb      	ldr	r3, [r7, #28]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d10c      	bne.n	8003c38 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	b29b      	uxth	r3, r3
 8003c26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c2a:	b29a      	uxth	r2, r3
 8003c2c:	69bb      	ldr	r3, [r7, #24]
 8003c2e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003c30:	69bb      	ldr	r3, [r7, #24]
 8003c32:	3302      	adds	r3, #2
 8003c34:	61bb      	str	r3, [r7, #24]
 8003c36:	e01f      	b.n	8003c78 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	689b      	ldr	r3, [r3, #8]
 8003c3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c40:	d007      	beq.n	8003c52 <HAL_UART_Receive+0xf0>
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	689b      	ldr	r3, [r3, #8]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d10a      	bne.n	8003c60 <HAL_UART_Receive+0xfe>
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	691b      	ldr	r3, [r3, #16]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d106      	bne.n	8003c60 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	b2da      	uxtb	r2, r3
 8003c5a:	69fb      	ldr	r3, [r7, #28]
 8003c5c:	701a      	strb	r2, [r3, #0]
 8003c5e:	e008      	b.n	8003c72 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	b2db      	uxtb	r3, r3
 8003c68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c6c:	b2da      	uxtb	r2, r3
 8003c6e:	69fb      	ldr	r3, [r7, #28]
 8003c70:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003c72:	69fb      	ldr	r3, [r7, #28]
 8003c74:	3301      	adds	r3, #1
 8003c76:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003c7c:	b29b      	uxth	r3, r3
 8003c7e:	3b01      	subs	r3, #1
 8003c80:	b29a      	uxth	r2, r3
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003c8a:	b29b      	uxth	r3, r3
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d1b6      	bne.n	8003bfe <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	2220      	movs	r2, #32
 8003c94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8003c98:	2300      	movs	r3, #0
 8003c9a:	e000      	b.n	8003c9e <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8003c9c:	2302      	movs	r3, #2
  }
}
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	3720      	adds	r7, #32
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bd80      	pop	{r7, pc}

08003ca6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003ca6:	b580      	push	{r7, lr}
 8003ca8:	b090      	sub	sp, #64	; 0x40
 8003caa:	af00      	add	r7, sp, #0
 8003cac:	60f8      	str	r0, [r7, #12]
 8003cae:	60b9      	str	r1, [r7, #8]
 8003cb0:	603b      	str	r3, [r7, #0]
 8003cb2:	4613      	mov	r3, r2
 8003cb4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003cb6:	e050      	b.n	8003d5a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003cb8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003cba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003cbe:	d04c      	beq.n	8003d5a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003cc0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d007      	beq.n	8003cd6 <UART_WaitOnFlagUntilTimeout+0x30>
 8003cc6:	f7fd faf9 	bl	80012bc <HAL_GetTick>
 8003cca:	4602      	mov	r2, r0
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	1ad3      	subs	r3, r2, r3
 8003cd0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003cd2:	429a      	cmp	r2, r3
 8003cd4:	d241      	bcs.n	8003d5a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	330c      	adds	r3, #12
 8003cdc:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ce0:	e853 3f00 	ldrex	r3, [r3]
 8003ce4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ce8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003cec:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	330c      	adds	r3, #12
 8003cf4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003cf6:	637a      	str	r2, [r7, #52]	; 0x34
 8003cf8:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cfa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003cfc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003cfe:	e841 2300 	strex	r3, r2, [r1]
 8003d02:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003d04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d1e5      	bne.n	8003cd6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	3314      	adds	r3, #20
 8003d10:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	e853 3f00 	ldrex	r3, [r3]
 8003d18:	613b      	str	r3, [r7, #16]
   return(result);
 8003d1a:	693b      	ldr	r3, [r7, #16]
 8003d1c:	f023 0301 	bic.w	r3, r3, #1
 8003d20:	63bb      	str	r3, [r7, #56]	; 0x38
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	3314      	adds	r3, #20
 8003d28:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003d2a:	623a      	str	r2, [r7, #32]
 8003d2c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d2e:	69f9      	ldr	r1, [r7, #28]
 8003d30:	6a3a      	ldr	r2, [r7, #32]
 8003d32:	e841 2300 	strex	r3, r2, [r1]
 8003d36:	61bb      	str	r3, [r7, #24]
   return(result);
 8003d38:	69bb      	ldr	r3, [r7, #24]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d1e5      	bne.n	8003d0a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	2220      	movs	r2, #32
 8003d42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	2220      	movs	r2, #32
 8003d4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	2200      	movs	r2, #0
 8003d52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003d56:	2303      	movs	r3, #3
 8003d58:	e00f      	b.n	8003d7a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	681a      	ldr	r2, [r3, #0]
 8003d60:	68bb      	ldr	r3, [r7, #8]
 8003d62:	4013      	ands	r3, r2
 8003d64:	68ba      	ldr	r2, [r7, #8]
 8003d66:	429a      	cmp	r2, r3
 8003d68:	bf0c      	ite	eq
 8003d6a:	2301      	moveq	r3, #1
 8003d6c:	2300      	movne	r3, #0
 8003d6e:	b2db      	uxtb	r3, r3
 8003d70:	461a      	mov	r2, r3
 8003d72:	79fb      	ldrb	r3, [r7, #7]
 8003d74:	429a      	cmp	r2, r3
 8003d76:	d09f      	beq.n	8003cb8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003d78:	2300      	movs	r3, #0
}
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	3740      	adds	r7, #64	; 0x40
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bd80      	pop	{r7, pc}
	...

08003d84 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d88:	b09f      	sub	sp, #124	; 0x7c
 8003d8a:	af00      	add	r7, sp, #0
 8003d8c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	691b      	ldr	r3, [r3, #16]
 8003d94:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003d98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d9a:	68d9      	ldr	r1, [r3, #12]
 8003d9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d9e:	681a      	ldr	r2, [r3, #0]
 8003da0:	ea40 0301 	orr.w	r3, r0, r1
 8003da4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003da6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003da8:	689a      	ldr	r2, [r3, #8]
 8003daa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dac:	691b      	ldr	r3, [r3, #16]
 8003dae:	431a      	orrs	r2, r3
 8003db0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003db2:	695b      	ldr	r3, [r3, #20]
 8003db4:	431a      	orrs	r2, r3
 8003db6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003db8:	69db      	ldr	r3, [r3, #28]
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8003dbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	68db      	ldr	r3, [r3, #12]
 8003dc4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003dc8:	f021 010c 	bic.w	r1, r1, #12
 8003dcc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dce:	681a      	ldr	r2, [r3, #0]
 8003dd0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003dd2:	430b      	orrs	r3, r1
 8003dd4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003dd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	695b      	ldr	r3, [r3, #20]
 8003ddc:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003de0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003de2:	6999      	ldr	r1, [r3, #24]
 8003de4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003de6:	681a      	ldr	r2, [r3, #0]
 8003de8:	ea40 0301 	orr.w	r3, r0, r1
 8003dec:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003dee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003df0:	681a      	ldr	r2, [r3, #0]
 8003df2:	4bc5      	ldr	r3, [pc, #788]	; (8004108 <UART_SetConfig+0x384>)
 8003df4:	429a      	cmp	r2, r3
 8003df6:	d004      	beq.n	8003e02 <UART_SetConfig+0x7e>
 8003df8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dfa:	681a      	ldr	r2, [r3, #0]
 8003dfc:	4bc3      	ldr	r3, [pc, #780]	; (800410c <UART_SetConfig+0x388>)
 8003dfe:	429a      	cmp	r2, r3
 8003e00:	d103      	bne.n	8003e0a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003e02:	f7fe fa7d 	bl	8002300 <HAL_RCC_GetPCLK2Freq>
 8003e06:	6778      	str	r0, [r7, #116]	; 0x74
 8003e08:	e002      	b.n	8003e10 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003e0a:	f7fe fa65 	bl	80022d8 <HAL_RCC_GetPCLK1Freq>
 8003e0e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e12:	69db      	ldr	r3, [r3, #28]
 8003e14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e18:	f040 80b6 	bne.w	8003f88 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003e1c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e1e:	461c      	mov	r4, r3
 8003e20:	f04f 0500 	mov.w	r5, #0
 8003e24:	4622      	mov	r2, r4
 8003e26:	462b      	mov	r3, r5
 8003e28:	1891      	adds	r1, r2, r2
 8003e2a:	6439      	str	r1, [r7, #64]	; 0x40
 8003e2c:	415b      	adcs	r3, r3
 8003e2e:	647b      	str	r3, [r7, #68]	; 0x44
 8003e30:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003e34:	1912      	adds	r2, r2, r4
 8003e36:	eb45 0303 	adc.w	r3, r5, r3
 8003e3a:	f04f 0000 	mov.w	r0, #0
 8003e3e:	f04f 0100 	mov.w	r1, #0
 8003e42:	00d9      	lsls	r1, r3, #3
 8003e44:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003e48:	00d0      	lsls	r0, r2, #3
 8003e4a:	4602      	mov	r2, r0
 8003e4c:	460b      	mov	r3, r1
 8003e4e:	1911      	adds	r1, r2, r4
 8003e50:	6639      	str	r1, [r7, #96]	; 0x60
 8003e52:	416b      	adcs	r3, r5
 8003e54:	667b      	str	r3, [r7, #100]	; 0x64
 8003e56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	461a      	mov	r2, r3
 8003e5c:	f04f 0300 	mov.w	r3, #0
 8003e60:	1891      	adds	r1, r2, r2
 8003e62:	63b9      	str	r1, [r7, #56]	; 0x38
 8003e64:	415b      	adcs	r3, r3
 8003e66:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e68:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003e6c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003e70:	f7fc fa1e 	bl	80002b0 <__aeabi_uldivmod>
 8003e74:	4602      	mov	r2, r0
 8003e76:	460b      	mov	r3, r1
 8003e78:	4ba5      	ldr	r3, [pc, #660]	; (8004110 <UART_SetConfig+0x38c>)
 8003e7a:	fba3 2302 	umull	r2, r3, r3, r2
 8003e7e:	095b      	lsrs	r3, r3, #5
 8003e80:	011e      	lsls	r6, r3, #4
 8003e82:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e84:	461c      	mov	r4, r3
 8003e86:	f04f 0500 	mov.w	r5, #0
 8003e8a:	4622      	mov	r2, r4
 8003e8c:	462b      	mov	r3, r5
 8003e8e:	1891      	adds	r1, r2, r2
 8003e90:	6339      	str	r1, [r7, #48]	; 0x30
 8003e92:	415b      	adcs	r3, r3
 8003e94:	637b      	str	r3, [r7, #52]	; 0x34
 8003e96:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003e9a:	1912      	adds	r2, r2, r4
 8003e9c:	eb45 0303 	adc.w	r3, r5, r3
 8003ea0:	f04f 0000 	mov.w	r0, #0
 8003ea4:	f04f 0100 	mov.w	r1, #0
 8003ea8:	00d9      	lsls	r1, r3, #3
 8003eaa:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003eae:	00d0      	lsls	r0, r2, #3
 8003eb0:	4602      	mov	r2, r0
 8003eb2:	460b      	mov	r3, r1
 8003eb4:	1911      	adds	r1, r2, r4
 8003eb6:	65b9      	str	r1, [r7, #88]	; 0x58
 8003eb8:	416b      	adcs	r3, r5
 8003eba:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003ebc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	461a      	mov	r2, r3
 8003ec2:	f04f 0300 	mov.w	r3, #0
 8003ec6:	1891      	adds	r1, r2, r2
 8003ec8:	62b9      	str	r1, [r7, #40]	; 0x28
 8003eca:	415b      	adcs	r3, r3
 8003ecc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ece:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003ed2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003ed6:	f7fc f9eb 	bl	80002b0 <__aeabi_uldivmod>
 8003eda:	4602      	mov	r2, r0
 8003edc:	460b      	mov	r3, r1
 8003ede:	4b8c      	ldr	r3, [pc, #560]	; (8004110 <UART_SetConfig+0x38c>)
 8003ee0:	fba3 1302 	umull	r1, r3, r3, r2
 8003ee4:	095b      	lsrs	r3, r3, #5
 8003ee6:	2164      	movs	r1, #100	; 0x64
 8003ee8:	fb01 f303 	mul.w	r3, r1, r3
 8003eec:	1ad3      	subs	r3, r2, r3
 8003eee:	00db      	lsls	r3, r3, #3
 8003ef0:	3332      	adds	r3, #50	; 0x32
 8003ef2:	4a87      	ldr	r2, [pc, #540]	; (8004110 <UART_SetConfig+0x38c>)
 8003ef4:	fba2 2303 	umull	r2, r3, r2, r3
 8003ef8:	095b      	lsrs	r3, r3, #5
 8003efa:	005b      	lsls	r3, r3, #1
 8003efc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003f00:	441e      	add	r6, r3
 8003f02:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f04:	4618      	mov	r0, r3
 8003f06:	f04f 0100 	mov.w	r1, #0
 8003f0a:	4602      	mov	r2, r0
 8003f0c:	460b      	mov	r3, r1
 8003f0e:	1894      	adds	r4, r2, r2
 8003f10:	623c      	str	r4, [r7, #32]
 8003f12:	415b      	adcs	r3, r3
 8003f14:	627b      	str	r3, [r7, #36]	; 0x24
 8003f16:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003f1a:	1812      	adds	r2, r2, r0
 8003f1c:	eb41 0303 	adc.w	r3, r1, r3
 8003f20:	f04f 0400 	mov.w	r4, #0
 8003f24:	f04f 0500 	mov.w	r5, #0
 8003f28:	00dd      	lsls	r5, r3, #3
 8003f2a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003f2e:	00d4      	lsls	r4, r2, #3
 8003f30:	4622      	mov	r2, r4
 8003f32:	462b      	mov	r3, r5
 8003f34:	1814      	adds	r4, r2, r0
 8003f36:	653c      	str	r4, [r7, #80]	; 0x50
 8003f38:	414b      	adcs	r3, r1
 8003f3a:	657b      	str	r3, [r7, #84]	; 0x54
 8003f3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	461a      	mov	r2, r3
 8003f42:	f04f 0300 	mov.w	r3, #0
 8003f46:	1891      	adds	r1, r2, r2
 8003f48:	61b9      	str	r1, [r7, #24]
 8003f4a:	415b      	adcs	r3, r3
 8003f4c:	61fb      	str	r3, [r7, #28]
 8003f4e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003f52:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003f56:	f7fc f9ab 	bl	80002b0 <__aeabi_uldivmod>
 8003f5a:	4602      	mov	r2, r0
 8003f5c:	460b      	mov	r3, r1
 8003f5e:	4b6c      	ldr	r3, [pc, #432]	; (8004110 <UART_SetConfig+0x38c>)
 8003f60:	fba3 1302 	umull	r1, r3, r3, r2
 8003f64:	095b      	lsrs	r3, r3, #5
 8003f66:	2164      	movs	r1, #100	; 0x64
 8003f68:	fb01 f303 	mul.w	r3, r1, r3
 8003f6c:	1ad3      	subs	r3, r2, r3
 8003f6e:	00db      	lsls	r3, r3, #3
 8003f70:	3332      	adds	r3, #50	; 0x32
 8003f72:	4a67      	ldr	r2, [pc, #412]	; (8004110 <UART_SetConfig+0x38c>)
 8003f74:	fba2 2303 	umull	r2, r3, r2, r3
 8003f78:	095b      	lsrs	r3, r3, #5
 8003f7a:	f003 0207 	and.w	r2, r3, #7
 8003f7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4432      	add	r2, r6
 8003f84:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003f86:	e0b9      	b.n	80040fc <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003f88:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f8a:	461c      	mov	r4, r3
 8003f8c:	f04f 0500 	mov.w	r5, #0
 8003f90:	4622      	mov	r2, r4
 8003f92:	462b      	mov	r3, r5
 8003f94:	1891      	adds	r1, r2, r2
 8003f96:	6139      	str	r1, [r7, #16]
 8003f98:	415b      	adcs	r3, r3
 8003f9a:	617b      	str	r3, [r7, #20]
 8003f9c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003fa0:	1912      	adds	r2, r2, r4
 8003fa2:	eb45 0303 	adc.w	r3, r5, r3
 8003fa6:	f04f 0000 	mov.w	r0, #0
 8003faa:	f04f 0100 	mov.w	r1, #0
 8003fae:	00d9      	lsls	r1, r3, #3
 8003fb0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003fb4:	00d0      	lsls	r0, r2, #3
 8003fb6:	4602      	mov	r2, r0
 8003fb8:	460b      	mov	r3, r1
 8003fba:	eb12 0804 	adds.w	r8, r2, r4
 8003fbe:	eb43 0905 	adc.w	r9, r3, r5
 8003fc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	f04f 0100 	mov.w	r1, #0
 8003fcc:	f04f 0200 	mov.w	r2, #0
 8003fd0:	f04f 0300 	mov.w	r3, #0
 8003fd4:	008b      	lsls	r3, r1, #2
 8003fd6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003fda:	0082      	lsls	r2, r0, #2
 8003fdc:	4640      	mov	r0, r8
 8003fde:	4649      	mov	r1, r9
 8003fe0:	f7fc f966 	bl	80002b0 <__aeabi_uldivmod>
 8003fe4:	4602      	mov	r2, r0
 8003fe6:	460b      	mov	r3, r1
 8003fe8:	4b49      	ldr	r3, [pc, #292]	; (8004110 <UART_SetConfig+0x38c>)
 8003fea:	fba3 2302 	umull	r2, r3, r3, r2
 8003fee:	095b      	lsrs	r3, r3, #5
 8003ff0:	011e      	lsls	r6, r3, #4
 8003ff2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	f04f 0100 	mov.w	r1, #0
 8003ffa:	4602      	mov	r2, r0
 8003ffc:	460b      	mov	r3, r1
 8003ffe:	1894      	adds	r4, r2, r2
 8004000:	60bc      	str	r4, [r7, #8]
 8004002:	415b      	adcs	r3, r3
 8004004:	60fb      	str	r3, [r7, #12]
 8004006:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800400a:	1812      	adds	r2, r2, r0
 800400c:	eb41 0303 	adc.w	r3, r1, r3
 8004010:	f04f 0400 	mov.w	r4, #0
 8004014:	f04f 0500 	mov.w	r5, #0
 8004018:	00dd      	lsls	r5, r3, #3
 800401a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800401e:	00d4      	lsls	r4, r2, #3
 8004020:	4622      	mov	r2, r4
 8004022:	462b      	mov	r3, r5
 8004024:	1814      	adds	r4, r2, r0
 8004026:	64bc      	str	r4, [r7, #72]	; 0x48
 8004028:	414b      	adcs	r3, r1
 800402a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800402c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800402e:	685b      	ldr	r3, [r3, #4]
 8004030:	4618      	mov	r0, r3
 8004032:	f04f 0100 	mov.w	r1, #0
 8004036:	f04f 0200 	mov.w	r2, #0
 800403a:	f04f 0300 	mov.w	r3, #0
 800403e:	008b      	lsls	r3, r1, #2
 8004040:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004044:	0082      	lsls	r2, r0, #2
 8004046:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800404a:	f7fc f931 	bl	80002b0 <__aeabi_uldivmod>
 800404e:	4602      	mov	r2, r0
 8004050:	460b      	mov	r3, r1
 8004052:	4b2f      	ldr	r3, [pc, #188]	; (8004110 <UART_SetConfig+0x38c>)
 8004054:	fba3 1302 	umull	r1, r3, r3, r2
 8004058:	095b      	lsrs	r3, r3, #5
 800405a:	2164      	movs	r1, #100	; 0x64
 800405c:	fb01 f303 	mul.w	r3, r1, r3
 8004060:	1ad3      	subs	r3, r2, r3
 8004062:	011b      	lsls	r3, r3, #4
 8004064:	3332      	adds	r3, #50	; 0x32
 8004066:	4a2a      	ldr	r2, [pc, #168]	; (8004110 <UART_SetConfig+0x38c>)
 8004068:	fba2 2303 	umull	r2, r3, r2, r3
 800406c:	095b      	lsrs	r3, r3, #5
 800406e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004072:	441e      	add	r6, r3
 8004074:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004076:	4618      	mov	r0, r3
 8004078:	f04f 0100 	mov.w	r1, #0
 800407c:	4602      	mov	r2, r0
 800407e:	460b      	mov	r3, r1
 8004080:	1894      	adds	r4, r2, r2
 8004082:	603c      	str	r4, [r7, #0]
 8004084:	415b      	adcs	r3, r3
 8004086:	607b      	str	r3, [r7, #4]
 8004088:	e9d7 2300 	ldrd	r2, r3, [r7]
 800408c:	1812      	adds	r2, r2, r0
 800408e:	eb41 0303 	adc.w	r3, r1, r3
 8004092:	f04f 0400 	mov.w	r4, #0
 8004096:	f04f 0500 	mov.w	r5, #0
 800409a:	00dd      	lsls	r5, r3, #3
 800409c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80040a0:	00d4      	lsls	r4, r2, #3
 80040a2:	4622      	mov	r2, r4
 80040a4:	462b      	mov	r3, r5
 80040a6:	eb12 0a00 	adds.w	sl, r2, r0
 80040aa:	eb43 0b01 	adc.w	fp, r3, r1
 80040ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	4618      	mov	r0, r3
 80040b4:	f04f 0100 	mov.w	r1, #0
 80040b8:	f04f 0200 	mov.w	r2, #0
 80040bc:	f04f 0300 	mov.w	r3, #0
 80040c0:	008b      	lsls	r3, r1, #2
 80040c2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80040c6:	0082      	lsls	r2, r0, #2
 80040c8:	4650      	mov	r0, sl
 80040ca:	4659      	mov	r1, fp
 80040cc:	f7fc f8f0 	bl	80002b0 <__aeabi_uldivmod>
 80040d0:	4602      	mov	r2, r0
 80040d2:	460b      	mov	r3, r1
 80040d4:	4b0e      	ldr	r3, [pc, #56]	; (8004110 <UART_SetConfig+0x38c>)
 80040d6:	fba3 1302 	umull	r1, r3, r3, r2
 80040da:	095b      	lsrs	r3, r3, #5
 80040dc:	2164      	movs	r1, #100	; 0x64
 80040de:	fb01 f303 	mul.w	r3, r1, r3
 80040e2:	1ad3      	subs	r3, r2, r3
 80040e4:	011b      	lsls	r3, r3, #4
 80040e6:	3332      	adds	r3, #50	; 0x32
 80040e8:	4a09      	ldr	r2, [pc, #36]	; (8004110 <UART_SetConfig+0x38c>)
 80040ea:	fba2 2303 	umull	r2, r3, r2, r3
 80040ee:	095b      	lsrs	r3, r3, #5
 80040f0:	f003 020f 	and.w	r2, r3, #15
 80040f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4432      	add	r2, r6
 80040fa:	609a      	str	r2, [r3, #8]
}
 80040fc:	bf00      	nop
 80040fe:	377c      	adds	r7, #124	; 0x7c
 8004100:	46bd      	mov	sp, r7
 8004102:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004106:	bf00      	nop
 8004108:	40011000 	.word	0x40011000
 800410c:	40011400 	.word	0x40011400
 8004110:	51eb851f 	.word	0x51eb851f

08004114 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004114:	b480      	push	{r7}
 8004116:	b085      	sub	sp, #20
 8004118:	af00      	add	r7, sp, #0
 800411a:	4603      	mov	r3, r0
 800411c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800411e:	2300      	movs	r3, #0
 8004120:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004122:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004126:	2b84      	cmp	r3, #132	; 0x84
 8004128:	d005      	beq.n	8004136 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800412a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	4413      	add	r3, r2
 8004132:	3303      	adds	r3, #3
 8004134:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004136:	68fb      	ldr	r3, [r7, #12]
}
 8004138:	4618      	mov	r0, r3
 800413a:	3714      	adds	r7, #20
 800413c:	46bd      	mov	sp, r7
 800413e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004142:	4770      	bx	lr

08004144 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004148:	f000 fade 	bl	8004708 <vTaskStartScheduler>
  
  return osOK;
 800414c:	2300      	movs	r3, #0
}
 800414e:	4618      	mov	r0, r3
 8004150:	bd80      	pop	{r7, pc}

08004152 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004152:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004154:	b089      	sub	sp, #36	; 0x24
 8004156:	af04      	add	r7, sp, #16
 8004158:	6078      	str	r0, [r7, #4]
 800415a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	695b      	ldr	r3, [r3, #20]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d020      	beq.n	80041a6 <osThreadCreate+0x54>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	699b      	ldr	r3, [r3, #24]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d01c      	beq.n	80041a6 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	685c      	ldr	r4, [r3, #4]
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681d      	ldr	r5, [r3, #0]
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	691e      	ldr	r6, [r3, #16]
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800417e:	4618      	mov	r0, r3
 8004180:	f7ff ffc8 	bl	8004114 <makeFreeRtosPriority>
 8004184:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	695b      	ldr	r3, [r3, #20]
 800418a:	687a      	ldr	r2, [r7, #4]
 800418c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800418e:	9202      	str	r2, [sp, #8]
 8004190:	9301      	str	r3, [sp, #4]
 8004192:	9100      	str	r1, [sp, #0]
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	4632      	mov	r2, r6
 8004198:	4629      	mov	r1, r5
 800419a:	4620      	mov	r0, r4
 800419c:	f000 f8ed 	bl	800437a <xTaskCreateStatic>
 80041a0:	4603      	mov	r3, r0
 80041a2:	60fb      	str	r3, [r7, #12]
 80041a4:	e01c      	b.n	80041e0 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	685c      	ldr	r4, [r3, #4]
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80041b2:	b29e      	uxth	r6, r3
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80041ba:	4618      	mov	r0, r3
 80041bc:	f7ff ffaa 	bl	8004114 <makeFreeRtosPriority>
 80041c0:	4602      	mov	r2, r0
 80041c2:	f107 030c 	add.w	r3, r7, #12
 80041c6:	9301      	str	r3, [sp, #4]
 80041c8:	9200      	str	r2, [sp, #0]
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	4632      	mov	r2, r6
 80041ce:	4629      	mov	r1, r5
 80041d0:	4620      	mov	r0, r4
 80041d2:	f000 f92f 	bl	8004434 <xTaskCreate>
 80041d6:	4603      	mov	r3, r0
 80041d8:	2b01      	cmp	r3, #1
 80041da:	d001      	beq.n	80041e0 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80041dc:	2300      	movs	r3, #0
 80041de:	e000      	b.n	80041e2 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80041e0:	68fb      	ldr	r3, [r7, #12]
}
 80041e2:	4618      	mov	r0, r3
 80041e4:	3714      	adds	r7, #20
 80041e6:	46bd      	mov	sp, r7
 80041e8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080041ea <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80041ea:	b580      	push	{r7, lr}
 80041ec:	b084      	sub	sp, #16
 80041ee:	af00      	add	r7, sp, #0
 80041f0:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d001      	beq.n	8004200 <osDelay+0x16>
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	e000      	b.n	8004202 <osDelay+0x18>
 8004200:	2301      	movs	r3, #1
 8004202:	4618      	mov	r0, r3
 8004204:	f000 fa4c 	bl	80046a0 <vTaskDelay>
  
  return osOK;
 8004208:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800420a:	4618      	mov	r0, r3
 800420c:	3710      	adds	r7, #16
 800420e:	46bd      	mov	sp, r7
 8004210:	bd80      	pop	{r7, pc}

08004212 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004212:	b480      	push	{r7}
 8004214:	b083      	sub	sp, #12
 8004216:	af00      	add	r7, sp, #0
 8004218:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	f103 0208 	add.w	r2, r3, #8
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800422a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	f103 0208 	add.w	r2, r3, #8
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	f103 0208 	add.w	r2, r3, #8
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2200      	movs	r2, #0
 8004244:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004246:	bf00      	nop
 8004248:	370c      	adds	r7, #12
 800424a:	46bd      	mov	sp, r7
 800424c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004250:	4770      	bx	lr

08004252 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004252:	b480      	push	{r7}
 8004254:	b083      	sub	sp, #12
 8004256:	af00      	add	r7, sp, #0
 8004258:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2200      	movs	r2, #0
 800425e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004260:	bf00      	nop
 8004262:	370c      	adds	r7, #12
 8004264:	46bd      	mov	sp, r7
 8004266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426a:	4770      	bx	lr

0800426c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800426c:	b480      	push	{r7}
 800426e:	b085      	sub	sp, #20
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
 8004274:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	685b      	ldr	r3, [r3, #4]
 800427a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	68fa      	ldr	r2, [r7, #12]
 8004280:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	689a      	ldr	r2, [r3, #8]
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	689b      	ldr	r3, [r3, #8]
 800428e:	683a      	ldr	r2, [r7, #0]
 8004290:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	683a      	ldr	r2, [r7, #0]
 8004296:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	687a      	ldr	r2, [r7, #4]
 800429c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	1c5a      	adds	r2, r3, #1
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	601a      	str	r2, [r3, #0]
}
 80042a8:	bf00      	nop
 80042aa:	3714      	adds	r7, #20
 80042ac:	46bd      	mov	sp, r7
 80042ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b2:	4770      	bx	lr

080042b4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80042b4:	b480      	push	{r7}
 80042b6:	b085      	sub	sp, #20
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
 80042bc:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80042ca:	d103      	bne.n	80042d4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	691b      	ldr	r3, [r3, #16]
 80042d0:	60fb      	str	r3, [r7, #12]
 80042d2:	e00c      	b.n	80042ee <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	3308      	adds	r3, #8
 80042d8:	60fb      	str	r3, [r7, #12]
 80042da:	e002      	b.n	80042e2 <vListInsert+0x2e>
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	685b      	ldr	r3, [r3, #4]
 80042e0:	60fb      	str	r3, [r7, #12]
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	68ba      	ldr	r2, [r7, #8]
 80042ea:	429a      	cmp	r2, r3
 80042ec:	d2f6      	bcs.n	80042dc <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	685a      	ldr	r2, [r3, #4]
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	683a      	ldr	r2, [r7, #0]
 80042fc:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	68fa      	ldr	r2, [r7, #12]
 8004302:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	683a      	ldr	r2, [r7, #0]
 8004308:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	687a      	ldr	r2, [r7, #4]
 800430e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	1c5a      	adds	r2, r3, #1
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	601a      	str	r2, [r3, #0]
}
 800431a:	bf00      	nop
 800431c:	3714      	adds	r7, #20
 800431e:	46bd      	mov	sp, r7
 8004320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004324:	4770      	bx	lr

08004326 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004326:	b480      	push	{r7}
 8004328:	b085      	sub	sp, #20
 800432a:	af00      	add	r7, sp, #0
 800432c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	691b      	ldr	r3, [r3, #16]
 8004332:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	687a      	ldr	r2, [r7, #4]
 800433a:	6892      	ldr	r2, [r2, #8]
 800433c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	689b      	ldr	r3, [r3, #8]
 8004342:	687a      	ldr	r2, [r7, #4]
 8004344:	6852      	ldr	r2, [r2, #4]
 8004346:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	687a      	ldr	r2, [r7, #4]
 800434e:	429a      	cmp	r2, r3
 8004350:	d103      	bne.n	800435a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	689a      	ldr	r2, [r3, #8]
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2200      	movs	r2, #0
 800435e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	1e5a      	subs	r2, r3, #1
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
}
 800436e:	4618      	mov	r0, r3
 8004370:	3714      	adds	r7, #20
 8004372:	46bd      	mov	sp, r7
 8004374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004378:	4770      	bx	lr

0800437a <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800437a:	b580      	push	{r7, lr}
 800437c:	b08e      	sub	sp, #56	; 0x38
 800437e:	af04      	add	r7, sp, #16
 8004380:	60f8      	str	r0, [r7, #12]
 8004382:	60b9      	str	r1, [r7, #8]
 8004384:	607a      	str	r2, [r7, #4]
 8004386:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004388:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800438a:	2b00      	cmp	r3, #0
 800438c:	d10a      	bne.n	80043a4 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800438e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004392:	f383 8811 	msr	BASEPRI, r3
 8004396:	f3bf 8f6f 	isb	sy
 800439a:	f3bf 8f4f 	dsb	sy
 800439e:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80043a0:	bf00      	nop
 80043a2:	e7fe      	b.n	80043a2 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80043a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d10a      	bne.n	80043c0 <xTaskCreateStatic+0x46>
	__asm volatile
 80043aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043ae:	f383 8811 	msr	BASEPRI, r3
 80043b2:	f3bf 8f6f 	isb	sy
 80043b6:	f3bf 8f4f 	dsb	sy
 80043ba:	61fb      	str	r3, [r7, #28]
}
 80043bc:	bf00      	nop
 80043be:	e7fe      	b.n	80043be <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80043c0:	2354      	movs	r3, #84	; 0x54
 80043c2:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80043c4:	693b      	ldr	r3, [r7, #16]
 80043c6:	2b54      	cmp	r3, #84	; 0x54
 80043c8:	d00a      	beq.n	80043e0 <xTaskCreateStatic+0x66>
	__asm volatile
 80043ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043ce:	f383 8811 	msr	BASEPRI, r3
 80043d2:	f3bf 8f6f 	isb	sy
 80043d6:	f3bf 8f4f 	dsb	sy
 80043da:	61bb      	str	r3, [r7, #24]
}
 80043dc:	bf00      	nop
 80043de:	e7fe      	b.n	80043de <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80043e0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80043e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d01e      	beq.n	8004426 <xTaskCreateStatic+0xac>
 80043e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d01b      	beq.n	8004426 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80043ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043f0:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80043f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043f4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80043f6:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80043f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043fa:	2202      	movs	r2, #2
 80043fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004400:	2300      	movs	r3, #0
 8004402:	9303      	str	r3, [sp, #12]
 8004404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004406:	9302      	str	r3, [sp, #8]
 8004408:	f107 0314 	add.w	r3, r7, #20
 800440c:	9301      	str	r3, [sp, #4]
 800440e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004410:	9300      	str	r3, [sp, #0]
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	687a      	ldr	r2, [r7, #4]
 8004416:	68b9      	ldr	r1, [r7, #8]
 8004418:	68f8      	ldr	r0, [r7, #12]
 800441a:	f000 f850 	bl	80044be <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800441e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004420:	f000 f8d4 	bl	80045cc <prvAddNewTaskToReadyList>
 8004424:	e001      	b.n	800442a <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8004426:	2300      	movs	r3, #0
 8004428:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800442a:	697b      	ldr	r3, [r7, #20]
	}
 800442c:	4618      	mov	r0, r3
 800442e:	3728      	adds	r7, #40	; 0x28
 8004430:	46bd      	mov	sp, r7
 8004432:	bd80      	pop	{r7, pc}

08004434 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004434:	b580      	push	{r7, lr}
 8004436:	b08c      	sub	sp, #48	; 0x30
 8004438:	af04      	add	r7, sp, #16
 800443a:	60f8      	str	r0, [r7, #12]
 800443c:	60b9      	str	r1, [r7, #8]
 800443e:	603b      	str	r3, [r7, #0]
 8004440:	4613      	mov	r3, r2
 8004442:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004444:	88fb      	ldrh	r3, [r7, #6]
 8004446:	009b      	lsls	r3, r3, #2
 8004448:	4618      	mov	r0, r3
 800444a:	f000 fec5 	bl	80051d8 <pvPortMalloc>
 800444e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004450:	697b      	ldr	r3, [r7, #20]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d00e      	beq.n	8004474 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004456:	2054      	movs	r0, #84	; 0x54
 8004458:	f000 febe 	bl	80051d8 <pvPortMalloc>
 800445c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800445e:	69fb      	ldr	r3, [r7, #28]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d003      	beq.n	800446c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004464:	69fb      	ldr	r3, [r7, #28]
 8004466:	697a      	ldr	r2, [r7, #20]
 8004468:	631a      	str	r2, [r3, #48]	; 0x30
 800446a:	e005      	b.n	8004478 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800446c:	6978      	ldr	r0, [r7, #20]
 800446e:	f000 ff7f 	bl	8005370 <vPortFree>
 8004472:	e001      	b.n	8004478 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004474:	2300      	movs	r3, #0
 8004476:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004478:	69fb      	ldr	r3, [r7, #28]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d017      	beq.n	80044ae <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800447e:	69fb      	ldr	r3, [r7, #28]
 8004480:	2200      	movs	r2, #0
 8004482:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004486:	88fa      	ldrh	r2, [r7, #6]
 8004488:	2300      	movs	r3, #0
 800448a:	9303      	str	r3, [sp, #12]
 800448c:	69fb      	ldr	r3, [r7, #28]
 800448e:	9302      	str	r3, [sp, #8]
 8004490:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004492:	9301      	str	r3, [sp, #4]
 8004494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004496:	9300      	str	r3, [sp, #0]
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	68b9      	ldr	r1, [r7, #8]
 800449c:	68f8      	ldr	r0, [r7, #12]
 800449e:	f000 f80e 	bl	80044be <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80044a2:	69f8      	ldr	r0, [r7, #28]
 80044a4:	f000 f892 	bl	80045cc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80044a8:	2301      	movs	r3, #1
 80044aa:	61bb      	str	r3, [r7, #24]
 80044ac:	e002      	b.n	80044b4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80044ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80044b2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80044b4:	69bb      	ldr	r3, [r7, #24]
	}
 80044b6:	4618      	mov	r0, r3
 80044b8:	3720      	adds	r7, #32
 80044ba:	46bd      	mov	sp, r7
 80044bc:	bd80      	pop	{r7, pc}

080044be <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80044be:	b580      	push	{r7, lr}
 80044c0:	b088      	sub	sp, #32
 80044c2:	af00      	add	r7, sp, #0
 80044c4:	60f8      	str	r0, [r7, #12]
 80044c6:	60b9      	str	r1, [r7, #8]
 80044c8:	607a      	str	r2, [r7, #4]
 80044ca:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80044cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80044d6:	3b01      	subs	r3, #1
 80044d8:	009b      	lsls	r3, r3, #2
 80044da:	4413      	add	r3, r2
 80044dc:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80044de:	69bb      	ldr	r3, [r7, #24]
 80044e0:	f023 0307 	bic.w	r3, r3, #7
 80044e4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80044e6:	69bb      	ldr	r3, [r7, #24]
 80044e8:	f003 0307 	and.w	r3, r3, #7
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d00a      	beq.n	8004506 <prvInitialiseNewTask+0x48>
	__asm volatile
 80044f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044f4:	f383 8811 	msr	BASEPRI, r3
 80044f8:	f3bf 8f6f 	isb	sy
 80044fc:	f3bf 8f4f 	dsb	sy
 8004500:	617b      	str	r3, [r7, #20]
}
 8004502:	bf00      	nop
 8004504:	e7fe      	b.n	8004504 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004506:	68bb      	ldr	r3, [r7, #8]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d01f      	beq.n	800454c <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800450c:	2300      	movs	r3, #0
 800450e:	61fb      	str	r3, [r7, #28]
 8004510:	e012      	b.n	8004538 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004512:	68ba      	ldr	r2, [r7, #8]
 8004514:	69fb      	ldr	r3, [r7, #28]
 8004516:	4413      	add	r3, r2
 8004518:	7819      	ldrb	r1, [r3, #0]
 800451a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800451c:	69fb      	ldr	r3, [r7, #28]
 800451e:	4413      	add	r3, r2
 8004520:	3334      	adds	r3, #52	; 0x34
 8004522:	460a      	mov	r2, r1
 8004524:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004526:	68ba      	ldr	r2, [r7, #8]
 8004528:	69fb      	ldr	r3, [r7, #28]
 800452a:	4413      	add	r3, r2
 800452c:	781b      	ldrb	r3, [r3, #0]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d006      	beq.n	8004540 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004532:	69fb      	ldr	r3, [r7, #28]
 8004534:	3301      	adds	r3, #1
 8004536:	61fb      	str	r3, [r7, #28]
 8004538:	69fb      	ldr	r3, [r7, #28]
 800453a:	2b0f      	cmp	r3, #15
 800453c:	d9e9      	bls.n	8004512 <prvInitialiseNewTask+0x54>
 800453e:	e000      	b.n	8004542 <prvInitialiseNewTask+0x84>
			{
				break;
 8004540:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004544:	2200      	movs	r2, #0
 8004546:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800454a:	e003      	b.n	8004554 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800454c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800454e:	2200      	movs	r2, #0
 8004550:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004556:	2b06      	cmp	r3, #6
 8004558:	d901      	bls.n	800455e <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800455a:	2306      	movs	r3, #6
 800455c:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800455e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004560:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004562:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004566:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004568:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800456a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800456c:	2200      	movs	r2, #0
 800456e:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004570:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004572:	3304      	adds	r3, #4
 8004574:	4618      	mov	r0, r3
 8004576:	f7ff fe6c 	bl	8004252 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800457a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800457c:	3318      	adds	r3, #24
 800457e:	4618      	mov	r0, r3
 8004580:	f7ff fe67 	bl	8004252 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004586:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004588:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800458a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800458c:	f1c3 0207 	rsb	r2, r3, #7
 8004590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004592:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004596:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004598:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800459a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800459c:	2200      	movs	r2, #0
 800459e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80045a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045a2:	2200      	movs	r2, #0
 80045a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80045a8:	683a      	ldr	r2, [r7, #0]
 80045aa:	68f9      	ldr	r1, [r7, #12]
 80045ac:	69b8      	ldr	r0, [r7, #24]
 80045ae:	f000 fc05 	bl	8004dbc <pxPortInitialiseStack>
 80045b2:	4602      	mov	r2, r0
 80045b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045b6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80045b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d002      	beq.n	80045c4 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80045be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80045c2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80045c4:	bf00      	nop
 80045c6:	3720      	adds	r7, #32
 80045c8:	46bd      	mov	sp, r7
 80045ca:	bd80      	pop	{r7, pc}

080045cc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b082      	sub	sp, #8
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80045d4:	f000 fd1e 	bl	8005014 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80045d8:	4b2a      	ldr	r3, [pc, #168]	; (8004684 <prvAddNewTaskToReadyList+0xb8>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	3301      	adds	r3, #1
 80045de:	4a29      	ldr	r2, [pc, #164]	; (8004684 <prvAddNewTaskToReadyList+0xb8>)
 80045e0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80045e2:	4b29      	ldr	r3, [pc, #164]	; (8004688 <prvAddNewTaskToReadyList+0xbc>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d109      	bne.n	80045fe <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80045ea:	4a27      	ldr	r2, [pc, #156]	; (8004688 <prvAddNewTaskToReadyList+0xbc>)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80045f0:	4b24      	ldr	r3, [pc, #144]	; (8004684 <prvAddNewTaskToReadyList+0xb8>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	2b01      	cmp	r3, #1
 80045f6:	d110      	bne.n	800461a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80045f8:	f000 fabc 	bl	8004b74 <prvInitialiseTaskLists>
 80045fc:	e00d      	b.n	800461a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80045fe:	4b23      	ldr	r3, [pc, #140]	; (800468c <prvAddNewTaskToReadyList+0xc0>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d109      	bne.n	800461a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004606:	4b20      	ldr	r3, [pc, #128]	; (8004688 <prvAddNewTaskToReadyList+0xbc>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004610:	429a      	cmp	r2, r3
 8004612:	d802      	bhi.n	800461a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004614:	4a1c      	ldr	r2, [pc, #112]	; (8004688 <prvAddNewTaskToReadyList+0xbc>)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800461a:	4b1d      	ldr	r3, [pc, #116]	; (8004690 <prvAddNewTaskToReadyList+0xc4>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	3301      	adds	r3, #1
 8004620:	4a1b      	ldr	r2, [pc, #108]	; (8004690 <prvAddNewTaskToReadyList+0xc4>)
 8004622:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004628:	2201      	movs	r2, #1
 800462a:	409a      	lsls	r2, r3
 800462c:	4b19      	ldr	r3, [pc, #100]	; (8004694 <prvAddNewTaskToReadyList+0xc8>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4313      	orrs	r3, r2
 8004632:	4a18      	ldr	r2, [pc, #96]	; (8004694 <prvAddNewTaskToReadyList+0xc8>)
 8004634:	6013      	str	r3, [r2, #0]
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800463a:	4613      	mov	r3, r2
 800463c:	009b      	lsls	r3, r3, #2
 800463e:	4413      	add	r3, r2
 8004640:	009b      	lsls	r3, r3, #2
 8004642:	4a15      	ldr	r2, [pc, #84]	; (8004698 <prvAddNewTaskToReadyList+0xcc>)
 8004644:	441a      	add	r2, r3
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	3304      	adds	r3, #4
 800464a:	4619      	mov	r1, r3
 800464c:	4610      	mov	r0, r2
 800464e:	f7ff fe0d 	bl	800426c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004652:	f000 fd0f 	bl	8005074 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004656:	4b0d      	ldr	r3, [pc, #52]	; (800468c <prvAddNewTaskToReadyList+0xc0>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d00e      	beq.n	800467c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800465e:	4b0a      	ldr	r3, [pc, #40]	; (8004688 <prvAddNewTaskToReadyList+0xbc>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004668:	429a      	cmp	r2, r3
 800466a:	d207      	bcs.n	800467c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800466c:	4b0b      	ldr	r3, [pc, #44]	; (800469c <prvAddNewTaskToReadyList+0xd0>)
 800466e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004672:	601a      	str	r2, [r3, #0]
 8004674:	f3bf 8f4f 	dsb	sy
 8004678:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800467c:	bf00      	nop
 800467e:	3708      	adds	r7, #8
 8004680:	46bd      	mov	sp, r7
 8004682:	bd80      	pop	{r7, pc}
 8004684:	200003e8 	.word	0x200003e8
 8004688:	200002e8 	.word	0x200002e8
 800468c:	200003f4 	.word	0x200003f4
 8004690:	20000404 	.word	0x20000404
 8004694:	200003f0 	.word	0x200003f0
 8004698:	200002ec 	.word	0x200002ec
 800469c:	e000ed04 	.word	0xe000ed04

080046a0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b084      	sub	sp, #16
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80046a8:	2300      	movs	r3, #0
 80046aa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d017      	beq.n	80046e2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80046b2:	4b13      	ldr	r3, [pc, #76]	; (8004700 <vTaskDelay+0x60>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d00a      	beq.n	80046d0 <vTaskDelay+0x30>
	__asm volatile
 80046ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046be:	f383 8811 	msr	BASEPRI, r3
 80046c2:	f3bf 8f6f 	isb	sy
 80046c6:	f3bf 8f4f 	dsb	sy
 80046ca:	60bb      	str	r3, [r7, #8]
}
 80046cc:	bf00      	nop
 80046ce:	e7fe      	b.n	80046ce <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80046d0:	f000 f87a 	bl	80047c8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80046d4:	2100      	movs	r1, #0
 80046d6:	6878      	ldr	r0, [r7, #4]
 80046d8:	f000 fb0a 	bl	8004cf0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80046dc:	f000 f882 	bl	80047e4 <xTaskResumeAll>
 80046e0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d107      	bne.n	80046f8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80046e8:	4b06      	ldr	r3, [pc, #24]	; (8004704 <vTaskDelay+0x64>)
 80046ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046ee:	601a      	str	r2, [r3, #0]
 80046f0:	f3bf 8f4f 	dsb	sy
 80046f4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80046f8:	bf00      	nop
 80046fa:	3710      	adds	r7, #16
 80046fc:	46bd      	mov	sp, r7
 80046fe:	bd80      	pop	{r7, pc}
 8004700:	20000410 	.word	0x20000410
 8004704:	e000ed04 	.word	0xe000ed04

08004708 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b08a      	sub	sp, #40	; 0x28
 800470c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800470e:	2300      	movs	r3, #0
 8004710:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004712:	2300      	movs	r3, #0
 8004714:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004716:	463a      	mov	r2, r7
 8004718:	1d39      	adds	r1, r7, #4
 800471a:	f107 0308 	add.w	r3, r7, #8
 800471e:	4618      	mov	r0, r3
 8004720:	f7fb ffec 	bl	80006fc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004724:	6839      	ldr	r1, [r7, #0]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	68ba      	ldr	r2, [r7, #8]
 800472a:	9202      	str	r2, [sp, #8]
 800472c:	9301      	str	r3, [sp, #4]
 800472e:	2300      	movs	r3, #0
 8004730:	9300      	str	r3, [sp, #0]
 8004732:	2300      	movs	r3, #0
 8004734:	460a      	mov	r2, r1
 8004736:	491e      	ldr	r1, [pc, #120]	; (80047b0 <vTaskStartScheduler+0xa8>)
 8004738:	481e      	ldr	r0, [pc, #120]	; (80047b4 <vTaskStartScheduler+0xac>)
 800473a:	f7ff fe1e 	bl	800437a <xTaskCreateStatic>
 800473e:	4603      	mov	r3, r0
 8004740:	4a1d      	ldr	r2, [pc, #116]	; (80047b8 <vTaskStartScheduler+0xb0>)
 8004742:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004744:	4b1c      	ldr	r3, [pc, #112]	; (80047b8 <vTaskStartScheduler+0xb0>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d002      	beq.n	8004752 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800474c:	2301      	movs	r3, #1
 800474e:	617b      	str	r3, [r7, #20]
 8004750:	e001      	b.n	8004756 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004752:	2300      	movs	r3, #0
 8004754:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004756:	697b      	ldr	r3, [r7, #20]
 8004758:	2b01      	cmp	r3, #1
 800475a:	d116      	bne.n	800478a <vTaskStartScheduler+0x82>
	__asm volatile
 800475c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004760:	f383 8811 	msr	BASEPRI, r3
 8004764:	f3bf 8f6f 	isb	sy
 8004768:	f3bf 8f4f 	dsb	sy
 800476c:	613b      	str	r3, [r7, #16]
}
 800476e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004770:	4b12      	ldr	r3, [pc, #72]	; (80047bc <vTaskStartScheduler+0xb4>)
 8004772:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004776:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004778:	4b11      	ldr	r3, [pc, #68]	; (80047c0 <vTaskStartScheduler+0xb8>)
 800477a:	2201      	movs	r2, #1
 800477c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800477e:	4b11      	ldr	r3, [pc, #68]	; (80047c4 <vTaskStartScheduler+0xbc>)
 8004780:	2200      	movs	r2, #0
 8004782:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004784:	f000 fba4 	bl	8004ed0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004788:	e00e      	b.n	80047a8 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800478a:	697b      	ldr	r3, [r7, #20]
 800478c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004790:	d10a      	bne.n	80047a8 <vTaskStartScheduler+0xa0>
	__asm volatile
 8004792:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004796:	f383 8811 	msr	BASEPRI, r3
 800479a:	f3bf 8f6f 	isb	sy
 800479e:	f3bf 8f4f 	dsb	sy
 80047a2:	60fb      	str	r3, [r7, #12]
}
 80047a4:	bf00      	nop
 80047a6:	e7fe      	b.n	80047a6 <vTaskStartScheduler+0x9e>
}
 80047a8:	bf00      	nop
 80047aa:	3718      	adds	r7, #24
 80047ac:	46bd      	mov	sp, r7
 80047ae:	bd80      	pop	{r7, pc}
 80047b0:	0800609c 	.word	0x0800609c
 80047b4:	08004b45 	.word	0x08004b45
 80047b8:	2000040c 	.word	0x2000040c
 80047bc:	20000408 	.word	0x20000408
 80047c0:	200003f4 	.word	0x200003f4
 80047c4:	200003ec 	.word	0x200003ec

080047c8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80047c8:	b480      	push	{r7}
 80047ca:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80047cc:	4b04      	ldr	r3, [pc, #16]	; (80047e0 <vTaskSuspendAll+0x18>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	3301      	adds	r3, #1
 80047d2:	4a03      	ldr	r2, [pc, #12]	; (80047e0 <vTaskSuspendAll+0x18>)
 80047d4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80047d6:	bf00      	nop
 80047d8:	46bd      	mov	sp, r7
 80047da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047de:	4770      	bx	lr
 80047e0:	20000410 	.word	0x20000410

080047e4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b084      	sub	sp, #16
 80047e8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80047ea:	2300      	movs	r3, #0
 80047ec:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80047ee:	2300      	movs	r3, #0
 80047f0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80047f2:	4b41      	ldr	r3, [pc, #260]	; (80048f8 <xTaskResumeAll+0x114>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d10a      	bne.n	8004810 <xTaskResumeAll+0x2c>
	__asm volatile
 80047fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047fe:	f383 8811 	msr	BASEPRI, r3
 8004802:	f3bf 8f6f 	isb	sy
 8004806:	f3bf 8f4f 	dsb	sy
 800480a:	603b      	str	r3, [r7, #0]
}
 800480c:	bf00      	nop
 800480e:	e7fe      	b.n	800480e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004810:	f000 fc00 	bl	8005014 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004814:	4b38      	ldr	r3, [pc, #224]	; (80048f8 <xTaskResumeAll+0x114>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	3b01      	subs	r3, #1
 800481a:	4a37      	ldr	r2, [pc, #220]	; (80048f8 <xTaskResumeAll+0x114>)
 800481c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800481e:	4b36      	ldr	r3, [pc, #216]	; (80048f8 <xTaskResumeAll+0x114>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d161      	bne.n	80048ea <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004826:	4b35      	ldr	r3, [pc, #212]	; (80048fc <xTaskResumeAll+0x118>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d05d      	beq.n	80048ea <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800482e:	e02e      	b.n	800488e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004830:	4b33      	ldr	r3, [pc, #204]	; (8004900 <xTaskResumeAll+0x11c>)
 8004832:	68db      	ldr	r3, [r3, #12]
 8004834:	68db      	ldr	r3, [r3, #12]
 8004836:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	3318      	adds	r3, #24
 800483c:	4618      	mov	r0, r3
 800483e:	f7ff fd72 	bl	8004326 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	3304      	adds	r3, #4
 8004846:	4618      	mov	r0, r3
 8004848:	f7ff fd6d 	bl	8004326 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004850:	2201      	movs	r2, #1
 8004852:	409a      	lsls	r2, r3
 8004854:	4b2b      	ldr	r3, [pc, #172]	; (8004904 <xTaskResumeAll+0x120>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4313      	orrs	r3, r2
 800485a:	4a2a      	ldr	r2, [pc, #168]	; (8004904 <xTaskResumeAll+0x120>)
 800485c:	6013      	str	r3, [r2, #0]
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004862:	4613      	mov	r3, r2
 8004864:	009b      	lsls	r3, r3, #2
 8004866:	4413      	add	r3, r2
 8004868:	009b      	lsls	r3, r3, #2
 800486a:	4a27      	ldr	r2, [pc, #156]	; (8004908 <xTaskResumeAll+0x124>)
 800486c:	441a      	add	r2, r3
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	3304      	adds	r3, #4
 8004872:	4619      	mov	r1, r3
 8004874:	4610      	mov	r0, r2
 8004876:	f7ff fcf9 	bl	800426c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800487e:	4b23      	ldr	r3, [pc, #140]	; (800490c <xTaskResumeAll+0x128>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004884:	429a      	cmp	r2, r3
 8004886:	d302      	bcc.n	800488e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8004888:	4b21      	ldr	r3, [pc, #132]	; (8004910 <xTaskResumeAll+0x12c>)
 800488a:	2201      	movs	r2, #1
 800488c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800488e:	4b1c      	ldr	r3, [pc, #112]	; (8004900 <xTaskResumeAll+0x11c>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d1cc      	bne.n	8004830 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d001      	beq.n	80048a0 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800489c:	f000 fa08 	bl	8004cb0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80048a0:	4b1c      	ldr	r3, [pc, #112]	; (8004914 <xTaskResumeAll+0x130>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d010      	beq.n	80048ce <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80048ac:	f000 f836 	bl	800491c <xTaskIncrementTick>
 80048b0:	4603      	mov	r3, r0
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d002      	beq.n	80048bc <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80048b6:	4b16      	ldr	r3, [pc, #88]	; (8004910 <xTaskResumeAll+0x12c>)
 80048b8:	2201      	movs	r2, #1
 80048ba:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	3b01      	subs	r3, #1
 80048c0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d1f1      	bne.n	80048ac <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80048c8:	4b12      	ldr	r3, [pc, #72]	; (8004914 <xTaskResumeAll+0x130>)
 80048ca:	2200      	movs	r2, #0
 80048cc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80048ce:	4b10      	ldr	r3, [pc, #64]	; (8004910 <xTaskResumeAll+0x12c>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d009      	beq.n	80048ea <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80048d6:	2301      	movs	r3, #1
 80048d8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80048da:	4b0f      	ldr	r3, [pc, #60]	; (8004918 <xTaskResumeAll+0x134>)
 80048dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80048e0:	601a      	str	r2, [r3, #0]
 80048e2:	f3bf 8f4f 	dsb	sy
 80048e6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80048ea:	f000 fbc3 	bl	8005074 <vPortExitCritical>

	return xAlreadyYielded;
 80048ee:	68bb      	ldr	r3, [r7, #8]
}
 80048f0:	4618      	mov	r0, r3
 80048f2:	3710      	adds	r7, #16
 80048f4:	46bd      	mov	sp, r7
 80048f6:	bd80      	pop	{r7, pc}
 80048f8:	20000410 	.word	0x20000410
 80048fc:	200003e8 	.word	0x200003e8
 8004900:	200003a8 	.word	0x200003a8
 8004904:	200003f0 	.word	0x200003f0
 8004908:	200002ec 	.word	0x200002ec
 800490c:	200002e8 	.word	0x200002e8
 8004910:	200003fc 	.word	0x200003fc
 8004914:	200003f8 	.word	0x200003f8
 8004918:	e000ed04 	.word	0xe000ed04

0800491c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b086      	sub	sp, #24
 8004920:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004922:	2300      	movs	r3, #0
 8004924:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004926:	4b4e      	ldr	r3, [pc, #312]	; (8004a60 <xTaskIncrementTick+0x144>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	2b00      	cmp	r3, #0
 800492c:	f040 808e 	bne.w	8004a4c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004930:	4b4c      	ldr	r3, [pc, #304]	; (8004a64 <xTaskIncrementTick+0x148>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	3301      	adds	r3, #1
 8004936:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004938:	4a4a      	ldr	r2, [pc, #296]	; (8004a64 <xTaskIncrementTick+0x148>)
 800493a:	693b      	ldr	r3, [r7, #16]
 800493c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800493e:	693b      	ldr	r3, [r7, #16]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d120      	bne.n	8004986 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004944:	4b48      	ldr	r3, [pc, #288]	; (8004a68 <xTaskIncrementTick+0x14c>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d00a      	beq.n	8004964 <xTaskIncrementTick+0x48>
	__asm volatile
 800494e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004952:	f383 8811 	msr	BASEPRI, r3
 8004956:	f3bf 8f6f 	isb	sy
 800495a:	f3bf 8f4f 	dsb	sy
 800495e:	603b      	str	r3, [r7, #0]
}
 8004960:	bf00      	nop
 8004962:	e7fe      	b.n	8004962 <xTaskIncrementTick+0x46>
 8004964:	4b40      	ldr	r3, [pc, #256]	; (8004a68 <xTaskIncrementTick+0x14c>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	60fb      	str	r3, [r7, #12]
 800496a:	4b40      	ldr	r3, [pc, #256]	; (8004a6c <xTaskIncrementTick+0x150>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	4a3e      	ldr	r2, [pc, #248]	; (8004a68 <xTaskIncrementTick+0x14c>)
 8004970:	6013      	str	r3, [r2, #0]
 8004972:	4a3e      	ldr	r2, [pc, #248]	; (8004a6c <xTaskIncrementTick+0x150>)
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	6013      	str	r3, [r2, #0]
 8004978:	4b3d      	ldr	r3, [pc, #244]	; (8004a70 <xTaskIncrementTick+0x154>)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	3301      	adds	r3, #1
 800497e:	4a3c      	ldr	r2, [pc, #240]	; (8004a70 <xTaskIncrementTick+0x154>)
 8004980:	6013      	str	r3, [r2, #0]
 8004982:	f000 f995 	bl	8004cb0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004986:	4b3b      	ldr	r3, [pc, #236]	; (8004a74 <xTaskIncrementTick+0x158>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	693a      	ldr	r2, [r7, #16]
 800498c:	429a      	cmp	r2, r3
 800498e:	d348      	bcc.n	8004a22 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004990:	4b35      	ldr	r3, [pc, #212]	; (8004a68 <xTaskIncrementTick+0x14c>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d104      	bne.n	80049a4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800499a:	4b36      	ldr	r3, [pc, #216]	; (8004a74 <xTaskIncrementTick+0x158>)
 800499c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80049a0:	601a      	str	r2, [r3, #0]
					break;
 80049a2:	e03e      	b.n	8004a22 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80049a4:	4b30      	ldr	r3, [pc, #192]	; (8004a68 <xTaskIncrementTick+0x14c>)
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	68db      	ldr	r3, [r3, #12]
 80049aa:	68db      	ldr	r3, [r3, #12]
 80049ac:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80049ae:	68bb      	ldr	r3, [r7, #8]
 80049b0:	685b      	ldr	r3, [r3, #4]
 80049b2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80049b4:	693a      	ldr	r2, [r7, #16]
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	429a      	cmp	r2, r3
 80049ba:	d203      	bcs.n	80049c4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80049bc:	4a2d      	ldr	r2, [pc, #180]	; (8004a74 <xTaskIncrementTick+0x158>)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80049c2:	e02e      	b.n	8004a22 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80049c4:	68bb      	ldr	r3, [r7, #8]
 80049c6:	3304      	adds	r3, #4
 80049c8:	4618      	mov	r0, r3
 80049ca:	f7ff fcac 	bl	8004326 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80049ce:	68bb      	ldr	r3, [r7, #8]
 80049d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d004      	beq.n	80049e0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80049d6:	68bb      	ldr	r3, [r7, #8]
 80049d8:	3318      	adds	r3, #24
 80049da:	4618      	mov	r0, r3
 80049dc:	f7ff fca3 	bl	8004326 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80049e0:	68bb      	ldr	r3, [r7, #8]
 80049e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049e4:	2201      	movs	r2, #1
 80049e6:	409a      	lsls	r2, r3
 80049e8:	4b23      	ldr	r3, [pc, #140]	; (8004a78 <xTaskIncrementTick+0x15c>)
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	4313      	orrs	r3, r2
 80049ee:	4a22      	ldr	r2, [pc, #136]	; (8004a78 <xTaskIncrementTick+0x15c>)
 80049f0:	6013      	str	r3, [r2, #0]
 80049f2:	68bb      	ldr	r3, [r7, #8]
 80049f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049f6:	4613      	mov	r3, r2
 80049f8:	009b      	lsls	r3, r3, #2
 80049fa:	4413      	add	r3, r2
 80049fc:	009b      	lsls	r3, r3, #2
 80049fe:	4a1f      	ldr	r2, [pc, #124]	; (8004a7c <xTaskIncrementTick+0x160>)
 8004a00:	441a      	add	r2, r3
 8004a02:	68bb      	ldr	r3, [r7, #8]
 8004a04:	3304      	adds	r3, #4
 8004a06:	4619      	mov	r1, r3
 8004a08:	4610      	mov	r0, r2
 8004a0a:	f7ff fc2f 	bl	800426c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004a0e:	68bb      	ldr	r3, [r7, #8]
 8004a10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a12:	4b1b      	ldr	r3, [pc, #108]	; (8004a80 <xTaskIncrementTick+0x164>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a18:	429a      	cmp	r2, r3
 8004a1a:	d3b9      	bcc.n	8004990 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004a20:	e7b6      	b.n	8004990 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004a22:	4b17      	ldr	r3, [pc, #92]	; (8004a80 <xTaskIncrementTick+0x164>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a28:	4914      	ldr	r1, [pc, #80]	; (8004a7c <xTaskIncrementTick+0x160>)
 8004a2a:	4613      	mov	r3, r2
 8004a2c:	009b      	lsls	r3, r3, #2
 8004a2e:	4413      	add	r3, r2
 8004a30:	009b      	lsls	r3, r3, #2
 8004a32:	440b      	add	r3, r1
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	2b01      	cmp	r3, #1
 8004a38:	d901      	bls.n	8004a3e <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004a3e:	4b11      	ldr	r3, [pc, #68]	; (8004a84 <xTaskIncrementTick+0x168>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d007      	beq.n	8004a56 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8004a46:	2301      	movs	r3, #1
 8004a48:	617b      	str	r3, [r7, #20]
 8004a4a:	e004      	b.n	8004a56 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004a4c:	4b0e      	ldr	r3, [pc, #56]	; (8004a88 <xTaskIncrementTick+0x16c>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	3301      	adds	r3, #1
 8004a52:	4a0d      	ldr	r2, [pc, #52]	; (8004a88 <xTaskIncrementTick+0x16c>)
 8004a54:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004a56:	697b      	ldr	r3, [r7, #20]
}
 8004a58:	4618      	mov	r0, r3
 8004a5a:	3718      	adds	r7, #24
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	bd80      	pop	{r7, pc}
 8004a60:	20000410 	.word	0x20000410
 8004a64:	200003ec 	.word	0x200003ec
 8004a68:	200003a0 	.word	0x200003a0
 8004a6c:	200003a4 	.word	0x200003a4
 8004a70:	20000400 	.word	0x20000400
 8004a74:	20000408 	.word	0x20000408
 8004a78:	200003f0 	.word	0x200003f0
 8004a7c:	200002ec 	.word	0x200002ec
 8004a80:	200002e8 	.word	0x200002e8
 8004a84:	200003fc 	.word	0x200003fc
 8004a88:	200003f8 	.word	0x200003f8

08004a8c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	b087      	sub	sp, #28
 8004a90:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004a92:	4b27      	ldr	r3, [pc, #156]	; (8004b30 <vTaskSwitchContext+0xa4>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d003      	beq.n	8004aa2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004a9a:	4b26      	ldr	r3, [pc, #152]	; (8004b34 <vTaskSwitchContext+0xa8>)
 8004a9c:	2201      	movs	r2, #1
 8004a9e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004aa0:	e03f      	b.n	8004b22 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8004aa2:	4b24      	ldr	r3, [pc, #144]	; (8004b34 <vTaskSwitchContext+0xa8>)
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004aa8:	4b23      	ldr	r3, [pc, #140]	; (8004b38 <vTaskSwitchContext+0xac>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	fab3 f383 	clz	r3, r3
 8004ab4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004ab6:	7afb      	ldrb	r3, [r7, #11]
 8004ab8:	f1c3 031f 	rsb	r3, r3, #31
 8004abc:	617b      	str	r3, [r7, #20]
 8004abe:	491f      	ldr	r1, [pc, #124]	; (8004b3c <vTaskSwitchContext+0xb0>)
 8004ac0:	697a      	ldr	r2, [r7, #20]
 8004ac2:	4613      	mov	r3, r2
 8004ac4:	009b      	lsls	r3, r3, #2
 8004ac6:	4413      	add	r3, r2
 8004ac8:	009b      	lsls	r3, r3, #2
 8004aca:	440b      	add	r3, r1
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d10a      	bne.n	8004ae8 <vTaskSwitchContext+0x5c>
	__asm volatile
 8004ad2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ad6:	f383 8811 	msr	BASEPRI, r3
 8004ada:	f3bf 8f6f 	isb	sy
 8004ade:	f3bf 8f4f 	dsb	sy
 8004ae2:	607b      	str	r3, [r7, #4]
}
 8004ae4:	bf00      	nop
 8004ae6:	e7fe      	b.n	8004ae6 <vTaskSwitchContext+0x5a>
 8004ae8:	697a      	ldr	r2, [r7, #20]
 8004aea:	4613      	mov	r3, r2
 8004aec:	009b      	lsls	r3, r3, #2
 8004aee:	4413      	add	r3, r2
 8004af0:	009b      	lsls	r3, r3, #2
 8004af2:	4a12      	ldr	r2, [pc, #72]	; (8004b3c <vTaskSwitchContext+0xb0>)
 8004af4:	4413      	add	r3, r2
 8004af6:	613b      	str	r3, [r7, #16]
 8004af8:	693b      	ldr	r3, [r7, #16]
 8004afa:	685b      	ldr	r3, [r3, #4]
 8004afc:	685a      	ldr	r2, [r3, #4]
 8004afe:	693b      	ldr	r3, [r7, #16]
 8004b00:	605a      	str	r2, [r3, #4]
 8004b02:	693b      	ldr	r3, [r7, #16]
 8004b04:	685a      	ldr	r2, [r3, #4]
 8004b06:	693b      	ldr	r3, [r7, #16]
 8004b08:	3308      	adds	r3, #8
 8004b0a:	429a      	cmp	r2, r3
 8004b0c:	d104      	bne.n	8004b18 <vTaskSwitchContext+0x8c>
 8004b0e:	693b      	ldr	r3, [r7, #16]
 8004b10:	685b      	ldr	r3, [r3, #4]
 8004b12:	685a      	ldr	r2, [r3, #4]
 8004b14:	693b      	ldr	r3, [r7, #16]
 8004b16:	605a      	str	r2, [r3, #4]
 8004b18:	693b      	ldr	r3, [r7, #16]
 8004b1a:	685b      	ldr	r3, [r3, #4]
 8004b1c:	68db      	ldr	r3, [r3, #12]
 8004b1e:	4a08      	ldr	r2, [pc, #32]	; (8004b40 <vTaskSwitchContext+0xb4>)
 8004b20:	6013      	str	r3, [r2, #0]
}
 8004b22:	bf00      	nop
 8004b24:	371c      	adds	r7, #28
 8004b26:	46bd      	mov	sp, r7
 8004b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2c:	4770      	bx	lr
 8004b2e:	bf00      	nop
 8004b30:	20000410 	.word	0x20000410
 8004b34:	200003fc 	.word	0x200003fc
 8004b38:	200003f0 	.word	0x200003f0
 8004b3c:	200002ec 	.word	0x200002ec
 8004b40:	200002e8 	.word	0x200002e8

08004b44 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b082      	sub	sp, #8
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004b4c:	f000 f852 	bl	8004bf4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004b50:	4b06      	ldr	r3, [pc, #24]	; (8004b6c <prvIdleTask+0x28>)
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	2b01      	cmp	r3, #1
 8004b56:	d9f9      	bls.n	8004b4c <prvIdleTask+0x8>
			{
				taskYIELD();
 8004b58:	4b05      	ldr	r3, [pc, #20]	; (8004b70 <prvIdleTask+0x2c>)
 8004b5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b5e:	601a      	str	r2, [r3, #0]
 8004b60:	f3bf 8f4f 	dsb	sy
 8004b64:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004b68:	e7f0      	b.n	8004b4c <prvIdleTask+0x8>
 8004b6a:	bf00      	nop
 8004b6c:	200002ec 	.word	0x200002ec
 8004b70:	e000ed04 	.word	0xe000ed04

08004b74 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b082      	sub	sp, #8
 8004b78:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	607b      	str	r3, [r7, #4]
 8004b7e:	e00c      	b.n	8004b9a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004b80:	687a      	ldr	r2, [r7, #4]
 8004b82:	4613      	mov	r3, r2
 8004b84:	009b      	lsls	r3, r3, #2
 8004b86:	4413      	add	r3, r2
 8004b88:	009b      	lsls	r3, r3, #2
 8004b8a:	4a12      	ldr	r2, [pc, #72]	; (8004bd4 <prvInitialiseTaskLists+0x60>)
 8004b8c:	4413      	add	r3, r2
 8004b8e:	4618      	mov	r0, r3
 8004b90:	f7ff fb3f 	bl	8004212 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	3301      	adds	r3, #1
 8004b98:	607b      	str	r3, [r7, #4]
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2b06      	cmp	r3, #6
 8004b9e:	d9ef      	bls.n	8004b80 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004ba0:	480d      	ldr	r0, [pc, #52]	; (8004bd8 <prvInitialiseTaskLists+0x64>)
 8004ba2:	f7ff fb36 	bl	8004212 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004ba6:	480d      	ldr	r0, [pc, #52]	; (8004bdc <prvInitialiseTaskLists+0x68>)
 8004ba8:	f7ff fb33 	bl	8004212 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004bac:	480c      	ldr	r0, [pc, #48]	; (8004be0 <prvInitialiseTaskLists+0x6c>)
 8004bae:	f7ff fb30 	bl	8004212 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004bb2:	480c      	ldr	r0, [pc, #48]	; (8004be4 <prvInitialiseTaskLists+0x70>)
 8004bb4:	f7ff fb2d 	bl	8004212 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004bb8:	480b      	ldr	r0, [pc, #44]	; (8004be8 <prvInitialiseTaskLists+0x74>)
 8004bba:	f7ff fb2a 	bl	8004212 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004bbe:	4b0b      	ldr	r3, [pc, #44]	; (8004bec <prvInitialiseTaskLists+0x78>)
 8004bc0:	4a05      	ldr	r2, [pc, #20]	; (8004bd8 <prvInitialiseTaskLists+0x64>)
 8004bc2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004bc4:	4b0a      	ldr	r3, [pc, #40]	; (8004bf0 <prvInitialiseTaskLists+0x7c>)
 8004bc6:	4a05      	ldr	r2, [pc, #20]	; (8004bdc <prvInitialiseTaskLists+0x68>)
 8004bc8:	601a      	str	r2, [r3, #0]
}
 8004bca:	bf00      	nop
 8004bcc:	3708      	adds	r7, #8
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	bd80      	pop	{r7, pc}
 8004bd2:	bf00      	nop
 8004bd4:	200002ec 	.word	0x200002ec
 8004bd8:	20000378 	.word	0x20000378
 8004bdc:	2000038c 	.word	0x2000038c
 8004be0:	200003a8 	.word	0x200003a8
 8004be4:	200003bc 	.word	0x200003bc
 8004be8:	200003d4 	.word	0x200003d4
 8004bec:	200003a0 	.word	0x200003a0
 8004bf0:	200003a4 	.word	0x200003a4

08004bf4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b082      	sub	sp, #8
 8004bf8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004bfa:	e019      	b.n	8004c30 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004bfc:	f000 fa0a 	bl	8005014 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c00:	4b10      	ldr	r3, [pc, #64]	; (8004c44 <prvCheckTasksWaitingTermination+0x50>)
 8004c02:	68db      	ldr	r3, [r3, #12]
 8004c04:	68db      	ldr	r3, [r3, #12]
 8004c06:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	3304      	adds	r3, #4
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	f7ff fb8a 	bl	8004326 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004c12:	4b0d      	ldr	r3, [pc, #52]	; (8004c48 <prvCheckTasksWaitingTermination+0x54>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	3b01      	subs	r3, #1
 8004c18:	4a0b      	ldr	r2, [pc, #44]	; (8004c48 <prvCheckTasksWaitingTermination+0x54>)
 8004c1a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004c1c:	4b0b      	ldr	r3, [pc, #44]	; (8004c4c <prvCheckTasksWaitingTermination+0x58>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	3b01      	subs	r3, #1
 8004c22:	4a0a      	ldr	r2, [pc, #40]	; (8004c4c <prvCheckTasksWaitingTermination+0x58>)
 8004c24:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004c26:	f000 fa25 	bl	8005074 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004c2a:	6878      	ldr	r0, [r7, #4]
 8004c2c:	f000 f810 	bl	8004c50 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004c30:	4b06      	ldr	r3, [pc, #24]	; (8004c4c <prvCheckTasksWaitingTermination+0x58>)
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d1e1      	bne.n	8004bfc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004c38:	bf00      	nop
 8004c3a:	bf00      	nop
 8004c3c:	3708      	adds	r7, #8
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	bd80      	pop	{r7, pc}
 8004c42:	bf00      	nop
 8004c44:	200003bc 	.word	0x200003bc
 8004c48:	200003e8 	.word	0x200003e8
 8004c4c:	200003d0 	.word	0x200003d0

08004c50 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b084      	sub	sp, #16
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d108      	bne.n	8004c74 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c66:	4618      	mov	r0, r3
 8004c68:	f000 fb82 	bl	8005370 <vPortFree>
				vPortFree( pxTCB );
 8004c6c:	6878      	ldr	r0, [r7, #4]
 8004c6e:	f000 fb7f 	bl	8005370 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004c72:	e018      	b.n	8004ca6 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004c7a:	2b01      	cmp	r3, #1
 8004c7c:	d103      	bne.n	8004c86 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004c7e:	6878      	ldr	r0, [r7, #4]
 8004c80:	f000 fb76 	bl	8005370 <vPortFree>
	}
 8004c84:	e00f      	b.n	8004ca6 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004c8c:	2b02      	cmp	r3, #2
 8004c8e:	d00a      	beq.n	8004ca6 <prvDeleteTCB+0x56>
	__asm volatile
 8004c90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c94:	f383 8811 	msr	BASEPRI, r3
 8004c98:	f3bf 8f6f 	isb	sy
 8004c9c:	f3bf 8f4f 	dsb	sy
 8004ca0:	60fb      	str	r3, [r7, #12]
}
 8004ca2:	bf00      	nop
 8004ca4:	e7fe      	b.n	8004ca4 <prvDeleteTCB+0x54>
	}
 8004ca6:	bf00      	nop
 8004ca8:	3710      	adds	r7, #16
 8004caa:	46bd      	mov	sp, r7
 8004cac:	bd80      	pop	{r7, pc}
	...

08004cb0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004cb0:	b480      	push	{r7}
 8004cb2:	b083      	sub	sp, #12
 8004cb4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004cb6:	4b0c      	ldr	r3, [pc, #48]	; (8004ce8 <prvResetNextTaskUnblockTime+0x38>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d104      	bne.n	8004cca <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004cc0:	4b0a      	ldr	r3, [pc, #40]	; (8004cec <prvResetNextTaskUnblockTime+0x3c>)
 8004cc2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004cc6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004cc8:	e008      	b.n	8004cdc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004cca:	4b07      	ldr	r3, [pc, #28]	; (8004ce8 <prvResetNextTaskUnblockTime+0x38>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	68db      	ldr	r3, [r3, #12]
 8004cd0:	68db      	ldr	r3, [r3, #12]
 8004cd2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	685b      	ldr	r3, [r3, #4]
 8004cd8:	4a04      	ldr	r2, [pc, #16]	; (8004cec <prvResetNextTaskUnblockTime+0x3c>)
 8004cda:	6013      	str	r3, [r2, #0]
}
 8004cdc:	bf00      	nop
 8004cde:	370c      	adds	r7, #12
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce6:	4770      	bx	lr
 8004ce8:	200003a0 	.word	0x200003a0
 8004cec:	20000408 	.word	0x20000408

08004cf0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b084      	sub	sp, #16
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
 8004cf8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004cfa:	4b29      	ldr	r3, [pc, #164]	; (8004da0 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004d00:	4b28      	ldr	r3, [pc, #160]	; (8004da4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	3304      	adds	r3, #4
 8004d06:	4618      	mov	r0, r3
 8004d08:	f7ff fb0d 	bl	8004326 <uxListRemove>
 8004d0c:	4603      	mov	r3, r0
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d10b      	bne.n	8004d2a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004d12:	4b24      	ldr	r3, [pc, #144]	; (8004da4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d18:	2201      	movs	r2, #1
 8004d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d1e:	43da      	mvns	r2, r3
 8004d20:	4b21      	ldr	r3, [pc, #132]	; (8004da8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4013      	ands	r3, r2
 8004d26:	4a20      	ldr	r2, [pc, #128]	; (8004da8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004d28:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004d30:	d10a      	bne.n	8004d48 <prvAddCurrentTaskToDelayedList+0x58>
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d007      	beq.n	8004d48 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004d38:	4b1a      	ldr	r3, [pc, #104]	; (8004da4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	3304      	adds	r3, #4
 8004d3e:	4619      	mov	r1, r3
 8004d40:	481a      	ldr	r0, [pc, #104]	; (8004dac <prvAddCurrentTaskToDelayedList+0xbc>)
 8004d42:	f7ff fa93 	bl	800426c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004d46:	e026      	b.n	8004d96 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004d48:	68fa      	ldr	r2, [r7, #12]
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	4413      	add	r3, r2
 8004d4e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004d50:	4b14      	ldr	r3, [pc, #80]	; (8004da4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	68ba      	ldr	r2, [r7, #8]
 8004d56:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004d58:	68ba      	ldr	r2, [r7, #8]
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	429a      	cmp	r2, r3
 8004d5e:	d209      	bcs.n	8004d74 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004d60:	4b13      	ldr	r3, [pc, #76]	; (8004db0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004d62:	681a      	ldr	r2, [r3, #0]
 8004d64:	4b0f      	ldr	r3, [pc, #60]	; (8004da4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	3304      	adds	r3, #4
 8004d6a:	4619      	mov	r1, r3
 8004d6c:	4610      	mov	r0, r2
 8004d6e:	f7ff faa1 	bl	80042b4 <vListInsert>
}
 8004d72:	e010      	b.n	8004d96 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004d74:	4b0f      	ldr	r3, [pc, #60]	; (8004db4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004d76:	681a      	ldr	r2, [r3, #0]
 8004d78:	4b0a      	ldr	r3, [pc, #40]	; (8004da4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	3304      	adds	r3, #4
 8004d7e:	4619      	mov	r1, r3
 8004d80:	4610      	mov	r0, r2
 8004d82:	f7ff fa97 	bl	80042b4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004d86:	4b0c      	ldr	r3, [pc, #48]	; (8004db8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	68ba      	ldr	r2, [r7, #8]
 8004d8c:	429a      	cmp	r2, r3
 8004d8e:	d202      	bcs.n	8004d96 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004d90:	4a09      	ldr	r2, [pc, #36]	; (8004db8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004d92:	68bb      	ldr	r3, [r7, #8]
 8004d94:	6013      	str	r3, [r2, #0]
}
 8004d96:	bf00      	nop
 8004d98:	3710      	adds	r7, #16
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	bd80      	pop	{r7, pc}
 8004d9e:	bf00      	nop
 8004da0:	200003ec 	.word	0x200003ec
 8004da4:	200002e8 	.word	0x200002e8
 8004da8:	200003f0 	.word	0x200003f0
 8004dac:	200003d4 	.word	0x200003d4
 8004db0:	200003a4 	.word	0x200003a4
 8004db4:	200003a0 	.word	0x200003a0
 8004db8:	20000408 	.word	0x20000408

08004dbc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004dbc:	b480      	push	{r7}
 8004dbe:	b085      	sub	sp, #20
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	60f8      	str	r0, [r7, #12]
 8004dc4:	60b9      	str	r1, [r7, #8]
 8004dc6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	3b04      	subs	r3, #4
 8004dcc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004dd4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	3b04      	subs	r3, #4
 8004dda:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004ddc:	68bb      	ldr	r3, [r7, #8]
 8004dde:	f023 0201 	bic.w	r2, r3, #1
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	3b04      	subs	r3, #4
 8004dea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004dec:	4a0c      	ldr	r2, [pc, #48]	; (8004e20 <pxPortInitialiseStack+0x64>)
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	3b14      	subs	r3, #20
 8004df6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004df8:	687a      	ldr	r2, [r7, #4]
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	3b04      	subs	r3, #4
 8004e02:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	f06f 0202 	mvn.w	r2, #2
 8004e0a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	3b20      	subs	r3, #32
 8004e10:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004e12:	68fb      	ldr	r3, [r7, #12]
}
 8004e14:	4618      	mov	r0, r3
 8004e16:	3714      	adds	r7, #20
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1e:	4770      	bx	lr
 8004e20:	08004e25 	.word	0x08004e25

08004e24 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004e24:	b480      	push	{r7}
 8004e26:	b085      	sub	sp, #20
 8004e28:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004e2e:	4b12      	ldr	r3, [pc, #72]	; (8004e78 <prvTaskExitError+0x54>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004e36:	d00a      	beq.n	8004e4e <prvTaskExitError+0x2a>
	__asm volatile
 8004e38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e3c:	f383 8811 	msr	BASEPRI, r3
 8004e40:	f3bf 8f6f 	isb	sy
 8004e44:	f3bf 8f4f 	dsb	sy
 8004e48:	60fb      	str	r3, [r7, #12]
}
 8004e4a:	bf00      	nop
 8004e4c:	e7fe      	b.n	8004e4c <prvTaskExitError+0x28>
	__asm volatile
 8004e4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e52:	f383 8811 	msr	BASEPRI, r3
 8004e56:	f3bf 8f6f 	isb	sy
 8004e5a:	f3bf 8f4f 	dsb	sy
 8004e5e:	60bb      	str	r3, [r7, #8]
}
 8004e60:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004e62:	bf00      	nop
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d0fc      	beq.n	8004e64 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004e6a:	bf00      	nop
 8004e6c:	bf00      	nop
 8004e6e:	3714      	adds	r7, #20
 8004e70:	46bd      	mov	sp, r7
 8004e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e76:	4770      	bx	lr
 8004e78:	2000000c 	.word	0x2000000c
 8004e7c:	00000000 	.word	0x00000000

08004e80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004e80:	4b07      	ldr	r3, [pc, #28]	; (8004ea0 <pxCurrentTCBConst2>)
 8004e82:	6819      	ldr	r1, [r3, #0]
 8004e84:	6808      	ldr	r0, [r1, #0]
 8004e86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e8a:	f380 8809 	msr	PSP, r0
 8004e8e:	f3bf 8f6f 	isb	sy
 8004e92:	f04f 0000 	mov.w	r0, #0
 8004e96:	f380 8811 	msr	BASEPRI, r0
 8004e9a:	4770      	bx	lr
 8004e9c:	f3af 8000 	nop.w

08004ea0 <pxCurrentTCBConst2>:
 8004ea0:	200002e8 	.word	0x200002e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004ea4:	bf00      	nop
 8004ea6:	bf00      	nop

08004ea8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004ea8:	4808      	ldr	r0, [pc, #32]	; (8004ecc <prvPortStartFirstTask+0x24>)
 8004eaa:	6800      	ldr	r0, [r0, #0]
 8004eac:	6800      	ldr	r0, [r0, #0]
 8004eae:	f380 8808 	msr	MSP, r0
 8004eb2:	f04f 0000 	mov.w	r0, #0
 8004eb6:	f380 8814 	msr	CONTROL, r0
 8004eba:	b662      	cpsie	i
 8004ebc:	b661      	cpsie	f
 8004ebe:	f3bf 8f4f 	dsb	sy
 8004ec2:	f3bf 8f6f 	isb	sy
 8004ec6:	df00      	svc	0
 8004ec8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004eca:	bf00      	nop
 8004ecc:	e000ed08 	.word	0xe000ed08

08004ed0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b086      	sub	sp, #24
 8004ed4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004ed6:	4b46      	ldr	r3, [pc, #280]	; (8004ff0 <xPortStartScheduler+0x120>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4a46      	ldr	r2, [pc, #280]	; (8004ff4 <xPortStartScheduler+0x124>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d10a      	bne.n	8004ef6 <xPortStartScheduler+0x26>
	__asm volatile
 8004ee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ee4:	f383 8811 	msr	BASEPRI, r3
 8004ee8:	f3bf 8f6f 	isb	sy
 8004eec:	f3bf 8f4f 	dsb	sy
 8004ef0:	613b      	str	r3, [r7, #16]
}
 8004ef2:	bf00      	nop
 8004ef4:	e7fe      	b.n	8004ef4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004ef6:	4b3e      	ldr	r3, [pc, #248]	; (8004ff0 <xPortStartScheduler+0x120>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4a3f      	ldr	r2, [pc, #252]	; (8004ff8 <xPortStartScheduler+0x128>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d10a      	bne.n	8004f16 <xPortStartScheduler+0x46>
	__asm volatile
 8004f00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f04:	f383 8811 	msr	BASEPRI, r3
 8004f08:	f3bf 8f6f 	isb	sy
 8004f0c:	f3bf 8f4f 	dsb	sy
 8004f10:	60fb      	str	r3, [r7, #12]
}
 8004f12:	bf00      	nop
 8004f14:	e7fe      	b.n	8004f14 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004f16:	4b39      	ldr	r3, [pc, #228]	; (8004ffc <xPortStartScheduler+0x12c>)
 8004f18:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004f1a:	697b      	ldr	r3, [r7, #20]
 8004f1c:	781b      	ldrb	r3, [r3, #0]
 8004f1e:	b2db      	uxtb	r3, r3
 8004f20:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004f22:	697b      	ldr	r3, [r7, #20]
 8004f24:	22ff      	movs	r2, #255	; 0xff
 8004f26:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004f28:	697b      	ldr	r3, [r7, #20]
 8004f2a:	781b      	ldrb	r3, [r3, #0]
 8004f2c:	b2db      	uxtb	r3, r3
 8004f2e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004f30:	78fb      	ldrb	r3, [r7, #3]
 8004f32:	b2db      	uxtb	r3, r3
 8004f34:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004f38:	b2da      	uxtb	r2, r3
 8004f3a:	4b31      	ldr	r3, [pc, #196]	; (8005000 <xPortStartScheduler+0x130>)
 8004f3c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004f3e:	4b31      	ldr	r3, [pc, #196]	; (8005004 <xPortStartScheduler+0x134>)
 8004f40:	2207      	movs	r2, #7
 8004f42:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004f44:	e009      	b.n	8004f5a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004f46:	4b2f      	ldr	r3, [pc, #188]	; (8005004 <xPortStartScheduler+0x134>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	3b01      	subs	r3, #1
 8004f4c:	4a2d      	ldr	r2, [pc, #180]	; (8005004 <xPortStartScheduler+0x134>)
 8004f4e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004f50:	78fb      	ldrb	r3, [r7, #3]
 8004f52:	b2db      	uxtb	r3, r3
 8004f54:	005b      	lsls	r3, r3, #1
 8004f56:	b2db      	uxtb	r3, r3
 8004f58:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004f5a:	78fb      	ldrb	r3, [r7, #3]
 8004f5c:	b2db      	uxtb	r3, r3
 8004f5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f62:	2b80      	cmp	r3, #128	; 0x80
 8004f64:	d0ef      	beq.n	8004f46 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004f66:	4b27      	ldr	r3, [pc, #156]	; (8005004 <xPortStartScheduler+0x134>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f1c3 0307 	rsb	r3, r3, #7
 8004f6e:	2b04      	cmp	r3, #4
 8004f70:	d00a      	beq.n	8004f88 <xPortStartScheduler+0xb8>
	__asm volatile
 8004f72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f76:	f383 8811 	msr	BASEPRI, r3
 8004f7a:	f3bf 8f6f 	isb	sy
 8004f7e:	f3bf 8f4f 	dsb	sy
 8004f82:	60bb      	str	r3, [r7, #8]
}
 8004f84:	bf00      	nop
 8004f86:	e7fe      	b.n	8004f86 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004f88:	4b1e      	ldr	r3, [pc, #120]	; (8005004 <xPortStartScheduler+0x134>)
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	021b      	lsls	r3, r3, #8
 8004f8e:	4a1d      	ldr	r2, [pc, #116]	; (8005004 <xPortStartScheduler+0x134>)
 8004f90:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004f92:	4b1c      	ldr	r3, [pc, #112]	; (8005004 <xPortStartScheduler+0x134>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004f9a:	4a1a      	ldr	r2, [pc, #104]	; (8005004 <xPortStartScheduler+0x134>)
 8004f9c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	b2da      	uxtb	r2, r3
 8004fa2:	697b      	ldr	r3, [r7, #20]
 8004fa4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004fa6:	4b18      	ldr	r3, [pc, #96]	; (8005008 <xPortStartScheduler+0x138>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	4a17      	ldr	r2, [pc, #92]	; (8005008 <xPortStartScheduler+0x138>)
 8004fac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004fb0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004fb2:	4b15      	ldr	r3, [pc, #84]	; (8005008 <xPortStartScheduler+0x138>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4a14      	ldr	r2, [pc, #80]	; (8005008 <xPortStartScheduler+0x138>)
 8004fb8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004fbc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004fbe:	f000 f8dd 	bl	800517c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004fc2:	4b12      	ldr	r3, [pc, #72]	; (800500c <xPortStartScheduler+0x13c>)
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004fc8:	f000 f8fc 	bl	80051c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004fcc:	4b10      	ldr	r3, [pc, #64]	; (8005010 <xPortStartScheduler+0x140>)
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4a0f      	ldr	r2, [pc, #60]	; (8005010 <xPortStartScheduler+0x140>)
 8004fd2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004fd6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004fd8:	f7ff ff66 	bl	8004ea8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004fdc:	f7ff fd56 	bl	8004a8c <vTaskSwitchContext>
	prvTaskExitError();
 8004fe0:	f7ff ff20 	bl	8004e24 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004fe4:	2300      	movs	r3, #0
}
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	3718      	adds	r7, #24
 8004fea:	46bd      	mov	sp, r7
 8004fec:	bd80      	pop	{r7, pc}
 8004fee:	bf00      	nop
 8004ff0:	e000ed00 	.word	0xe000ed00
 8004ff4:	410fc271 	.word	0x410fc271
 8004ff8:	410fc270 	.word	0x410fc270
 8004ffc:	e000e400 	.word	0xe000e400
 8005000:	20000414 	.word	0x20000414
 8005004:	20000418 	.word	0x20000418
 8005008:	e000ed20 	.word	0xe000ed20
 800500c:	2000000c 	.word	0x2000000c
 8005010:	e000ef34 	.word	0xe000ef34

08005014 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005014:	b480      	push	{r7}
 8005016:	b083      	sub	sp, #12
 8005018:	af00      	add	r7, sp, #0
	__asm volatile
 800501a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800501e:	f383 8811 	msr	BASEPRI, r3
 8005022:	f3bf 8f6f 	isb	sy
 8005026:	f3bf 8f4f 	dsb	sy
 800502a:	607b      	str	r3, [r7, #4]
}
 800502c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800502e:	4b0f      	ldr	r3, [pc, #60]	; (800506c <vPortEnterCritical+0x58>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	3301      	adds	r3, #1
 8005034:	4a0d      	ldr	r2, [pc, #52]	; (800506c <vPortEnterCritical+0x58>)
 8005036:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005038:	4b0c      	ldr	r3, [pc, #48]	; (800506c <vPortEnterCritical+0x58>)
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	2b01      	cmp	r3, #1
 800503e:	d10f      	bne.n	8005060 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005040:	4b0b      	ldr	r3, [pc, #44]	; (8005070 <vPortEnterCritical+0x5c>)
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	b2db      	uxtb	r3, r3
 8005046:	2b00      	cmp	r3, #0
 8005048:	d00a      	beq.n	8005060 <vPortEnterCritical+0x4c>
	__asm volatile
 800504a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800504e:	f383 8811 	msr	BASEPRI, r3
 8005052:	f3bf 8f6f 	isb	sy
 8005056:	f3bf 8f4f 	dsb	sy
 800505a:	603b      	str	r3, [r7, #0]
}
 800505c:	bf00      	nop
 800505e:	e7fe      	b.n	800505e <vPortEnterCritical+0x4a>
	}
}
 8005060:	bf00      	nop
 8005062:	370c      	adds	r7, #12
 8005064:	46bd      	mov	sp, r7
 8005066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506a:	4770      	bx	lr
 800506c:	2000000c 	.word	0x2000000c
 8005070:	e000ed04 	.word	0xe000ed04

08005074 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005074:	b480      	push	{r7}
 8005076:	b083      	sub	sp, #12
 8005078:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800507a:	4b12      	ldr	r3, [pc, #72]	; (80050c4 <vPortExitCritical+0x50>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d10a      	bne.n	8005098 <vPortExitCritical+0x24>
	__asm volatile
 8005082:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005086:	f383 8811 	msr	BASEPRI, r3
 800508a:	f3bf 8f6f 	isb	sy
 800508e:	f3bf 8f4f 	dsb	sy
 8005092:	607b      	str	r3, [r7, #4]
}
 8005094:	bf00      	nop
 8005096:	e7fe      	b.n	8005096 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005098:	4b0a      	ldr	r3, [pc, #40]	; (80050c4 <vPortExitCritical+0x50>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	3b01      	subs	r3, #1
 800509e:	4a09      	ldr	r2, [pc, #36]	; (80050c4 <vPortExitCritical+0x50>)
 80050a0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80050a2:	4b08      	ldr	r3, [pc, #32]	; (80050c4 <vPortExitCritical+0x50>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d105      	bne.n	80050b6 <vPortExitCritical+0x42>
 80050aa:	2300      	movs	r3, #0
 80050ac:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80050b4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80050b6:	bf00      	nop
 80050b8:	370c      	adds	r7, #12
 80050ba:	46bd      	mov	sp, r7
 80050bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c0:	4770      	bx	lr
 80050c2:	bf00      	nop
 80050c4:	2000000c 	.word	0x2000000c
	...

080050d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80050d0:	f3ef 8009 	mrs	r0, PSP
 80050d4:	f3bf 8f6f 	isb	sy
 80050d8:	4b15      	ldr	r3, [pc, #84]	; (8005130 <pxCurrentTCBConst>)
 80050da:	681a      	ldr	r2, [r3, #0]
 80050dc:	f01e 0f10 	tst.w	lr, #16
 80050e0:	bf08      	it	eq
 80050e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80050e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050ea:	6010      	str	r0, [r2, #0]
 80050ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80050f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80050f4:	f380 8811 	msr	BASEPRI, r0
 80050f8:	f3bf 8f4f 	dsb	sy
 80050fc:	f3bf 8f6f 	isb	sy
 8005100:	f7ff fcc4 	bl	8004a8c <vTaskSwitchContext>
 8005104:	f04f 0000 	mov.w	r0, #0
 8005108:	f380 8811 	msr	BASEPRI, r0
 800510c:	bc09      	pop	{r0, r3}
 800510e:	6819      	ldr	r1, [r3, #0]
 8005110:	6808      	ldr	r0, [r1, #0]
 8005112:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005116:	f01e 0f10 	tst.w	lr, #16
 800511a:	bf08      	it	eq
 800511c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005120:	f380 8809 	msr	PSP, r0
 8005124:	f3bf 8f6f 	isb	sy
 8005128:	4770      	bx	lr
 800512a:	bf00      	nop
 800512c:	f3af 8000 	nop.w

08005130 <pxCurrentTCBConst>:
 8005130:	200002e8 	.word	0x200002e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005134:	bf00      	nop
 8005136:	bf00      	nop

08005138 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005138:	b580      	push	{r7, lr}
 800513a:	b082      	sub	sp, #8
 800513c:	af00      	add	r7, sp, #0
	__asm volatile
 800513e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005142:	f383 8811 	msr	BASEPRI, r3
 8005146:	f3bf 8f6f 	isb	sy
 800514a:	f3bf 8f4f 	dsb	sy
 800514e:	607b      	str	r3, [r7, #4]
}
 8005150:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005152:	f7ff fbe3 	bl	800491c <xTaskIncrementTick>
 8005156:	4603      	mov	r3, r0
 8005158:	2b00      	cmp	r3, #0
 800515a:	d003      	beq.n	8005164 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800515c:	4b06      	ldr	r3, [pc, #24]	; (8005178 <SysTick_Handler+0x40>)
 800515e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005162:	601a      	str	r2, [r3, #0]
 8005164:	2300      	movs	r3, #0
 8005166:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	f383 8811 	msr	BASEPRI, r3
}
 800516e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005170:	bf00      	nop
 8005172:	3708      	adds	r7, #8
 8005174:	46bd      	mov	sp, r7
 8005176:	bd80      	pop	{r7, pc}
 8005178:	e000ed04 	.word	0xe000ed04

0800517c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800517c:	b480      	push	{r7}
 800517e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005180:	4b0b      	ldr	r3, [pc, #44]	; (80051b0 <vPortSetupTimerInterrupt+0x34>)
 8005182:	2200      	movs	r2, #0
 8005184:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005186:	4b0b      	ldr	r3, [pc, #44]	; (80051b4 <vPortSetupTimerInterrupt+0x38>)
 8005188:	2200      	movs	r2, #0
 800518a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800518c:	4b0a      	ldr	r3, [pc, #40]	; (80051b8 <vPortSetupTimerInterrupt+0x3c>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4a0a      	ldr	r2, [pc, #40]	; (80051bc <vPortSetupTimerInterrupt+0x40>)
 8005192:	fba2 2303 	umull	r2, r3, r2, r3
 8005196:	099b      	lsrs	r3, r3, #6
 8005198:	4a09      	ldr	r2, [pc, #36]	; (80051c0 <vPortSetupTimerInterrupt+0x44>)
 800519a:	3b01      	subs	r3, #1
 800519c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800519e:	4b04      	ldr	r3, [pc, #16]	; (80051b0 <vPortSetupTimerInterrupt+0x34>)
 80051a0:	2207      	movs	r2, #7
 80051a2:	601a      	str	r2, [r3, #0]
}
 80051a4:	bf00      	nop
 80051a6:	46bd      	mov	sp, r7
 80051a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ac:	4770      	bx	lr
 80051ae:	bf00      	nop
 80051b0:	e000e010 	.word	0xe000e010
 80051b4:	e000e018 	.word	0xe000e018
 80051b8:	20000000 	.word	0x20000000
 80051bc:	10624dd3 	.word	0x10624dd3
 80051c0:	e000e014 	.word	0xe000e014

080051c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80051c4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80051d4 <vPortEnableVFP+0x10>
 80051c8:	6801      	ldr	r1, [r0, #0]
 80051ca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80051ce:	6001      	str	r1, [r0, #0]
 80051d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80051d2:	bf00      	nop
 80051d4:	e000ed88 	.word	0xe000ed88

080051d8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b08a      	sub	sp, #40	; 0x28
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80051e0:	2300      	movs	r3, #0
 80051e2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80051e4:	f7ff faf0 	bl	80047c8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80051e8:	4b5b      	ldr	r3, [pc, #364]	; (8005358 <pvPortMalloc+0x180>)
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d101      	bne.n	80051f4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80051f0:	f000 f920 	bl	8005434 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80051f4:	4b59      	ldr	r3, [pc, #356]	; (800535c <pvPortMalloc+0x184>)
 80051f6:	681a      	ldr	r2, [r3, #0]
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	4013      	ands	r3, r2
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	f040 8093 	bne.w	8005328 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d01d      	beq.n	8005244 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005208:	2208      	movs	r2, #8
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	4413      	add	r3, r2
 800520e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	f003 0307 	and.w	r3, r3, #7
 8005216:	2b00      	cmp	r3, #0
 8005218:	d014      	beq.n	8005244 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	f023 0307 	bic.w	r3, r3, #7
 8005220:	3308      	adds	r3, #8
 8005222:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	f003 0307 	and.w	r3, r3, #7
 800522a:	2b00      	cmp	r3, #0
 800522c:	d00a      	beq.n	8005244 <pvPortMalloc+0x6c>
	__asm volatile
 800522e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005232:	f383 8811 	msr	BASEPRI, r3
 8005236:	f3bf 8f6f 	isb	sy
 800523a:	f3bf 8f4f 	dsb	sy
 800523e:	617b      	str	r3, [r7, #20]
}
 8005240:	bf00      	nop
 8005242:	e7fe      	b.n	8005242 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d06e      	beq.n	8005328 <pvPortMalloc+0x150>
 800524a:	4b45      	ldr	r3, [pc, #276]	; (8005360 <pvPortMalloc+0x188>)
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	687a      	ldr	r2, [r7, #4]
 8005250:	429a      	cmp	r2, r3
 8005252:	d869      	bhi.n	8005328 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005254:	4b43      	ldr	r3, [pc, #268]	; (8005364 <pvPortMalloc+0x18c>)
 8005256:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005258:	4b42      	ldr	r3, [pc, #264]	; (8005364 <pvPortMalloc+0x18c>)
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800525e:	e004      	b.n	800526a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005262:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800526a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800526c:	685b      	ldr	r3, [r3, #4]
 800526e:	687a      	ldr	r2, [r7, #4]
 8005270:	429a      	cmp	r2, r3
 8005272:	d903      	bls.n	800527c <pvPortMalloc+0xa4>
 8005274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d1f1      	bne.n	8005260 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800527c:	4b36      	ldr	r3, [pc, #216]	; (8005358 <pvPortMalloc+0x180>)
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005282:	429a      	cmp	r2, r3
 8005284:	d050      	beq.n	8005328 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005286:	6a3b      	ldr	r3, [r7, #32]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	2208      	movs	r2, #8
 800528c:	4413      	add	r3, r2
 800528e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005292:	681a      	ldr	r2, [r3, #0]
 8005294:	6a3b      	ldr	r3, [r7, #32]
 8005296:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800529a:	685a      	ldr	r2, [r3, #4]
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	1ad2      	subs	r2, r2, r3
 80052a0:	2308      	movs	r3, #8
 80052a2:	005b      	lsls	r3, r3, #1
 80052a4:	429a      	cmp	r2, r3
 80052a6:	d91f      	bls.n	80052e8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80052a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	4413      	add	r3, r2
 80052ae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80052b0:	69bb      	ldr	r3, [r7, #24]
 80052b2:	f003 0307 	and.w	r3, r3, #7
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d00a      	beq.n	80052d0 <pvPortMalloc+0xf8>
	__asm volatile
 80052ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052be:	f383 8811 	msr	BASEPRI, r3
 80052c2:	f3bf 8f6f 	isb	sy
 80052c6:	f3bf 8f4f 	dsb	sy
 80052ca:	613b      	str	r3, [r7, #16]
}
 80052cc:	bf00      	nop
 80052ce:	e7fe      	b.n	80052ce <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80052d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052d2:	685a      	ldr	r2, [r3, #4]
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	1ad2      	subs	r2, r2, r3
 80052d8:	69bb      	ldr	r3, [r7, #24]
 80052da:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80052dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052de:	687a      	ldr	r2, [r7, #4]
 80052e0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80052e2:	69b8      	ldr	r0, [r7, #24]
 80052e4:	f000 f908 	bl	80054f8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80052e8:	4b1d      	ldr	r3, [pc, #116]	; (8005360 <pvPortMalloc+0x188>)
 80052ea:	681a      	ldr	r2, [r3, #0]
 80052ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ee:	685b      	ldr	r3, [r3, #4]
 80052f0:	1ad3      	subs	r3, r2, r3
 80052f2:	4a1b      	ldr	r2, [pc, #108]	; (8005360 <pvPortMalloc+0x188>)
 80052f4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80052f6:	4b1a      	ldr	r3, [pc, #104]	; (8005360 <pvPortMalloc+0x188>)
 80052f8:	681a      	ldr	r2, [r3, #0]
 80052fa:	4b1b      	ldr	r3, [pc, #108]	; (8005368 <pvPortMalloc+0x190>)
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	429a      	cmp	r2, r3
 8005300:	d203      	bcs.n	800530a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005302:	4b17      	ldr	r3, [pc, #92]	; (8005360 <pvPortMalloc+0x188>)
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	4a18      	ldr	r2, [pc, #96]	; (8005368 <pvPortMalloc+0x190>)
 8005308:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800530a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800530c:	685a      	ldr	r2, [r3, #4]
 800530e:	4b13      	ldr	r3, [pc, #76]	; (800535c <pvPortMalloc+0x184>)
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	431a      	orrs	r2, r3
 8005314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005316:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800531a:	2200      	movs	r2, #0
 800531c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800531e:	4b13      	ldr	r3, [pc, #76]	; (800536c <pvPortMalloc+0x194>)
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	3301      	adds	r3, #1
 8005324:	4a11      	ldr	r2, [pc, #68]	; (800536c <pvPortMalloc+0x194>)
 8005326:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005328:	f7ff fa5c 	bl	80047e4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800532c:	69fb      	ldr	r3, [r7, #28]
 800532e:	f003 0307 	and.w	r3, r3, #7
 8005332:	2b00      	cmp	r3, #0
 8005334:	d00a      	beq.n	800534c <pvPortMalloc+0x174>
	__asm volatile
 8005336:	f04f 0350 	mov.w	r3, #80	; 0x50
 800533a:	f383 8811 	msr	BASEPRI, r3
 800533e:	f3bf 8f6f 	isb	sy
 8005342:	f3bf 8f4f 	dsb	sy
 8005346:	60fb      	str	r3, [r7, #12]
}
 8005348:	bf00      	nop
 800534a:	e7fe      	b.n	800534a <pvPortMalloc+0x172>
	return pvReturn;
 800534c:	69fb      	ldr	r3, [r7, #28]
}
 800534e:	4618      	mov	r0, r3
 8005350:	3728      	adds	r7, #40	; 0x28
 8005352:	46bd      	mov	sp, r7
 8005354:	bd80      	pop	{r7, pc}
 8005356:	bf00      	nop
 8005358:	20004024 	.word	0x20004024
 800535c:	20004038 	.word	0x20004038
 8005360:	20004028 	.word	0x20004028
 8005364:	2000401c 	.word	0x2000401c
 8005368:	2000402c 	.word	0x2000402c
 800536c:	20004030 	.word	0x20004030

08005370 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b086      	sub	sp, #24
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d04d      	beq.n	800541e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005382:	2308      	movs	r3, #8
 8005384:	425b      	negs	r3, r3
 8005386:	697a      	ldr	r2, [r7, #20]
 8005388:	4413      	add	r3, r2
 800538a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800538c:	697b      	ldr	r3, [r7, #20]
 800538e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005390:	693b      	ldr	r3, [r7, #16]
 8005392:	685a      	ldr	r2, [r3, #4]
 8005394:	4b24      	ldr	r3, [pc, #144]	; (8005428 <vPortFree+0xb8>)
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	4013      	ands	r3, r2
 800539a:	2b00      	cmp	r3, #0
 800539c:	d10a      	bne.n	80053b4 <vPortFree+0x44>
	__asm volatile
 800539e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053a2:	f383 8811 	msr	BASEPRI, r3
 80053a6:	f3bf 8f6f 	isb	sy
 80053aa:	f3bf 8f4f 	dsb	sy
 80053ae:	60fb      	str	r3, [r7, #12]
}
 80053b0:	bf00      	nop
 80053b2:	e7fe      	b.n	80053b2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80053b4:	693b      	ldr	r3, [r7, #16]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d00a      	beq.n	80053d2 <vPortFree+0x62>
	__asm volatile
 80053bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053c0:	f383 8811 	msr	BASEPRI, r3
 80053c4:	f3bf 8f6f 	isb	sy
 80053c8:	f3bf 8f4f 	dsb	sy
 80053cc:	60bb      	str	r3, [r7, #8]
}
 80053ce:	bf00      	nop
 80053d0:	e7fe      	b.n	80053d0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80053d2:	693b      	ldr	r3, [r7, #16]
 80053d4:	685a      	ldr	r2, [r3, #4]
 80053d6:	4b14      	ldr	r3, [pc, #80]	; (8005428 <vPortFree+0xb8>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	4013      	ands	r3, r2
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d01e      	beq.n	800541e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80053e0:	693b      	ldr	r3, [r7, #16]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d11a      	bne.n	800541e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80053e8:	693b      	ldr	r3, [r7, #16]
 80053ea:	685a      	ldr	r2, [r3, #4]
 80053ec:	4b0e      	ldr	r3, [pc, #56]	; (8005428 <vPortFree+0xb8>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	43db      	mvns	r3, r3
 80053f2:	401a      	ands	r2, r3
 80053f4:	693b      	ldr	r3, [r7, #16]
 80053f6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80053f8:	f7ff f9e6 	bl	80047c8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80053fc:	693b      	ldr	r3, [r7, #16]
 80053fe:	685a      	ldr	r2, [r3, #4]
 8005400:	4b0a      	ldr	r3, [pc, #40]	; (800542c <vPortFree+0xbc>)
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4413      	add	r3, r2
 8005406:	4a09      	ldr	r2, [pc, #36]	; (800542c <vPortFree+0xbc>)
 8005408:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800540a:	6938      	ldr	r0, [r7, #16]
 800540c:	f000 f874 	bl	80054f8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005410:	4b07      	ldr	r3, [pc, #28]	; (8005430 <vPortFree+0xc0>)
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	3301      	adds	r3, #1
 8005416:	4a06      	ldr	r2, [pc, #24]	; (8005430 <vPortFree+0xc0>)
 8005418:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800541a:	f7ff f9e3 	bl	80047e4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800541e:	bf00      	nop
 8005420:	3718      	adds	r7, #24
 8005422:	46bd      	mov	sp, r7
 8005424:	bd80      	pop	{r7, pc}
 8005426:	bf00      	nop
 8005428:	20004038 	.word	0x20004038
 800542c:	20004028 	.word	0x20004028
 8005430:	20004034 	.word	0x20004034

08005434 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005434:	b480      	push	{r7}
 8005436:	b085      	sub	sp, #20
 8005438:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800543a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800543e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005440:	4b27      	ldr	r3, [pc, #156]	; (80054e0 <prvHeapInit+0xac>)
 8005442:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	f003 0307 	and.w	r3, r3, #7
 800544a:	2b00      	cmp	r3, #0
 800544c:	d00c      	beq.n	8005468 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	3307      	adds	r3, #7
 8005452:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	f023 0307 	bic.w	r3, r3, #7
 800545a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800545c:	68ba      	ldr	r2, [r7, #8]
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	1ad3      	subs	r3, r2, r3
 8005462:	4a1f      	ldr	r2, [pc, #124]	; (80054e0 <prvHeapInit+0xac>)
 8005464:	4413      	add	r3, r2
 8005466:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800546c:	4a1d      	ldr	r2, [pc, #116]	; (80054e4 <prvHeapInit+0xb0>)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005472:	4b1c      	ldr	r3, [pc, #112]	; (80054e4 <prvHeapInit+0xb0>)
 8005474:	2200      	movs	r2, #0
 8005476:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	68ba      	ldr	r2, [r7, #8]
 800547c:	4413      	add	r3, r2
 800547e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005480:	2208      	movs	r2, #8
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	1a9b      	subs	r3, r3, r2
 8005486:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	f023 0307 	bic.w	r3, r3, #7
 800548e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	4a15      	ldr	r2, [pc, #84]	; (80054e8 <prvHeapInit+0xb4>)
 8005494:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005496:	4b14      	ldr	r3, [pc, #80]	; (80054e8 <prvHeapInit+0xb4>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	2200      	movs	r2, #0
 800549c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800549e:	4b12      	ldr	r3, [pc, #72]	; (80054e8 <prvHeapInit+0xb4>)
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	2200      	movs	r2, #0
 80054a4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	68fa      	ldr	r2, [r7, #12]
 80054ae:	1ad2      	subs	r2, r2, r3
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80054b4:	4b0c      	ldr	r3, [pc, #48]	; (80054e8 <prvHeapInit+0xb4>)
 80054b6:	681a      	ldr	r2, [r3, #0]
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	685b      	ldr	r3, [r3, #4]
 80054c0:	4a0a      	ldr	r2, [pc, #40]	; (80054ec <prvHeapInit+0xb8>)
 80054c2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	685b      	ldr	r3, [r3, #4]
 80054c8:	4a09      	ldr	r2, [pc, #36]	; (80054f0 <prvHeapInit+0xbc>)
 80054ca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80054cc:	4b09      	ldr	r3, [pc, #36]	; (80054f4 <prvHeapInit+0xc0>)
 80054ce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80054d2:	601a      	str	r2, [r3, #0]
}
 80054d4:	bf00      	nop
 80054d6:	3714      	adds	r7, #20
 80054d8:	46bd      	mov	sp, r7
 80054da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054de:	4770      	bx	lr
 80054e0:	2000041c 	.word	0x2000041c
 80054e4:	2000401c 	.word	0x2000401c
 80054e8:	20004024 	.word	0x20004024
 80054ec:	2000402c 	.word	0x2000402c
 80054f0:	20004028 	.word	0x20004028
 80054f4:	20004038 	.word	0x20004038

080054f8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80054f8:	b480      	push	{r7}
 80054fa:	b085      	sub	sp, #20
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005500:	4b28      	ldr	r3, [pc, #160]	; (80055a4 <prvInsertBlockIntoFreeList+0xac>)
 8005502:	60fb      	str	r3, [r7, #12]
 8005504:	e002      	b.n	800550c <prvInsertBlockIntoFreeList+0x14>
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	60fb      	str	r3, [r7, #12]
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	687a      	ldr	r2, [r7, #4]
 8005512:	429a      	cmp	r2, r3
 8005514:	d8f7      	bhi.n	8005506 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	685b      	ldr	r3, [r3, #4]
 800551e:	68ba      	ldr	r2, [r7, #8]
 8005520:	4413      	add	r3, r2
 8005522:	687a      	ldr	r2, [r7, #4]
 8005524:	429a      	cmp	r2, r3
 8005526:	d108      	bne.n	800553a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	685a      	ldr	r2, [r3, #4]
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	685b      	ldr	r3, [r3, #4]
 8005530:	441a      	add	r2, r3
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	685b      	ldr	r3, [r3, #4]
 8005542:	68ba      	ldr	r2, [r7, #8]
 8005544:	441a      	add	r2, r3
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	429a      	cmp	r2, r3
 800554c:	d118      	bne.n	8005580 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681a      	ldr	r2, [r3, #0]
 8005552:	4b15      	ldr	r3, [pc, #84]	; (80055a8 <prvInsertBlockIntoFreeList+0xb0>)
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	429a      	cmp	r2, r3
 8005558:	d00d      	beq.n	8005576 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	685a      	ldr	r2, [r3, #4]
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	685b      	ldr	r3, [r3, #4]
 8005564:	441a      	add	r2, r3
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	681a      	ldr	r2, [r3, #0]
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	601a      	str	r2, [r3, #0]
 8005574:	e008      	b.n	8005588 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005576:	4b0c      	ldr	r3, [pc, #48]	; (80055a8 <prvInsertBlockIntoFreeList+0xb0>)
 8005578:	681a      	ldr	r2, [r3, #0]
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	601a      	str	r2, [r3, #0]
 800557e:	e003      	b.n	8005588 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681a      	ldr	r2, [r3, #0]
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005588:	68fa      	ldr	r2, [r7, #12]
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	429a      	cmp	r2, r3
 800558e:	d002      	beq.n	8005596 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	687a      	ldr	r2, [r7, #4]
 8005594:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005596:	bf00      	nop
 8005598:	3714      	adds	r7, #20
 800559a:	46bd      	mov	sp, r7
 800559c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a0:	4770      	bx	lr
 80055a2:	bf00      	nop
 80055a4:	2000401c 	.word	0x2000401c
 80055a8:	20004024 	.word	0x20004024

080055ac <__errno>:
 80055ac:	4b01      	ldr	r3, [pc, #4]	; (80055b4 <__errno+0x8>)
 80055ae:	6818      	ldr	r0, [r3, #0]
 80055b0:	4770      	bx	lr
 80055b2:	bf00      	nop
 80055b4:	20000010 	.word	0x20000010

080055b8 <__libc_init_array>:
 80055b8:	b570      	push	{r4, r5, r6, lr}
 80055ba:	4d0d      	ldr	r5, [pc, #52]	; (80055f0 <__libc_init_array+0x38>)
 80055bc:	4c0d      	ldr	r4, [pc, #52]	; (80055f4 <__libc_init_array+0x3c>)
 80055be:	1b64      	subs	r4, r4, r5
 80055c0:	10a4      	asrs	r4, r4, #2
 80055c2:	2600      	movs	r6, #0
 80055c4:	42a6      	cmp	r6, r4
 80055c6:	d109      	bne.n	80055dc <__libc_init_array+0x24>
 80055c8:	4d0b      	ldr	r5, [pc, #44]	; (80055f8 <__libc_init_array+0x40>)
 80055ca:	4c0c      	ldr	r4, [pc, #48]	; (80055fc <__libc_init_array+0x44>)
 80055cc:	f000 fc4e 	bl	8005e6c <_init>
 80055d0:	1b64      	subs	r4, r4, r5
 80055d2:	10a4      	asrs	r4, r4, #2
 80055d4:	2600      	movs	r6, #0
 80055d6:	42a6      	cmp	r6, r4
 80055d8:	d105      	bne.n	80055e6 <__libc_init_array+0x2e>
 80055da:	bd70      	pop	{r4, r5, r6, pc}
 80055dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80055e0:	4798      	blx	r3
 80055e2:	3601      	adds	r6, #1
 80055e4:	e7ee      	b.n	80055c4 <__libc_init_array+0xc>
 80055e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80055ea:	4798      	blx	r3
 80055ec:	3601      	adds	r6, #1
 80055ee:	e7f2      	b.n	80055d6 <__libc_init_array+0x1e>
 80055f0:	08006158 	.word	0x08006158
 80055f4:	08006158 	.word	0x08006158
 80055f8:	08006158 	.word	0x08006158
 80055fc:	0800615c 	.word	0x0800615c

08005600 <memcpy>:
 8005600:	440a      	add	r2, r1
 8005602:	4291      	cmp	r1, r2
 8005604:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005608:	d100      	bne.n	800560c <memcpy+0xc>
 800560a:	4770      	bx	lr
 800560c:	b510      	push	{r4, lr}
 800560e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005612:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005616:	4291      	cmp	r1, r2
 8005618:	d1f9      	bne.n	800560e <memcpy+0xe>
 800561a:	bd10      	pop	{r4, pc}

0800561c <memset>:
 800561c:	4402      	add	r2, r0
 800561e:	4603      	mov	r3, r0
 8005620:	4293      	cmp	r3, r2
 8005622:	d100      	bne.n	8005626 <memset+0xa>
 8005624:	4770      	bx	lr
 8005626:	f803 1b01 	strb.w	r1, [r3], #1
 800562a:	e7f9      	b.n	8005620 <memset+0x4>

0800562c <_free_r>:
 800562c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800562e:	2900      	cmp	r1, #0
 8005630:	d048      	beq.n	80056c4 <_free_r+0x98>
 8005632:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005636:	9001      	str	r0, [sp, #4]
 8005638:	2b00      	cmp	r3, #0
 800563a:	f1a1 0404 	sub.w	r4, r1, #4
 800563e:	bfb8      	it	lt
 8005640:	18e4      	addlt	r4, r4, r3
 8005642:	f000 f8cf 	bl	80057e4 <__malloc_lock>
 8005646:	4a20      	ldr	r2, [pc, #128]	; (80056c8 <_free_r+0x9c>)
 8005648:	9801      	ldr	r0, [sp, #4]
 800564a:	6813      	ldr	r3, [r2, #0]
 800564c:	4615      	mov	r5, r2
 800564e:	b933      	cbnz	r3, 800565e <_free_r+0x32>
 8005650:	6063      	str	r3, [r4, #4]
 8005652:	6014      	str	r4, [r2, #0]
 8005654:	b003      	add	sp, #12
 8005656:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800565a:	f000 b8c9 	b.w	80057f0 <__malloc_unlock>
 800565e:	42a3      	cmp	r3, r4
 8005660:	d90b      	bls.n	800567a <_free_r+0x4e>
 8005662:	6821      	ldr	r1, [r4, #0]
 8005664:	1862      	adds	r2, r4, r1
 8005666:	4293      	cmp	r3, r2
 8005668:	bf04      	itt	eq
 800566a:	681a      	ldreq	r2, [r3, #0]
 800566c:	685b      	ldreq	r3, [r3, #4]
 800566e:	6063      	str	r3, [r4, #4]
 8005670:	bf04      	itt	eq
 8005672:	1852      	addeq	r2, r2, r1
 8005674:	6022      	streq	r2, [r4, #0]
 8005676:	602c      	str	r4, [r5, #0]
 8005678:	e7ec      	b.n	8005654 <_free_r+0x28>
 800567a:	461a      	mov	r2, r3
 800567c:	685b      	ldr	r3, [r3, #4]
 800567e:	b10b      	cbz	r3, 8005684 <_free_r+0x58>
 8005680:	42a3      	cmp	r3, r4
 8005682:	d9fa      	bls.n	800567a <_free_r+0x4e>
 8005684:	6811      	ldr	r1, [r2, #0]
 8005686:	1855      	adds	r5, r2, r1
 8005688:	42a5      	cmp	r5, r4
 800568a:	d10b      	bne.n	80056a4 <_free_r+0x78>
 800568c:	6824      	ldr	r4, [r4, #0]
 800568e:	4421      	add	r1, r4
 8005690:	1854      	adds	r4, r2, r1
 8005692:	42a3      	cmp	r3, r4
 8005694:	6011      	str	r1, [r2, #0]
 8005696:	d1dd      	bne.n	8005654 <_free_r+0x28>
 8005698:	681c      	ldr	r4, [r3, #0]
 800569a:	685b      	ldr	r3, [r3, #4]
 800569c:	6053      	str	r3, [r2, #4]
 800569e:	4421      	add	r1, r4
 80056a0:	6011      	str	r1, [r2, #0]
 80056a2:	e7d7      	b.n	8005654 <_free_r+0x28>
 80056a4:	d902      	bls.n	80056ac <_free_r+0x80>
 80056a6:	230c      	movs	r3, #12
 80056a8:	6003      	str	r3, [r0, #0]
 80056aa:	e7d3      	b.n	8005654 <_free_r+0x28>
 80056ac:	6825      	ldr	r5, [r4, #0]
 80056ae:	1961      	adds	r1, r4, r5
 80056b0:	428b      	cmp	r3, r1
 80056b2:	bf04      	itt	eq
 80056b4:	6819      	ldreq	r1, [r3, #0]
 80056b6:	685b      	ldreq	r3, [r3, #4]
 80056b8:	6063      	str	r3, [r4, #4]
 80056ba:	bf04      	itt	eq
 80056bc:	1949      	addeq	r1, r1, r5
 80056be:	6021      	streq	r1, [r4, #0]
 80056c0:	6054      	str	r4, [r2, #4]
 80056c2:	e7c7      	b.n	8005654 <_free_r+0x28>
 80056c4:	b003      	add	sp, #12
 80056c6:	bd30      	pop	{r4, r5, pc}
 80056c8:	2000403c 	.word	0x2000403c

080056cc <_malloc_r>:
 80056cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056ce:	1ccd      	adds	r5, r1, #3
 80056d0:	f025 0503 	bic.w	r5, r5, #3
 80056d4:	3508      	adds	r5, #8
 80056d6:	2d0c      	cmp	r5, #12
 80056d8:	bf38      	it	cc
 80056da:	250c      	movcc	r5, #12
 80056dc:	2d00      	cmp	r5, #0
 80056de:	4606      	mov	r6, r0
 80056e0:	db01      	blt.n	80056e6 <_malloc_r+0x1a>
 80056e2:	42a9      	cmp	r1, r5
 80056e4:	d903      	bls.n	80056ee <_malloc_r+0x22>
 80056e6:	230c      	movs	r3, #12
 80056e8:	6033      	str	r3, [r6, #0]
 80056ea:	2000      	movs	r0, #0
 80056ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80056ee:	f000 f879 	bl	80057e4 <__malloc_lock>
 80056f2:	4921      	ldr	r1, [pc, #132]	; (8005778 <_malloc_r+0xac>)
 80056f4:	680a      	ldr	r2, [r1, #0]
 80056f6:	4614      	mov	r4, r2
 80056f8:	b99c      	cbnz	r4, 8005722 <_malloc_r+0x56>
 80056fa:	4f20      	ldr	r7, [pc, #128]	; (800577c <_malloc_r+0xb0>)
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	b923      	cbnz	r3, 800570a <_malloc_r+0x3e>
 8005700:	4621      	mov	r1, r4
 8005702:	4630      	mov	r0, r6
 8005704:	f000 f83c 	bl	8005780 <_sbrk_r>
 8005708:	6038      	str	r0, [r7, #0]
 800570a:	4629      	mov	r1, r5
 800570c:	4630      	mov	r0, r6
 800570e:	f000 f837 	bl	8005780 <_sbrk_r>
 8005712:	1c43      	adds	r3, r0, #1
 8005714:	d123      	bne.n	800575e <_malloc_r+0x92>
 8005716:	230c      	movs	r3, #12
 8005718:	6033      	str	r3, [r6, #0]
 800571a:	4630      	mov	r0, r6
 800571c:	f000 f868 	bl	80057f0 <__malloc_unlock>
 8005720:	e7e3      	b.n	80056ea <_malloc_r+0x1e>
 8005722:	6823      	ldr	r3, [r4, #0]
 8005724:	1b5b      	subs	r3, r3, r5
 8005726:	d417      	bmi.n	8005758 <_malloc_r+0x8c>
 8005728:	2b0b      	cmp	r3, #11
 800572a:	d903      	bls.n	8005734 <_malloc_r+0x68>
 800572c:	6023      	str	r3, [r4, #0]
 800572e:	441c      	add	r4, r3
 8005730:	6025      	str	r5, [r4, #0]
 8005732:	e004      	b.n	800573e <_malloc_r+0x72>
 8005734:	6863      	ldr	r3, [r4, #4]
 8005736:	42a2      	cmp	r2, r4
 8005738:	bf0c      	ite	eq
 800573a:	600b      	streq	r3, [r1, #0]
 800573c:	6053      	strne	r3, [r2, #4]
 800573e:	4630      	mov	r0, r6
 8005740:	f000 f856 	bl	80057f0 <__malloc_unlock>
 8005744:	f104 000b 	add.w	r0, r4, #11
 8005748:	1d23      	adds	r3, r4, #4
 800574a:	f020 0007 	bic.w	r0, r0, #7
 800574e:	1ac2      	subs	r2, r0, r3
 8005750:	d0cc      	beq.n	80056ec <_malloc_r+0x20>
 8005752:	1a1b      	subs	r3, r3, r0
 8005754:	50a3      	str	r3, [r4, r2]
 8005756:	e7c9      	b.n	80056ec <_malloc_r+0x20>
 8005758:	4622      	mov	r2, r4
 800575a:	6864      	ldr	r4, [r4, #4]
 800575c:	e7cc      	b.n	80056f8 <_malloc_r+0x2c>
 800575e:	1cc4      	adds	r4, r0, #3
 8005760:	f024 0403 	bic.w	r4, r4, #3
 8005764:	42a0      	cmp	r0, r4
 8005766:	d0e3      	beq.n	8005730 <_malloc_r+0x64>
 8005768:	1a21      	subs	r1, r4, r0
 800576a:	4630      	mov	r0, r6
 800576c:	f000 f808 	bl	8005780 <_sbrk_r>
 8005770:	3001      	adds	r0, #1
 8005772:	d1dd      	bne.n	8005730 <_malloc_r+0x64>
 8005774:	e7cf      	b.n	8005716 <_malloc_r+0x4a>
 8005776:	bf00      	nop
 8005778:	2000403c 	.word	0x2000403c
 800577c:	20004040 	.word	0x20004040

08005780 <_sbrk_r>:
 8005780:	b538      	push	{r3, r4, r5, lr}
 8005782:	4d06      	ldr	r5, [pc, #24]	; (800579c <_sbrk_r+0x1c>)
 8005784:	2300      	movs	r3, #0
 8005786:	4604      	mov	r4, r0
 8005788:	4608      	mov	r0, r1
 800578a:	602b      	str	r3, [r5, #0]
 800578c:	f7fb fcee 	bl	800116c <_sbrk>
 8005790:	1c43      	adds	r3, r0, #1
 8005792:	d102      	bne.n	800579a <_sbrk_r+0x1a>
 8005794:	682b      	ldr	r3, [r5, #0]
 8005796:	b103      	cbz	r3, 800579a <_sbrk_r+0x1a>
 8005798:	6023      	str	r3, [r4, #0]
 800579a:	bd38      	pop	{r3, r4, r5, pc}
 800579c:	200041d8 	.word	0x200041d8

080057a0 <siprintf>:
 80057a0:	b40e      	push	{r1, r2, r3}
 80057a2:	b500      	push	{lr}
 80057a4:	b09c      	sub	sp, #112	; 0x70
 80057a6:	ab1d      	add	r3, sp, #116	; 0x74
 80057a8:	9002      	str	r0, [sp, #8]
 80057aa:	9006      	str	r0, [sp, #24]
 80057ac:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80057b0:	4809      	ldr	r0, [pc, #36]	; (80057d8 <siprintf+0x38>)
 80057b2:	9107      	str	r1, [sp, #28]
 80057b4:	9104      	str	r1, [sp, #16]
 80057b6:	4909      	ldr	r1, [pc, #36]	; (80057dc <siprintf+0x3c>)
 80057b8:	f853 2b04 	ldr.w	r2, [r3], #4
 80057bc:	9105      	str	r1, [sp, #20]
 80057be:	6800      	ldr	r0, [r0, #0]
 80057c0:	9301      	str	r3, [sp, #4]
 80057c2:	a902      	add	r1, sp, #8
 80057c4:	f000 f876 	bl	80058b4 <_svfiprintf_r>
 80057c8:	9b02      	ldr	r3, [sp, #8]
 80057ca:	2200      	movs	r2, #0
 80057cc:	701a      	strb	r2, [r3, #0]
 80057ce:	b01c      	add	sp, #112	; 0x70
 80057d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80057d4:	b003      	add	sp, #12
 80057d6:	4770      	bx	lr
 80057d8:	20000010 	.word	0x20000010
 80057dc:	ffff0208 	.word	0xffff0208

080057e0 <__retarget_lock_acquire_recursive>:
 80057e0:	4770      	bx	lr

080057e2 <__retarget_lock_release_recursive>:
 80057e2:	4770      	bx	lr

080057e4 <__malloc_lock>:
 80057e4:	4801      	ldr	r0, [pc, #4]	; (80057ec <__malloc_lock+0x8>)
 80057e6:	f7ff bffb 	b.w	80057e0 <__retarget_lock_acquire_recursive>
 80057ea:	bf00      	nop
 80057ec:	200041d0 	.word	0x200041d0

080057f0 <__malloc_unlock>:
 80057f0:	4801      	ldr	r0, [pc, #4]	; (80057f8 <__malloc_unlock+0x8>)
 80057f2:	f7ff bff6 	b.w	80057e2 <__retarget_lock_release_recursive>
 80057f6:	bf00      	nop
 80057f8:	200041d0 	.word	0x200041d0

080057fc <__ssputs_r>:
 80057fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005800:	688e      	ldr	r6, [r1, #8]
 8005802:	429e      	cmp	r6, r3
 8005804:	4682      	mov	sl, r0
 8005806:	460c      	mov	r4, r1
 8005808:	4690      	mov	r8, r2
 800580a:	461f      	mov	r7, r3
 800580c:	d838      	bhi.n	8005880 <__ssputs_r+0x84>
 800580e:	898a      	ldrh	r2, [r1, #12]
 8005810:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005814:	d032      	beq.n	800587c <__ssputs_r+0x80>
 8005816:	6825      	ldr	r5, [r4, #0]
 8005818:	6909      	ldr	r1, [r1, #16]
 800581a:	eba5 0901 	sub.w	r9, r5, r1
 800581e:	6965      	ldr	r5, [r4, #20]
 8005820:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005824:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005828:	3301      	adds	r3, #1
 800582a:	444b      	add	r3, r9
 800582c:	106d      	asrs	r5, r5, #1
 800582e:	429d      	cmp	r5, r3
 8005830:	bf38      	it	cc
 8005832:	461d      	movcc	r5, r3
 8005834:	0553      	lsls	r3, r2, #21
 8005836:	d531      	bpl.n	800589c <__ssputs_r+0xa0>
 8005838:	4629      	mov	r1, r5
 800583a:	f7ff ff47 	bl	80056cc <_malloc_r>
 800583e:	4606      	mov	r6, r0
 8005840:	b950      	cbnz	r0, 8005858 <__ssputs_r+0x5c>
 8005842:	230c      	movs	r3, #12
 8005844:	f8ca 3000 	str.w	r3, [sl]
 8005848:	89a3      	ldrh	r3, [r4, #12]
 800584a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800584e:	81a3      	strh	r3, [r4, #12]
 8005850:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005854:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005858:	6921      	ldr	r1, [r4, #16]
 800585a:	464a      	mov	r2, r9
 800585c:	f7ff fed0 	bl	8005600 <memcpy>
 8005860:	89a3      	ldrh	r3, [r4, #12]
 8005862:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005866:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800586a:	81a3      	strh	r3, [r4, #12]
 800586c:	6126      	str	r6, [r4, #16]
 800586e:	6165      	str	r5, [r4, #20]
 8005870:	444e      	add	r6, r9
 8005872:	eba5 0509 	sub.w	r5, r5, r9
 8005876:	6026      	str	r6, [r4, #0]
 8005878:	60a5      	str	r5, [r4, #8]
 800587a:	463e      	mov	r6, r7
 800587c:	42be      	cmp	r6, r7
 800587e:	d900      	bls.n	8005882 <__ssputs_r+0x86>
 8005880:	463e      	mov	r6, r7
 8005882:	4632      	mov	r2, r6
 8005884:	6820      	ldr	r0, [r4, #0]
 8005886:	4641      	mov	r1, r8
 8005888:	f000 faa8 	bl	8005ddc <memmove>
 800588c:	68a3      	ldr	r3, [r4, #8]
 800588e:	6822      	ldr	r2, [r4, #0]
 8005890:	1b9b      	subs	r3, r3, r6
 8005892:	4432      	add	r2, r6
 8005894:	60a3      	str	r3, [r4, #8]
 8005896:	6022      	str	r2, [r4, #0]
 8005898:	2000      	movs	r0, #0
 800589a:	e7db      	b.n	8005854 <__ssputs_r+0x58>
 800589c:	462a      	mov	r2, r5
 800589e:	f000 fab7 	bl	8005e10 <_realloc_r>
 80058a2:	4606      	mov	r6, r0
 80058a4:	2800      	cmp	r0, #0
 80058a6:	d1e1      	bne.n	800586c <__ssputs_r+0x70>
 80058a8:	6921      	ldr	r1, [r4, #16]
 80058aa:	4650      	mov	r0, sl
 80058ac:	f7ff febe 	bl	800562c <_free_r>
 80058b0:	e7c7      	b.n	8005842 <__ssputs_r+0x46>
	...

080058b4 <_svfiprintf_r>:
 80058b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058b8:	4698      	mov	r8, r3
 80058ba:	898b      	ldrh	r3, [r1, #12]
 80058bc:	061b      	lsls	r3, r3, #24
 80058be:	b09d      	sub	sp, #116	; 0x74
 80058c0:	4607      	mov	r7, r0
 80058c2:	460d      	mov	r5, r1
 80058c4:	4614      	mov	r4, r2
 80058c6:	d50e      	bpl.n	80058e6 <_svfiprintf_r+0x32>
 80058c8:	690b      	ldr	r3, [r1, #16]
 80058ca:	b963      	cbnz	r3, 80058e6 <_svfiprintf_r+0x32>
 80058cc:	2140      	movs	r1, #64	; 0x40
 80058ce:	f7ff fefd 	bl	80056cc <_malloc_r>
 80058d2:	6028      	str	r0, [r5, #0]
 80058d4:	6128      	str	r0, [r5, #16]
 80058d6:	b920      	cbnz	r0, 80058e2 <_svfiprintf_r+0x2e>
 80058d8:	230c      	movs	r3, #12
 80058da:	603b      	str	r3, [r7, #0]
 80058dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80058e0:	e0d1      	b.n	8005a86 <_svfiprintf_r+0x1d2>
 80058e2:	2340      	movs	r3, #64	; 0x40
 80058e4:	616b      	str	r3, [r5, #20]
 80058e6:	2300      	movs	r3, #0
 80058e8:	9309      	str	r3, [sp, #36]	; 0x24
 80058ea:	2320      	movs	r3, #32
 80058ec:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80058f0:	f8cd 800c 	str.w	r8, [sp, #12]
 80058f4:	2330      	movs	r3, #48	; 0x30
 80058f6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005aa0 <_svfiprintf_r+0x1ec>
 80058fa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80058fe:	f04f 0901 	mov.w	r9, #1
 8005902:	4623      	mov	r3, r4
 8005904:	469a      	mov	sl, r3
 8005906:	f813 2b01 	ldrb.w	r2, [r3], #1
 800590a:	b10a      	cbz	r2, 8005910 <_svfiprintf_r+0x5c>
 800590c:	2a25      	cmp	r2, #37	; 0x25
 800590e:	d1f9      	bne.n	8005904 <_svfiprintf_r+0x50>
 8005910:	ebba 0b04 	subs.w	fp, sl, r4
 8005914:	d00b      	beq.n	800592e <_svfiprintf_r+0x7a>
 8005916:	465b      	mov	r3, fp
 8005918:	4622      	mov	r2, r4
 800591a:	4629      	mov	r1, r5
 800591c:	4638      	mov	r0, r7
 800591e:	f7ff ff6d 	bl	80057fc <__ssputs_r>
 8005922:	3001      	adds	r0, #1
 8005924:	f000 80aa 	beq.w	8005a7c <_svfiprintf_r+0x1c8>
 8005928:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800592a:	445a      	add	r2, fp
 800592c:	9209      	str	r2, [sp, #36]	; 0x24
 800592e:	f89a 3000 	ldrb.w	r3, [sl]
 8005932:	2b00      	cmp	r3, #0
 8005934:	f000 80a2 	beq.w	8005a7c <_svfiprintf_r+0x1c8>
 8005938:	2300      	movs	r3, #0
 800593a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800593e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005942:	f10a 0a01 	add.w	sl, sl, #1
 8005946:	9304      	str	r3, [sp, #16]
 8005948:	9307      	str	r3, [sp, #28]
 800594a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800594e:	931a      	str	r3, [sp, #104]	; 0x68
 8005950:	4654      	mov	r4, sl
 8005952:	2205      	movs	r2, #5
 8005954:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005958:	4851      	ldr	r0, [pc, #324]	; (8005aa0 <_svfiprintf_r+0x1ec>)
 800595a:	f7fa fc59 	bl	8000210 <memchr>
 800595e:	9a04      	ldr	r2, [sp, #16]
 8005960:	b9d8      	cbnz	r0, 800599a <_svfiprintf_r+0xe6>
 8005962:	06d0      	lsls	r0, r2, #27
 8005964:	bf44      	itt	mi
 8005966:	2320      	movmi	r3, #32
 8005968:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800596c:	0711      	lsls	r1, r2, #28
 800596e:	bf44      	itt	mi
 8005970:	232b      	movmi	r3, #43	; 0x2b
 8005972:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005976:	f89a 3000 	ldrb.w	r3, [sl]
 800597a:	2b2a      	cmp	r3, #42	; 0x2a
 800597c:	d015      	beq.n	80059aa <_svfiprintf_r+0xf6>
 800597e:	9a07      	ldr	r2, [sp, #28]
 8005980:	4654      	mov	r4, sl
 8005982:	2000      	movs	r0, #0
 8005984:	f04f 0c0a 	mov.w	ip, #10
 8005988:	4621      	mov	r1, r4
 800598a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800598e:	3b30      	subs	r3, #48	; 0x30
 8005990:	2b09      	cmp	r3, #9
 8005992:	d94e      	bls.n	8005a32 <_svfiprintf_r+0x17e>
 8005994:	b1b0      	cbz	r0, 80059c4 <_svfiprintf_r+0x110>
 8005996:	9207      	str	r2, [sp, #28]
 8005998:	e014      	b.n	80059c4 <_svfiprintf_r+0x110>
 800599a:	eba0 0308 	sub.w	r3, r0, r8
 800599e:	fa09 f303 	lsl.w	r3, r9, r3
 80059a2:	4313      	orrs	r3, r2
 80059a4:	9304      	str	r3, [sp, #16]
 80059a6:	46a2      	mov	sl, r4
 80059a8:	e7d2      	b.n	8005950 <_svfiprintf_r+0x9c>
 80059aa:	9b03      	ldr	r3, [sp, #12]
 80059ac:	1d19      	adds	r1, r3, #4
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	9103      	str	r1, [sp, #12]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	bfbb      	ittet	lt
 80059b6:	425b      	neglt	r3, r3
 80059b8:	f042 0202 	orrlt.w	r2, r2, #2
 80059bc:	9307      	strge	r3, [sp, #28]
 80059be:	9307      	strlt	r3, [sp, #28]
 80059c0:	bfb8      	it	lt
 80059c2:	9204      	strlt	r2, [sp, #16]
 80059c4:	7823      	ldrb	r3, [r4, #0]
 80059c6:	2b2e      	cmp	r3, #46	; 0x2e
 80059c8:	d10c      	bne.n	80059e4 <_svfiprintf_r+0x130>
 80059ca:	7863      	ldrb	r3, [r4, #1]
 80059cc:	2b2a      	cmp	r3, #42	; 0x2a
 80059ce:	d135      	bne.n	8005a3c <_svfiprintf_r+0x188>
 80059d0:	9b03      	ldr	r3, [sp, #12]
 80059d2:	1d1a      	adds	r2, r3, #4
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	9203      	str	r2, [sp, #12]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	bfb8      	it	lt
 80059dc:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80059e0:	3402      	adds	r4, #2
 80059e2:	9305      	str	r3, [sp, #20]
 80059e4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005ab0 <_svfiprintf_r+0x1fc>
 80059e8:	7821      	ldrb	r1, [r4, #0]
 80059ea:	2203      	movs	r2, #3
 80059ec:	4650      	mov	r0, sl
 80059ee:	f7fa fc0f 	bl	8000210 <memchr>
 80059f2:	b140      	cbz	r0, 8005a06 <_svfiprintf_r+0x152>
 80059f4:	2340      	movs	r3, #64	; 0x40
 80059f6:	eba0 000a 	sub.w	r0, r0, sl
 80059fa:	fa03 f000 	lsl.w	r0, r3, r0
 80059fe:	9b04      	ldr	r3, [sp, #16]
 8005a00:	4303      	orrs	r3, r0
 8005a02:	3401      	adds	r4, #1
 8005a04:	9304      	str	r3, [sp, #16]
 8005a06:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a0a:	4826      	ldr	r0, [pc, #152]	; (8005aa4 <_svfiprintf_r+0x1f0>)
 8005a0c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005a10:	2206      	movs	r2, #6
 8005a12:	f7fa fbfd 	bl	8000210 <memchr>
 8005a16:	2800      	cmp	r0, #0
 8005a18:	d038      	beq.n	8005a8c <_svfiprintf_r+0x1d8>
 8005a1a:	4b23      	ldr	r3, [pc, #140]	; (8005aa8 <_svfiprintf_r+0x1f4>)
 8005a1c:	bb1b      	cbnz	r3, 8005a66 <_svfiprintf_r+0x1b2>
 8005a1e:	9b03      	ldr	r3, [sp, #12]
 8005a20:	3307      	adds	r3, #7
 8005a22:	f023 0307 	bic.w	r3, r3, #7
 8005a26:	3308      	adds	r3, #8
 8005a28:	9303      	str	r3, [sp, #12]
 8005a2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a2c:	4433      	add	r3, r6
 8005a2e:	9309      	str	r3, [sp, #36]	; 0x24
 8005a30:	e767      	b.n	8005902 <_svfiprintf_r+0x4e>
 8005a32:	fb0c 3202 	mla	r2, ip, r2, r3
 8005a36:	460c      	mov	r4, r1
 8005a38:	2001      	movs	r0, #1
 8005a3a:	e7a5      	b.n	8005988 <_svfiprintf_r+0xd4>
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	3401      	adds	r4, #1
 8005a40:	9305      	str	r3, [sp, #20]
 8005a42:	4619      	mov	r1, r3
 8005a44:	f04f 0c0a 	mov.w	ip, #10
 8005a48:	4620      	mov	r0, r4
 8005a4a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005a4e:	3a30      	subs	r2, #48	; 0x30
 8005a50:	2a09      	cmp	r2, #9
 8005a52:	d903      	bls.n	8005a5c <_svfiprintf_r+0x1a8>
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d0c5      	beq.n	80059e4 <_svfiprintf_r+0x130>
 8005a58:	9105      	str	r1, [sp, #20]
 8005a5a:	e7c3      	b.n	80059e4 <_svfiprintf_r+0x130>
 8005a5c:	fb0c 2101 	mla	r1, ip, r1, r2
 8005a60:	4604      	mov	r4, r0
 8005a62:	2301      	movs	r3, #1
 8005a64:	e7f0      	b.n	8005a48 <_svfiprintf_r+0x194>
 8005a66:	ab03      	add	r3, sp, #12
 8005a68:	9300      	str	r3, [sp, #0]
 8005a6a:	462a      	mov	r2, r5
 8005a6c:	4b0f      	ldr	r3, [pc, #60]	; (8005aac <_svfiprintf_r+0x1f8>)
 8005a6e:	a904      	add	r1, sp, #16
 8005a70:	4638      	mov	r0, r7
 8005a72:	f3af 8000 	nop.w
 8005a76:	1c42      	adds	r2, r0, #1
 8005a78:	4606      	mov	r6, r0
 8005a7a:	d1d6      	bne.n	8005a2a <_svfiprintf_r+0x176>
 8005a7c:	89ab      	ldrh	r3, [r5, #12]
 8005a7e:	065b      	lsls	r3, r3, #25
 8005a80:	f53f af2c 	bmi.w	80058dc <_svfiprintf_r+0x28>
 8005a84:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005a86:	b01d      	add	sp, #116	; 0x74
 8005a88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a8c:	ab03      	add	r3, sp, #12
 8005a8e:	9300      	str	r3, [sp, #0]
 8005a90:	462a      	mov	r2, r5
 8005a92:	4b06      	ldr	r3, [pc, #24]	; (8005aac <_svfiprintf_r+0x1f8>)
 8005a94:	a904      	add	r1, sp, #16
 8005a96:	4638      	mov	r0, r7
 8005a98:	f000 f87a 	bl	8005b90 <_printf_i>
 8005a9c:	e7eb      	b.n	8005a76 <_svfiprintf_r+0x1c2>
 8005a9e:	bf00      	nop
 8005aa0:	0800611c 	.word	0x0800611c
 8005aa4:	08006126 	.word	0x08006126
 8005aa8:	00000000 	.word	0x00000000
 8005aac:	080057fd 	.word	0x080057fd
 8005ab0:	08006122 	.word	0x08006122

08005ab4 <_printf_common>:
 8005ab4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ab8:	4616      	mov	r6, r2
 8005aba:	4699      	mov	r9, r3
 8005abc:	688a      	ldr	r2, [r1, #8]
 8005abe:	690b      	ldr	r3, [r1, #16]
 8005ac0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	bfb8      	it	lt
 8005ac8:	4613      	movlt	r3, r2
 8005aca:	6033      	str	r3, [r6, #0]
 8005acc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005ad0:	4607      	mov	r7, r0
 8005ad2:	460c      	mov	r4, r1
 8005ad4:	b10a      	cbz	r2, 8005ada <_printf_common+0x26>
 8005ad6:	3301      	adds	r3, #1
 8005ad8:	6033      	str	r3, [r6, #0]
 8005ada:	6823      	ldr	r3, [r4, #0]
 8005adc:	0699      	lsls	r1, r3, #26
 8005ade:	bf42      	ittt	mi
 8005ae0:	6833      	ldrmi	r3, [r6, #0]
 8005ae2:	3302      	addmi	r3, #2
 8005ae4:	6033      	strmi	r3, [r6, #0]
 8005ae6:	6825      	ldr	r5, [r4, #0]
 8005ae8:	f015 0506 	ands.w	r5, r5, #6
 8005aec:	d106      	bne.n	8005afc <_printf_common+0x48>
 8005aee:	f104 0a19 	add.w	sl, r4, #25
 8005af2:	68e3      	ldr	r3, [r4, #12]
 8005af4:	6832      	ldr	r2, [r6, #0]
 8005af6:	1a9b      	subs	r3, r3, r2
 8005af8:	42ab      	cmp	r3, r5
 8005afa:	dc26      	bgt.n	8005b4a <_printf_common+0x96>
 8005afc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005b00:	1e13      	subs	r3, r2, #0
 8005b02:	6822      	ldr	r2, [r4, #0]
 8005b04:	bf18      	it	ne
 8005b06:	2301      	movne	r3, #1
 8005b08:	0692      	lsls	r2, r2, #26
 8005b0a:	d42b      	bmi.n	8005b64 <_printf_common+0xb0>
 8005b0c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005b10:	4649      	mov	r1, r9
 8005b12:	4638      	mov	r0, r7
 8005b14:	47c0      	blx	r8
 8005b16:	3001      	adds	r0, #1
 8005b18:	d01e      	beq.n	8005b58 <_printf_common+0xa4>
 8005b1a:	6823      	ldr	r3, [r4, #0]
 8005b1c:	68e5      	ldr	r5, [r4, #12]
 8005b1e:	6832      	ldr	r2, [r6, #0]
 8005b20:	f003 0306 	and.w	r3, r3, #6
 8005b24:	2b04      	cmp	r3, #4
 8005b26:	bf08      	it	eq
 8005b28:	1aad      	subeq	r5, r5, r2
 8005b2a:	68a3      	ldr	r3, [r4, #8]
 8005b2c:	6922      	ldr	r2, [r4, #16]
 8005b2e:	bf0c      	ite	eq
 8005b30:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005b34:	2500      	movne	r5, #0
 8005b36:	4293      	cmp	r3, r2
 8005b38:	bfc4      	itt	gt
 8005b3a:	1a9b      	subgt	r3, r3, r2
 8005b3c:	18ed      	addgt	r5, r5, r3
 8005b3e:	2600      	movs	r6, #0
 8005b40:	341a      	adds	r4, #26
 8005b42:	42b5      	cmp	r5, r6
 8005b44:	d11a      	bne.n	8005b7c <_printf_common+0xc8>
 8005b46:	2000      	movs	r0, #0
 8005b48:	e008      	b.n	8005b5c <_printf_common+0xa8>
 8005b4a:	2301      	movs	r3, #1
 8005b4c:	4652      	mov	r2, sl
 8005b4e:	4649      	mov	r1, r9
 8005b50:	4638      	mov	r0, r7
 8005b52:	47c0      	blx	r8
 8005b54:	3001      	adds	r0, #1
 8005b56:	d103      	bne.n	8005b60 <_printf_common+0xac>
 8005b58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005b5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b60:	3501      	adds	r5, #1
 8005b62:	e7c6      	b.n	8005af2 <_printf_common+0x3e>
 8005b64:	18e1      	adds	r1, r4, r3
 8005b66:	1c5a      	adds	r2, r3, #1
 8005b68:	2030      	movs	r0, #48	; 0x30
 8005b6a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005b6e:	4422      	add	r2, r4
 8005b70:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005b74:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005b78:	3302      	adds	r3, #2
 8005b7a:	e7c7      	b.n	8005b0c <_printf_common+0x58>
 8005b7c:	2301      	movs	r3, #1
 8005b7e:	4622      	mov	r2, r4
 8005b80:	4649      	mov	r1, r9
 8005b82:	4638      	mov	r0, r7
 8005b84:	47c0      	blx	r8
 8005b86:	3001      	adds	r0, #1
 8005b88:	d0e6      	beq.n	8005b58 <_printf_common+0xa4>
 8005b8a:	3601      	adds	r6, #1
 8005b8c:	e7d9      	b.n	8005b42 <_printf_common+0x8e>
	...

08005b90 <_printf_i>:
 8005b90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005b94:	460c      	mov	r4, r1
 8005b96:	4691      	mov	r9, r2
 8005b98:	7e27      	ldrb	r7, [r4, #24]
 8005b9a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005b9c:	2f78      	cmp	r7, #120	; 0x78
 8005b9e:	4680      	mov	r8, r0
 8005ba0:	469a      	mov	sl, r3
 8005ba2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005ba6:	d807      	bhi.n	8005bb8 <_printf_i+0x28>
 8005ba8:	2f62      	cmp	r7, #98	; 0x62
 8005baa:	d80a      	bhi.n	8005bc2 <_printf_i+0x32>
 8005bac:	2f00      	cmp	r7, #0
 8005bae:	f000 80d8 	beq.w	8005d62 <_printf_i+0x1d2>
 8005bb2:	2f58      	cmp	r7, #88	; 0x58
 8005bb4:	f000 80a3 	beq.w	8005cfe <_printf_i+0x16e>
 8005bb8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005bbc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005bc0:	e03a      	b.n	8005c38 <_printf_i+0xa8>
 8005bc2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005bc6:	2b15      	cmp	r3, #21
 8005bc8:	d8f6      	bhi.n	8005bb8 <_printf_i+0x28>
 8005bca:	a001      	add	r0, pc, #4	; (adr r0, 8005bd0 <_printf_i+0x40>)
 8005bcc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005bd0:	08005c29 	.word	0x08005c29
 8005bd4:	08005c3d 	.word	0x08005c3d
 8005bd8:	08005bb9 	.word	0x08005bb9
 8005bdc:	08005bb9 	.word	0x08005bb9
 8005be0:	08005bb9 	.word	0x08005bb9
 8005be4:	08005bb9 	.word	0x08005bb9
 8005be8:	08005c3d 	.word	0x08005c3d
 8005bec:	08005bb9 	.word	0x08005bb9
 8005bf0:	08005bb9 	.word	0x08005bb9
 8005bf4:	08005bb9 	.word	0x08005bb9
 8005bf8:	08005bb9 	.word	0x08005bb9
 8005bfc:	08005d49 	.word	0x08005d49
 8005c00:	08005c6d 	.word	0x08005c6d
 8005c04:	08005d2b 	.word	0x08005d2b
 8005c08:	08005bb9 	.word	0x08005bb9
 8005c0c:	08005bb9 	.word	0x08005bb9
 8005c10:	08005d6b 	.word	0x08005d6b
 8005c14:	08005bb9 	.word	0x08005bb9
 8005c18:	08005c6d 	.word	0x08005c6d
 8005c1c:	08005bb9 	.word	0x08005bb9
 8005c20:	08005bb9 	.word	0x08005bb9
 8005c24:	08005d33 	.word	0x08005d33
 8005c28:	680b      	ldr	r3, [r1, #0]
 8005c2a:	1d1a      	adds	r2, r3, #4
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	600a      	str	r2, [r1, #0]
 8005c30:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005c34:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005c38:	2301      	movs	r3, #1
 8005c3a:	e0a3      	b.n	8005d84 <_printf_i+0x1f4>
 8005c3c:	6825      	ldr	r5, [r4, #0]
 8005c3e:	6808      	ldr	r0, [r1, #0]
 8005c40:	062e      	lsls	r6, r5, #24
 8005c42:	f100 0304 	add.w	r3, r0, #4
 8005c46:	d50a      	bpl.n	8005c5e <_printf_i+0xce>
 8005c48:	6805      	ldr	r5, [r0, #0]
 8005c4a:	600b      	str	r3, [r1, #0]
 8005c4c:	2d00      	cmp	r5, #0
 8005c4e:	da03      	bge.n	8005c58 <_printf_i+0xc8>
 8005c50:	232d      	movs	r3, #45	; 0x2d
 8005c52:	426d      	negs	r5, r5
 8005c54:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c58:	485e      	ldr	r0, [pc, #376]	; (8005dd4 <_printf_i+0x244>)
 8005c5a:	230a      	movs	r3, #10
 8005c5c:	e019      	b.n	8005c92 <_printf_i+0x102>
 8005c5e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005c62:	6805      	ldr	r5, [r0, #0]
 8005c64:	600b      	str	r3, [r1, #0]
 8005c66:	bf18      	it	ne
 8005c68:	b22d      	sxthne	r5, r5
 8005c6a:	e7ef      	b.n	8005c4c <_printf_i+0xbc>
 8005c6c:	680b      	ldr	r3, [r1, #0]
 8005c6e:	6825      	ldr	r5, [r4, #0]
 8005c70:	1d18      	adds	r0, r3, #4
 8005c72:	6008      	str	r0, [r1, #0]
 8005c74:	0628      	lsls	r0, r5, #24
 8005c76:	d501      	bpl.n	8005c7c <_printf_i+0xec>
 8005c78:	681d      	ldr	r5, [r3, #0]
 8005c7a:	e002      	b.n	8005c82 <_printf_i+0xf2>
 8005c7c:	0669      	lsls	r1, r5, #25
 8005c7e:	d5fb      	bpl.n	8005c78 <_printf_i+0xe8>
 8005c80:	881d      	ldrh	r5, [r3, #0]
 8005c82:	4854      	ldr	r0, [pc, #336]	; (8005dd4 <_printf_i+0x244>)
 8005c84:	2f6f      	cmp	r7, #111	; 0x6f
 8005c86:	bf0c      	ite	eq
 8005c88:	2308      	moveq	r3, #8
 8005c8a:	230a      	movne	r3, #10
 8005c8c:	2100      	movs	r1, #0
 8005c8e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005c92:	6866      	ldr	r6, [r4, #4]
 8005c94:	60a6      	str	r6, [r4, #8]
 8005c96:	2e00      	cmp	r6, #0
 8005c98:	bfa2      	ittt	ge
 8005c9a:	6821      	ldrge	r1, [r4, #0]
 8005c9c:	f021 0104 	bicge.w	r1, r1, #4
 8005ca0:	6021      	strge	r1, [r4, #0]
 8005ca2:	b90d      	cbnz	r5, 8005ca8 <_printf_i+0x118>
 8005ca4:	2e00      	cmp	r6, #0
 8005ca6:	d04d      	beq.n	8005d44 <_printf_i+0x1b4>
 8005ca8:	4616      	mov	r6, r2
 8005caa:	fbb5 f1f3 	udiv	r1, r5, r3
 8005cae:	fb03 5711 	mls	r7, r3, r1, r5
 8005cb2:	5dc7      	ldrb	r7, [r0, r7]
 8005cb4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005cb8:	462f      	mov	r7, r5
 8005cba:	42bb      	cmp	r3, r7
 8005cbc:	460d      	mov	r5, r1
 8005cbe:	d9f4      	bls.n	8005caa <_printf_i+0x11a>
 8005cc0:	2b08      	cmp	r3, #8
 8005cc2:	d10b      	bne.n	8005cdc <_printf_i+0x14c>
 8005cc4:	6823      	ldr	r3, [r4, #0]
 8005cc6:	07df      	lsls	r7, r3, #31
 8005cc8:	d508      	bpl.n	8005cdc <_printf_i+0x14c>
 8005cca:	6923      	ldr	r3, [r4, #16]
 8005ccc:	6861      	ldr	r1, [r4, #4]
 8005cce:	4299      	cmp	r1, r3
 8005cd0:	bfde      	ittt	le
 8005cd2:	2330      	movle	r3, #48	; 0x30
 8005cd4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005cd8:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8005cdc:	1b92      	subs	r2, r2, r6
 8005cde:	6122      	str	r2, [r4, #16]
 8005ce0:	f8cd a000 	str.w	sl, [sp]
 8005ce4:	464b      	mov	r3, r9
 8005ce6:	aa03      	add	r2, sp, #12
 8005ce8:	4621      	mov	r1, r4
 8005cea:	4640      	mov	r0, r8
 8005cec:	f7ff fee2 	bl	8005ab4 <_printf_common>
 8005cf0:	3001      	adds	r0, #1
 8005cf2:	d14c      	bne.n	8005d8e <_printf_i+0x1fe>
 8005cf4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005cf8:	b004      	add	sp, #16
 8005cfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005cfe:	4835      	ldr	r0, [pc, #212]	; (8005dd4 <_printf_i+0x244>)
 8005d00:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005d04:	6823      	ldr	r3, [r4, #0]
 8005d06:	680e      	ldr	r6, [r1, #0]
 8005d08:	061f      	lsls	r7, r3, #24
 8005d0a:	f856 5b04 	ldr.w	r5, [r6], #4
 8005d0e:	600e      	str	r6, [r1, #0]
 8005d10:	d514      	bpl.n	8005d3c <_printf_i+0x1ac>
 8005d12:	07d9      	lsls	r1, r3, #31
 8005d14:	bf44      	itt	mi
 8005d16:	f043 0320 	orrmi.w	r3, r3, #32
 8005d1a:	6023      	strmi	r3, [r4, #0]
 8005d1c:	b91d      	cbnz	r5, 8005d26 <_printf_i+0x196>
 8005d1e:	6823      	ldr	r3, [r4, #0]
 8005d20:	f023 0320 	bic.w	r3, r3, #32
 8005d24:	6023      	str	r3, [r4, #0]
 8005d26:	2310      	movs	r3, #16
 8005d28:	e7b0      	b.n	8005c8c <_printf_i+0xfc>
 8005d2a:	6823      	ldr	r3, [r4, #0]
 8005d2c:	f043 0320 	orr.w	r3, r3, #32
 8005d30:	6023      	str	r3, [r4, #0]
 8005d32:	2378      	movs	r3, #120	; 0x78
 8005d34:	4828      	ldr	r0, [pc, #160]	; (8005dd8 <_printf_i+0x248>)
 8005d36:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005d3a:	e7e3      	b.n	8005d04 <_printf_i+0x174>
 8005d3c:	065e      	lsls	r6, r3, #25
 8005d3e:	bf48      	it	mi
 8005d40:	b2ad      	uxthmi	r5, r5
 8005d42:	e7e6      	b.n	8005d12 <_printf_i+0x182>
 8005d44:	4616      	mov	r6, r2
 8005d46:	e7bb      	b.n	8005cc0 <_printf_i+0x130>
 8005d48:	680b      	ldr	r3, [r1, #0]
 8005d4a:	6826      	ldr	r6, [r4, #0]
 8005d4c:	6960      	ldr	r0, [r4, #20]
 8005d4e:	1d1d      	adds	r5, r3, #4
 8005d50:	600d      	str	r5, [r1, #0]
 8005d52:	0635      	lsls	r5, r6, #24
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	d501      	bpl.n	8005d5c <_printf_i+0x1cc>
 8005d58:	6018      	str	r0, [r3, #0]
 8005d5a:	e002      	b.n	8005d62 <_printf_i+0x1d2>
 8005d5c:	0671      	lsls	r1, r6, #25
 8005d5e:	d5fb      	bpl.n	8005d58 <_printf_i+0x1c8>
 8005d60:	8018      	strh	r0, [r3, #0]
 8005d62:	2300      	movs	r3, #0
 8005d64:	6123      	str	r3, [r4, #16]
 8005d66:	4616      	mov	r6, r2
 8005d68:	e7ba      	b.n	8005ce0 <_printf_i+0x150>
 8005d6a:	680b      	ldr	r3, [r1, #0]
 8005d6c:	1d1a      	adds	r2, r3, #4
 8005d6e:	600a      	str	r2, [r1, #0]
 8005d70:	681e      	ldr	r6, [r3, #0]
 8005d72:	6862      	ldr	r2, [r4, #4]
 8005d74:	2100      	movs	r1, #0
 8005d76:	4630      	mov	r0, r6
 8005d78:	f7fa fa4a 	bl	8000210 <memchr>
 8005d7c:	b108      	cbz	r0, 8005d82 <_printf_i+0x1f2>
 8005d7e:	1b80      	subs	r0, r0, r6
 8005d80:	6060      	str	r0, [r4, #4]
 8005d82:	6863      	ldr	r3, [r4, #4]
 8005d84:	6123      	str	r3, [r4, #16]
 8005d86:	2300      	movs	r3, #0
 8005d88:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d8c:	e7a8      	b.n	8005ce0 <_printf_i+0x150>
 8005d8e:	6923      	ldr	r3, [r4, #16]
 8005d90:	4632      	mov	r2, r6
 8005d92:	4649      	mov	r1, r9
 8005d94:	4640      	mov	r0, r8
 8005d96:	47d0      	blx	sl
 8005d98:	3001      	adds	r0, #1
 8005d9a:	d0ab      	beq.n	8005cf4 <_printf_i+0x164>
 8005d9c:	6823      	ldr	r3, [r4, #0]
 8005d9e:	079b      	lsls	r3, r3, #30
 8005da0:	d413      	bmi.n	8005dca <_printf_i+0x23a>
 8005da2:	68e0      	ldr	r0, [r4, #12]
 8005da4:	9b03      	ldr	r3, [sp, #12]
 8005da6:	4298      	cmp	r0, r3
 8005da8:	bfb8      	it	lt
 8005daa:	4618      	movlt	r0, r3
 8005dac:	e7a4      	b.n	8005cf8 <_printf_i+0x168>
 8005dae:	2301      	movs	r3, #1
 8005db0:	4632      	mov	r2, r6
 8005db2:	4649      	mov	r1, r9
 8005db4:	4640      	mov	r0, r8
 8005db6:	47d0      	blx	sl
 8005db8:	3001      	adds	r0, #1
 8005dba:	d09b      	beq.n	8005cf4 <_printf_i+0x164>
 8005dbc:	3501      	adds	r5, #1
 8005dbe:	68e3      	ldr	r3, [r4, #12]
 8005dc0:	9903      	ldr	r1, [sp, #12]
 8005dc2:	1a5b      	subs	r3, r3, r1
 8005dc4:	42ab      	cmp	r3, r5
 8005dc6:	dcf2      	bgt.n	8005dae <_printf_i+0x21e>
 8005dc8:	e7eb      	b.n	8005da2 <_printf_i+0x212>
 8005dca:	2500      	movs	r5, #0
 8005dcc:	f104 0619 	add.w	r6, r4, #25
 8005dd0:	e7f5      	b.n	8005dbe <_printf_i+0x22e>
 8005dd2:	bf00      	nop
 8005dd4:	0800612d 	.word	0x0800612d
 8005dd8:	0800613e 	.word	0x0800613e

08005ddc <memmove>:
 8005ddc:	4288      	cmp	r0, r1
 8005dde:	b510      	push	{r4, lr}
 8005de0:	eb01 0402 	add.w	r4, r1, r2
 8005de4:	d902      	bls.n	8005dec <memmove+0x10>
 8005de6:	4284      	cmp	r4, r0
 8005de8:	4623      	mov	r3, r4
 8005dea:	d807      	bhi.n	8005dfc <memmove+0x20>
 8005dec:	1e43      	subs	r3, r0, #1
 8005dee:	42a1      	cmp	r1, r4
 8005df0:	d008      	beq.n	8005e04 <memmove+0x28>
 8005df2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005df6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005dfa:	e7f8      	b.n	8005dee <memmove+0x12>
 8005dfc:	4402      	add	r2, r0
 8005dfe:	4601      	mov	r1, r0
 8005e00:	428a      	cmp	r2, r1
 8005e02:	d100      	bne.n	8005e06 <memmove+0x2a>
 8005e04:	bd10      	pop	{r4, pc}
 8005e06:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005e0a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005e0e:	e7f7      	b.n	8005e00 <memmove+0x24>

08005e10 <_realloc_r>:
 8005e10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e12:	4607      	mov	r7, r0
 8005e14:	4614      	mov	r4, r2
 8005e16:	460e      	mov	r6, r1
 8005e18:	b921      	cbnz	r1, 8005e24 <_realloc_r+0x14>
 8005e1a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005e1e:	4611      	mov	r1, r2
 8005e20:	f7ff bc54 	b.w	80056cc <_malloc_r>
 8005e24:	b922      	cbnz	r2, 8005e30 <_realloc_r+0x20>
 8005e26:	f7ff fc01 	bl	800562c <_free_r>
 8005e2a:	4625      	mov	r5, r4
 8005e2c:	4628      	mov	r0, r5
 8005e2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e30:	f000 f814 	bl	8005e5c <_malloc_usable_size_r>
 8005e34:	42a0      	cmp	r0, r4
 8005e36:	d20f      	bcs.n	8005e58 <_realloc_r+0x48>
 8005e38:	4621      	mov	r1, r4
 8005e3a:	4638      	mov	r0, r7
 8005e3c:	f7ff fc46 	bl	80056cc <_malloc_r>
 8005e40:	4605      	mov	r5, r0
 8005e42:	2800      	cmp	r0, #0
 8005e44:	d0f2      	beq.n	8005e2c <_realloc_r+0x1c>
 8005e46:	4631      	mov	r1, r6
 8005e48:	4622      	mov	r2, r4
 8005e4a:	f7ff fbd9 	bl	8005600 <memcpy>
 8005e4e:	4631      	mov	r1, r6
 8005e50:	4638      	mov	r0, r7
 8005e52:	f7ff fbeb 	bl	800562c <_free_r>
 8005e56:	e7e9      	b.n	8005e2c <_realloc_r+0x1c>
 8005e58:	4635      	mov	r5, r6
 8005e5a:	e7e7      	b.n	8005e2c <_realloc_r+0x1c>

08005e5c <_malloc_usable_size_r>:
 8005e5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005e60:	1f18      	subs	r0, r3, #4
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	bfbc      	itt	lt
 8005e66:	580b      	ldrlt	r3, [r1, r0]
 8005e68:	18c0      	addlt	r0, r0, r3
 8005e6a:	4770      	bx	lr

08005e6c <_init>:
 8005e6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e6e:	bf00      	nop
 8005e70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e72:	bc08      	pop	{r3}
 8005e74:	469e      	mov	lr, r3
 8005e76:	4770      	bx	lr

08005e78 <_fini>:
 8005e78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e7a:	bf00      	nop
 8005e7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e7e:	bc08      	pop	{r3}
 8005e80:	469e      	mov	lr, r3
 8005e82:	4770      	bx	lr
