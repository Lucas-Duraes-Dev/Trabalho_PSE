
Projeto Servo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003094  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  0800325c  0800325c  0001325c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800326c  0800326c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800326c  0800326c  0001326c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003274  08003274  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003274  08003274  00013274  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003278  08003278  00013278  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800327c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000068  2000000c  08003288  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000074  08003288  00020074  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b2d5  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001951  00000000  00000000  0002b311  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009e8  00000000  00000000  0002cc68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000920  00000000  00000000  0002d650  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021c04  00000000  00000000  0002df70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bc1d  00000000  00000000  0004fb74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cec24  00000000  00000000  0005b791  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0012a3b5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a24  00000000  00000000  0012a408  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000000c 	.word	0x2000000c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08003244 	.word	0x08003244

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000010 	.word	0x20000010
 8000204:	08003244 	.word	0x08003244

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	; 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__aeabi_d2uiz>:
 80009a4:	004a      	lsls	r2, r1, #1
 80009a6:	d211      	bcs.n	80009cc <__aeabi_d2uiz+0x28>
 80009a8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009ac:	d211      	bcs.n	80009d2 <__aeabi_d2uiz+0x2e>
 80009ae:	d50d      	bpl.n	80009cc <__aeabi_d2uiz+0x28>
 80009b0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009b4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009b8:	d40e      	bmi.n	80009d8 <__aeabi_d2uiz+0x34>
 80009ba:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009be:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009c2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009c6:	fa23 f002 	lsr.w	r0, r3, r2
 80009ca:	4770      	bx	lr
 80009cc:	f04f 0000 	mov.w	r0, #0
 80009d0:	4770      	bx	lr
 80009d2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009d6:	d102      	bne.n	80009de <__aeabi_d2uiz+0x3a>
 80009d8:	f04f 30ff 	mov.w	r0, #4294967295
 80009dc:	4770      	bx	lr
 80009de:	f04f 0000 	mov.w	r0, #0
 80009e2:	4770      	bx	lr

080009e4 <__aeabi_uldivmod>:
 80009e4:	b953      	cbnz	r3, 80009fc <__aeabi_uldivmod+0x18>
 80009e6:	b94a      	cbnz	r2, 80009fc <__aeabi_uldivmod+0x18>
 80009e8:	2900      	cmp	r1, #0
 80009ea:	bf08      	it	eq
 80009ec:	2800      	cmpeq	r0, #0
 80009ee:	bf1c      	itt	ne
 80009f0:	f04f 31ff 	movne.w	r1, #4294967295
 80009f4:	f04f 30ff 	movne.w	r0, #4294967295
 80009f8:	f000 b96e 	b.w	8000cd8 <__aeabi_idiv0>
 80009fc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a00:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a04:	f000 f806 	bl	8000a14 <__udivmoddi4>
 8000a08:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a10:	b004      	add	sp, #16
 8000a12:	4770      	bx	lr

08000a14 <__udivmoddi4>:
 8000a14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a18:	9d08      	ldr	r5, [sp, #32]
 8000a1a:	4604      	mov	r4, r0
 8000a1c:	468c      	mov	ip, r1
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	f040 8083 	bne.w	8000b2a <__udivmoddi4+0x116>
 8000a24:	428a      	cmp	r2, r1
 8000a26:	4617      	mov	r7, r2
 8000a28:	d947      	bls.n	8000aba <__udivmoddi4+0xa6>
 8000a2a:	fab2 f282 	clz	r2, r2
 8000a2e:	b142      	cbz	r2, 8000a42 <__udivmoddi4+0x2e>
 8000a30:	f1c2 0020 	rsb	r0, r2, #32
 8000a34:	fa24 f000 	lsr.w	r0, r4, r0
 8000a38:	4091      	lsls	r1, r2
 8000a3a:	4097      	lsls	r7, r2
 8000a3c:	ea40 0c01 	orr.w	ip, r0, r1
 8000a40:	4094      	lsls	r4, r2
 8000a42:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000a46:	0c23      	lsrs	r3, r4, #16
 8000a48:	fbbc f6f8 	udiv	r6, ip, r8
 8000a4c:	fa1f fe87 	uxth.w	lr, r7
 8000a50:	fb08 c116 	mls	r1, r8, r6, ip
 8000a54:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a58:	fb06 f10e 	mul.w	r1, r6, lr
 8000a5c:	4299      	cmp	r1, r3
 8000a5e:	d909      	bls.n	8000a74 <__udivmoddi4+0x60>
 8000a60:	18fb      	adds	r3, r7, r3
 8000a62:	f106 30ff 	add.w	r0, r6, #4294967295
 8000a66:	f080 8119 	bcs.w	8000c9c <__udivmoddi4+0x288>
 8000a6a:	4299      	cmp	r1, r3
 8000a6c:	f240 8116 	bls.w	8000c9c <__udivmoddi4+0x288>
 8000a70:	3e02      	subs	r6, #2
 8000a72:	443b      	add	r3, r7
 8000a74:	1a5b      	subs	r3, r3, r1
 8000a76:	b2a4      	uxth	r4, r4
 8000a78:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a7c:	fb08 3310 	mls	r3, r8, r0, r3
 8000a80:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a84:	fb00 fe0e 	mul.w	lr, r0, lr
 8000a88:	45a6      	cmp	lr, r4
 8000a8a:	d909      	bls.n	8000aa0 <__udivmoddi4+0x8c>
 8000a8c:	193c      	adds	r4, r7, r4
 8000a8e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000a92:	f080 8105 	bcs.w	8000ca0 <__udivmoddi4+0x28c>
 8000a96:	45a6      	cmp	lr, r4
 8000a98:	f240 8102 	bls.w	8000ca0 <__udivmoddi4+0x28c>
 8000a9c:	3802      	subs	r0, #2
 8000a9e:	443c      	add	r4, r7
 8000aa0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000aa4:	eba4 040e 	sub.w	r4, r4, lr
 8000aa8:	2600      	movs	r6, #0
 8000aaa:	b11d      	cbz	r5, 8000ab4 <__udivmoddi4+0xa0>
 8000aac:	40d4      	lsrs	r4, r2
 8000aae:	2300      	movs	r3, #0
 8000ab0:	e9c5 4300 	strd	r4, r3, [r5]
 8000ab4:	4631      	mov	r1, r6
 8000ab6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aba:	b902      	cbnz	r2, 8000abe <__udivmoddi4+0xaa>
 8000abc:	deff      	udf	#255	; 0xff
 8000abe:	fab2 f282 	clz	r2, r2
 8000ac2:	2a00      	cmp	r2, #0
 8000ac4:	d150      	bne.n	8000b68 <__udivmoddi4+0x154>
 8000ac6:	1bcb      	subs	r3, r1, r7
 8000ac8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000acc:	fa1f f887 	uxth.w	r8, r7
 8000ad0:	2601      	movs	r6, #1
 8000ad2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000ad6:	0c21      	lsrs	r1, r4, #16
 8000ad8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000adc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ae0:	fb08 f30c 	mul.w	r3, r8, ip
 8000ae4:	428b      	cmp	r3, r1
 8000ae6:	d907      	bls.n	8000af8 <__udivmoddi4+0xe4>
 8000ae8:	1879      	adds	r1, r7, r1
 8000aea:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000aee:	d202      	bcs.n	8000af6 <__udivmoddi4+0xe2>
 8000af0:	428b      	cmp	r3, r1
 8000af2:	f200 80e9 	bhi.w	8000cc8 <__udivmoddi4+0x2b4>
 8000af6:	4684      	mov	ip, r0
 8000af8:	1ac9      	subs	r1, r1, r3
 8000afa:	b2a3      	uxth	r3, r4
 8000afc:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b00:	fb0e 1110 	mls	r1, lr, r0, r1
 8000b04:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000b08:	fb08 f800 	mul.w	r8, r8, r0
 8000b0c:	45a0      	cmp	r8, r4
 8000b0e:	d907      	bls.n	8000b20 <__udivmoddi4+0x10c>
 8000b10:	193c      	adds	r4, r7, r4
 8000b12:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b16:	d202      	bcs.n	8000b1e <__udivmoddi4+0x10a>
 8000b18:	45a0      	cmp	r8, r4
 8000b1a:	f200 80d9 	bhi.w	8000cd0 <__udivmoddi4+0x2bc>
 8000b1e:	4618      	mov	r0, r3
 8000b20:	eba4 0408 	sub.w	r4, r4, r8
 8000b24:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000b28:	e7bf      	b.n	8000aaa <__udivmoddi4+0x96>
 8000b2a:	428b      	cmp	r3, r1
 8000b2c:	d909      	bls.n	8000b42 <__udivmoddi4+0x12e>
 8000b2e:	2d00      	cmp	r5, #0
 8000b30:	f000 80b1 	beq.w	8000c96 <__udivmoddi4+0x282>
 8000b34:	2600      	movs	r6, #0
 8000b36:	e9c5 0100 	strd	r0, r1, [r5]
 8000b3a:	4630      	mov	r0, r6
 8000b3c:	4631      	mov	r1, r6
 8000b3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b42:	fab3 f683 	clz	r6, r3
 8000b46:	2e00      	cmp	r6, #0
 8000b48:	d14a      	bne.n	8000be0 <__udivmoddi4+0x1cc>
 8000b4a:	428b      	cmp	r3, r1
 8000b4c:	d302      	bcc.n	8000b54 <__udivmoddi4+0x140>
 8000b4e:	4282      	cmp	r2, r0
 8000b50:	f200 80b8 	bhi.w	8000cc4 <__udivmoddi4+0x2b0>
 8000b54:	1a84      	subs	r4, r0, r2
 8000b56:	eb61 0103 	sbc.w	r1, r1, r3
 8000b5a:	2001      	movs	r0, #1
 8000b5c:	468c      	mov	ip, r1
 8000b5e:	2d00      	cmp	r5, #0
 8000b60:	d0a8      	beq.n	8000ab4 <__udivmoddi4+0xa0>
 8000b62:	e9c5 4c00 	strd	r4, ip, [r5]
 8000b66:	e7a5      	b.n	8000ab4 <__udivmoddi4+0xa0>
 8000b68:	f1c2 0320 	rsb	r3, r2, #32
 8000b6c:	fa20 f603 	lsr.w	r6, r0, r3
 8000b70:	4097      	lsls	r7, r2
 8000b72:	fa01 f002 	lsl.w	r0, r1, r2
 8000b76:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b7a:	40d9      	lsrs	r1, r3
 8000b7c:	4330      	orrs	r0, r6
 8000b7e:	0c03      	lsrs	r3, r0, #16
 8000b80:	fbb1 f6fe 	udiv	r6, r1, lr
 8000b84:	fa1f f887 	uxth.w	r8, r7
 8000b88:	fb0e 1116 	mls	r1, lr, r6, r1
 8000b8c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b90:	fb06 f108 	mul.w	r1, r6, r8
 8000b94:	4299      	cmp	r1, r3
 8000b96:	fa04 f402 	lsl.w	r4, r4, r2
 8000b9a:	d909      	bls.n	8000bb0 <__udivmoddi4+0x19c>
 8000b9c:	18fb      	adds	r3, r7, r3
 8000b9e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000ba2:	f080 808d 	bcs.w	8000cc0 <__udivmoddi4+0x2ac>
 8000ba6:	4299      	cmp	r1, r3
 8000ba8:	f240 808a 	bls.w	8000cc0 <__udivmoddi4+0x2ac>
 8000bac:	3e02      	subs	r6, #2
 8000bae:	443b      	add	r3, r7
 8000bb0:	1a5b      	subs	r3, r3, r1
 8000bb2:	b281      	uxth	r1, r0
 8000bb4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000bb8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000bbc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000bc0:	fb00 f308 	mul.w	r3, r0, r8
 8000bc4:	428b      	cmp	r3, r1
 8000bc6:	d907      	bls.n	8000bd8 <__udivmoddi4+0x1c4>
 8000bc8:	1879      	adds	r1, r7, r1
 8000bca:	f100 3cff 	add.w	ip, r0, #4294967295
 8000bce:	d273      	bcs.n	8000cb8 <__udivmoddi4+0x2a4>
 8000bd0:	428b      	cmp	r3, r1
 8000bd2:	d971      	bls.n	8000cb8 <__udivmoddi4+0x2a4>
 8000bd4:	3802      	subs	r0, #2
 8000bd6:	4439      	add	r1, r7
 8000bd8:	1acb      	subs	r3, r1, r3
 8000bda:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000bde:	e778      	b.n	8000ad2 <__udivmoddi4+0xbe>
 8000be0:	f1c6 0c20 	rsb	ip, r6, #32
 8000be4:	fa03 f406 	lsl.w	r4, r3, r6
 8000be8:	fa22 f30c 	lsr.w	r3, r2, ip
 8000bec:	431c      	orrs	r4, r3
 8000bee:	fa20 f70c 	lsr.w	r7, r0, ip
 8000bf2:	fa01 f306 	lsl.w	r3, r1, r6
 8000bf6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000bfa:	fa21 f10c 	lsr.w	r1, r1, ip
 8000bfe:	431f      	orrs	r7, r3
 8000c00:	0c3b      	lsrs	r3, r7, #16
 8000c02:	fbb1 f9fe 	udiv	r9, r1, lr
 8000c06:	fa1f f884 	uxth.w	r8, r4
 8000c0a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000c0e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000c12:	fb09 fa08 	mul.w	sl, r9, r8
 8000c16:	458a      	cmp	sl, r1
 8000c18:	fa02 f206 	lsl.w	r2, r2, r6
 8000c1c:	fa00 f306 	lsl.w	r3, r0, r6
 8000c20:	d908      	bls.n	8000c34 <__udivmoddi4+0x220>
 8000c22:	1861      	adds	r1, r4, r1
 8000c24:	f109 30ff 	add.w	r0, r9, #4294967295
 8000c28:	d248      	bcs.n	8000cbc <__udivmoddi4+0x2a8>
 8000c2a:	458a      	cmp	sl, r1
 8000c2c:	d946      	bls.n	8000cbc <__udivmoddi4+0x2a8>
 8000c2e:	f1a9 0902 	sub.w	r9, r9, #2
 8000c32:	4421      	add	r1, r4
 8000c34:	eba1 010a 	sub.w	r1, r1, sl
 8000c38:	b2bf      	uxth	r7, r7
 8000c3a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c3e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c42:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000c46:	fb00 f808 	mul.w	r8, r0, r8
 8000c4a:	45b8      	cmp	r8, r7
 8000c4c:	d907      	bls.n	8000c5e <__udivmoddi4+0x24a>
 8000c4e:	19e7      	adds	r7, r4, r7
 8000c50:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c54:	d22e      	bcs.n	8000cb4 <__udivmoddi4+0x2a0>
 8000c56:	45b8      	cmp	r8, r7
 8000c58:	d92c      	bls.n	8000cb4 <__udivmoddi4+0x2a0>
 8000c5a:	3802      	subs	r0, #2
 8000c5c:	4427      	add	r7, r4
 8000c5e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c62:	eba7 0708 	sub.w	r7, r7, r8
 8000c66:	fba0 8902 	umull	r8, r9, r0, r2
 8000c6a:	454f      	cmp	r7, r9
 8000c6c:	46c6      	mov	lr, r8
 8000c6e:	4649      	mov	r1, r9
 8000c70:	d31a      	bcc.n	8000ca8 <__udivmoddi4+0x294>
 8000c72:	d017      	beq.n	8000ca4 <__udivmoddi4+0x290>
 8000c74:	b15d      	cbz	r5, 8000c8e <__udivmoddi4+0x27a>
 8000c76:	ebb3 020e 	subs.w	r2, r3, lr
 8000c7a:	eb67 0701 	sbc.w	r7, r7, r1
 8000c7e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000c82:	40f2      	lsrs	r2, r6
 8000c84:	ea4c 0202 	orr.w	r2, ip, r2
 8000c88:	40f7      	lsrs	r7, r6
 8000c8a:	e9c5 2700 	strd	r2, r7, [r5]
 8000c8e:	2600      	movs	r6, #0
 8000c90:	4631      	mov	r1, r6
 8000c92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c96:	462e      	mov	r6, r5
 8000c98:	4628      	mov	r0, r5
 8000c9a:	e70b      	b.n	8000ab4 <__udivmoddi4+0xa0>
 8000c9c:	4606      	mov	r6, r0
 8000c9e:	e6e9      	b.n	8000a74 <__udivmoddi4+0x60>
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	e6fd      	b.n	8000aa0 <__udivmoddi4+0x8c>
 8000ca4:	4543      	cmp	r3, r8
 8000ca6:	d2e5      	bcs.n	8000c74 <__udivmoddi4+0x260>
 8000ca8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000cac:	eb69 0104 	sbc.w	r1, r9, r4
 8000cb0:	3801      	subs	r0, #1
 8000cb2:	e7df      	b.n	8000c74 <__udivmoddi4+0x260>
 8000cb4:	4608      	mov	r0, r1
 8000cb6:	e7d2      	b.n	8000c5e <__udivmoddi4+0x24a>
 8000cb8:	4660      	mov	r0, ip
 8000cba:	e78d      	b.n	8000bd8 <__udivmoddi4+0x1c4>
 8000cbc:	4681      	mov	r9, r0
 8000cbe:	e7b9      	b.n	8000c34 <__udivmoddi4+0x220>
 8000cc0:	4666      	mov	r6, ip
 8000cc2:	e775      	b.n	8000bb0 <__udivmoddi4+0x19c>
 8000cc4:	4630      	mov	r0, r6
 8000cc6:	e74a      	b.n	8000b5e <__udivmoddi4+0x14a>
 8000cc8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ccc:	4439      	add	r1, r7
 8000cce:	e713      	b.n	8000af8 <__udivmoddi4+0xe4>
 8000cd0:	3802      	subs	r0, #2
 8000cd2:	443c      	add	r4, r7
 8000cd4:	e724      	b.n	8000b20 <__udivmoddi4+0x10c>
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_idiv0>:
 8000cd8:	4770      	bx	lr
 8000cda:	bf00      	nop

08000cdc <roundUp>:
#include "SERVOMOTOR.h"

/* O servo se movimento de 5 em 5 graus, portanto devemos
 * encontrar valores que sejam múltiplos de 5.
*/
int roundUp(int num) {
 8000cdc:	b480      	push	{r7}
 8000cde:	b083      	sub	sp, #12
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
    return ((num / 5) + (num % 5 > 0 ? 1 : 0)) * 5;
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	4a10      	ldr	r2, [pc, #64]	; (8000d28 <roundUp+0x4c>)
 8000ce8:	fb82 1203 	smull	r1, r2, r2, r3
 8000cec:	1052      	asrs	r2, r2, #1
 8000cee:	17db      	asrs	r3, r3, #31
 8000cf0:	1ad0      	subs	r0, r2, r3
 8000cf2:	6879      	ldr	r1, [r7, #4]
 8000cf4:	4b0c      	ldr	r3, [pc, #48]	; (8000d28 <roundUp+0x4c>)
 8000cf6:	fb83 2301 	smull	r2, r3, r3, r1
 8000cfa:	105a      	asrs	r2, r3, #1
 8000cfc:	17cb      	asrs	r3, r1, #31
 8000cfe:	1ad2      	subs	r2, r2, r3
 8000d00:	4613      	mov	r3, r2
 8000d02:	009b      	lsls	r3, r3, #2
 8000d04:	4413      	add	r3, r2
 8000d06:	1aca      	subs	r2, r1, r3
 8000d08:	2a00      	cmp	r2, #0
 8000d0a:	bfcc      	ite	gt
 8000d0c:	2301      	movgt	r3, #1
 8000d0e:	2300      	movle	r3, #0
 8000d10:	b2db      	uxtb	r3, r3
 8000d12:	18c2      	adds	r2, r0, r3
 8000d14:	4613      	mov	r3, r2
 8000d16:	009b      	lsls	r3, r3, #2
 8000d18:	4413      	add	r3, r2
}
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	370c      	adds	r7, #12
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr
 8000d26:	bf00      	nop
 8000d28:	66666667 	.word	0x66666667
 8000d2c:	00000000 	.word	0x00000000

08000d30 <setPWMAngulo>:

void setPWMAngulo(TIM_HandleTypeDef timer, uint32_t channel, uint16_t period, int angulo){
 8000d30:	b084      	sub	sp, #16
 8000d32:	b5b0      	push	{r4, r5, r7, lr}
 8000d34:	b08e      	sub	sp, #56	; 0x38
 8000d36:	af00      	add	r7, sp, #0
 8000d38:	f107 0448 	add.w	r4, r7, #72	; 0x48
 8000d3c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	int anguloOK;
	uint16_t pulse, T, tempo = 20;
 8000d40:	2314      	movs	r3, #20
 8000d42:	86fb      	strh	r3, [r7, #54]	; 0x36
	double intervalo = ((2.3-1.5)/180);
 8000d44:	a33a      	add	r3, pc, #232	; (adr r3, 8000e30 <setPWMAngulo+0x100>)
 8000d46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d4a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	anguloOK = roundUp(angulo);
 8000d4e:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8000d52:	f7ff ffc3 	bl	8000cdc <roundUp>
 8000d56:	6278      	str	r0, [r7, #36]	; 0x24
	T = period/10;
 8000d58:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8000d5c:	4a32      	ldr	r2, [pc, #200]	; (8000e28 <setPWMAngulo+0xf8>)
 8000d5e:	fba2 2303 	umull	r2, r3, r2, r3
 8000d62:	08db      	lsrs	r3, r3, #3
 8000d64:	847b      	strh	r3, [r7, #34]	; 0x22

	// Função para determinar o pulso
	pulse = ((((anguloOK*intervalo)+1.5)/tempo)*T);
 8000d66:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000d68:	f7ff fba0 	bl	80004ac <__aeabi_i2d>
 8000d6c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8000d70:	f7ff fc06 	bl	8000580 <__aeabi_dmul>
 8000d74:	4602      	mov	r2, r0
 8000d76:	460b      	mov	r3, r1
 8000d78:	4610      	mov	r0, r2
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	f04f 0200 	mov.w	r2, #0
 8000d80:	4b2a      	ldr	r3, [pc, #168]	; (8000e2c <setPWMAngulo+0xfc>)
 8000d82:	f7ff fa47 	bl	8000214 <__adddf3>
 8000d86:	4602      	mov	r2, r0
 8000d88:	460b      	mov	r3, r1
 8000d8a:	4614      	mov	r4, r2
 8000d8c:	461d      	mov	r5, r3
 8000d8e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8000d90:	4618      	mov	r0, r3
 8000d92:	f7ff fb8b 	bl	80004ac <__aeabi_i2d>
 8000d96:	4602      	mov	r2, r0
 8000d98:	460b      	mov	r3, r1
 8000d9a:	4620      	mov	r0, r4
 8000d9c:	4629      	mov	r1, r5
 8000d9e:	f7ff fd19 	bl	80007d4 <__aeabi_ddiv>
 8000da2:	4602      	mov	r2, r0
 8000da4:	460b      	mov	r3, r1
 8000da6:	4614      	mov	r4, r2
 8000da8:	461d      	mov	r5, r3
 8000daa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000dac:	4618      	mov	r0, r3
 8000dae:	f7ff fb7d 	bl	80004ac <__aeabi_i2d>
 8000db2:	4602      	mov	r2, r0
 8000db4:	460b      	mov	r3, r1
 8000db6:	4620      	mov	r0, r4
 8000db8:	4629      	mov	r1, r5
 8000dba:	f7ff fbe1 	bl	8000580 <__aeabi_dmul>
 8000dbe:	4602      	mov	r2, r0
 8000dc0:	460b      	mov	r3, r1
 8000dc2:	4610      	mov	r0, r2
 8000dc4:	4619      	mov	r1, r3
 8000dc6:	f7ff fded 	bl	80009a4 <__aeabi_d2uiz>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	843b      	strh	r3, [r7, #32]


	HAL_TIM_PWM_Stop(&timer, channel); // para de gerar PWM
 8000dce:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8000dd2:	f107 0048 	add.w	r0, r7, #72	; 0x48
 8000dd6:	f001 fc83 	bl	80026e0 <HAL_TIM_PWM_Stop>
	TIM_OC_InitTypeDef sConfigOC;
	timer.Init.Period = period; // configura a duração do período
 8000dda:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8000dde:	657b      	str	r3, [r7, #84]	; 0x54
	HAL_TIM_PWM_Init(&timer); // reinicia com novos valores de período
 8000de0:	f107 0048 	add.w	r0, r7, #72	; 0x48
 8000de4:	f001 fb5b 	bl	800249e <HAL_TIM_PWM_Init>
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000de8:	2360      	movs	r3, #96	; 0x60
 8000dea:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = pulse;
 8000dec:	8c3b      	ldrh	r3, [r7, #32]
 8000dee:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000df0:	2300      	movs	r3, #0
 8000df2:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000df4:	2300      	movs	r3, #0
 8000df6:	617b      	str	r3, [r7, #20]
	HAL_TIM_PWM_ConfigChannel(&timer, &sConfigOC, channel);
 8000df8:	1d3b      	adds	r3, r7, #4
 8000dfa:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8000dfe:	4619      	mov	r1, r3
 8000e00:	f107 0048 	add.w	r0, r7, #72	; 0x48
 8000e04:	f001 fcdc 	bl	80027c0 <HAL_TIM_PWM_ConfigChannel>
	HAL_TIM_PWM_Start(&timer, channel); // começa a geração de PWM
 8000e08:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8000e0c:	f107 0048 	add.w	r0, r7, #72	; 0x48
 8000e10:	f001 fb9e 	bl	8002550 <HAL_TIM_PWM_Start>
}
 8000e14:	bf00      	nop
 8000e16:	3738      	adds	r7, #56	; 0x38
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8000e1e:	b004      	add	sp, #16
 8000e20:	4770      	bx	lr
 8000e22:	bf00      	nop
 8000e24:	f3af 8000 	nop.w
 8000e28:	cccccccd 	.word	0xcccccccd
 8000e2c:	3ff80000 	.word	0x3ff80000
 8000e30:	789abcde 	.word	0x789abcde
 8000e34:	3f723456 	.word	0x3f723456

08000e38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e3a:	b093      	sub	sp, #76	; 0x4c
 8000e3c:	af12      	add	r7, sp, #72	; 0x48
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e3e:	f000 faef 	bl	8001420 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e42:	f000 f8ef 	bl	8001024 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e46:	f000 f9c5 	bl	80011d4 <MX_GPIO_Init>
  MX_TIM3_Init();
 8000e4a:	f000 f94d 	bl	80010e8 <MX_TIM3_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  // TESTANDO DIFERENTES ÂNGULOS
	  setPWMAngulo(htim3, TIM_CHANNEL_2, 12500, 178); // 178º --> 180º
 8000e4e:	4e74      	ldr	r6, [pc, #464]	; (8001020 <main+0x1e8>)
 8000e50:	23b2      	movs	r3, #178	; 0xb2
 8000e52:	9310      	str	r3, [sp, #64]	; 0x40
 8000e54:	f243 03d4 	movw	r3, #12500	; 0x30d4
 8000e58:	930f      	str	r3, [sp, #60]	; 0x3c
 8000e5a:	2304      	movs	r3, #4
 8000e5c:	930e      	str	r3, [sp, #56]	; 0x38
 8000e5e:	466d      	mov	r5, sp
 8000e60:	f106 0410 	add.w	r4, r6, #16
 8000e64:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e66:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e68:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e6a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e6c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e6e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e70:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000e74:	e885 0003 	stmia.w	r5, {r0, r1}
 8000e78:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000e7c:	f7ff ff58 	bl	8000d30 <setPWMAngulo>
	  HAL_Delay(800);
 8000e80:	f44f 7048 	mov.w	r0, #800	; 0x320
 8000e84:	f000 fb3e 	bl	8001504 <HAL_Delay>
	  setPWMAngulo(htim3, TIM_CHANNEL_2, 12500, 156); // 156º --> 160º
 8000e88:	4e65      	ldr	r6, [pc, #404]	; (8001020 <main+0x1e8>)
 8000e8a:	239c      	movs	r3, #156	; 0x9c
 8000e8c:	9310      	str	r3, [sp, #64]	; 0x40
 8000e8e:	f243 03d4 	movw	r3, #12500	; 0x30d4
 8000e92:	930f      	str	r3, [sp, #60]	; 0x3c
 8000e94:	2304      	movs	r3, #4
 8000e96:	930e      	str	r3, [sp, #56]	; 0x38
 8000e98:	466d      	mov	r5, sp
 8000e9a:	f106 0410 	add.w	r4, r6, #16
 8000e9e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ea0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ea2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ea4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ea6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ea8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000eaa:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000eae:	e885 0003 	stmia.w	r5, {r0, r1}
 8000eb2:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000eb6:	f7ff ff3b 	bl	8000d30 <setPWMAngulo>
	  HAL_Delay(800);
 8000eba:	f44f 7048 	mov.w	r0, #800	; 0x320
 8000ebe:	f000 fb21 	bl	8001504 <HAL_Delay>
	  setPWMAngulo(htim3, TIM_CHANNEL_2, 12500, 132); // 132º --> 135º
 8000ec2:	4e57      	ldr	r6, [pc, #348]	; (8001020 <main+0x1e8>)
 8000ec4:	2384      	movs	r3, #132	; 0x84
 8000ec6:	9310      	str	r3, [sp, #64]	; 0x40
 8000ec8:	f243 03d4 	movw	r3, #12500	; 0x30d4
 8000ecc:	930f      	str	r3, [sp, #60]	; 0x3c
 8000ece:	2304      	movs	r3, #4
 8000ed0:	930e      	str	r3, [sp, #56]	; 0x38
 8000ed2:	466d      	mov	r5, sp
 8000ed4:	f106 0410 	add.w	r4, r6, #16
 8000ed8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000eda:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000edc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ede:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ee0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ee2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ee4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000ee8:	e885 0003 	stmia.w	r5, {r0, r1}
 8000eec:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000ef0:	f7ff ff1e 	bl	8000d30 <setPWMAngulo>
	  HAL_Delay(800);
 8000ef4:	f44f 7048 	mov.w	r0, #800	; 0x320
 8000ef8:	f000 fb04 	bl	8001504 <HAL_Delay>
	  setPWMAngulo(htim3, TIM_CHANNEL_2, 12500, 147);  // 147º --> 150º
 8000efc:	4e48      	ldr	r6, [pc, #288]	; (8001020 <main+0x1e8>)
 8000efe:	2393      	movs	r3, #147	; 0x93
 8000f00:	9310      	str	r3, [sp, #64]	; 0x40
 8000f02:	f243 03d4 	movw	r3, #12500	; 0x30d4
 8000f06:	930f      	str	r3, [sp, #60]	; 0x3c
 8000f08:	2304      	movs	r3, #4
 8000f0a:	930e      	str	r3, [sp, #56]	; 0x38
 8000f0c:	466d      	mov	r5, sp
 8000f0e:	f106 0410 	add.w	r4, r6, #16
 8000f12:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f14:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f16:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f18:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f1a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f1c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f1e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000f22:	e885 0003 	stmia.w	r5, {r0, r1}
 8000f26:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000f2a:	f7ff ff01 	bl	8000d30 <setPWMAngulo>
	  HAL_Delay(800);
 8000f2e:	f44f 7048 	mov.w	r0, #800	; 0x320
 8000f32:	f000 fae7 	bl	8001504 <HAL_Delay>
	  setPWMAngulo(htim3, TIM_CHANNEL_2, 12500, 53);  // 53º --> 55º
 8000f36:	4e3a      	ldr	r6, [pc, #232]	; (8001020 <main+0x1e8>)
 8000f38:	2335      	movs	r3, #53	; 0x35
 8000f3a:	9310      	str	r3, [sp, #64]	; 0x40
 8000f3c:	f243 03d4 	movw	r3, #12500	; 0x30d4
 8000f40:	930f      	str	r3, [sp, #60]	; 0x3c
 8000f42:	2304      	movs	r3, #4
 8000f44:	930e      	str	r3, [sp, #56]	; 0x38
 8000f46:	466d      	mov	r5, sp
 8000f48:	f106 0410 	add.w	r4, r6, #16
 8000f4c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f4e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f50:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f52:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f54:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f56:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f58:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000f5c:	e885 0003 	stmia.w	r5, {r0, r1}
 8000f60:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000f64:	f7ff fee4 	bl	8000d30 <setPWMAngulo>
	  HAL_Delay(800);
 8000f68:	f44f 7048 	mov.w	r0, #800	; 0x320
 8000f6c:	f000 faca 	bl	8001504 <HAL_Delay>
	  setPWMAngulo(htim3, TIM_CHANNEL_2, 12500, 72); // 72º --> 75º
 8000f70:	4e2b      	ldr	r6, [pc, #172]	; (8001020 <main+0x1e8>)
 8000f72:	2348      	movs	r3, #72	; 0x48
 8000f74:	9310      	str	r3, [sp, #64]	; 0x40
 8000f76:	f243 03d4 	movw	r3, #12500	; 0x30d4
 8000f7a:	930f      	str	r3, [sp, #60]	; 0x3c
 8000f7c:	2304      	movs	r3, #4
 8000f7e:	930e      	str	r3, [sp, #56]	; 0x38
 8000f80:	466d      	mov	r5, sp
 8000f82:	f106 0410 	add.w	r4, r6, #16
 8000f86:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f88:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f8a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f8c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f8e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f90:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f92:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000f96:	e885 0003 	stmia.w	r5, {r0, r1}
 8000f9a:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000f9e:	f7ff fec7 	bl	8000d30 <setPWMAngulo>
	  HAL_Delay(800);
 8000fa2:	f44f 7048 	mov.w	r0, #800	; 0x320
 8000fa6:	f000 faad 	bl	8001504 <HAL_Delay>
	  setPWMAngulo(htim3, TIM_CHANNEL_2, 12500, 24); // 24º --> 25º
 8000faa:	4e1d      	ldr	r6, [pc, #116]	; (8001020 <main+0x1e8>)
 8000fac:	2318      	movs	r3, #24
 8000fae:	9310      	str	r3, [sp, #64]	; 0x40
 8000fb0:	f243 03d4 	movw	r3, #12500	; 0x30d4
 8000fb4:	930f      	str	r3, [sp, #60]	; 0x3c
 8000fb6:	2304      	movs	r3, #4
 8000fb8:	930e      	str	r3, [sp, #56]	; 0x38
 8000fba:	466d      	mov	r5, sp
 8000fbc:	f106 0410 	add.w	r4, r6, #16
 8000fc0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000fc2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000fc4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000fc6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000fc8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000fca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000fcc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000fd0:	e885 0003 	stmia.w	r5, {r0, r1}
 8000fd4:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000fd8:	f7ff feaa 	bl	8000d30 <setPWMAngulo>
	  HAL_Delay(800);
 8000fdc:	f44f 7048 	mov.w	r0, #800	; 0x320
 8000fe0:	f000 fa90 	bl	8001504 <HAL_Delay>
	  setPWMAngulo(htim3, TIM_CHANNEL_2, 12500, 0); // 0º --> 0º
 8000fe4:	4e0e      	ldr	r6, [pc, #56]	; (8001020 <main+0x1e8>)
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	9310      	str	r3, [sp, #64]	; 0x40
 8000fea:	f243 03d4 	movw	r3, #12500	; 0x30d4
 8000fee:	930f      	str	r3, [sp, #60]	; 0x3c
 8000ff0:	2304      	movs	r3, #4
 8000ff2:	930e      	str	r3, [sp, #56]	; 0x38
 8000ff4:	466d      	mov	r5, sp
 8000ff6:	f106 0410 	add.w	r4, r6, #16
 8000ffa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ffc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ffe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001000:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001002:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001004:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001006:	e894 0003 	ldmia.w	r4, {r0, r1}
 800100a:	e885 0003 	stmia.w	r5, {r0, r1}
 800100e:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001012:	f7ff fe8d 	bl	8000d30 <setPWMAngulo>
	  HAL_Delay(800);
 8001016:	f44f 7048 	mov.w	r0, #800	; 0x320
 800101a:	f000 fa73 	bl	8001504 <HAL_Delay>
	  setPWMAngulo(htim3, TIM_CHANNEL_2, 12500, 178); // 178º --> 180º
 800101e:	e716      	b.n	8000e4e <main+0x16>
 8001020:	20000028 	.word	0x20000028

08001024 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b094      	sub	sp, #80	; 0x50
 8001028:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800102a:	f107 031c 	add.w	r3, r7, #28
 800102e:	2234      	movs	r2, #52	; 0x34
 8001030:	2100      	movs	r1, #0
 8001032:	4618      	mov	r0, r3
 8001034:	f002 f8fe 	bl	8003234 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001038:	f107 0308 	add.w	r3, r7, #8
 800103c:	2200      	movs	r2, #0
 800103e:	601a      	str	r2, [r3, #0]
 8001040:	605a      	str	r2, [r3, #4]
 8001042:	609a      	str	r2, [r3, #8]
 8001044:	60da      	str	r2, [r3, #12]
 8001046:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001048:	2300      	movs	r3, #0
 800104a:	607b      	str	r3, [r7, #4]
 800104c:	4b24      	ldr	r3, [pc, #144]	; (80010e0 <SystemClock_Config+0xbc>)
 800104e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001050:	4a23      	ldr	r2, [pc, #140]	; (80010e0 <SystemClock_Config+0xbc>)
 8001052:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001056:	6413      	str	r3, [r2, #64]	; 0x40
 8001058:	4b21      	ldr	r3, [pc, #132]	; (80010e0 <SystemClock_Config+0xbc>)
 800105a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800105c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001060:	607b      	str	r3, [r7, #4]
 8001062:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001064:	2300      	movs	r3, #0
 8001066:	603b      	str	r3, [r7, #0]
 8001068:	4b1e      	ldr	r3, [pc, #120]	; (80010e4 <SystemClock_Config+0xc0>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001070:	4a1c      	ldr	r2, [pc, #112]	; (80010e4 <SystemClock_Config+0xc0>)
 8001072:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001076:	6013      	str	r3, [r2, #0]
 8001078:	4b1a      	ldr	r3, [pc, #104]	; (80010e4 <SystemClock_Config+0xc0>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001080:	603b      	str	r3, [r7, #0]
 8001082:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001084:	2302      	movs	r3, #2
 8001086:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001088:	2301      	movs	r3, #1
 800108a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800108c:	2310      	movs	r3, #16
 800108e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001090:	2300      	movs	r3, #0
 8001092:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001094:	f107 031c 	add.w	r3, r7, #28
 8001098:	4618      	mov	r0, r3
 800109a:	f000 ff13 	bl	8001ec4 <HAL_RCC_OscConfig>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d001      	beq.n	80010a8 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80010a4:	f000 f8cc 	bl	8001240 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010a8:	230f      	movs	r3, #15
 80010aa:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80010ac:	2300      	movs	r3, #0
 80010ae:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV64;
 80010b0:	23c0      	movs	r3, #192	; 0xc0
 80010b2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 80010b4:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80010b8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV8;
 80010ba:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80010be:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80010c0:	f107 0308 	add.w	r3, r7, #8
 80010c4:	2100      	movs	r1, #0
 80010c6:	4618      	mov	r0, r3
 80010c8:	f000 fcba 	bl	8001a40 <HAL_RCC_ClockConfig>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d001      	beq.n	80010d6 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80010d2:	f000 f8b5 	bl	8001240 <Error_Handler>
  }
}
 80010d6:	bf00      	nop
 80010d8:	3750      	adds	r7, #80	; 0x50
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	40023800 	.word	0x40023800
 80010e4:	40007000 	.word	0x40007000

080010e8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b08e      	sub	sp, #56	; 0x38
 80010ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010f2:	2200      	movs	r2, #0
 80010f4:	601a      	str	r2, [r3, #0]
 80010f6:	605a      	str	r2, [r3, #4]
 80010f8:	609a      	str	r2, [r3, #8]
 80010fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010fc:	f107 0320 	add.w	r3, r7, #32
 8001100:	2200      	movs	r2, #0
 8001102:	601a      	str	r2, [r3, #0]
 8001104:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001106:	1d3b      	adds	r3, r7, #4
 8001108:	2200      	movs	r2, #0
 800110a:	601a      	str	r2, [r3, #0]
 800110c:	605a      	str	r2, [r3, #4]
 800110e:	609a      	str	r2, [r3, #8]
 8001110:	60da      	str	r2, [r3, #12]
 8001112:	611a      	str	r2, [r3, #16]
 8001114:	615a      	str	r2, [r3, #20]
 8001116:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001118:	4b2c      	ldr	r3, [pc, #176]	; (80011cc <MX_TIM3_Init+0xe4>)
 800111a:	4a2d      	ldr	r2, [pc, #180]	; (80011d0 <MX_TIM3_Init+0xe8>)
 800111c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800111e:	4b2b      	ldr	r3, [pc, #172]	; (80011cc <MX_TIM3_Init+0xe4>)
 8001120:	2200      	movs	r2, #0
 8001122:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001124:	4b29      	ldr	r3, [pc, #164]	; (80011cc <MX_TIM3_Init+0xe4>)
 8001126:	2200      	movs	r2, #0
 8001128:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1250;
 800112a:	4b28      	ldr	r3, [pc, #160]	; (80011cc <MX_TIM3_Init+0xe4>)
 800112c:	f240 42e2 	movw	r2, #1250	; 0x4e2
 8001130:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001132:	4b26      	ldr	r3, [pc, #152]	; (80011cc <MX_TIM3_Init+0xe4>)
 8001134:	2200      	movs	r2, #0
 8001136:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001138:	4b24      	ldr	r3, [pc, #144]	; (80011cc <MX_TIM3_Init+0xe4>)
 800113a:	2200      	movs	r2, #0
 800113c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800113e:	4823      	ldr	r0, [pc, #140]	; (80011cc <MX_TIM3_Init+0xe4>)
 8001140:	f001 f95e 	bl	8002400 <HAL_TIM_Base_Init>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d001      	beq.n	800114e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800114a:	f000 f879 	bl	8001240 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800114e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001152:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001154:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001158:	4619      	mov	r1, r3
 800115a:	481c      	ldr	r0, [pc, #112]	; (80011cc <MX_TIM3_Init+0xe4>)
 800115c:	f001 fbf2 	bl	8002944 <HAL_TIM_ConfigClockSource>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d001      	beq.n	800116a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001166:	f000 f86b 	bl	8001240 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800116a:	4818      	ldr	r0, [pc, #96]	; (80011cc <MX_TIM3_Init+0xe4>)
 800116c:	f001 f997 	bl	800249e <HAL_TIM_PWM_Init>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d001      	beq.n	800117a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001176:	f000 f863 	bl	8001240 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800117a:	2300      	movs	r3, #0
 800117c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800117e:	2300      	movs	r3, #0
 8001180:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001182:	f107 0320 	add.w	r3, r7, #32
 8001186:	4619      	mov	r1, r3
 8001188:	4810      	ldr	r0, [pc, #64]	; (80011cc <MX_TIM3_Init+0xe4>)
 800118a:	f001 ffb3 	bl	80030f4 <HAL_TIMEx_MasterConfigSynchronization>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d001      	beq.n	8001198 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001194:	f000 f854 	bl	8001240 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001198:	2360      	movs	r3, #96	; 0x60
 800119a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 94;
 800119c:	235e      	movs	r3, #94	; 0x5e
 800119e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011a0:	2300      	movs	r3, #0
 80011a2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011a4:	2300      	movs	r3, #0
 80011a6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80011a8:	1d3b      	adds	r3, r7, #4
 80011aa:	2204      	movs	r2, #4
 80011ac:	4619      	mov	r1, r3
 80011ae:	4807      	ldr	r0, [pc, #28]	; (80011cc <MX_TIM3_Init+0xe4>)
 80011b0:	f001 fb06 	bl	80027c0 <HAL_TIM_PWM_ConfigChannel>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80011ba:	f000 f841 	bl	8001240 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80011be:	4803      	ldr	r0, [pc, #12]	; (80011cc <MX_TIM3_Init+0xe4>)
 80011c0:	f000 f88e 	bl	80012e0 <HAL_TIM_MspPostInit>

}
 80011c4:	bf00      	nop
 80011c6:	3738      	adds	r7, #56	; 0x38
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	20000028 	.word	0x20000028
 80011d0:	40000400 	.word	0x40000400

080011d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b085      	sub	sp, #20
 80011d8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011da:	2300      	movs	r3, #0
 80011dc:	60fb      	str	r3, [r7, #12]
 80011de:	4b17      	ldr	r3, [pc, #92]	; (800123c <MX_GPIO_Init+0x68>)
 80011e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e2:	4a16      	ldr	r2, [pc, #88]	; (800123c <MX_GPIO_Init+0x68>)
 80011e4:	f043 0304 	orr.w	r3, r3, #4
 80011e8:	6313      	str	r3, [r2, #48]	; 0x30
 80011ea:	4b14      	ldr	r3, [pc, #80]	; (800123c <MX_GPIO_Init+0x68>)
 80011ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ee:	f003 0304 	and.w	r3, r3, #4
 80011f2:	60fb      	str	r3, [r7, #12]
 80011f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011f6:	2300      	movs	r3, #0
 80011f8:	60bb      	str	r3, [r7, #8]
 80011fa:	4b10      	ldr	r3, [pc, #64]	; (800123c <MX_GPIO_Init+0x68>)
 80011fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fe:	4a0f      	ldr	r2, [pc, #60]	; (800123c <MX_GPIO_Init+0x68>)
 8001200:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001204:	6313      	str	r3, [r2, #48]	; 0x30
 8001206:	4b0d      	ldr	r3, [pc, #52]	; (800123c <MX_GPIO_Init+0x68>)
 8001208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800120e:	60bb      	str	r3, [r7, #8]
 8001210:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001212:	2300      	movs	r3, #0
 8001214:	607b      	str	r3, [r7, #4]
 8001216:	4b09      	ldr	r3, [pc, #36]	; (800123c <MX_GPIO_Init+0x68>)
 8001218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121a:	4a08      	ldr	r2, [pc, #32]	; (800123c <MX_GPIO_Init+0x68>)
 800121c:	f043 0301 	orr.w	r3, r3, #1
 8001220:	6313      	str	r3, [r2, #48]	; 0x30
 8001222:	4b06      	ldr	r3, [pc, #24]	; (800123c <MX_GPIO_Init+0x68>)
 8001224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001226:	f003 0301 	and.w	r3, r3, #1
 800122a:	607b      	str	r3, [r7, #4]
 800122c:	687b      	ldr	r3, [r7, #4]

}
 800122e:	bf00      	nop
 8001230:	3714      	adds	r7, #20
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr
 800123a:	bf00      	nop
 800123c:	40023800 	.word	0x40023800

08001240 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001244:	b672      	cpsid	i
}
 8001246:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001248:	e7fe      	b.n	8001248 <Error_Handler+0x8>
	...

0800124c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800124c:	b480      	push	{r7}
 800124e:	b083      	sub	sp, #12
 8001250:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001252:	2300      	movs	r3, #0
 8001254:	607b      	str	r3, [r7, #4]
 8001256:	4b10      	ldr	r3, [pc, #64]	; (8001298 <HAL_MspInit+0x4c>)
 8001258:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800125a:	4a0f      	ldr	r2, [pc, #60]	; (8001298 <HAL_MspInit+0x4c>)
 800125c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001260:	6453      	str	r3, [r2, #68]	; 0x44
 8001262:	4b0d      	ldr	r3, [pc, #52]	; (8001298 <HAL_MspInit+0x4c>)
 8001264:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001266:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800126a:	607b      	str	r3, [r7, #4]
 800126c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800126e:	2300      	movs	r3, #0
 8001270:	603b      	str	r3, [r7, #0]
 8001272:	4b09      	ldr	r3, [pc, #36]	; (8001298 <HAL_MspInit+0x4c>)
 8001274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001276:	4a08      	ldr	r2, [pc, #32]	; (8001298 <HAL_MspInit+0x4c>)
 8001278:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800127c:	6413      	str	r3, [r2, #64]	; 0x40
 800127e:	4b06      	ldr	r3, [pc, #24]	; (8001298 <HAL_MspInit+0x4c>)
 8001280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001282:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001286:	603b      	str	r3, [r7, #0]
 8001288:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800128a:	bf00      	nop
 800128c:	370c      	adds	r7, #12
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr
 8001296:	bf00      	nop
 8001298:	40023800 	.word	0x40023800

0800129c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800129c:	b480      	push	{r7}
 800129e:	b085      	sub	sp, #20
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4a0b      	ldr	r2, [pc, #44]	; (80012d8 <HAL_TIM_Base_MspInit+0x3c>)
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d10d      	bne.n	80012ca <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80012ae:	2300      	movs	r3, #0
 80012b0:	60fb      	str	r3, [r7, #12]
 80012b2:	4b0a      	ldr	r3, [pc, #40]	; (80012dc <HAL_TIM_Base_MspInit+0x40>)
 80012b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b6:	4a09      	ldr	r2, [pc, #36]	; (80012dc <HAL_TIM_Base_MspInit+0x40>)
 80012b8:	f043 0302 	orr.w	r3, r3, #2
 80012bc:	6413      	str	r3, [r2, #64]	; 0x40
 80012be:	4b07      	ldr	r3, [pc, #28]	; (80012dc <HAL_TIM_Base_MspInit+0x40>)
 80012c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c2:	f003 0302 	and.w	r3, r3, #2
 80012c6:	60fb      	str	r3, [r7, #12]
 80012c8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80012ca:	bf00      	nop
 80012cc:	3714      	adds	r7, #20
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr
 80012d6:	bf00      	nop
 80012d8:	40000400 	.word	0x40000400
 80012dc:	40023800 	.word	0x40023800

080012e0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b088      	sub	sp, #32
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e8:	f107 030c 	add.w	r3, r7, #12
 80012ec:	2200      	movs	r2, #0
 80012ee:	601a      	str	r2, [r3, #0]
 80012f0:	605a      	str	r2, [r3, #4]
 80012f2:	609a      	str	r2, [r3, #8]
 80012f4:	60da      	str	r2, [r3, #12]
 80012f6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4a12      	ldr	r2, [pc, #72]	; (8001348 <HAL_TIM_MspPostInit+0x68>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	d11d      	bne.n	800133e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001302:	2300      	movs	r3, #0
 8001304:	60bb      	str	r3, [r7, #8]
 8001306:	4b11      	ldr	r3, [pc, #68]	; (800134c <HAL_TIM_MspPostInit+0x6c>)
 8001308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130a:	4a10      	ldr	r2, [pc, #64]	; (800134c <HAL_TIM_MspPostInit+0x6c>)
 800130c:	f043 0304 	orr.w	r3, r3, #4
 8001310:	6313      	str	r3, [r2, #48]	; 0x30
 8001312:	4b0e      	ldr	r3, [pc, #56]	; (800134c <HAL_TIM_MspPostInit+0x6c>)
 8001314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001316:	f003 0304 	and.w	r3, r3, #4
 800131a:	60bb      	str	r3, [r7, #8]
 800131c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = Fio_Laranja_Pin;
 800131e:	2380      	movs	r3, #128	; 0x80
 8001320:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001322:	2302      	movs	r3, #2
 8001324:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001326:	2300      	movs	r3, #0
 8001328:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800132a:	2300      	movs	r3, #0
 800132c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800132e:	2302      	movs	r3, #2
 8001330:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Fio_Laranja_GPIO_Port, &GPIO_InitStruct);
 8001332:	f107 030c 	add.w	r3, r7, #12
 8001336:	4619      	mov	r1, r3
 8001338:	4805      	ldr	r0, [pc, #20]	; (8001350 <HAL_TIM_MspPostInit+0x70>)
 800133a:	f000 f9ed 	bl	8001718 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800133e:	bf00      	nop
 8001340:	3720      	adds	r7, #32
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	40000400 	.word	0x40000400
 800134c:	40023800 	.word	0x40023800
 8001350:	40020800 	.word	0x40020800

08001354 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001358:	e7fe      	b.n	8001358 <NMI_Handler+0x4>

0800135a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800135a:	b480      	push	{r7}
 800135c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800135e:	e7fe      	b.n	800135e <HardFault_Handler+0x4>

08001360 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001364:	e7fe      	b.n	8001364 <MemManage_Handler+0x4>

08001366 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001366:	b480      	push	{r7}
 8001368:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800136a:	e7fe      	b.n	800136a <BusFault_Handler+0x4>

0800136c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001370:	e7fe      	b.n	8001370 <UsageFault_Handler+0x4>

08001372 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001372:	b480      	push	{r7}
 8001374:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001376:	bf00      	nop
 8001378:	46bd      	mov	sp, r7
 800137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137e:	4770      	bx	lr

08001380 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001384:	bf00      	nop
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr

0800138e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800138e:	b480      	push	{r7}
 8001390:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001392:	bf00      	nop
 8001394:	46bd      	mov	sp, r7
 8001396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139a:	4770      	bx	lr

0800139c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013a0:	f000 f890 	bl	80014c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013a4:	bf00      	nop
 80013a6:	bd80      	pop	{r7, pc}

080013a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013ac:	4b06      	ldr	r3, [pc, #24]	; (80013c8 <SystemInit+0x20>)
 80013ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013b2:	4a05      	ldr	r2, [pc, #20]	; (80013c8 <SystemInit+0x20>)
 80013b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013bc:	bf00      	nop
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr
 80013c6:	bf00      	nop
 80013c8:	e000ed00 	.word	0xe000ed00

080013cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80013cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001404 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80013d0:	480d      	ldr	r0, [pc, #52]	; (8001408 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80013d2:	490e      	ldr	r1, [pc, #56]	; (800140c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80013d4:	4a0e      	ldr	r2, [pc, #56]	; (8001410 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80013d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013d8:	e002      	b.n	80013e0 <LoopCopyDataInit>

080013da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013de:	3304      	adds	r3, #4

080013e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013e4:	d3f9      	bcc.n	80013da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013e6:	4a0b      	ldr	r2, [pc, #44]	; (8001414 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80013e8:	4c0b      	ldr	r4, [pc, #44]	; (8001418 <LoopFillZerobss+0x26>)
  movs r3, #0
 80013ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013ec:	e001      	b.n	80013f2 <LoopFillZerobss>

080013ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013f0:	3204      	adds	r2, #4

080013f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013f4:	d3fb      	bcc.n	80013ee <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80013f6:	f7ff ffd7 	bl	80013a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80013fa:	f001 fef7 	bl	80031ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013fe:	f7ff fd1b 	bl	8000e38 <main>
  bx  lr    
 8001402:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001404:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001408:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800140c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001410:	0800327c 	.word	0x0800327c
  ldr r2, =_sbss
 8001414:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001418:	20000074 	.word	0x20000074

0800141c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800141c:	e7fe      	b.n	800141c <ADC_IRQHandler>
	...

08001420 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001424:	4b0e      	ldr	r3, [pc, #56]	; (8001460 <HAL_Init+0x40>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4a0d      	ldr	r2, [pc, #52]	; (8001460 <HAL_Init+0x40>)
 800142a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800142e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001430:	4b0b      	ldr	r3, [pc, #44]	; (8001460 <HAL_Init+0x40>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4a0a      	ldr	r2, [pc, #40]	; (8001460 <HAL_Init+0x40>)
 8001436:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800143a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800143c:	4b08      	ldr	r3, [pc, #32]	; (8001460 <HAL_Init+0x40>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a07      	ldr	r2, [pc, #28]	; (8001460 <HAL_Init+0x40>)
 8001442:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001446:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001448:	2003      	movs	r0, #3
 800144a:	f000 f931 	bl	80016b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800144e:	2000      	movs	r0, #0
 8001450:	f000 f808 	bl	8001464 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001454:	f7ff fefa 	bl	800124c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001458:	2300      	movs	r3, #0
}
 800145a:	4618      	mov	r0, r3
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	40023c00 	.word	0x40023c00

08001464 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b082      	sub	sp, #8
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800146c:	4b12      	ldr	r3, [pc, #72]	; (80014b8 <HAL_InitTick+0x54>)
 800146e:	681a      	ldr	r2, [r3, #0]
 8001470:	4b12      	ldr	r3, [pc, #72]	; (80014bc <HAL_InitTick+0x58>)
 8001472:	781b      	ldrb	r3, [r3, #0]
 8001474:	4619      	mov	r1, r3
 8001476:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800147a:	fbb3 f3f1 	udiv	r3, r3, r1
 800147e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001482:	4618      	mov	r0, r3
 8001484:	f000 f93b 	bl	80016fe <HAL_SYSTICK_Config>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d001      	beq.n	8001492 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800148e:	2301      	movs	r3, #1
 8001490:	e00e      	b.n	80014b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	2b0f      	cmp	r3, #15
 8001496:	d80a      	bhi.n	80014ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001498:	2200      	movs	r2, #0
 800149a:	6879      	ldr	r1, [r7, #4]
 800149c:	f04f 30ff 	mov.w	r0, #4294967295
 80014a0:	f000 f911 	bl	80016c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014a4:	4a06      	ldr	r2, [pc, #24]	; (80014c0 <HAL_InitTick+0x5c>)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014aa:	2300      	movs	r3, #0
 80014ac:	e000      	b.n	80014b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014ae:	2301      	movs	r3, #1
}
 80014b0:	4618      	mov	r0, r3
 80014b2:	3708      	adds	r7, #8
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	20000000 	.word	0x20000000
 80014bc:	20000008 	.word	0x20000008
 80014c0:	20000004 	.word	0x20000004

080014c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014c8:	4b06      	ldr	r3, [pc, #24]	; (80014e4 <HAL_IncTick+0x20>)
 80014ca:	781b      	ldrb	r3, [r3, #0]
 80014cc:	461a      	mov	r2, r3
 80014ce:	4b06      	ldr	r3, [pc, #24]	; (80014e8 <HAL_IncTick+0x24>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	4413      	add	r3, r2
 80014d4:	4a04      	ldr	r2, [pc, #16]	; (80014e8 <HAL_IncTick+0x24>)
 80014d6:	6013      	str	r3, [r2, #0]
}
 80014d8:	bf00      	nop
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr
 80014e2:	bf00      	nop
 80014e4:	20000008 	.word	0x20000008
 80014e8:	20000070 	.word	0x20000070

080014ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0
  return uwTick;
 80014f0:	4b03      	ldr	r3, [pc, #12]	; (8001500 <HAL_GetTick+0x14>)
 80014f2:	681b      	ldr	r3, [r3, #0]
}
 80014f4:	4618      	mov	r0, r3
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr
 80014fe:	bf00      	nop
 8001500:	20000070 	.word	0x20000070

08001504 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b084      	sub	sp, #16
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800150c:	f7ff ffee 	bl	80014ec <HAL_GetTick>
 8001510:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	f1b3 3fff 	cmp.w	r3, #4294967295
 800151c:	d005      	beq.n	800152a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800151e:	4b0a      	ldr	r3, [pc, #40]	; (8001548 <HAL_Delay+0x44>)
 8001520:	781b      	ldrb	r3, [r3, #0]
 8001522:	461a      	mov	r2, r3
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	4413      	add	r3, r2
 8001528:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800152a:	bf00      	nop
 800152c:	f7ff ffde 	bl	80014ec <HAL_GetTick>
 8001530:	4602      	mov	r2, r0
 8001532:	68bb      	ldr	r3, [r7, #8]
 8001534:	1ad3      	subs	r3, r2, r3
 8001536:	68fa      	ldr	r2, [r7, #12]
 8001538:	429a      	cmp	r2, r3
 800153a:	d8f7      	bhi.n	800152c <HAL_Delay+0x28>
  {
  }
}
 800153c:	bf00      	nop
 800153e:	bf00      	nop
 8001540:	3710      	adds	r7, #16
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	20000008 	.word	0x20000008

0800154c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800154c:	b480      	push	{r7}
 800154e:	b085      	sub	sp, #20
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	f003 0307 	and.w	r3, r3, #7
 800155a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800155c:	4b0c      	ldr	r3, [pc, #48]	; (8001590 <__NVIC_SetPriorityGrouping+0x44>)
 800155e:	68db      	ldr	r3, [r3, #12]
 8001560:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001562:	68ba      	ldr	r2, [r7, #8]
 8001564:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001568:	4013      	ands	r3, r2
 800156a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001570:	68bb      	ldr	r3, [r7, #8]
 8001572:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001574:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001578:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800157c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800157e:	4a04      	ldr	r2, [pc, #16]	; (8001590 <__NVIC_SetPriorityGrouping+0x44>)
 8001580:	68bb      	ldr	r3, [r7, #8]
 8001582:	60d3      	str	r3, [r2, #12]
}
 8001584:	bf00      	nop
 8001586:	3714      	adds	r7, #20
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr
 8001590:	e000ed00 	.word	0xe000ed00

08001594 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001598:	4b04      	ldr	r3, [pc, #16]	; (80015ac <__NVIC_GetPriorityGrouping+0x18>)
 800159a:	68db      	ldr	r3, [r3, #12]
 800159c:	0a1b      	lsrs	r3, r3, #8
 800159e:	f003 0307 	and.w	r3, r3, #7
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	46bd      	mov	sp, r7
 80015a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015aa:	4770      	bx	lr
 80015ac:	e000ed00 	.word	0xe000ed00

080015b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b083      	sub	sp, #12
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	4603      	mov	r3, r0
 80015b8:	6039      	str	r1, [r7, #0]
 80015ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	db0a      	blt.n	80015da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	b2da      	uxtb	r2, r3
 80015c8:	490c      	ldr	r1, [pc, #48]	; (80015fc <__NVIC_SetPriority+0x4c>)
 80015ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ce:	0112      	lsls	r2, r2, #4
 80015d0:	b2d2      	uxtb	r2, r2
 80015d2:	440b      	add	r3, r1
 80015d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015d8:	e00a      	b.n	80015f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	b2da      	uxtb	r2, r3
 80015de:	4908      	ldr	r1, [pc, #32]	; (8001600 <__NVIC_SetPriority+0x50>)
 80015e0:	79fb      	ldrb	r3, [r7, #7]
 80015e2:	f003 030f 	and.w	r3, r3, #15
 80015e6:	3b04      	subs	r3, #4
 80015e8:	0112      	lsls	r2, r2, #4
 80015ea:	b2d2      	uxtb	r2, r2
 80015ec:	440b      	add	r3, r1
 80015ee:	761a      	strb	r2, [r3, #24]
}
 80015f0:	bf00      	nop
 80015f2:	370c      	adds	r7, #12
 80015f4:	46bd      	mov	sp, r7
 80015f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fa:	4770      	bx	lr
 80015fc:	e000e100 	.word	0xe000e100
 8001600:	e000ed00 	.word	0xe000ed00

08001604 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001604:	b480      	push	{r7}
 8001606:	b089      	sub	sp, #36	; 0x24
 8001608:	af00      	add	r7, sp, #0
 800160a:	60f8      	str	r0, [r7, #12]
 800160c:	60b9      	str	r1, [r7, #8]
 800160e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	f003 0307 	and.w	r3, r3, #7
 8001616:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001618:	69fb      	ldr	r3, [r7, #28]
 800161a:	f1c3 0307 	rsb	r3, r3, #7
 800161e:	2b04      	cmp	r3, #4
 8001620:	bf28      	it	cs
 8001622:	2304      	movcs	r3, #4
 8001624:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001626:	69fb      	ldr	r3, [r7, #28]
 8001628:	3304      	adds	r3, #4
 800162a:	2b06      	cmp	r3, #6
 800162c:	d902      	bls.n	8001634 <NVIC_EncodePriority+0x30>
 800162e:	69fb      	ldr	r3, [r7, #28]
 8001630:	3b03      	subs	r3, #3
 8001632:	e000      	b.n	8001636 <NVIC_EncodePriority+0x32>
 8001634:	2300      	movs	r3, #0
 8001636:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001638:	f04f 32ff 	mov.w	r2, #4294967295
 800163c:	69bb      	ldr	r3, [r7, #24]
 800163e:	fa02 f303 	lsl.w	r3, r2, r3
 8001642:	43da      	mvns	r2, r3
 8001644:	68bb      	ldr	r3, [r7, #8]
 8001646:	401a      	ands	r2, r3
 8001648:	697b      	ldr	r3, [r7, #20]
 800164a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800164c:	f04f 31ff 	mov.w	r1, #4294967295
 8001650:	697b      	ldr	r3, [r7, #20]
 8001652:	fa01 f303 	lsl.w	r3, r1, r3
 8001656:	43d9      	mvns	r1, r3
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800165c:	4313      	orrs	r3, r2
         );
}
 800165e:	4618      	mov	r0, r3
 8001660:	3724      	adds	r7, #36	; 0x24
 8001662:	46bd      	mov	sp, r7
 8001664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001668:	4770      	bx	lr
	...

0800166c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b082      	sub	sp, #8
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	3b01      	subs	r3, #1
 8001678:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800167c:	d301      	bcc.n	8001682 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800167e:	2301      	movs	r3, #1
 8001680:	e00f      	b.n	80016a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001682:	4a0a      	ldr	r2, [pc, #40]	; (80016ac <SysTick_Config+0x40>)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	3b01      	subs	r3, #1
 8001688:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800168a:	210f      	movs	r1, #15
 800168c:	f04f 30ff 	mov.w	r0, #4294967295
 8001690:	f7ff ff8e 	bl	80015b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001694:	4b05      	ldr	r3, [pc, #20]	; (80016ac <SysTick_Config+0x40>)
 8001696:	2200      	movs	r2, #0
 8001698:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800169a:	4b04      	ldr	r3, [pc, #16]	; (80016ac <SysTick_Config+0x40>)
 800169c:	2207      	movs	r2, #7
 800169e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016a0:	2300      	movs	r3, #0
}
 80016a2:	4618      	mov	r0, r3
 80016a4:	3708      	adds	r7, #8
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	e000e010 	.word	0xe000e010

080016b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b082      	sub	sp, #8
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016b8:	6878      	ldr	r0, [r7, #4]
 80016ba:	f7ff ff47 	bl	800154c <__NVIC_SetPriorityGrouping>
}
 80016be:	bf00      	nop
 80016c0:	3708      	adds	r7, #8
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}

080016c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016c6:	b580      	push	{r7, lr}
 80016c8:	b086      	sub	sp, #24
 80016ca:	af00      	add	r7, sp, #0
 80016cc:	4603      	mov	r3, r0
 80016ce:	60b9      	str	r1, [r7, #8]
 80016d0:	607a      	str	r2, [r7, #4]
 80016d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016d4:	2300      	movs	r3, #0
 80016d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016d8:	f7ff ff5c 	bl	8001594 <__NVIC_GetPriorityGrouping>
 80016dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016de:	687a      	ldr	r2, [r7, #4]
 80016e0:	68b9      	ldr	r1, [r7, #8]
 80016e2:	6978      	ldr	r0, [r7, #20]
 80016e4:	f7ff ff8e 	bl	8001604 <NVIC_EncodePriority>
 80016e8:	4602      	mov	r2, r0
 80016ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016ee:	4611      	mov	r1, r2
 80016f0:	4618      	mov	r0, r3
 80016f2:	f7ff ff5d 	bl	80015b0 <__NVIC_SetPriority>
}
 80016f6:	bf00      	nop
 80016f8:	3718      	adds	r7, #24
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}

080016fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016fe:	b580      	push	{r7, lr}
 8001700:	b082      	sub	sp, #8
 8001702:	af00      	add	r7, sp, #0
 8001704:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001706:	6878      	ldr	r0, [r7, #4]
 8001708:	f7ff ffb0 	bl	800166c <SysTick_Config>
 800170c:	4603      	mov	r3, r0
}
 800170e:	4618      	mov	r0, r3
 8001710:	3708      	adds	r7, #8
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
	...

08001718 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001718:	b480      	push	{r7}
 800171a:	b089      	sub	sp, #36	; 0x24
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
 8001720:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001722:	2300      	movs	r3, #0
 8001724:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001726:	2300      	movs	r3, #0
 8001728:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800172a:	2300      	movs	r3, #0
 800172c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800172e:	2300      	movs	r3, #0
 8001730:	61fb      	str	r3, [r7, #28]
 8001732:	e165      	b.n	8001a00 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001734:	2201      	movs	r2, #1
 8001736:	69fb      	ldr	r3, [r7, #28]
 8001738:	fa02 f303 	lsl.w	r3, r2, r3
 800173c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	697a      	ldr	r2, [r7, #20]
 8001744:	4013      	ands	r3, r2
 8001746:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001748:	693a      	ldr	r2, [r7, #16]
 800174a:	697b      	ldr	r3, [r7, #20]
 800174c:	429a      	cmp	r2, r3
 800174e:	f040 8154 	bne.w	80019fa <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	f003 0303 	and.w	r3, r3, #3
 800175a:	2b01      	cmp	r3, #1
 800175c:	d005      	beq.n	800176a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001766:	2b02      	cmp	r3, #2
 8001768:	d130      	bne.n	80017cc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	689b      	ldr	r3, [r3, #8]
 800176e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001770:	69fb      	ldr	r3, [r7, #28]
 8001772:	005b      	lsls	r3, r3, #1
 8001774:	2203      	movs	r2, #3
 8001776:	fa02 f303 	lsl.w	r3, r2, r3
 800177a:	43db      	mvns	r3, r3
 800177c:	69ba      	ldr	r2, [r7, #24]
 800177e:	4013      	ands	r3, r2
 8001780:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	68da      	ldr	r2, [r3, #12]
 8001786:	69fb      	ldr	r3, [r7, #28]
 8001788:	005b      	lsls	r3, r3, #1
 800178a:	fa02 f303 	lsl.w	r3, r2, r3
 800178e:	69ba      	ldr	r2, [r7, #24]
 8001790:	4313      	orrs	r3, r2
 8001792:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	69ba      	ldr	r2, [r7, #24]
 8001798:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80017a0:	2201      	movs	r2, #1
 80017a2:	69fb      	ldr	r3, [r7, #28]
 80017a4:	fa02 f303 	lsl.w	r3, r2, r3
 80017a8:	43db      	mvns	r3, r3
 80017aa:	69ba      	ldr	r2, [r7, #24]
 80017ac:	4013      	ands	r3, r2
 80017ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	091b      	lsrs	r3, r3, #4
 80017b6:	f003 0201 	and.w	r2, r3, #1
 80017ba:	69fb      	ldr	r3, [r7, #28]
 80017bc:	fa02 f303 	lsl.w	r3, r2, r3
 80017c0:	69ba      	ldr	r2, [r7, #24]
 80017c2:	4313      	orrs	r3, r2
 80017c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	69ba      	ldr	r2, [r7, #24]
 80017ca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	f003 0303 	and.w	r3, r3, #3
 80017d4:	2b03      	cmp	r3, #3
 80017d6:	d017      	beq.n	8001808 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	68db      	ldr	r3, [r3, #12]
 80017dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80017de:	69fb      	ldr	r3, [r7, #28]
 80017e0:	005b      	lsls	r3, r3, #1
 80017e2:	2203      	movs	r2, #3
 80017e4:	fa02 f303 	lsl.w	r3, r2, r3
 80017e8:	43db      	mvns	r3, r3
 80017ea:	69ba      	ldr	r2, [r7, #24]
 80017ec:	4013      	ands	r3, r2
 80017ee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	689a      	ldr	r2, [r3, #8]
 80017f4:	69fb      	ldr	r3, [r7, #28]
 80017f6:	005b      	lsls	r3, r3, #1
 80017f8:	fa02 f303 	lsl.w	r3, r2, r3
 80017fc:	69ba      	ldr	r2, [r7, #24]
 80017fe:	4313      	orrs	r3, r2
 8001800:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	69ba      	ldr	r2, [r7, #24]
 8001806:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	f003 0303 	and.w	r3, r3, #3
 8001810:	2b02      	cmp	r3, #2
 8001812:	d123      	bne.n	800185c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001814:	69fb      	ldr	r3, [r7, #28]
 8001816:	08da      	lsrs	r2, r3, #3
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	3208      	adds	r2, #8
 800181c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001820:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001822:	69fb      	ldr	r3, [r7, #28]
 8001824:	f003 0307 	and.w	r3, r3, #7
 8001828:	009b      	lsls	r3, r3, #2
 800182a:	220f      	movs	r2, #15
 800182c:	fa02 f303 	lsl.w	r3, r2, r3
 8001830:	43db      	mvns	r3, r3
 8001832:	69ba      	ldr	r2, [r7, #24]
 8001834:	4013      	ands	r3, r2
 8001836:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	691a      	ldr	r2, [r3, #16]
 800183c:	69fb      	ldr	r3, [r7, #28]
 800183e:	f003 0307 	and.w	r3, r3, #7
 8001842:	009b      	lsls	r3, r3, #2
 8001844:	fa02 f303 	lsl.w	r3, r2, r3
 8001848:	69ba      	ldr	r2, [r7, #24]
 800184a:	4313      	orrs	r3, r2
 800184c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800184e:	69fb      	ldr	r3, [r7, #28]
 8001850:	08da      	lsrs	r2, r3, #3
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	3208      	adds	r2, #8
 8001856:	69b9      	ldr	r1, [r7, #24]
 8001858:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001862:	69fb      	ldr	r3, [r7, #28]
 8001864:	005b      	lsls	r3, r3, #1
 8001866:	2203      	movs	r2, #3
 8001868:	fa02 f303 	lsl.w	r3, r2, r3
 800186c:	43db      	mvns	r3, r3
 800186e:	69ba      	ldr	r2, [r7, #24]
 8001870:	4013      	ands	r3, r2
 8001872:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	f003 0203 	and.w	r2, r3, #3
 800187c:	69fb      	ldr	r3, [r7, #28]
 800187e:	005b      	lsls	r3, r3, #1
 8001880:	fa02 f303 	lsl.w	r3, r2, r3
 8001884:	69ba      	ldr	r2, [r7, #24]
 8001886:	4313      	orrs	r3, r2
 8001888:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	69ba      	ldr	r2, [r7, #24]
 800188e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001898:	2b00      	cmp	r3, #0
 800189a:	f000 80ae 	beq.w	80019fa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800189e:	2300      	movs	r3, #0
 80018a0:	60fb      	str	r3, [r7, #12]
 80018a2:	4b5d      	ldr	r3, [pc, #372]	; (8001a18 <HAL_GPIO_Init+0x300>)
 80018a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018a6:	4a5c      	ldr	r2, [pc, #368]	; (8001a18 <HAL_GPIO_Init+0x300>)
 80018a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018ac:	6453      	str	r3, [r2, #68]	; 0x44
 80018ae:	4b5a      	ldr	r3, [pc, #360]	; (8001a18 <HAL_GPIO_Init+0x300>)
 80018b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018b6:	60fb      	str	r3, [r7, #12]
 80018b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80018ba:	4a58      	ldr	r2, [pc, #352]	; (8001a1c <HAL_GPIO_Init+0x304>)
 80018bc:	69fb      	ldr	r3, [r7, #28]
 80018be:	089b      	lsrs	r3, r3, #2
 80018c0:	3302      	adds	r3, #2
 80018c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80018c8:	69fb      	ldr	r3, [r7, #28]
 80018ca:	f003 0303 	and.w	r3, r3, #3
 80018ce:	009b      	lsls	r3, r3, #2
 80018d0:	220f      	movs	r2, #15
 80018d2:	fa02 f303 	lsl.w	r3, r2, r3
 80018d6:	43db      	mvns	r3, r3
 80018d8:	69ba      	ldr	r2, [r7, #24]
 80018da:	4013      	ands	r3, r2
 80018dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	4a4f      	ldr	r2, [pc, #316]	; (8001a20 <HAL_GPIO_Init+0x308>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d025      	beq.n	8001932 <HAL_GPIO_Init+0x21a>
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	4a4e      	ldr	r2, [pc, #312]	; (8001a24 <HAL_GPIO_Init+0x30c>)
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d01f      	beq.n	800192e <HAL_GPIO_Init+0x216>
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	4a4d      	ldr	r2, [pc, #308]	; (8001a28 <HAL_GPIO_Init+0x310>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d019      	beq.n	800192a <HAL_GPIO_Init+0x212>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	4a4c      	ldr	r2, [pc, #304]	; (8001a2c <HAL_GPIO_Init+0x314>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d013      	beq.n	8001926 <HAL_GPIO_Init+0x20e>
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	4a4b      	ldr	r2, [pc, #300]	; (8001a30 <HAL_GPIO_Init+0x318>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d00d      	beq.n	8001922 <HAL_GPIO_Init+0x20a>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	4a4a      	ldr	r2, [pc, #296]	; (8001a34 <HAL_GPIO_Init+0x31c>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d007      	beq.n	800191e <HAL_GPIO_Init+0x206>
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	4a49      	ldr	r2, [pc, #292]	; (8001a38 <HAL_GPIO_Init+0x320>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d101      	bne.n	800191a <HAL_GPIO_Init+0x202>
 8001916:	2306      	movs	r3, #6
 8001918:	e00c      	b.n	8001934 <HAL_GPIO_Init+0x21c>
 800191a:	2307      	movs	r3, #7
 800191c:	e00a      	b.n	8001934 <HAL_GPIO_Init+0x21c>
 800191e:	2305      	movs	r3, #5
 8001920:	e008      	b.n	8001934 <HAL_GPIO_Init+0x21c>
 8001922:	2304      	movs	r3, #4
 8001924:	e006      	b.n	8001934 <HAL_GPIO_Init+0x21c>
 8001926:	2303      	movs	r3, #3
 8001928:	e004      	b.n	8001934 <HAL_GPIO_Init+0x21c>
 800192a:	2302      	movs	r3, #2
 800192c:	e002      	b.n	8001934 <HAL_GPIO_Init+0x21c>
 800192e:	2301      	movs	r3, #1
 8001930:	e000      	b.n	8001934 <HAL_GPIO_Init+0x21c>
 8001932:	2300      	movs	r3, #0
 8001934:	69fa      	ldr	r2, [r7, #28]
 8001936:	f002 0203 	and.w	r2, r2, #3
 800193a:	0092      	lsls	r2, r2, #2
 800193c:	4093      	lsls	r3, r2
 800193e:	69ba      	ldr	r2, [r7, #24]
 8001940:	4313      	orrs	r3, r2
 8001942:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001944:	4935      	ldr	r1, [pc, #212]	; (8001a1c <HAL_GPIO_Init+0x304>)
 8001946:	69fb      	ldr	r3, [r7, #28]
 8001948:	089b      	lsrs	r3, r3, #2
 800194a:	3302      	adds	r3, #2
 800194c:	69ba      	ldr	r2, [r7, #24]
 800194e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001952:	4b3a      	ldr	r3, [pc, #232]	; (8001a3c <HAL_GPIO_Init+0x324>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001958:	693b      	ldr	r3, [r7, #16]
 800195a:	43db      	mvns	r3, r3
 800195c:	69ba      	ldr	r2, [r7, #24]
 800195e:	4013      	ands	r3, r2
 8001960:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800196a:	2b00      	cmp	r3, #0
 800196c:	d003      	beq.n	8001976 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800196e:	69ba      	ldr	r2, [r7, #24]
 8001970:	693b      	ldr	r3, [r7, #16]
 8001972:	4313      	orrs	r3, r2
 8001974:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001976:	4a31      	ldr	r2, [pc, #196]	; (8001a3c <HAL_GPIO_Init+0x324>)
 8001978:	69bb      	ldr	r3, [r7, #24]
 800197a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800197c:	4b2f      	ldr	r3, [pc, #188]	; (8001a3c <HAL_GPIO_Init+0x324>)
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001982:	693b      	ldr	r3, [r7, #16]
 8001984:	43db      	mvns	r3, r3
 8001986:	69ba      	ldr	r2, [r7, #24]
 8001988:	4013      	ands	r3, r2
 800198a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001994:	2b00      	cmp	r3, #0
 8001996:	d003      	beq.n	80019a0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001998:	69ba      	ldr	r2, [r7, #24]
 800199a:	693b      	ldr	r3, [r7, #16]
 800199c:	4313      	orrs	r3, r2
 800199e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80019a0:	4a26      	ldr	r2, [pc, #152]	; (8001a3c <HAL_GPIO_Init+0x324>)
 80019a2:	69bb      	ldr	r3, [r7, #24]
 80019a4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80019a6:	4b25      	ldr	r3, [pc, #148]	; (8001a3c <HAL_GPIO_Init+0x324>)
 80019a8:	689b      	ldr	r3, [r3, #8]
 80019aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019ac:	693b      	ldr	r3, [r7, #16]
 80019ae:	43db      	mvns	r3, r3
 80019b0:	69ba      	ldr	r2, [r7, #24]
 80019b2:	4013      	ands	r3, r2
 80019b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d003      	beq.n	80019ca <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80019c2:	69ba      	ldr	r2, [r7, #24]
 80019c4:	693b      	ldr	r3, [r7, #16]
 80019c6:	4313      	orrs	r3, r2
 80019c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80019ca:	4a1c      	ldr	r2, [pc, #112]	; (8001a3c <HAL_GPIO_Init+0x324>)
 80019cc:	69bb      	ldr	r3, [r7, #24]
 80019ce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80019d0:	4b1a      	ldr	r3, [pc, #104]	; (8001a3c <HAL_GPIO_Init+0x324>)
 80019d2:	68db      	ldr	r3, [r3, #12]
 80019d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019d6:	693b      	ldr	r3, [r7, #16]
 80019d8:	43db      	mvns	r3, r3
 80019da:	69ba      	ldr	r2, [r7, #24]
 80019dc:	4013      	ands	r3, r2
 80019de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d003      	beq.n	80019f4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80019ec:	69ba      	ldr	r2, [r7, #24]
 80019ee:	693b      	ldr	r3, [r7, #16]
 80019f0:	4313      	orrs	r3, r2
 80019f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80019f4:	4a11      	ldr	r2, [pc, #68]	; (8001a3c <HAL_GPIO_Init+0x324>)
 80019f6:	69bb      	ldr	r3, [r7, #24]
 80019f8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019fa:	69fb      	ldr	r3, [r7, #28]
 80019fc:	3301      	adds	r3, #1
 80019fe:	61fb      	str	r3, [r7, #28]
 8001a00:	69fb      	ldr	r3, [r7, #28]
 8001a02:	2b0f      	cmp	r3, #15
 8001a04:	f67f ae96 	bls.w	8001734 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001a08:	bf00      	nop
 8001a0a:	bf00      	nop
 8001a0c:	3724      	adds	r7, #36	; 0x24
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a14:	4770      	bx	lr
 8001a16:	bf00      	nop
 8001a18:	40023800 	.word	0x40023800
 8001a1c:	40013800 	.word	0x40013800
 8001a20:	40020000 	.word	0x40020000
 8001a24:	40020400 	.word	0x40020400
 8001a28:	40020800 	.word	0x40020800
 8001a2c:	40020c00 	.word	0x40020c00
 8001a30:	40021000 	.word	0x40021000
 8001a34:	40021400 	.word	0x40021400
 8001a38:	40021800 	.word	0x40021800
 8001a3c:	40013c00 	.word	0x40013c00

08001a40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b084      	sub	sp, #16
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
 8001a48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d101      	bne.n	8001a54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a50:	2301      	movs	r3, #1
 8001a52:	e0cc      	b.n	8001bee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a54:	4b68      	ldr	r3, [pc, #416]	; (8001bf8 <HAL_RCC_ClockConfig+0x1b8>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f003 030f 	and.w	r3, r3, #15
 8001a5c:	683a      	ldr	r2, [r7, #0]
 8001a5e:	429a      	cmp	r2, r3
 8001a60:	d90c      	bls.n	8001a7c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a62:	4b65      	ldr	r3, [pc, #404]	; (8001bf8 <HAL_RCC_ClockConfig+0x1b8>)
 8001a64:	683a      	ldr	r2, [r7, #0]
 8001a66:	b2d2      	uxtb	r2, r2
 8001a68:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a6a:	4b63      	ldr	r3, [pc, #396]	; (8001bf8 <HAL_RCC_ClockConfig+0x1b8>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f003 030f 	and.w	r3, r3, #15
 8001a72:	683a      	ldr	r2, [r7, #0]
 8001a74:	429a      	cmp	r2, r3
 8001a76:	d001      	beq.n	8001a7c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	e0b8      	b.n	8001bee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f003 0302 	and.w	r3, r3, #2
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d020      	beq.n	8001aca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f003 0304 	and.w	r3, r3, #4
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d005      	beq.n	8001aa0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a94:	4b59      	ldr	r3, [pc, #356]	; (8001bfc <HAL_RCC_ClockConfig+0x1bc>)
 8001a96:	689b      	ldr	r3, [r3, #8]
 8001a98:	4a58      	ldr	r2, [pc, #352]	; (8001bfc <HAL_RCC_ClockConfig+0x1bc>)
 8001a9a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001a9e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f003 0308 	and.w	r3, r3, #8
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d005      	beq.n	8001ab8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001aac:	4b53      	ldr	r3, [pc, #332]	; (8001bfc <HAL_RCC_ClockConfig+0x1bc>)
 8001aae:	689b      	ldr	r3, [r3, #8]
 8001ab0:	4a52      	ldr	r2, [pc, #328]	; (8001bfc <HAL_RCC_ClockConfig+0x1bc>)
 8001ab2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001ab6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ab8:	4b50      	ldr	r3, [pc, #320]	; (8001bfc <HAL_RCC_ClockConfig+0x1bc>)
 8001aba:	689b      	ldr	r3, [r3, #8]
 8001abc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	689b      	ldr	r3, [r3, #8]
 8001ac4:	494d      	ldr	r1, [pc, #308]	; (8001bfc <HAL_RCC_ClockConfig+0x1bc>)
 8001ac6:	4313      	orrs	r3, r2
 8001ac8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f003 0301 	and.w	r3, r3, #1
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d044      	beq.n	8001b60 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	2b01      	cmp	r3, #1
 8001adc:	d107      	bne.n	8001aee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ade:	4b47      	ldr	r3, [pc, #284]	; (8001bfc <HAL_RCC_ClockConfig+0x1bc>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d119      	bne.n	8001b1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001aea:	2301      	movs	r3, #1
 8001aec:	e07f      	b.n	8001bee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	2b02      	cmp	r3, #2
 8001af4:	d003      	beq.n	8001afe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001afa:	2b03      	cmp	r3, #3
 8001afc:	d107      	bne.n	8001b0e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001afe:	4b3f      	ldr	r3, [pc, #252]	; (8001bfc <HAL_RCC_ClockConfig+0x1bc>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d109      	bne.n	8001b1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	e06f      	b.n	8001bee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b0e:	4b3b      	ldr	r3, [pc, #236]	; (8001bfc <HAL_RCC_ClockConfig+0x1bc>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f003 0302 	and.w	r3, r3, #2
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d101      	bne.n	8001b1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e067      	b.n	8001bee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b1e:	4b37      	ldr	r3, [pc, #220]	; (8001bfc <HAL_RCC_ClockConfig+0x1bc>)
 8001b20:	689b      	ldr	r3, [r3, #8]
 8001b22:	f023 0203 	bic.w	r2, r3, #3
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	4934      	ldr	r1, [pc, #208]	; (8001bfc <HAL_RCC_ClockConfig+0x1bc>)
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b30:	f7ff fcdc 	bl	80014ec <HAL_GetTick>
 8001b34:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b36:	e00a      	b.n	8001b4e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b38:	f7ff fcd8 	bl	80014ec <HAL_GetTick>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	1ad3      	subs	r3, r2, r3
 8001b42:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d901      	bls.n	8001b4e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b4a:	2303      	movs	r3, #3
 8001b4c:	e04f      	b.n	8001bee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b4e:	4b2b      	ldr	r3, [pc, #172]	; (8001bfc <HAL_RCC_ClockConfig+0x1bc>)
 8001b50:	689b      	ldr	r3, [r3, #8]
 8001b52:	f003 020c 	and.w	r2, r3, #12
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	009b      	lsls	r3, r3, #2
 8001b5c:	429a      	cmp	r2, r3
 8001b5e:	d1eb      	bne.n	8001b38 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b60:	4b25      	ldr	r3, [pc, #148]	; (8001bf8 <HAL_RCC_ClockConfig+0x1b8>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f003 030f 	and.w	r3, r3, #15
 8001b68:	683a      	ldr	r2, [r7, #0]
 8001b6a:	429a      	cmp	r2, r3
 8001b6c:	d20c      	bcs.n	8001b88 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b6e:	4b22      	ldr	r3, [pc, #136]	; (8001bf8 <HAL_RCC_ClockConfig+0x1b8>)
 8001b70:	683a      	ldr	r2, [r7, #0]
 8001b72:	b2d2      	uxtb	r2, r2
 8001b74:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b76:	4b20      	ldr	r3, [pc, #128]	; (8001bf8 <HAL_RCC_ClockConfig+0x1b8>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f003 030f 	and.w	r3, r3, #15
 8001b7e:	683a      	ldr	r2, [r7, #0]
 8001b80:	429a      	cmp	r2, r3
 8001b82:	d001      	beq.n	8001b88 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001b84:	2301      	movs	r3, #1
 8001b86:	e032      	b.n	8001bee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f003 0304 	and.w	r3, r3, #4
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d008      	beq.n	8001ba6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b94:	4b19      	ldr	r3, [pc, #100]	; (8001bfc <HAL_RCC_ClockConfig+0x1bc>)
 8001b96:	689b      	ldr	r3, [r3, #8]
 8001b98:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	68db      	ldr	r3, [r3, #12]
 8001ba0:	4916      	ldr	r1, [pc, #88]	; (8001bfc <HAL_RCC_ClockConfig+0x1bc>)
 8001ba2:	4313      	orrs	r3, r2
 8001ba4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f003 0308 	and.w	r3, r3, #8
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d009      	beq.n	8001bc6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001bb2:	4b12      	ldr	r3, [pc, #72]	; (8001bfc <HAL_RCC_ClockConfig+0x1bc>)
 8001bb4:	689b      	ldr	r3, [r3, #8]
 8001bb6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	691b      	ldr	r3, [r3, #16]
 8001bbe:	00db      	lsls	r3, r3, #3
 8001bc0:	490e      	ldr	r1, [pc, #56]	; (8001bfc <HAL_RCC_ClockConfig+0x1bc>)
 8001bc2:	4313      	orrs	r3, r2
 8001bc4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001bc6:	f000 f821 	bl	8001c0c <HAL_RCC_GetSysClockFreq>
 8001bca:	4602      	mov	r2, r0
 8001bcc:	4b0b      	ldr	r3, [pc, #44]	; (8001bfc <HAL_RCC_ClockConfig+0x1bc>)
 8001bce:	689b      	ldr	r3, [r3, #8]
 8001bd0:	091b      	lsrs	r3, r3, #4
 8001bd2:	f003 030f 	and.w	r3, r3, #15
 8001bd6:	490a      	ldr	r1, [pc, #40]	; (8001c00 <HAL_RCC_ClockConfig+0x1c0>)
 8001bd8:	5ccb      	ldrb	r3, [r1, r3]
 8001bda:	fa22 f303 	lsr.w	r3, r2, r3
 8001bde:	4a09      	ldr	r2, [pc, #36]	; (8001c04 <HAL_RCC_ClockConfig+0x1c4>)
 8001be0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001be2:	4b09      	ldr	r3, [pc, #36]	; (8001c08 <HAL_RCC_ClockConfig+0x1c8>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4618      	mov	r0, r3
 8001be8:	f7ff fc3c 	bl	8001464 <HAL_InitTick>

  return HAL_OK;
 8001bec:	2300      	movs	r3, #0
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	3710      	adds	r7, #16
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	40023c00 	.word	0x40023c00
 8001bfc:	40023800 	.word	0x40023800
 8001c00:	0800325c 	.word	0x0800325c
 8001c04:	20000000 	.word	0x20000000
 8001c08:	20000004 	.word	0x20000004

08001c0c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001c10:	b087      	sub	sp, #28
 8001c12:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001c14:	2600      	movs	r6, #0
 8001c16:	60fe      	str	r6, [r7, #12]
  uint32_t pllvco = 0U;
 8001c18:	2600      	movs	r6, #0
 8001c1a:	617e      	str	r6, [r7, #20]
  uint32_t pllp = 0U;
 8001c1c:	2600      	movs	r6, #0
 8001c1e:	60be      	str	r6, [r7, #8]
  uint32_t pllr = 0U;
 8001c20:	2600      	movs	r6, #0
 8001c22:	607e      	str	r6, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001c24:	2600      	movs	r6, #0
 8001c26:	613e      	str	r6, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c28:	4ea3      	ldr	r6, [pc, #652]	; (8001eb8 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8001c2a:	68b6      	ldr	r6, [r6, #8]
 8001c2c:	f006 060c 	and.w	r6, r6, #12
 8001c30:	2e0c      	cmp	r6, #12
 8001c32:	f200 8137 	bhi.w	8001ea4 <HAL_RCC_GetSysClockFreq+0x298>
 8001c36:	f20f 0c08 	addw	ip, pc, #8
 8001c3a:	f85c f026 	ldr.w	pc, [ip, r6, lsl #2]
 8001c3e:	bf00      	nop
 8001c40:	08001c75 	.word	0x08001c75
 8001c44:	08001ea5 	.word	0x08001ea5
 8001c48:	08001ea5 	.word	0x08001ea5
 8001c4c:	08001ea5 	.word	0x08001ea5
 8001c50:	08001c7b 	.word	0x08001c7b
 8001c54:	08001ea5 	.word	0x08001ea5
 8001c58:	08001ea5 	.word	0x08001ea5
 8001c5c:	08001ea5 	.word	0x08001ea5
 8001c60:	08001c81 	.word	0x08001c81
 8001c64:	08001ea5 	.word	0x08001ea5
 8001c68:	08001ea5 	.word	0x08001ea5
 8001c6c:	08001ea5 	.word	0x08001ea5
 8001c70:	08001d97 	.word	0x08001d97
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001c74:	4b91      	ldr	r3, [pc, #580]	; (8001ebc <HAL_RCC_GetSysClockFreq+0x2b0>)
 8001c76:	613b      	str	r3, [r7, #16]
       break;
 8001c78:	e117      	b.n	8001eaa <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001c7a:	4b91      	ldr	r3, [pc, #580]	; (8001ec0 <HAL_RCC_GetSysClockFreq+0x2b4>)
 8001c7c:	613b      	str	r3, [r7, #16]
      break;
 8001c7e:	e114      	b.n	8001eaa <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c80:	4b8d      	ldr	r3, [pc, #564]	; (8001eb8 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c88:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c8a:	4b8b      	ldr	r3, [pc, #556]	; (8001eb8 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d024      	beq.n	8001ce0 <HAL_RCC_GetSysClockFreq+0xd4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c96:	4b88      	ldr	r3, [pc, #544]	; (8001eb8 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	099b      	lsrs	r3, r3, #6
 8001c9c:	461a      	mov	r2, r3
 8001c9e:	f04f 0300 	mov.w	r3, #0
 8001ca2:	f240 14ff 	movw	r4, #511	; 0x1ff
 8001ca6:	f04f 0500 	mov.w	r5, #0
 8001caa:	ea02 0004 	and.w	r0, r2, r4
 8001cae:	ea03 0105 	and.w	r1, r3, r5
 8001cb2:	4b83      	ldr	r3, [pc, #524]	; (8001ec0 <HAL_RCC_GetSysClockFreq+0x2b4>)
 8001cb4:	fb03 f201 	mul.w	r2, r3, r1
 8001cb8:	2300      	movs	r3, #0
 8001cba:	fb03 f300 	mul.w	r3, r3, r0
 8001cbe:	4413      	add	r3, r2
 8001cc0:	4a7f      	ldr	r2, [pc, #508]	; (8001ec0 <HAL_RCC_GetSysClockFreq+0x2b4>)
 8001cc2:	fba0 0102 	umull	r0, r1, r0, r2
 8001cc6:	440b      	add	r3, r1
 8001cc8:	4619      	mov	r1, r3
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	461a      	mov	r2, r3
 8001cce:	f04f 0300 	mov.w	r3, #0
 8001cd2:	f7fe fe87 	bl	80009e4 <__aeabi_uldivmod>
 8001cd6:	4602      	mov	r2, r0
 8001cd8:	460b      	mov	r3, r1
 8001cda:	4613      	mov	r3, r2
 8001cdc:	617b      	str	r3, [r7, #20]
 8001cde:	e04c      	b.n	8001d7a <HAL_RCC_GetSysClockFreq+0x16e>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ce0:	4b75      	ldr	r3, [pc, #468]	; (8001eb8 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	099b      	lsrs	r3, r3, #6
 8001ce6:	461a      	mov	r2, r3
 8001ce8:	f04f 0300 	mov.w	r3, #0
 8001cec:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001cf0:	f04f 0100 	mov.w	r1, #0
 8001cf4:	ea02 0800 	and.w	r8, r2, r0
 8001cf8:	ea03 0901 	and.w	r9, r3, r1
 8001cfc:	4640      	mov	r0, r8
 8001cfe:	4649      	mov	r1, r9
 8001d00:	f04f 0200 	mov.w	r2, #0
 8001d04:	f04f 0300 	mov.w	r3, #0
 8001d08:	014b      	lsls	r3, r1, #5
 8001d0a:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001d0e:	0142      	lsls	r2, r0, #5
 8001d10:	4610      	mov	r0, r2
 8001d12:	4619      	mov	r1, r3
 8001d14:	ebb0 0008 	subs.w	r0, r0, r8
 8001d18:	eb61 0109 	sbc.w	r1, r1, r9
 8001d1c:	f04f 0200 	mov.w	r2, #0
 8001d20:	f04f 0300 	mov.w	r3, #0
 8001d24:	018b      	lsls	r3, r1, #6
 8001d26:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001d2a:	0182      	lsls	r2, r0, #6
 8001d2c:	1a12      	subs	r2, r2, r0
 8001d2e:	eb63 0301 	sbc.w	r3, r3, r1
 8001d32:	f04f 0000 	mov.w	r0, #0
 8001d36:	f04f 0100 	mov.w	r1, #0
 8001d3a:	00d9      	lsls	r1, r3, #3
 8001d3c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001d40:	00d0      	lsls	r0, r2, #3
 8001d42:	4602      	mov	r2, r0
 8001d44:	460b      	mov	r3, r1
 8001d46:	eb12 0208 	adds.w	r2, r2, r8
 8001d4a:	eb43 0309 	adc.w	r3, r3, r9
 8001d4e:	f04f 0000 	mov.w	r0, #0
 8001d52:	f04f 0100 	mov.w	r1, #0
 8001d56:	0299      	lsls	r1, r3, #10
 8001d58:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001d5c:	0290      	lsls	r0, r2, #10
 8001d5e:	4602      	mov	r2, r0
 8001d60:	460b      	mov	r3, r1
 8001d62:	4610      	mov	r0, r2
 8001d64:	4619      	mov	r1, r3
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	461a      	mov	r2, r3
 8001d6a:	f04f 0300 	mov.w	r3, #0
 8001d6e:	f7fe fe39 	bl	80009e4 <__aeabi_uldivmod>
 8001d72:	4602      	mov	r2, r0
 8001d74:	460b      	mov	r3, r1
 8001d76:	4613      	mov	r3, r2
 8001d78:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001d7a:	4b4f      	ldr	r3, [pc, #316]	; (8001eb8 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	0c1b      	lsrs	r3, r3, #16
 8001d80:	f003 0303 	and.w	r3, r3, #3
 8001d84:	3301      	adds	r3, #1
 8001d86:	005b      	lsls	r3, r3, #1
 8001d88:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8001d8a:	697a      	ldr	r2, [r7, #20]
 8001d8c:	68bb      	ldr	r3, [r7, #8]
 8001d8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d92:	613b      	str	r3, [r7, #16]
      break;
 8001d94:	e089      	b.n	8001eaa <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001d96:	4948      	ldr	r1, [pc, #288]	; (8001eb8 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8001d98:	6849      	ldr	r1, [r1, #4]
 8001d9a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8001d9e:	60f9      	str	r1, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001da0:	4945      	ldr	r1, [pc, #276]	; (8001eb8 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8001da2:	6849      	ldr	r1, [r1, #4]
 8001da4:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8001da8:	2900      	cmp	r1, #0
 8001daa:	d024      	beq.n	8001df6 <HAL_RCC_GetSysClockFreq+0x1ea>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001dac:	4942      	ldr	r1, [pc, #264]	; (8001eb8 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8001dae:	6849      	ldr	r1, [r1, #4]
 8001db0:	0989      	lsrs	r1, r1, #6
 8001db2:	4608      	mov	r0, r1
 8001db4:	f04f 0100 	mov.w	r1, #0
 8001db8:	f240 14ff 	movw	r4, #511	; 0x1ff
 8001dbc:	f04f 0500 	mov.w	r5, #0
 8001dc0:	ea00 0204 	and.w	r2, r0, r4
 8001dc4:	ea01 0305 	and.w	r3, r1, r5
 8001dc8:	493d      	ldr	r1, [pc, #244]	; (8001ec0 <HAL_RCC_GetSysClockFreq+0x2b4>)
 8001dca:	fb01 f003 	mul.w	r0, r1, r3
 8001dce:	2100      	movs	r1, #0
 8001dd0:	fb01 f102 	mul.w	r1, r1, r2
 8001dd4:	1844      	adds	r4, r0, r1
 8001dd6:	493a      	ldr	r1, [pc, #232]	; (8001ec0 <HAL_RCC_GetSysClockFreq+0x2b4>)
 8001dd8:	fba2 0101 	umull	r0, r1, r2, r1
 8001ddc:	1863      	adds	r3, r4, r1
 8001dde:	4619      	mov	r1, r3
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	461a      	mov	r2, r3
 8001de4:	f04f 0300 	mov.w	r3, #0
 8001de8:	f7fe fdfc 	bl	80009e4 <__aeabi_uldivmod>
 8001dec:	4602      	mov	r2, r0
 8001dee:	460b      	mov	r3, r1
 8001df0:	4613      	mov	r3, r2
 8001df2:	617b      	str	r3, [r7, #20]
 8001df4:	e04a      	b.n	8001e8c <HAL_RCC_GetSysClockFreq+0x280>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001df6:	4b30      	ldr	r3, [pc, #192]	; (8001eb8 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	099b      	lsrs	r3, r3, #6
 8001dfc:	461a      	mov	r2, r3
 8001dfe:	f04f 0300 	mov.w	r3, #0
 8001e02:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001e06:	f04f 0100 	mov.w	r1, #0
 8001e0a:	ea02 0400 	and.w	r4, r2, r0
 8001e0e:	ea03 0501 	and.w	r5, r3, r1
 8001e12:	4620      	mov	r0, r4
 8001e14:	4629      	mov	r1, r5
 8001e16:	f04f 0200 	mov.w	r2, #0
 8001e1a:	f04f 0300 	mov.w	r3, #0
 8001e1e:	014b      	lsls	r3, r1, #5
 8001e20:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001e24:	0142      	lsls	r2, r0, #5
 8001e26:	4610      	mov	r0, r2
 8001e28:	4619      	mov	r1, r3
 8001e2a:	1b00      	subs	r0, r0, r4
 8001e2c:	eb61 0105 	sbc.w	r1, r1, r5
 8001e30:	f04f 0200 	mov.w	r2, #0
 8001e34:	f04f 0300 	mov.w	r3, #0
 8001e38:	018b      	lsls	r3, r1, #6
 8001e3a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001e3e:	0182      	lsls	r2, r0, #6
 8001e40:	1a12      	subs	r2, r2, r0
 8001e42:	eb63 0301 	sbc.w	r3, r3, r1
 8001e46:	f04f 0000 	mov.w	r0, #0
 8001e4a:	f04f 0100 	mov.w	r1, #0
 8001e4e:	00d9      	lsls	r1, r3, #3
 8001e50:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001e54:	00d0      	lsls	r0, r2, #3
 8001e56:	4602      	mov	r2, r0
 8001e58:	460b      	mov	r3, r1
 8001e5a:	1912      	adds	r2, r2, r4
 8001e5c:	eb45 0303 	adc.w	r3, r5, r3
 8001e60:	f04f 0000 	mov.w	r0, #0
 8001e64:	f04f 0100 	mov.w	r1, #0
 8001e68:	0299      	lsls	r1, r3, #10
 8001e6a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001e6e:	0290      	lsls	r0, r2, #10
 8001e70:	4602      	mov	r2, r0
 8001e72:	460b      	mov	r3, r1
 8001e74:	4610      	mov	r0, r2
 8001e76:	4619      	mov	r1, r3
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	461a      	mov	r2, r3
 8001e7c:	f04f 0300 	mov.w	r3, #0
 8001e80:	f7fe fdb0 	bl	80009e4 <__aeabi_uldivmod>
 8001e84:	4602      	mov	r2, r0
 8001e86:	460b      	mov	r3, r1
 8001e88:	4613      	mov	r3, r2
 8001e8a:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001e8c:	4b0a      	ldr	r3, [pc, #40]	; (8001eb8 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	0f1b      	lsrs	r3, r3, #28
 8001e92:	f003 0307 	and.w	r3, r3, #7
 8001e96:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8001e98:	697a      	ldr	r2, [r7, #20]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ea0:	613b      	str	r3, [r7, #16]
      break;
 8001ea2:	e002      	b.n	8001eaa <HAL_RCC_GetSysClockFreq+0x29e>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001ea4:	4b05      	ldr	r3, [pc, #20]	; (8001ebc <HAL_RCC_GetSysClockFreq+0x2b0>)
 8001ea6:	613b      	str	r3, [r7, #16]
      break;
 8001ea8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001eaa:	693b      	ldr	r3, [r7, #16]
}
 8001eac:	4618      	mov	r0, r3
 8001eae:	371c      	adds	r7, #28
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001eb6:	bf00      	nop
 8001eb8:	40023800 	.word	0x40023800
 8001ebc:	00f42400 	.word	0x00f42400
 8001ec0:	017d7840 	.word	0x017d7840

08001ec4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b086      	sub	sp, #24
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d101      	bne.n	8001ed6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e28d      	b.n	80023f2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f003 0301 	and.w	r3, r3, #1
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	f000 8083 	beq.w	8001fea <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001ee4:	4b94      	ldr	r3, [pc, #592]	; (8002138 <HAL_RCC_OscConfig+0x274>)
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	f003 030c 	and.w	r3, r3, #12
 8001eec:	2b04      	cmp	r3, #4
 8001eee:	d019      	beq.n	8001f24 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001ef0:	4b91      	ldr	r3, [pc, #580]	; (8002138 <HAL_RCC_OscConfig+0x274>)
 8001ef2:	689b      	ldr	r3, [r3, #8]
 8001ef4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001ef8:	2b08      	cmp	r3, #8
 8001efa:	d106      	bne.n	8001f0a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001efc:	4b8e      	ldr	r3, [pc, #568]	; (8002138 <HAL_RCC_OscConfig+0x274>)
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f04:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f08:	d00c      	beq.n	8001f24 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f0a:	4b8b      	ldr	r3, [pc, #556]	; (8002138 <HAL_RCC_OscConfig+0x274>)
 8001f0c:	689b      	ldr	r3, [r3, #8]
 8001f0e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001f12:	2b0c      	cmp	r3, #12
 8001f14:	d112      	bne.n	8001f3c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f16:	4b88      	ldr	r3, [pc, #544]	; (8002138 <HAL_RCC_OscConfig+0x274>)
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f1e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f22:	d10b      	bne.n	8001f3c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f24:	4b84      	ldr	r3, [pc, #528]	; (8002138 <HAL_RCC_OscConfig+0x274>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d05b      	beq.n	8001fe8 <HAL_RCC_OscConfig+0x124>
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d157      	bne.n	8001fe8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	e25a      	b.n	80023f2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f44:	d106      	bne.n	8001f54 <HAL_RCC_OscConfig+0x90>
 8001f46:	4b7c      	ldr	r3, [pc, #496]	; (8002138 <HAL_RCC_OscConfig+0x274>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4a7b      	ldr	r2, [pc, #492]	; (8002138 <HAL_RCC_OscConfig+0x274>)
 8001f4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f50:	6013      	str	r3, [r2, #0]
 8001f52:	e01d      	b.n	8001f90 <HAL_RCC_OscConfig+0xcc>
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f5c:	d10c      	bne.n	8001f78 <HAL_RCC_OscConfig+0xb4>
 8001f5e:	4b76      	ldr	r3, [pc, #472]	; (8002138 <HAL_RCC_OscConfig+0x274>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4a75      	ldr	r2, [pc, #468]	; (8002138 <HAL_RCC_OscConfig+0x274>)
 8001f64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f68:	6013      	str	r3, [r2, #0]
 8001f6a:	4b73      	ldr	r3, [pc, #460]	; (8002138 <HAL_RCC_OscConfig+0x274>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4a72      	ldr	r2, [pc, #456]	; (8002138 <HAL_RCC_OscConfig+0x274>)
 8001f70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f74:	6013      	str	r3, [r2, #0]
 8001f76:	e00b      	b.n	8001f90 <HAL_RCC_OscConfig+0xcc>
 8001f78:	4b6f      	ldr	r3, [pc, #444]	; (8002138 <HAL_RCC_OscConfig+0x274>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a6e      	ldr	r2, [pc, #440]	; (8002138 <HAL_RCC_OscConfig+0x274>)
 8001f7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f82:	6013      	str	r3, [r2, #0]
 8001f84:	4b6c      	ldr	r3, [pc, #432]	; (8002138 <HAL_RCC_OscConfig+0x274>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a6b      	ldr	r2, [pc, #428]	; (8002138 <HAL_RCC_OscConfig+0x274>)
 8001f8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d013      	beq.n	8001fc0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f98:	f7ff faa8 	bl	80014ec <HAL_GetTick>
 8001f9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f9e:	e008      	b.n	8001fb2 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001fa0:	f7ff faa4 	bl	80014ec <HAL_GetTick>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	1ad3      	subs	r3, r2, r3
 8001faa:	2b64      	cmp	r3, #100	; 0x64
 8001fac:	d901      	bls.n	8001fb2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001fae:	2303      	movs	r3, #3
 8001fb0:	e21f      	b.n	80023f2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fb2:	4b61      	ldr	r3, [pc, #388]	; (8002138 <HAL_RCC_OscConfig+0x274>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d0f0      	beq.n	8001fa0 <HAL_RCC_OscConfig+0xdc>
 8001fbe:	e014      	b.n	8001fea <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fc0:	f7ff fa94 	bl	80014ec <HAL_GetTick>
 8001fc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fc6:	e008      	b.n	8001fda <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001fc8:	f7ff fa90 	bl	80014ec <HAL_GetTick>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	1ad3      	subs	r3, r2, r3
 8001fd2:	2b64      	cmp	r3, #100	; 0x64
 8001fd4:	d901      	bls.n	8001fda <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001fd6:	2303      	movs	r3, #3
 8001fd8:	e20b      	b.n	80023f2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fda:	4b57      	ldr	r3, [pc, #348]	; (8002138 <HAL_RCC_OscConfig+0x274>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d1f0      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x104>
 8001fe6:	e000      	b.n	8001fea <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fe8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f003 0302 	and.w	r3, r3, #2
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d06f      	beq.n	80020d6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001ff6:	4b50      	ldr	r3, [pc, #320]	; (8002138 <HAL_RCC_OscConfig+0x274>)
 8001ff8:	689b      	ldr	r3, [r3, #8]
 8001ffa:	f003 030c 	and.w	r3, r3, #12
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d017      	beq.n	8002032 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002002:	4b4d      	ldr	r3, [pc, #308]	; (8002138 <HAL_RCC_OscConfig+0x274>)
 8002004:	689b      	ldr	r3, [r3, #8]
 8002006:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800200a:	2b08      	cmp	r3, #8
 800200c:	d105      	bne.n	800201a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800200e:	4b4a      	ldr	r3, [pc, #296]	; (8002138 <HAL_RCC_OscConfig+0x274>)
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002016:	2b00      	cmp	r3, #0
 8002018:	d00b      	beq.n	8002032 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800201a:	4b47      	ldr	r3, [pc, #284]	; (8002138 <HAL_RCC_OscConfig+0x274>)
 800201c:	689b      	ldr	r3, [r3, #8]
 800201e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002022:	2b0c      	cmp	r3, #12
 8002024:	d11c      	bne.n	8002060 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002026:	4b44      	ldr	r3, [pc, #272]	; (8002138 <HAL_RCC_OscConfig+0x274>)
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800202e:	2b00      	cmp	r3, #0
 8002030:	d116      	bne.n	8002060 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002032:	4b41      	ldr	r3, [pc, #260]	; (8002138 <HAL_RCC_OscConfig+0x274>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f003 0302 	and.w	r3, r3, #2
 800203a:	2b00      	cmp	r3, #0
 800203c:	d005      	beq.n	800204a <HAL_RCC_OscConfig+0x186>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	68db      	ldr	r3, [r3, #12]
 8002042:	2b01      	cmp	r3, #1
 8002044:	d001      	beq.n	800204a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002046:	2301      	movs	r3, #1
 8002048:	e1d3      	b.n	80023f2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800204a:	4b3b      	ldr	r3, [pc, #236]	; (8002138 <HAL_RCC_OscConfig+0x274>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	691b      	ldr	r3, [r3, #16]
 8002056:	00db      	lsls	r3, r3, #3
 8002058:	4937      	ldr	r1, [pc, #220]	; (8002138 <HAL_RCC_OscConfig+0x274>)
 800205a:	4313      	orrs	r3, r2
 800205c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800205e:	e03a      	b.n	80020d6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	68db      	ldr	r3, [r3, #12]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d020      	beq.n	80020aa <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002068:	4b34      	ldr	r3, [pc, #208]	; (800213c <HAL_RCC_OscConfig+0x278>)
 800206a:	2201      	movs	r2, #1
 800206c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800206e:	f7ff fa3d 	bl	80014ec <HAL_GetTick>
 8002072:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002074:	e008      	b.n	8002088 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002076:	f7ff fa39 	bl	80014ec <HAL_GetTick>
 800207a:	4602      	mov	r2, r0
 800207c:	693b      	ldr	r3, [r7, #16]
 800207e:	1ad3      	subs	r3, r2, r3
 8002080:	2b02      	cmp	r3, #2
 8002082:	d901      	bls.n	8002088 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002084:	2303      	movs	r3, #3
 8002086:	e1b4      	b.n	80023f2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002088:	4b2b      	ldr	r3, [pc, #172]	; (8002138 <HAL_RCC_OscConfig+0x274>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f003 0302 	and.w	r3, r3, #2
 8002090:	2b00      	cmp	r3, #0
 8002092:	d0f0      	beq.n	8002076 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002094:	4b28      	ldr	r3, [pc, #160]	; (8002138 <HAL_RCC_OscConfig+0x274>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	691b      	ldr	r3, [r3, #16]
 80020a0:	00db      	lsls	r3, r3, #3
 80020a2:	4925      	ldr	r1, [pc, #148]	; (8002138 <HAL_RCC_OscConfig+0x274>)
 80020a4:	4313      	orrs	r3, r2
 80020a6:	600b      	str	r3, [r1, #0]
 80020a8:	e015      	b.n	80020d6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020aa:	4b24      	ldr	r3, [pc, #144]	; (800213c <HAL_RCC_OscConfig+0x278>)
 80020ac:	2200      	movs	r2, #0
 80020ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020b0:	f7ff fa1c 	bl	80014ec <HAL_GetTick>
 80020b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020b6:	e008      	b.n	80020ca <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020b8:	f7ff fa18 	bl	80014ec <HAL_GetTick>
 80020bc:	4602      	mov	r2, r0
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	1ad3      	subs	r3, r2, r3
 80020c2:	2b02      	cmp	r3, #2
 80020c4:	d901      	bls.n	80020ca <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80020c6:	2303      	movs	r3, #3
 80020c8:	e193      	b.n	80023f2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020ca:	4b1b      	ldr	r3, [pc, #108]	; (8002138 <HAL_RCC_OscConfig+0x274>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f003 0302 	and.w	r3, r3, #2
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d1f0      	bne.n	80020b8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f003 0308 	and.w	r3, r3, #8
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d036      	beq.n	8002150 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	695b      	ldr	r3, [r3, #20]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d016      	beq.n	8002118 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020ea:	4b15      	ldr	r3, [pc, #84]	; (8002140 <HAL_RCC_OscConfig+0x27c>)
 80020ec:	2201      	movs	r2, #1
 80020ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020f0:	f7ff f9fc 	bl	80014ec <HAL_GetTick>
 80020f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020f6:	e008      	b.n	800210a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020f8:	f7ff f9f8 	bl	80014ec <HAL_GetTick>
 80020fc:	4602      	mov	r2, r0
 80020fe:	693b      	ldr	r3, [r7, #16]
 8002100:	1ad3      	subs	r3, r2, r3
 8002102:	2b02      	cmp	r3, #2
 8002104:	d901      	bls.n	800210a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002106:	2303      	movs	r3, #3
 8002108:	e173      	b.n	80023f2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800210a:	4b0b      	ldr	r3, [pc, #44]	; (8002138 <HAL_RCC_OscConfig+0x274>)
 800210c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800210e:	f003 0302 	and.w	r3, r3, #2
 8002112:	2b00      	cmp	r3, #0
 8002114:	d0f0      	beq.n	80020f8 <HAL_RCC_OscConfig+0x234>
 8002116:	e01b      	b.n	8002150 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002118:	4b09      	ldr	r3, [pc, #36]	; (8002140 <HAL_RCC_OscConfig+0x27c>)
 800211a:	2200      	movs	r2, #0
 800211c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800211e:	f7ff f9e5 	bl	80014ec <HAL_GetTick>
 8002122:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002124:	e00e      	b.n	8002144 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002126:	f7ff f9e1 	bl	80014ec <HAL_GetTick>
 800212a:	4602      	mov	r2, r0
 800212c:	693b      	ldr	r3, [r7, #16]
 800212e:	1ad3      	subs	r3, r2, r3
 8002130:	2b02      	cmp	r3, #2
 8002132:	d907      	bls.n	8002144 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002134:	2303      	movs	r3, #3
 8002136:	e15c      	b.n	80023f2 <HAL_RCC_OscConfig+0x52e>
 8002138:	40023800 	.word	0x40023800
 800213c:	42470000 	.word	0x42470000
 8002140:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002144:	4b8a      	ldr	r3, [pc, #552]	; (8002370 <HAL_RCC_OscConfig+0x4ac>)
 8002146:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002148:	f003 0302 	and.w	r3, r3, #2
 800214c:	2b00      	cmp	r3, #0
 800214e:	d1ea      	bne.n	8002126 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f003 0304 	and.w	r3, r3, #4
 8002158:	2b00      	cmp	r3, #0
 800215a:	f000 8097 	beq.w	800228c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800215e:	2300      	movs	r3, #0
 8002160:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002162:	4b83      	ldr	r3, [pc, #524]	; (8002370 <HAL_RCC_OscConfig+0x4ac>)
 8002164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002166:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800216a:	2b00      	cmp	r3, #0
 800216c:	d10f      	bne.n	800218e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800216e:	2300      	movs	r3, #0
 8002170:	60bb      	str	r3, [r7, #8]
 8002172:	4b7f      	ldr	r3, [pc, #508]	; (8002370 <HAL_RCC_OscConfig+0x4ac>)
 8002174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002176:	4a7e      	ldr	r2, [pc, #504]	; (8002370 <HAL_RCC_OscConfig+0x4ac>)
 8002178:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800217c:	6413      	str	r3, [r2, #64]	; 0x40
 800217e:	4b7c      	ldr	r3, [pc, #496]	; (8002370 <HAL_RCC_OscConfig+0x4ac>)
 8002180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002182:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002186:	60bb      	str	r3, [r7, #8]
 8002188:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800218a:	2301      	movs	r3, #1
 800218c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800218e:	4b79      	ldr	r3, [pc, #484]	; (8002374 <HAL_RCC_OscConfig+0x4b0>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002196:	2b00      	cmp	r3, #0
 8002198:	d118      	bne.n	80021cc <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800219a:	4b76      	ldr	r3, [pc, #472]	; (8002374 <HAL_RCC_OscConfig+0x4b0>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4a75      	ldr	r2, [pc, #468]	; (8002374 <HAL_RCC_OscConfig+0x4b0>)
 80021a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021a6:	f7ff f9a1 	bl	80014ec <HAL_GetTick>
 80021aa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021ac:	e008      	b.n	80021c0 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021ae:	f7ff f99d 	bl	80014ec <HAL_GetTick>
 80021b2:	4602      	mov	r2, r0
 80021b4:	693b      	ldr	r3, [r7, #16]
 80021b6:	1ad3      	subs	r3, r2, r3
 80021b8:	2b02      	cmp	r3, #2
 80021ba:	d901      	bls.n	80021c0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80021bc:	2303      	movs	r3, #3
 80021be:	e118      	b.n	80023f2 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021c0:	4b6c      	ldr	r3, [pc, #432]	; (8002374 <HAL_RCC_OscConfig+0x4b0>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d0f0      	beq.n	80021ae <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	689b      	ldr	r3, [r3, #8]
 80021d0:	2b01      	cmp	r3, #1
 80021d2:	d106      	bne.n	80021e2 <HAL_RCC_OscConfig+0x31e>
 80021d4:	4b66      	ldr	r3, [pc, #408]	; (8002370 <HAL_RCC_OscConfig+0x4ac>)
 80021d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021d8:	4a65      	ldr	r2, [pc, #404]	; (8002370 <HAL_RCC_OscConfig+0x4ac>)
 80021da:	f043 0301 	orr.w	r3, r3, #1
 80021de:	6713      	str	r3, [r2, #112]	; 0x70
 80021e0:	e01c      	b.n	800221c <HAL_RCC_OscConfig+0x358>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	689b      	ldr	r3, [r3, #8]
 80021e6:	2b05      	cmp	r3, #5
 80021e8:	d10c      	bne.n	8002204 <HAL_RCC_OscConfig+0x340>
 80021ea:	4b61      	ldr	r3, [pc, #388]	; (8002370 <HAL_RCC_OscConfig+0x4ac>)
 80021ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021ee:	4a60      	ldr	r2, [pc, #384]	; (8002370 <HAL_RCC_OscConfig+0x4ac>)
 80021f0:	f043 0304 	orr.w	r3, r3, #4
 80021f4:	6713      	str	r3, [r2, #112]	; 0x70
 80021f6:	4b5e      	ldr	r3, [pc, #376]	; (8002370 <HAL_RCC_OscConfig+0x4ac>)
 80021f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021fa:	4a5d      	ldr	r2, [pc, #372]	; (8002370 <HAL_RCC_OscConfig+0x4ac>)
 80021fc:	f043 0301 	orr.w	r3, r3, #1
 8002200:	6713      	str	r3, [r2, #112]	; 0x70
 8002202:	e00b      	b.n	800221c <HAL_RCC_OscConfig+0x358>
 8002204:	4b5a      	ldr	r3, [pc, #360]	; (8002370 <HAL_RCC_OscConfig+0x4ac>)
 8002206:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002208:	4a59      	ldr	r2, [pc, #356]	; (8002370 <HAL_RCC_OscConfig+0x4ac>)
 800220a:	f023 0301 	bic.w	r3, r3, #1
 800220e:	6713      	str	r3, [r2, #112]	; 0x70
 8002210:	4b57      	ldr	r3, [pc, #348]	; (8002370 <HAL_RCC_OscConfig+0x4ac>)
 8002212:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002214:	4a56      	ldr	r2, [pc, #344]	; (8002370 <HAL_RCC_OscConfig+0x4ac>)
 8002216:	f023 0304 	bic.w	r3, r3, #4
 800221a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	689b      	ldr	r3, [r3, #8]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d015      	beq.n	8002250 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002224:	f7ff f962 	bl	80014ec <HAL_GetTick>
 8002228:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800222a:	e00a      	b.n	8002242 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800222c:	f7ff f95e 	bl	80014ec <HAL_GetTick>
 8002230:	4602      	mov	r2, r0
 8002232:	693b      	ldr	r3, [r7, #16]
 8002234:	1ad3      	subs	r3, r2, r3
 8002236:	f241 3288 	movw	r2, #5000	; 0x1388
 800223a:	4293      	cmp	r3, r2
 800223c:	d901      	bls.n	8002242 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800223e:	2303      	movs	r3, #3
 8002240:	e0d7      	b.n	80023f2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002242:	4b4b      	ldr	r3, [pc, #300]	; (8002370 <HAL_RCC_OscConfig+0x4ac>)
 8002244:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002246:	f003 0302 	and.w	r3, r3, #2
 800224a:	2b00      	cmp	r3, #0
 800224c:	d0ee      	beq.n	800222c <HAL_RCC_OscConfig+0x368>
 800224e:	e014      	b.n	800227a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002250:	f7ff f94c 	bl	80014ec <HAL_GetTick>
 8002254:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002256:	e00a      	b.n	800226e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002258:	f7ff f948 	bl	80014ec <HAL_GetTick>
 800225c:	4602      	mov	r2, r0
 800225e:	693b      	ldr	r3, [r7, #16]
 8002260:	1ad3      	subs	r3, r2, r3
 8002262:	f241 3288 	movw	r2, #5000	; 0x1388
 8002266:	4293      	cmp	r3, r2
 8002268:	d901      	bls.n	800226e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800226a:	2303      	movs	r3, #3
 800226c:	e0c1      	b.n	80023f2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800226e:	4b40      	ldr	r3, [pc, #256]	; (8002370 <HAL_RCC_OscConfig+0x4ac>)
 8002270:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002272:	f003 0302 	and.w	r3, r3, #2
 8002276:	2b00      	cmp	r3, #0
 8002278:	d1ee      	bne.n	8002258 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800227a:	7dfb      	ldrb	r3, [r7, #23]
 800227c:	2b01      	cmp	r3, #1
 800227e:	d105      	bne.n	800228c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002280:	4b3b      	ldr	r3, [pc, #236]	; (8002370 <HAL_RCC_OscConfig+0x4ac>)
 8002282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002284:	4a3a      	ldr	r2, [pc, #232]	; (8002370 <HAL_RCC_OscConfig+0x4ac>)
 8002286:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800228a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	699b      	ldr	r3, [r3, #24]
 8002290:	2b00      	cmp	r3, #0
 8002292:	f000 80ad 	beq.w	80023f0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002296:	4b36      	ldr	r3, [pc, #216]	; (8002370 <HAL_RCC_OscConfig+0x4ac>)
 8002298:	689b      	ldr	r3, [r3, #8]
 800229a:	f003 030c 	and.w	r3, r3, #12
 800229e:	2b08      	cmp	r3, #8
 80022a0:	d060      	beq.n	8002364 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	699b      	ldr	r3, [r3, #24]
 80022a6:	2b02      	cmp	r3, #2
 80022a8:	d145      	bne.n	8002336 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022aa:	4b33      	ldr	r3, [pc, #204]	; (8002378 <HAL_RCC_OscConfig+0x4b4>)
 80022ac:	2200      	movs	r2, #0
 80022ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022b0:	f7ff f91c 	bl	80014ec <HAL_GetTick>
 80022b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022b6:	e008      	b.n	80022ca <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022b8:	f7ff f918 	bl	80014ec <HAL_GetTick>
 80022bc:	4602      	mov	r2, r0
 80022be:	693b      	ldr	r3, [r7, #16]
 80022c0:	1ad3      	subs	r3, r2, r3
 80022c2:	2b02      	cmp	r3, #2
 80022c4:	d901      	bls.n	80022ca <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80022c6:	2303      	movs	r3, #3
 80022c8:	e093      	b.n	80023f2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022ca:	4b29      	ldr	r3, [pc, #164]	; (8002370 <HAL_RCC_OscConfig+0x4ac>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d1f0      	bne.n	80022b8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	69da      	ldr	r2, [r3, #28]
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6a1b      	ldr	r3, [r3, #32]
 80022de:	431a      	orrs	r2, r3
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022e4:	019b      	lsls	r3, r3, #6
 80022e6:	431a      	orrs	r2, r3
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022ec:	085b      	lsrs	r3, r3, #1
 80022ee:	3b01      	subs	r3, #1
 80022f0:	041b      	lsls	r3, r3, #16
 80022f2:	431a      	orrs	r2, r3
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022f8:	061b      	lsls	r3, r3, #24
 80022fa:	431a      	orrs	r2, r3
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002300:	071b      	lsls	r3, r3, #28
 8002302:	491b      	ldr	r1, [pc, #108]	; (8002370 <HAL_RCC_OscConfig+0x4ac>)
 8002304:	4313      	orrs	r3, r2
 8002306:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002308:	4b1b      	ldr	r3, [pc, #108]	; (8002378 <HAL_RCC_OscConfig+0x4b4>)
 800230a:	2201      	movs	r2, #1
 800230c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800230e:	f7ff f8ed 	bl	80014ec <HAL_GetTick>
 8002312:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002314:	e008      	b.n	8002328 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002316:	f7ff f8e9 	bl	80014ec <HAL_GetTick>
 800231a:	4602      	mov	r2, r0
 800231c:	693b      	ldr	r3, [r7, #16]
 800231e:	1ad3      	subs	r3, r2, r3
 8002320:	2b02      	cmp	r3, #2
 8002322:	d901      	bls.n	8002328 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002324:	2303      	movs	r3, #3
 8002326:	e064      	b.n	80023f2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002328:	4b11      	ldr	r3, [pc, #68]	; (8002370 <HAL_RCC_OscConfig+0x4ac>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002330:	2b00      	cmp	r3, #0
 8002332:	d0f0      	beq.n	8002316 <HAL_RCC_OscConfig+0x452>
 8002334:	e05c      	b.n	80023f0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002336:	4b10      	ldr	r3, [pc, #64]	; (8002378 <HAL_RCC_OscConfig+0x4b4>)
 8002338:	2200      	movs	r2, #0
 800233a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800233c:	f7ff f8d6 	bl	80014ec <HAL_GetTick>
 8002340:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002342:	e008      	b.n	8002356 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002344:	f7ff f8d2 	bl	80014ec <HAL_GetTick>
 8002348:	4602      	mov	r2, r0
 800234a:	693b      	ldr	r3, [r7, #16]
 800234c:	1ad3      	subs	r3, r2, r3
 800234e:	2b02      	cmp	r3, #2
 8002350:	d901      	bls.n	8002356 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002352:	2303      	movs	r3, #3
 8002354:	e04d      	b.n	80023f2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002356:	4b06      	ldr	r3, [pc, #24]	; (8002370 <HAL_RCC_OscConfig+0x4ac>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800235e:	2b00      	cmp	r3, #0
 8002360:	d1f0      	bne.n	8002344 <HAL_RCC_OscConfig+0x480>
 8002362:	e045      	b.n	80023f0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	699b      	ldr	r3, [r3, #24]
 8002368:	2b01      	cmp	r3, #1
 800236a:	d107      	bne.n	800237c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800236c:	2301      	movs	r3, #1
 800236e:	e040      	b.n	80023f2 <HAL_RCC_OscConfig+0x52e>
 8002370:	40023800 	.word	0x40023800
 8002374:	40007000 	.word	0x40007000
 8002378:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800237c:	4b1f      	ldr	r3, [pc, #124]	; (80023fc <HAL_RCC_OscConfig+0x538>)
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	699b      	ldr	r3, [r3, #24]
 8002386:	2b01      	cmp	r3, #1
 8002388:	d030      	beq.n	80023ec <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002394:	429a      	cmp	r2, r3
 8002396:	d129      	bne.n	80023ec <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023a2:	429a      	cmp	r2, r3
 80023a4:	d122      	bne.n	80023ec <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80023a6:	68fa      	ldr	r2, [r7, #12]
 80023a8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80023ac:	4013      	ands	r3, r2
 80023ae:	687a      	ldr	r2, [r7, #4]
 80023b0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80023b2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d119      	bne.n	80023ec <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023c2:	085b      	lsrs	r3, r3, #1
 80023c4:	3b01      	subs	r3, #1
 80023c6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80023c8:	429a      	cmp	r2, r3
 80023ca:	d10f      	bne.n	80023ec <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023d6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80023d8:	429a      	cmp	r2, r3
 80023da:	d107      	bne.n	80023ec <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80023e8:	429a      	cmp	r2, r3
 80023ea:	d001      	beq.n	80023f0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80023ec:	2301      	movs	r3, #1
 80023ee:	e000      	b.n	80023f2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80023f0:	2300      	movs	r3, #0
}
 80023f2:	4618      	mov	r0, r3
 80023f4:	3718      	adds	r7, #24
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}
 80023fa:	bf00      	nop
 80023fc:	40023800 	.word	0x40023800

08002400 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b082      	sub	sp, #8
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d101      	bne.n	8002412 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800240e:	2301      	movs	r3, #1
 8002410:	e041      	b.n	8002496 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002418:	b2db      	uxtb	r3, r3
 800241a:	2b00      	cmp	r3, #0
 800241c:	d106      	bne.n	800242c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2200      	movs	r2, #0
 8002422:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002426:	6878      	ldr	r0, [r7, #4]
 8002428:	f7fe ff38 	bl	800129c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2202      	movs	r2, #2
 8002430:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681a      	ldr	r2, [r3, #0]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	3304      	adds	r3, #4
 800243c:	4619      	mov	r1, r3
 800243e:	4610      	mov	r0, r2
 8002440:	f000 fb48 	bl	8002ad4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2201      	movs	r2, #1
 8002448:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2201      	movs	r2, #1
 8002450:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2201      	movs	r2, #1
 8002458:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2201      	movs	r2, #1
 8002460:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2201      	movs	r2, #1
 8002468:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2201      	movs	r2, #1
 8002470:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2201      	movs	r2, #1
 8002478:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2201      	movs	r2, #1
 8002480:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2201      	movs	r2, #1
 8002488:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2201      	movs	r2, #1
 8002490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002494:	2300      	movs	r3, #0
}
 8002496:	4618      	mov	r0, r3
 8002498:	3708      	adds	r7, #8
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}

0800249e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800249e:	b580      	push	{r7, lr}
 80024a0:	b082      	sub	sp, #8
 80024a2:	af00      	add	r7, sp, #0
 80024a4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d101      	bne.n	80024b0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80024ac:	2301      	movs	r3, #1
 80024ae:	e041      	b.n	8002534 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024b6:	b2db      	uxtb	r3, r3
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d106      	bne.n	80024ca <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2200      	movs	r2, #0
 80024c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80024c4:	6878      	ldr	r0, [r7, #4]
 80024c6:	f000 f839 	bl	800253c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2202      	movs	r2, #2
 80024ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681a      	ldr	r2, [r3, #0]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	3304      	adds	r3, #4
 80024da:	4619      	mov	r1, r3
 80024dc:	4610      	mov	r0, r2
 80024de:	f000 faf9 	bl	8002ad4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2201      	movs	r2, #1
 80024e6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2201      	movs	r2, #1
 80024ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2201      	movs	r2, #1
 80024f6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2201      	movs	r2, #1
 80024fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2201      	movs	r2, #1
 8002506:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2201      	movs	r2, #1
 800250e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2201      	movs	r2, #1
 8002516:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2201      	movs	r2, #1
 800251e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2201      	movs	r2, #1
 8002526:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2201      	movs	r2, #1
 800252e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002532:	2300      	movs	r3, #0
}
 8002534:	4618      	mov	r0, r3
 8002536:	3708      	adds	r7, #8
 8002538:	46bd      	mov	sp, r7
 800253a:	bd80      	pop	{r7, pc}

0800253c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800253c:	b480      	push	{r7}
 800253e:	b083      	sub	sp, #12
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002544:	bf00      	nop
 8002546:	370c      	adds	r7, #12
 8002548:	46bd      	mov	sp, r7
 800254a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254e:	4770      	bx	lr

08002550 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b084      	sub	sp, #16
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
 8002558:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d109      	bne.n	8002574 <HAL_TIM_PWM_Start+0x24>
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002566:	b2db      	uxtb	r3, r3
 8002568:	2b01      	cmp	r3, #1
 800256a:	bf14      	ite	ne
 800256c:	2301      	movne	r3, #1
 800256e:	2300      	moveq	r3, #0
 8002570:	b2db      	uxtb	r3, r3
 8002572:	e022      	b.n	80025ba <HAL_TIM_PWM_Start+0x6a>
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	2b04      	cmp	r3, #4
 8002578:	d109      	bne.n	800258e <HAL_TIM_PWM_Start+0x3e>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002580:	b2db      	uxtb	r3, r3
 8002582:	2b01      	cmp	r3, #1
 8002584:	bf14      	ite	ne
 8002586:	2301      	movne	r3, #1
 8002588:	2300      	moveq	r3, #0
 800258a:	b2db      	uxtb	r3, r3
 800258c:	e015      	b.n	80025ba <HAL_TIM_PWM_Start+0x6a>
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	2b08      	cmp	r3, #8
 8002592:	d109      	bne.n	80025a8 <HAL_TIM_PWM_Start+0x58>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800259a:	b2db      	uxtb	r3, r3
 800259c:	2b01      	cmp	r3, #1
 800259e:	bf14      	ite	ne
 80025a0:	2301      	movne	r3, #1
 80025a2:	2300      	moveq	r3, #0
 80025a4:	b2db      	uxtb	r3, r3
 80025a6:	e008      	b.n	80025ba <HAL_TIM_PWM_Start+0x6a>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80025ae:	b2db      	uxtb	r3, r3
 80025b0:	2b01      	cmp	r3, #1
 80025b2:	bf14      	ite	ne
 80025b4:	2301      	movne	r3, #1
 80025b6:	2300      	moveq	r3, #0
 80025b8:	b2db      	uxtb	r3, r3
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d001      	beq.n	80025c2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80025be:	2301      	movs	r3, #1
 80025c0:	e07c      	b.n	80026bc <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d104      	bne.n	80025d2 <HAL_TIM_PWM_Start+0x82>
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2202      	movs	r2, #2
 80025cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80025d0:	e013      	b.n	80025fa <HAL_TIM_PWM_Start+0xaa>
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	2b04      	cmp	r3, #4
 80025d6:	d104      	bne.n	80025e2 <HAL_TIM_PWM_Start+0x92>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2202      	movs	r2, #2
 80025dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80025e0:	e00b      	b.n	80025fa <HAL_TIM_PWM_Start+0xaa>
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	2b08      	cmp	r3, #8
 80025e6:	d104      	bne.n	80025f2 <HAL_TIM_PWM_Start+0xa2>
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2202      	movs	r2, #2
 80025ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80025f0:	e003      	b.n	80025fa <HAL_TIM_PWM_Start+0xaa>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2202      	movs	r2, #2
 80025f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	2201      	movs	r2, #1
 8002600:	6839      	ldr	r1, [r7, #0]
 8002602:	4618      	mov	r0, r3
 8002604:	f000 fd50 	bl	80030a8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a2d      	ldr	r2, [pc, #180]	; (80026c4 <HAL_TIM_PWM_Start+0x174>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d004      	beq.n	800261c <HAL_TIM_PWM_Start+0xcc>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4a2c      	ldr	r2, [pc, #176]	; (80026c8 <HAL_TIM_PWM_Start+0x178>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d101      	bne.n	8002620 <HAL_TIM_PWM_Start+0xd0>
 800261c:	2301      	movs	r3, #1
 800261e:	e000      	b.n	8002622 <HAL_TIM_PWM_Start+0xd2>
 8002620:	2300      	movs	r3, #0
 8002622:	2b00      	cmp	r3, #0
 8002624:	d007      	beq.n	8002636 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002634:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a22      	ldr	r2, [pc, #136]	; (80026c4 <HAL_TIM_PWM_Start+0x174>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d022      	beq.n	8002686 <HAL_TIM_PWM_Start+0x136>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002648:	d01d      	beq.n	8002686 <HAL_TIM_PWM_Start+0x136>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a1f      	ldr	r2, [pc, #124]	; (80026cc <HAL_TIM_PWM_Start+0x17c>)
 8002650:	4293      	cmp	r3, r2
 8002652:	d018      	beq.n	8002686 <HAL_TIM_PWM_Start+0x136>
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a1d      	ldr	r2, [pc, #116]	; (80026d0 <HAL_TIM_PWM_Start+0x180>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d013      	beq.n	8002686 <HAL_TIM_PWM_Start+0x136>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a1c      	ldr	r2, [pc, #112]	; (80026d4 <HAL_TIM_PWM_Start+0x184>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d00e      	beq.n	8002686 <HAL_TIM_PWM_Start+0x136>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a16      	ldr	r2, [pc, #88]	; (80026c8 <HAL_TIM_PWM_Start+0x178>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d009      	beq.n	8002686 <HAL_TIM_PWM_Start+0x136>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4a18      	ldr	r2, [pc, #96]	; (80026d8 <HAL_TIM_PWM_Start+0x188>)
 8002678:	4293      	cmp	r3, r2
 800267a:	d004      	beq.n	8002686 <HAL_TIM_PWM_Start+0x136>
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a16      	ldr	r2, [pc, #88]	; (80026dc <HAL_TIM_PWM_Start+0x18c>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d111      	bne.n	80026aa <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	689b      	ldr	r3, [r3, #8]
 800268c:	f003 0307 	and.w	r3, r3, #7
 8002690:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	2b06      	cmp	r3, #6
 8002696:	d010      	beq.n	80026ba <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	681a      	ldr	r2, [r3, #0]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f042 0201 	orr.w	r2, r2, #1
 80026a6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026a8:	e007      	b.n	80026ba <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	681a      	ldr	r2, [r3, #0]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f042 0201 	orr.w	r2, r2, #1
 80026b8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80026ba:	2300      	movs	r3, #0
}
 80026bc:	4618      	mov	r0, r3
 80026be:	3710      	adds	r7, #16
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}
 80026c4:	40010000 	.word	0x40010000
 80026c8:	40010400 	.word	0x40010400
 80026cc:	40000400 	.word	0x40000400
 80026d0:	40000800 	.word	0x40000800
 80026d4:	40000c00 	.word	0x40000c00
 80026d8:	40014000 	.word	0x40014000
 80026dc:	40001800 	.word	0x40001800

080026e0 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b082      	sub	sp, #8
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
 80026e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	2200      	movs	r2, #0
 80026f0:	6839      	ldr	r1, [r7, #0]
 80026f2:	4618      	mov	r0, r3
 80026f4:	f000 fcd8 	bl	80030a8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a2e      	ldr	r2, [pc, #184]	; (80027b8 <HAL_TIM_PWM_Stop+0xd8>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d004      	beq.n	800270c <HAL_TIM_PWM_Stop+0x2c>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4a2d      	ldr	r2, [pc, #180]	; (80027bc <HAL_TIM_PWM_Stop+0xdc>)
 8002708:	4293      	cmp	r3, r2
 800270a:	d101      	bne.n	8002710 <HAL_TIM_PWM_Stop+0x30>
 800270c:	2301      	movs	r3, #1
 800270e:	e000      	b.n	8002712 <HAL_TIM_PWM_Stop+0x32>
 8002710:	2300      	movs	r3, #0
 8002712:	2b00      	cmp	r3, #0
 8002714:	d017      	beq.n	8002746 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	6a1a      	ldr	r2, [r3, #32]
 800271c:	f241 1311 	movw	r3, #4369	; 0x1111
 8002720:	4013      	ands	r3, r2
 8002722:	2b00      	cmp	r3, #0
 8002724:	d10f      	bne.n	8002746 <HAL_TIM_PWM_Stop+0x66>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	6a1a      	ldr	r2, [r3, #32]
 800272c:	f240 4344 	movw	r3, #1092	; 0x444
 8002730:	4013      	ands	r3, r2
 8002732:	2b00      	cmp	r3, #0
 8002734:	d107      	bne.n	8002746 <HAL_TIM_PWM_Stop+0x66>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002744:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	6a1a      	ldr	r2, [r3, #32]
 800274c:	f241 1311 	movw	r3, #4369	; 0x1111
 8002750:	4013      	ands	r3, r2
 8002752:	2b00      	cmp	r3, #0
 8002754:	d10f      	bne.n	8002776 <HAL_TIM_PWM_Stop+0x96>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	6a1a      	ldr	r2, [r3, #32]
 800275c:	f240 4344 	movw	r3, #1092	; 0x444
 8002760:	4013      	ands	r3, r2
 8002762:	2b00      	cmp	r3, #0
 8002764:	d107      	bne.n	8002776 <HAL_TIM_PWM_Stop+0x96>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	681a      	ldr	r2, [r3, #0]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f022 0201 	bic.w	r2, r2, #1
 8002774:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d104      	bne.n	8002786 <HAL_TIM_PWM_Stop+0xa6>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2201      	movs	r2, #1
 8002780:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002784:	e013      	b.n	80027ae <HAL_TIM_PWM_Stop+0xce>
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	2b04      	cmp	r3, #4
 800278a:	d104      	bne.n	8002796 <HAL_TIM_PWM_Stop+0xb6>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2201      	movs	r2, #1
 8002790:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002794:	e00b      	b.n	80027ae <HAL_TIM_PWM_Stop+0xce>
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	2b08      	cmp	r3, #8
 800279a:	d104      	bne.n	80027a6 <HAL_TIM_PWM_Stop+0xc6>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2201      	movs	r2, #1
 80027a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80027a4:	e003      	b.n	80027ae <HAL_TIM_PWM_Stop+0xce>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2201      	movs	r2, #1
 80027aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 80027ae:	2300      	movs	r3, #0
}
 80027b0:	4618      	mov	r0, r3
 80027b2:	3708      	adds	r7, #8
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bd80      	pop	{r7, pc}
 80027b8:	40010000 	.word	0x40010000
 80027bc:	40010400 	.word	0x40010400

080027c0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b086      	sub	sp, #24
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	60f8      	str	r0, [r7, #12]
 80027c8:	60b9      	str	r1, [r7, #8]
 80027ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80027cc:	2300      	movs	r3, #0
 80027ce:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027d6:	2b01      	cmp	r3, #1
 80027d8:	d101      	bne.n	80027de <HAL_TIM_PWM_ConfigChannel+0x1e>
 80027da:	2302      	movs	r3, #2
 80027dc:	e0ae      	b.n	800293c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	2201      	movs	r2, #1
 80027e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2b0c      	cmp	r3, #12
 80027ea:	f200 809f 	bhi.w	800292c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80027ee:	a201      	add	r2, pc, #4	; (adr r2, 80027f4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80027f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027f4:	08002829 	.word	0x08002829
 80027f8:	0800292d 	.word	0x0800292d
 80027fc:	0800292d 	.word	0x0800292d
 8002800:	0800292d 	.word	0x0800292d
 8002804:	08002869 	.word	0x08002869
 8002808:	0800292d 	.word	0x0800292d
 800280c:	0800292d 	.word	0x0800292d
 8002810:	0800292d 	.word	0x0800292d
 8002814:	080028ab 	.word	0x080028ab
 8002818:	0800292d 	.word	0x0800292d
 800281c:	0800292d 	.word	0x0800292d
 8002820:	0800292d 	.word	0x0800292d
 8002824:	080028eb 	.word	0x080028eb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	68b9      	ldr	r1, [r7, #8]
 800282e:	4618      	mov	r0, r3
 8002830:	f000 f9f0 	bl	8002c14 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	699a      	ldr	r2, [r3, #24]
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f042 0208 	orr.w	r2, r2, #8
 8002842:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	699a      	ldr	r2, [r3, #24]
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f022 0204 	bic.w	r2, r2, #4
 8002852:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	6999      	ldr	r1, [r3, #24]
 800285a:	68bb      	ldr	r3, [r7, #8]
 800285c:	691a      	ldr	r2, [r3, #16]
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	430a      	orrs	r2, r1
 8002864:	619a      	str	r2, [r3, #24]
      break;
 8002866:	e064      	b.n	8002932 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	68b9      	ldr	r1, [r7, #8]
 800286e:	4618      	mov	r0, r3
 8002870:	f000 fa40 	bl	8002cf4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	699a      	ldr	r2, [r3, #24]
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002882:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	699a      	ldr	r2, [r3, #24]
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002892:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	6999      	ldr	r1, [r3, #24]
 800289a:	68bb      	ldr	r3, [r7, #8]
 800289c:	691b      	ldr	r3, [r3, #16]
 800289e:	021a      	lsls	r2, r3, #8
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	430a      	orrs	r2, r1
 80028a6:	619a      	str	r2, [r3, #24]
      break;
 80028a8:	e043      	b.n	8002932 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	68b9      	ldr	r1, [r7, #8]
 80028b0:	4618      	mov	r0, r3
 80028b2:	f000 fa95 	bl	8002de0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	69da      	ldr	r2, [r3, #28]
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f042 0208 	orr.w	r2, r2, #8
 80028c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	69da      	ldr	r2, [r3, #28]
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f022 0204 	bic.w	r2, r2, #4
 80028d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	69d9      	ldr	r1, [r3, #28]
 80028dc:	68bb      	ldr	r3, [r7, #8]
 80028de:	691a      	ldr	r2, [r3, #16]
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	430a      	orrs	r2, r1
 80028e6:	61da      	str	r2, [r3, #28]
      break;
 80028e8:	e023      	b.n	8002932 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	68b9      	ldr	r1, [r7, #8]
 80028f0:	4618      	mov	r0, r3
 80028f2:	f000 fae9 	bl	8002ec8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	69da      	ldr	r2, [r3, #28]
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002904:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	69da      	ldr	r2, [r3, #28]
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002914:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	69d9      	ldr	r1, [r3, #28]
 800291c:	68bb      	ldr	r3, [r7, #8]
 800291e:	691b      	ldr	r3, [r3, #16]
 8002920:	021a      	lsls	r2, r3, #8
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	430a      	orrs	r2, r1
 8002928:	61da      	str	r2, [r3, #28]
      break;
 800292a:	e002      	b.n	8002932 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800292c:	2301      	movs	r3, #1
 800292e:	75fb      	strb	r3, [r7, #23]
      break;
 8002930:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	2200      	movs	r2, #0
 8002936:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800293a:	7dfb      	ldrb	r3, [r7, #23]
}
 800293c:	4618      	mov	r0, r3
 800293e:	3718      	adds	r7, #24
 8002940:	46bd      	mov	sp, r7
 8002942:	bd80      	pop	{r7, pc}

08002944 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b084      	sub	sp, #16
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
 800294c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800294e:	2300      	movs	r3, #0
 8002950:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002958:	2b01      	cmp	r3, #1
 800295a:	d101      	bne.n	8002960 <HAL_TIM_ConfigClockSource+0x1c>
 800295c:	2302      	movs	r3, #2
 800295e:	e0b4      	b.n	8002aca <HAL_TIM_ConfigClockSource+0x186>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2201      	movs	r2, #1
 8002964:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2202      	movs	r2, #2
 800296c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	689b      	ldr	r3, [r3, #8]
 8002976:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800297e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002986:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	68ba      	ldr	r2, [r7, #8]
 800298e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002998:	d03e      	beq.n	8002a18 <HAL_TIM_ConfigClockSource+0xd4>
 800299a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800299e:	f200 8087 	bhi.w	8002ab0 <HAL_TIM_ConfigClockSource+0x16c>
 80029a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029a6:	f000 8086 	beq.w	8002ab6 <HAL_TIM_ConfigClockSource+0x172>
 80029aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029ae:	d87f      	bhi.n	8002ab0 <HAL_TIM_ConfigClockSource+0x16c>
 80029b0:	2b70      	cmp	r3, #112	; 0x70
 80029b2:	d01a      	beq.n	80029ea <HAL_TIM_ConfigClockSource+0xa6>
 80029b4:	2b70      	cmp	r3, #112	; 0x70
 80029b6:	d87b      	bhi.n	8002ab0 <HAL_TIM_ConfigClockSource+0x16c>
 80029b8:	2b60      	cmp	r3, #96	; 0x60
 80029ba:	d050      	beq.n	8002a5e <HAL_TIM_ConfigClockSource+0x11a>
 80029bc:	2b60      	cmp	r3, #96	; 0x60
 80029be:	d877      	bhi.n	8002ab0 <HAL_TIM_ConfigClockSource+0x16c>
 80029c0:	2b50      	cmp	r3, #80	; 0x50
 80029c2:	d03c      	beq.n	8002a3e <HAL_TIM_ConfigClockSource+0xfa>
 80029c4:	2b50      	cmp	r3, #80	; 0x50
 80029c6:	d873      	bhi.n	8002ab0 <HAL_TIM_ConfigClockSource+0x16c>
 80029c8:	2b40      	cmp	r3, #64	; 0x40
 80029ca:	d058      	beq.n	8002a7e <HAL_TIM_ConfigClockSource+0x13a>
 80029cc:	2b40      	cmp	r3, #64	; 0x40
 80029ce:	d86f      	bhi.n	8002ab0 <HAL_TIM_ConfigClockSource+0x16c>
 80029d0:	2b30      	cmp	r3, #48	; 0x30
 80029d2:	d064      	beq.n	8002a9e <HAL_TIM_ConfigClockSource+0x15a>
 80029d4:	2b30      	cmp	r3, #48	; 0x30
 80029d6:	d86b      	bhi.n	8002ab0 <HAL_TIM_ConfigClockSource+0x16c>
 80029d8:	2b20      	cmp	r3, #32
 80029da:	d060      	beq.n	8002a9e <HAL_TIM_ConfigClockSource+0x15a>
 80029dc:	2b20      	cmp	r3, #32
 80029de:	d867      	bhi.n	8002ab0 <HAL_TIM_ConfigClockSource+0x16c>
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d05c      	beq.n	8002a9e <HAL_TIM_ConfigClockSource+0x15a>
 80029e4:	2b10      	cmp	r3, #16
 80029e6:	d05a      	beq.n	8002a9e <HAL_TIM_ConfigClockSource+0x15a>
 80029e8:	e062      	b.n	8002ab0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6818      	ldr	r0, [r3, #0]
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	6899      	ldr	r1, [r3, #8]
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	685a      	ldr	r2, [r3, #4]
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	68db      	ldr	r3, [r3, #12]
 80029fa:	f000 fb35 	bl	8003068 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	689b      	ldr	r3, [r3, #8]
 8002a04:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002a06:	68bb      	ldr	r3, [r7, #8]
 8002a08:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002a0c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	68ba      	ldr	r2, [r7, #8]
 8002a14:	609a      	str	r2, [r3, #8]
      break;
 8002a16:	e04f      	b.n	8002ab8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6818      	ldr	r0, [r3, #0]
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	6899      	ldr	r1, [r3, #8]
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	685a      	ldr	r2, [r3, #4]
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	68db      	ldr	r3, [r3, #12]
 8002a28:	f000 fb1e 	bl	8003068 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	689a      	ldr	r2, [r3, #8]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002a3a:	609a      	str	r2, [r3, #8]
      break;
 8002a3c:	e03c      	b.n	8002ab8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6818      	ldr	r0, [r3, #0]
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	6859      	ldr	r1, [r3, #4]
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	68db      	ldr	r3, [r3, #12]
 8002a4a:	461a      	mov	r2, r3
 8002a4c:	f000 fa92 	bl	8002f74 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	2150      	movs	r1, #80	; 0x50
 8002a56:	4618      	mov	r0, r3
 8002a58:	f000 faeb 	bl	8003032 <TIM_ITRx_SetConfig>
      break;
 8002a5c:	e02c      	b.n	8002ab8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6818      	ldr	r0, [r3, #0]
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	6859      	ldr	r1, [r3, #4]
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	68db      	ldr	r3, [r3, #12]
 8002a6a:	461a      	mov	r2, r3
 8002a6c:	f000 fab1 	bl	8002fd2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	2160      	movs	r1, #96	; 0x60
 8002a76:	4618      	mov	r0, r3
 8002a78:	f000 fadb 	bl	8003032 <TIM_ITRx_SetConfig>
      break;
 8002a7c:	e01c      	b.n	8002ab8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6818      	ldr	r0, [r3, #0]
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	6859      	ldr	r1, [r3, #4]
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	68db      	ldr	r3, [r3, #12]
 8002a8a:	461a      	mov	r2, r3
 8002a8c:	f000 fa72 	bl	8002f74 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	2140      	movs	r1, #64	; 0x40
 8002a96:	4618      	mov	r0, r3
 8002a98:	f000 facb 	bl	8003032 <TIM_ITRx_SetConfig>
      break;
 8002a9c:	e00c      	b.n	8002ab8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681a      	ldr	r2, [r3, #0]
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4619      	mov	r1, r3
 8002aa8:	4610      	mov	r0, r2
 8002aaa:	f000 fac2 	bl	8003032 <TIM_ITRx_SetConfig>
      break;
 8002aae:	e003      	b.n	8002ab8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	73fb      	strb	r3, [r7, #15]
      break;
 8002ab4:	e000      	b.n	8002ab8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002ab6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2201      	movs	r2, #1
 8002abc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002ac8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	3710      	adds	r7, #16
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}
	...

08002ad4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b085      	sub	sp, #20
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
 8002adc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	4a40      	ldr	r2, [pc, #256]	; (8002be8 <TIM_Base_SetConfig+0x114>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d013      	beq.n	8002b14 <TIM_Base_SetConfig+0x40>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002af2:	d00f      	beq.n	8002b14 <TIM_Base_SetConfig+0x40>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	4a3d      	ldr	r2, [pc, #244]	; (8002bec <TIM_Base_SetConfig+0x118>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d00b      	beq.n	8002b14 <TIM_Base_SetConfig+0x40>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	4a3c      	ldr	r2, [pc, #240]	; (8002bf0 <TIM_Base_SetConfig+0x11c>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d007      	beq.n	8002b14 <TIM_Base_SetConfig+0x40>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	4a3b      	ldr	r2, [pc, #236]	; (8002bf4 <TIM_Base_SetConfig+0x120>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d003      	beq.n	8002b14 <TIM_Base_SetConfig+0x40>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	4a3a      	ldr	r2, [pc, #232]	; (8002bf8 <TIM_Base_SetConfig+0x124>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d108      	bne.n	8002b26 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b1a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	68fa      	ldr	r2, [r7, #12]
 8002b22:	4313      	orrs	r3, r2
 8002b24:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	4a2f      	ldr	r2, [pc, #188]	; (8002be8 <TIM_Base_SetConfig+0x114>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d02b      	beq.n	8002b86 <TIM_Base_SetConfig+0xb2>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b34:	d027      	beq.n	8002b86 <TIM_Base_SetConfig+0xb2>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	4a2c      	ldr	r2, [pc, #176]	; (8002bec <TIM_Base_SetConfig+0x118>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d023      	beq.n	8002b86 <TIM_Base_SetConfig+0xb2>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	4a2b      	ldr	r2, [pc, #172]	; (8002bf0 <TIM_Base_SetConfig+0x11c>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d01f      	beq.n	8002b86 <TIM_Base_SetConfig+0xb2>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	4a2a      	ldr	r2, [pc, #168]	; (8002bf4 <TIM_Base_SetConfig+0x120>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d01b      	beq.n	8002b86 <TIM_Base_SetConfig+0xb2>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	4a29      	ldr	r2, [pc, #164]	; (8002bf8 <TIM_Base_SetConfig+0x124>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d017      	beq.n	8002b86 <TIM_Base_SetConfig+0xb2>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	4a28      	ldr	r2, [pc, #160]	; (8002bfc <TIM_Base_SetConfig+0x128>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d013      	beq.n	8002b86 <TIM_Base_SetConfig+0xb2>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	4a27      	ldr	r2, [pc, #156]	; (8002c00 <TIM_Base_SetConfig+0x12c>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d00f      	beq.n	8002b86 <TIM_Base_SetConfig+0xb2>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	4a26      	ldr	r2, [pc, #152]	; (8002c04 <TIM_Base_SetConfig+0x130>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d00b      	beq.n	8002b86 <TIM_Base_SetConfig+0xb2>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	4a25      	ldr	r2, [pc, #148]	; (8002c08 <TIM_Base_SetConfig+0x134>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d007      	beq.n	8002b86 <TIM_Base_SetConfig+0xb2>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	4a24      	ldr	r2, [pc, #144]	; (8002c0c <TIM_Base_SetConfig+0x138>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d003      	beq.n	8002b86 <TIM_Base_SetConfig+0xb2>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	4a23      	ldr	r2, [pc, #140]	; (8002c10 <TIM_Base_SetConfig+0x13c>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d108      	bne.n	8002b98 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	68db      	ldr	r3, [r3, #12]
 8002b92:	68fa      	ldr	r2, [r7, #12]
 8002b94:	4313      	orrs	r3, r2
 8002b96:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	695b      	ldr	r3, [r3, #20]
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	68fa      	ldr	r2, [r7, #12]
 8002baa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	689a      	ldr	r2, [r3, #8]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	681a      	ldr	r2, [r3, #0]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	4a0a      	ldr	r2, [pc, #40]	; (8002be8 <TIM_Base_SetConfig+0x114>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d003      	beq.n	8002bcc <TIM_Base_SetConfig+0xf8>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	4a0c      	ldr	r2, [pc, #48]	; (8002bf8 <TIM_Base_SetConfig+0x124>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d103      	bne.n	8002bd4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	691a      	ldr	r2, [r3, #16]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	615a      	str	r2, [r3, #20]
}
 8002bda:	bf00      	nop
 8002bdc:	3714      	adds	r7, #20
 8002bde:	46bd      	mov	sp, r7
 8002be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be4:	4770      	bx	lr
 8002be6:	bf00      	nop
 8002be8:	40010000 	.word	0x40010000
 8002bec:	40000400 	.word	0x40000400
 8002bf0:	40000800 	.word	0x40000800
 8002bf4:	40000c00 	.word	0x40000c00
 8002bf8:	40010400 	.word	0x40010400
 8002bfc:	40014000 	.word	0x40014000
 8002c00:	40014400 	.word	0x40014400
 8002c04:	40014800 	.word	0x40014800
 8002c08:	40001800 	.word	0x40001800
 8002c0c:	40001c00 	.word	0x40001c00
 8002c10:	40002000 	.word	0x40002000

08002c14 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b087      	sub	sp, #28
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
 8002c1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6a1b      	ldr	r3, [r3, #32]
 8002c22:	f023 0201 	bic.w	r2, r3, #1
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6a1b      	ldr	r3, [r3, #32]
 8002c2e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	699b      	ldr	r3, [r3, #24]
 8002c3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	f023 0303 	bic.w	r3, r3, #3
 8002c4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	68fa      	ldr	r2, [r7, #12]
 8002c52:	4313      	orrs	r3, r2
 8002c54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002c56:	697b      	ldr	r3, [r7, #20]
 8002c58:	f023 0302 	bic.w	r3, r3, #2
 8002c5c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	689b      	ldr	r3, [r3, #8]
 8002c62:	697a      	ldr	r2, [r7, #20]
 8002c64:	4313      	orrs	r3, r2
 8002c66:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	4a20      	ldr	r2, [pc, #128]	; (8002cec <TIM_OC1_SetConfig+0xd8>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d003      	beq.n	8002c78 <TIM_OC1_SetConfig+0x64>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	4a1f      	ldr	r2, [pc, #124]	; (8002cf0 <TIM_OC1_SetConfig+0xdc>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d10c      	bne.n	8002c92 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002c78:	697b      	ldr	r3, [r7, #20]
 8002c7a:	f023 0308 	bic.w	r3, r3, #8
 8002c7e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	68db      	ldr	r3, [r3, #12]
 8002c84:	697a      	ldr	r2, [r7, #20]
 8002c86:	4313      	orrs	r3, r2
 8002c88:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002c8a:	697b      	ldr	r3, [r7, #20]
 8002c8c:	f023 0304 	bic.w	r3, r3, #4
 8002c90:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	4a15      	ldr	r2, [pc, #84]	; (8002cec <TIM_OC1_SetConfig+0xd8>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d003      	beq.n	8002ca2 <TIM_OC1_SetConfig+0x8e>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	4a14      	ldr	r2, [pc, #80]	; (8002cf0 <TIM_OC1_SetConfig+0xdc>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d111      	bne.n	8002cc6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002ca2:	693b      	ldr	r3, [r7, #16]
 8002ca4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ca8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002caa:	693b      	ldr	r3, [r7, #16]
 8002cac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002cb0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	695b      	ldr	r3, [r3, #20]
 8002cb6:	693a      	ldr	r2, [r7, #16]
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	699b      	ldr	r3, [r3, #24]
 8002cc0:	693a      	ldr	r2, [r7, #16]
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	693a      	ldr	r2, [r7, #16]
 8002cca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	68fa      	ldr	r2, [r7, #12]
 8002cd0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	685a      	ldr	r2, [r3, #4]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	697a      	ldr	r2, [r7, #20]
 8002cde:	621a      	str	r2, [r3, #32]
}
 8002ce0:	bf00      	nop
 8002ce2:	371c      	adds	r7, #28
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cea:	4770      	bx	lr
 8002cec:	40010000 	.word	0x40010000
 8002cf0:	40010400 	.word	0x40010400

08002cf4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b087      	sub	sp, #28
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
 8002cfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6a1b      	ldr	r3, [r3, #32]
 8002d02:	f023 0210 	bic.w	r2, r3, #16
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6a1b      	ldr	r3, [r3, #32]
 8002d0e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	699b      	ldr	r3, [r3, #24]
 8002d1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d2a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	021b      	lsls	r3, r3, #8
 8002d32:	68fa      	ldr	r2, [r7, #12]
 8002d34:	4313      	orrs	r3, r2
 8002d36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002d38:	697b      	ldr	r3, [r7, #20]
 8002d3a:	f023 0320 	bic.w	r3, r3, #32
 8002d3e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	689b      	ldr	r3, [r3, #8]
 8002d44:	011b      	lsls	r3, r3, #4
 8002d46:	697a      	ldr	r2, [r7, #20]
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	4a22      	ldr	r2, [pc, #136]	; (8002dd8 <TIM_OC2_SetConfig+0xe4>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d003      	beq.n	8002d5c <TIM_OC2_SetConfig+0x68>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	4a21      	ldr	r2, [pc, #132]	; (8002ddc <TIM_OC2_SetConfig+0xe8>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d10d      	bne.n	8002d78 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002d5c:	697b      	ldr	r3, [r7, #20]
 8002d5e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002d62:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	68db      	ldr	r3, [r3, #12]
 8002d68:	011b      	lsls	r3, r3, #4
 8002d6a:	697a      	ldr	r2, [r7, #20]
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d76:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	4a17      	ldr	r2, [pc, #92]	; (8002dd8 <TIM_OC2_SetConfig+0xe4>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d003      	beq.n	8002d88 <TIM_OC2_SetConfig+0x94>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	4a16      	ldr	r2, [pc, #88]	; (8002ddc <TIM_OC2_SetConfig+0xe8>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d113      	bne.n	8002db0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002d88:	693b      	ldr	r3, [r7, #16]
 8002d8a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002d8e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002d96:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	695b      	ldr	r3, [r3, #20]
 8002d9c:	009b      	lsls	r3, r3, #2
 8002d9e:	693a      	ldr	r2, [r7, #16]
 8002da0:	4313      	orrs	r3, r2
 8002da2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	699b      	ldr	r3, [r3, #24]
 8002da8:	009b      	lsls	r3, r3, #2
 8002daa:	693a      	ldr	r2, [r7, #16]
 8002dac:	4313      	orrs	r3, r2
 8002dae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	693a      	ldr	r2, [r7, #16]
 8002db4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	68fa      	ldr	r2, [r7, #12]
 8002dba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	685a      	ldr	r2, [r3, #4]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	697a      	ldr	r2, [r7, #20]
 8002dc8:	621a      	str	r2, [r3, #32]
}
 8002dca:	bf00      	nop
 8002dcc:	371c      	adds	r7, #28
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd4:	4770      	bx	lr
 8002dd6:	bf00      	nop
 8002dd8:	40010000 	.word	0x40010000
 8002ddc:	40010400 	.word	0x40010400

08002de0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002de0:	b480      	push	{r7}
 8002de2:	b087      	sub	sp, #28
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
 8002de8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6a1b      	ldr	r3, [r3, #32]
 8002dee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6a1b      	ldr	r3, [r3, #32]
 8002dfa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	69db      	ldr	r3, [r3, #28]
 8002e06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	f023 0303 	bic.w	r3, r3, #3
 8002e16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	68fa      	ldr	r2, [r7, #12]
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002e22:	697b      	ldr	r3, [r7, #20]
 8002e24:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002e28:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	689b      	ldr	r3, [r3, #8]
 8002e2e:	021b      	lsls	r3, r3, #8
 8002e30:	697a      	ldr	r2, [r7, #20]
 8002e32:	4313      	orrs	r3, r2
 8002e34:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	4a21      	ldr	r2, [pc, #132]	; (8002ec0 <TIM_OC3_SetConfig+0xe0>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d003      	beq.n	8002e46 <TIM_OC3_SetConfig+0x66>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	4a20      	ldr	r2, [pc, #128]	; (8002ec4 <TIM_OC3_SetConfig+0xe4>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d10d      	bne.n	8002e62 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002e4c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	68db      	ldr	r3, [r3, #12]
 8002e52:	021b      	lsls	r3, r3, #8
 8002e54:	697a      	ldr	r2, [r7, #20]
 8002e56:	4313      	orrs	r3, r2
 8002e58:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002e5a:	697b      	ldr	r3, [r7, #20]
 8002e5c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002e60:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	4a16      	ldr	r2, [pc, #88]	; (8002ec0 <TIM_OC3_SetConfig+0xe0>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d003      	beq.n	8002e72 <TIM_OC3_SetConfig+0x92>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	4a15      	ldr	r2, [pc, #84]	; (8002ec4 <TIM_OC3_SetConfig+0xe4>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d113      	bne.n	8002e9a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002e78:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002e7a:	693b      	ldr	r3, [r7, #16]
 8002e7c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002e80:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	695b      	ldr	r3, [r3, #20]
 8002e86:	011b      	lsls	r3, r3, #4
 8002e88:	693a      	ldr	r2, [r7, #16]
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	699b      	ldr	r3, [r3, #24]
 8002e92:	011b      	lsls	r3, r3, #4
 8002e94:	693a      	ldr	r2, [r7, #16]
 8002e96:	4313      	orrs	r3, r2
 8002e98:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	693a      	ldr	r2, [r7, #16]
 8002e9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	68fa      	ldr	r2, [r7, #12]
 8002ea4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	685a      	ldr	r2, [r3, #4]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	697a      	ldr	r2, [r7, #20]
 8002eb2:	621a      	str	r2, [r3, #32]
}
 8002eb4:	bf00      	nop
 8002eb6:	371c      	adds	r7, #28
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebe:	4770      	bx	lr
 8002ec0:	40010000 	.word	0x40010000
 8002ec4:	40010400 	.word	0x40010400

08002ec8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b087      	sub	sp, #28
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
 8002ed0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6a1b      	ldr	r3, [r3, #32]
 8002ed6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6a1b      	ldr	r3, [r3, #32]
 8002ee2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	69db      	ldr	r3, [r3, #28]
 8002eee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ef6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002efe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	021b      	lsls	r3, r3, #8
 8002f06:	68fa      	ldr	r2, [r7, #12]
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002f0c:	693b      	ldr	r3, [r7, #16]
 8002f0e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002f12:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	689b      	ldr	r3, [r3, #8]
 8002f18:	031b      	lsls	r3, r3, #12
 8002f1a:	693a      	ldr	r2, [r7, #16]
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	4a12      	ldr	r2, [pc, #72]	; (8002f6c <TIM_OC4_SetConfig+0xa4>)
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d003      	beq.n	8002f30 <TIM_OC4_SetConfig+0x68>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	4a11      	ldr	r2, [pc, #68]	; (8002f70 <TIM_OC4_SetConfig+0xa8>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d109      	bne.n	8002f44 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002f36:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	695b      	ldr	r3, [r3, #20]
 8002f3c:	019b      	lsls	r3, r3, #6
 8002f3e:	697a      	ldr	r2, [r7, #20]
 8002f40:	4313      	orrs	r3, r2
 8002f42:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	697a      	ldr	r2, [r7, #20]
 8002f48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	68fa      	ldr	r2, [r7, #12]
 8002f4e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	685a      	ldr	r2, [r3, #4]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	693a      	ldr	r2, [r7, #16]
 8002f5c:	621a      	str	r2, [r3, #32]
}
 8002f5e:	bf00      	nop
 8002f60:	371c      	adds	r7, #28
 8002f62:	46bd      	mov	sp, r7
 8002f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f68:	4770      	bx	lr
 8002f6a:	bf00      	nop
 8002f6c:	40010000 	.word	0x40010000
 8002f70:	40010400 	.word	0x40010400

08002f74 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b087      	sub	sp, #28
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	60f8      	str	r0, [r7, #12]
 8002f7c:	60b9      	str	r1, [r7, #8]
 8002f7e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	6a1b      	ldr	r3, [r3, #32]
 8002f84:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	6a1b      	ldr	r3, [r3, #32]
 8002f8a:	f023 0201 	bic.w	r2, r3, #1
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	699b      	ldr	r3, [r3, #24]
 8002f96:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002f98:	693b      	ldr	r3, [r7, #16]
 8002f9a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002f9e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	011b      	lsls	r3, r3, #4
 8002fa4:	693a      	ldr	r2, [r7, #16]
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002faa:	697b      	ldr	r3, [r7, #20]
 8002fac:	f023 030a 	bic.w	r3, r3, #10
 8002fb0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002fb2:	697a      	ldr	r2, [r7, #20]
 8002fb4:	68bb      	ldr	r3, [r7, #8]
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	693a      	ldr	r2, [r7, #16]
 8002fbe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	697a      	ldr	r2, [r7, #20]
 8002fc4:	621a      	str	r2, [r3, #32]
}
 8002fc6:	bf00      	nop
 8002fc8:	371c      	adds	r7, #28
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd0:	4770      	bx	lr

08002fd2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002fd2:	b480      	push	{r7}
 8002fd4:	b087      	sub	sp, #28
 8002fd6:	af00      	add	r7, sp, #0
 8002fd8:	60f8      	str	r0, [r7, #12]
 8002fda:	60b9      	str	r1, [r7, #8]
 8002fdc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	6a1b      	ldr	r3, [r3, #32]
 8002fe2:	f023 0210 	bic.w	r2, r3, #16
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	699b      	ldr	r3, [r3, #24]
 8002fee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	6a1b      	ldr	r3, [r3, #32]
 8002ff4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002ff6:	697b      	ldr	r3, [r7, #20]
 8002ff8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002ffc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	031b      	lsls	r3, r3, #12
 8003002:	697a      	ldr	r2, [r7, #20]
 8003004:	4313      	orrs	r3, r2
 8003006:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800300e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003010:	68bb      	ldr	r3, [r7, #8]
 8003012:	011b      	lsls	r3, r3, #4
 8003014:	693a      	ldr	r2, [r7, #16]
 8003016:	4313      	orrs	r3, r2
 8003018:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	697a      	ldr	r2, [r7, #20]
 800301e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	693a      	ldr	r2, [r7, #16]
 8003024:	621a      	str	r2, [r3, #32]
}
 8003026:	bf00      	nop
 8003028:	371c      	adds	r7, #28
 800302a:	46bd      	mov	sp, r7
 800302c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003030:	4770      	bx	lr

08003032 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003032:	b480      	push	{r7}
 8003034:	b085      	sub	sp, #20
 8003036:	af00      	add	r7, sp, #0
 8003038:	6078      	str	r0, [r7, #4]
 800303a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	689b      	ldr	r3, [r3, #8]
 8003040:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003048:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800304a:	683a      	ldr	r2, [r7, #0]
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	4313      	orrs	r3, r2
 8003050:	f043 0307 	orr.w	r3, r3, #7
 8003054:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	68fa      	ldr	r2, [r7, #12]
 800305a:	609a      	str	r2, [r3, #8]
}
 800305c:	bf00      	nop
 800305e:	3714      	adds	r7, #20
 8003060:	46bd      	mov	sp, r7
 8003062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003066:	4770      	bx	lr

08003068 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003068:	b480      	push	{r7}
 800306a:	b087      	sub	sp, #28
 800306c:	af00      	add	r7, sp, #0
 800306e:	60f8      	str	r0, [r7, #12]
 8003070:	60b9      	str	r1, [r7, #8]
 8003072:	607a      	str	r2, [r7, #4]
 8003074:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	689b      	ldr	r3, [r3, #8]
 800307a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800307c:	697b      	ldr	r3, [r7, #20]
 800307e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003082:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	021a      	lsls	r2, r3, #8
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	431a      	orrs	r2, r3
 800308c:	68bb      	ldr	r3, [r7, #8]
 800308e:	4313      	orrs	r3, r2
 8003090:	697a      	ldr	r2, [r7, #20]
 8003092:	4313      	orrs	r3, r2
 8003094:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	697a      	ldr	r2, [r7, #20]
 800309a:	609a      	str	r2, [r3, #8]
}
 800309c:	bf00      	nop
 800309e:	371c      	adds	r7, #28
 80030a0:	46bd      	mov	sp, r7
 80030a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a6:	4770      	bx	lr

080030a8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80030a8:	b480      	push	{r7}
 80030aa:	b087      	sub	sp, #28
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	60f8      	str	r0, [r7, #12]
 80030b0:	60b9      	str	r1, [r7, #8]
 80030b2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	f003 031f 	and.w	r3, r3, #31
 80030ba:	2201      	movs	r2, #1
 80030bc:	fa02 f303 	lsl.w	r3, r2, r3
 80030c0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	6a1a      	ldr	r2, [r3, #32]
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	43db      	mvns	r3, r3
 80030ca:	401a      	ands	r2, r3
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	6a1a      	ldr	r2, [r3, #32]
 80030d4:	68bb      	ldr	r3, [r7, #8]
 80030d6:	f003 031f 	and.w	r3, r3, #31
 80030da:	6879      	ldr	r1, [r7, #4]
 80030dc:	fa01 f303 	lsl.w	r3, r1, r3
 80030e0:	431a      	orrs	r2, r3
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	621a      	str	r2, [r3, #32]
}
 80030e6:	bf00      	nop
 80030e8:	371c      	adds	r7, #28
 80030ea:	46bd      	mov	sp, r7
 80030ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f0:	4770      	bx	lr
	...

080030f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80030f4:	b480      	push	{r7}
 80030f6:	b085      	sub	sp, #20
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
 80030fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003104:	2b01      	cmp	r3, #1
 8003106:	d101      	bne.n	800310c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003108:	2302      	movs	r3, #2
 800310a:	e05a      	b.n	80031c2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2201      	movs	r2, #1
 8003110:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2202      	movs	r2, #2
 8003118:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	689b      	ldr	r3, [r3, #8]
 800312a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003132:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	68fa      	ldr	r2, [r7, #12]
 800313a:	4313      	orrs	r3, r2
 800313c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	68fa      	ldr	r2, [r7, #12]
 8003144:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a21      	ldr	r2, [pc, #132]	; (80031d0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d022      	beq.n	8003196 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003158:	d01d      	beq.n	8003196 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a1d      	ldr	r2, [pc, #116]	; (80031d4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d018      	beq.n	8003196 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a1b      	ldr	r2, [pc, #108]	; (80031d8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d013      	beq.n	8003196 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4a1a      	ldr	r2, [pc, #104]	; (80031dc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d00e      	beq.n	8003196 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a18      	ldr	r2, [pc, #96]	; (80031e0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d009      	beq.n	8003196 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4a17      	ldr	r2, [pc, #92]	; (80031e4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003188:	4293      	cmp	r3, r2
 800318a:	d004      	beq.n	8003196 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a15      	ldr	r2, [pc, #84]	; (80031e8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d10c      	bne.n	80031b0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003196:	68bb      	ldr	r3, [r7, #8]
 8003198:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800319c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	68ba      	ldr	r2, [r7, #8]
 80031a4:	4313      	orrs	r3, r2
 80031a6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	68ba      	ldr	r2, [r7, #8]
 80031ae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2201      	movs	r2, #1
 80031b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2200      	movs	r2, #0
 80031bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80031c0:	2300      	movs	r3, #0
}
 80031c2:	4618      	mov	r0, r3
 80031c4:	3714      	adds	r7, #20
 80031c6:	46bd      	mov	sp, r7
 80031c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031cc:	4770      	bx	lr
 80031ce:	bf00      	nop
 80031d0:	40010000 	.word	0x40010000
 80031d4:	40000400 	.word	0x40000400
 80031d8:	40000800 	.word	0x40000800
 80031dc:	40000c00 	.word	0x40000c00
 80031e0:	40010400 	.word	0x40010400
 80031e4:	40014000 	.word	0x40014000
 80031e8:	40001800 	.word	0x40001800

080031ec <__libc_init_array>:
 80031ec:	b570      	push	{r4, r5, r6, lr}
 80031ee:	4d0d      	ldr	r5, [pc, #52]	; (8003224 <__libc_init_array+0x38>)
 80031f0:	4c0d      	ldr	r4, [pc, #52]	; (8003228 <__libc_init_array+0x3c>)
 80031f2:	1b64      	subs	r4, r4, r5
 80031f4:	10a4      	asrs	r4, r4, #2
 80031f6:	2600      	movs	r6, #0
 80031f8:	42a6      	cmp	r6, r4
 80031fa:	d109      	bne.n	8003210 <__libc_init_array+0x24>
 80031fc:	4d0b      	ldr	r5, [pc, #44]	; (800322c <__libc_init_array+0x40>)
 80031fe:	4c0c      	ldr	r4, [pc, #48]	; (8003230 <__libc_init_array+0x44>)
 8003200:	f000 f820 	bl	8003244 <_init>
 8003204:	1b64      	subs	r4, r4, r5
 8003206:	10a4      	asrs	r4, r4, #2
 8003208:	2600      	movs	r6, #0
 800320a:	42a6      	cmp	r6, r4
 800320c:	d105      	bne.n	800321a <__libc_init_array+0x2e>
 800320e:	bd70      	pop	{r4, r5, r6, pc}
 8003210:	f855 3b04 	ldr.w	r3, [r5], #4
 8003214:	4798      	blx	r3
 8003216:	3601      	adds	r6, #1
 8003218:	e7ee      	b.n	80031f8 <__libc_init_array+0xc>
 800321a:	f855 3b04 	ldr.w	r3, [r5], #4
 800321e:	4798      	blx	r3
 8003220:	3601      	adds	r6, #1
 8003222:	e7f2      	b.n	800320a <__libc_init_array+0x1e>
 8003224:	08003274 	.word	0x08003274
 8003228:	08003274 	.word	0x08003274
 800322c:	08003274 	.word	0x08003274
 8003230:	08003278 	.word	0x08003278

08003234 <memset>:
 8003234:	4402      	add	r2, r0
 8003236:	4603      	mov	r3, r0
 8003238:	4293      	cmp	r3, r2
 800323a:	d100      	bne.n	800323e <memset+0xa>
 800323c:	4770      	bx	lr
 800323e:	f803 1b01 	strb.w	r1, [r3], #1
 8003242:	e7f9      	b.n	8003238 <memset+0x4>

08003244 <_init>:
 8003244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003246:	bf00      	nop
 8003248:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800324a:	bc08      	pop	{r3}
 800324c:	469e      	mov	lr, r3
 800324e:	4770      	bx	lr

08003250 <_fini>:
 8003250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003252:	bf00      	nop
 8003254:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003256:	bc08      	pop	{r3}
 8003258:	469e      	mov	lr, r3
 800325a:	4770      	bx	lr
